use ::libc;
use std::arch::asm;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type __jmp_buf_tag;
    pub type sb_test_t;
    pub type lua_State;
    static mut stdout: *mut FILE;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn snprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ...
    ) -> libc::c_int;
    fn strtod(_: *const libc::c_char, _: *mut *mut libc::c_char) -> libc::c_double;
    fn strtol(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_long;
    fn srandom(__seed: libc::c_uint);
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn free(__ptr: *mut libc::c_void);
    fn exit(_: libc::c_int) -> !;
    fn qsort(
        __base: *mut libc::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: Option::<
            unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
        >,
    );
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strcasecmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn alarm(__seconds: libc::c_uint) -> libc::c_uint;
    fn usleep(__useconds: __useconds_t) -> libc::c_int;
    fn isatty(__fd: libc::c_int) -> libc::c_int;
    fn time(__timer: *mut time_t) -> time_t;
    fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> libc::c_int;
    fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> libc::c_int;
    fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
    fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
    fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
    fn __sigsetjmp(__env: *mut __jmp_buf_tag, __savemask: libc::c_int) -> libc::c_int;
    fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> libc::c_int;
    fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> libc::c_int;
    fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> libc::c_int;
    fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> libc::c_int;
    fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> libc::c_int;
    fn log(_: libc::c_double) -> libc::c_double;
    fn sqrt(_: libc::c_double) -> libc::c_double;
    fn fabs(_: libc::c_double) -> libc::c_double;
    fn signal(
        __sig: libc::c_int,
        __handler: Option::<unsafe extern "C" fn(libc::c_int) -> ()>,
    ) -> __sighandler_t;
    fn register_test_cpu(tests_0: *mut sb_list_t) -> libc::c_int;
    fn register_test_fileio(tests_0: *mut sb_list_t) -> libc::c_int;
    fn register_test_memory(tests_0: *mut sb_list_t) -> libc::c_int;
    fn register_test_threads(tests_0: *mut sb_list_t) -> libc::c_int;
    fn register_test_mutex(tests_0: *mut sb_list_t) -> libc::c_int;
    fn fclose(__stream: *mut FILE) -> libc::c_int;
    fn fopen(_: *const libc::c_char, _: *const libc::c_char) -> *mut FILE;
    fn fputc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
    fn fgets(
        __s: *mut libc::c_char,
        __n: libc::c_int,
        __stream: *mut FILE,
    ) -> *mut libc::c_char;
    fn perror(__s: *const libc::c_char);
    fn strdup(_: *const libc::c_char) -> *mut libc::c_char;
    fn strtok(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn __ctype_toupper_loc() -> *mut *const __int32_t;
    fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut libc::c_char,
        __modes: libc::c_int,
        __n: size_t,
    ) -> libc::c_int;
    fn vsnprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ::std::ffi::VaList,
    ) -> libc::c_int;
    fn strncpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn strerror_r(
        __errnum: libc::c_int,
        __buf: *mut libc::c_char,
        __buflen: size_t,
    ) -> *mut libc::c_char;
    fn __errno_location() -> *mut libc::c_int;
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: Option::<unsafe extern "C" fn() -> ()>,
    ) -> libc::c_int;
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    fn register_driver_mysql(_: *mut sb_list_t) -> libc::c_int;
    fn exp(_: libc::c_double) -> libc::c_double;
    fn floor(_: libc::c_double) -> libc::c_double;
    fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> libc::c_int;
    fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
    fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
    fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
    fn random() -> libc::c_long;
    fn expm1(_: libc::c_double) -> libc::c_double;
    fn log1p(_: libc::c_double) -> libc::c_double;
    fn pow(_: libc::c_double, _: libc::c_double) -> libc::c_double;
    fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: Option::<
            unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
        >,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
    fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut libc::c_void,
    ) -> libc::c_int;
    fn pthread_attr_init(__attr: *mut pthread_attr_t) -> libc::c_int;
    fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: libc::c_int,
    ) -> libc::c_int;
    fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: size_t,
    ) -> libc::c_int;
    fn pthread_cancel(__th: pthread_t) -> libc::c_int;
    fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> libc::c_int;
    fn __xpg_basename(__path: *mut libc::c_char) -> *mut libc::c_char;
    fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    fn lua_close(L: *mut lua_State);
    fn lua_gettop(L: *mut lua_State) -> libc::c_int;
    fn lua_settop(L: *mut lua_State, idx: libc::c_int);
    fn lua_pushvalue(L: *mut lua_State, idx: libc::c_int);
    fn lua_remove(L: *mut lua_State, idx: libc::c_int);
    fn lua_type(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
    fn lua_toboolean(L: *mut lua_State, idx: libc::c_int) -> libc::c_int;
    fn lua_tolstring(
        L: *mut lua_State,
        idx: libc::c_int,
        len: *mut size_t,
    ) -> *const libc::c_char;
    fn lua_pushnil(L: *mut lua_State);
    fn lua_pushnumber(L: *mut lua_State, n: lua_Number);
    fn lua_pushlstring(L: *mut lua_State, s: *const libc::c_char, l: size_t);
    fn lua_pushstring(L: *mut lua_State, s: *const libc::c_char);
    fn lua_pushboolean(L: *mut lua_State, b: libc::c_int);
    fn lua_gettable(L: *mut lua_State, idx: libc::c_int);
    fn lua_getfield(L: *mut lua_State, idx: libc::c_int, k: *const libc::c_char);
    fn lua_createtable(L: *mut lua_State, narr: libc::c_int, nrec: libc::c_int);
    fn lua_settable(L: *mut lua_State, idx: libc::c_int);
    fn lua_setfield(L: *mut lua_State, idx: libc::c_int, k: *const libc::c_char);
    fn lua_rawseti(L: *mut lua_State, idx: libc::c_int, n: libc::c_int);
    fn lua_call(L: *mut lua_State, nargs: libc::c_int, nresults: libc::c_int);
    fn lua_pcall(
        L: *mut lua_State,
        nargs: libc::c_int,
        nresults: libc::c_int,
        errfunc: libc::c_int,
    ) -> libc::c_int;
    fn lua_concat(L: *mut lua_State, n: libc::c_int);
    fn luaL_openlibs(L: *mut lua_State);
    fn luaL_newmetatable(L: *mut lua_State, tname: *const libc::c_char) -> libc::c_int;
    fn luaL_loadfile(L: *mut lua_State, filename: *const libc::c_char) -> libc::c_int;
    fn luaL_loadbuffer(
        L: *mut lua_State,
        buff: *const libc::c_char,
        sz: size_t,
        name: *const libc::c_char,
    ) -> libc::c_int;
    fn luaL_newstate() -> *mut lua_State;
    fn luaL_gsub(
        L: *mut lua_State,
        s: *const libc::c_char,
        p: *const libc::c_char,
        r: *const libc::c_char,
    ) -> *const libc::c_char;
    fn posix_memalign(
        __memptr: *mut *mut libc::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> libc::c_int;
    fn sysconf(__name: libc::c_int) -> libc::c_long;
}
pub type __builtin_va_list = [__va_list_tag; 1];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
pub type size_t = libc::c_ulong;
pub type __gnuc_va_list = __builtin_va_list;
pub type __uint32_t = libc::c_uint;
pub type __uint64_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __useconds_t = libc::c_uint;
pub type __clockid_t = libc::c_int;
pub type __ssize_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type ssize_t = __ssize_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: libc::c_uint,
    pub __writers: libc::c_uint,
    pub __wrphase_futex: libc::c_uint,
    pub __writers_futex: libc::c_uint,
    pub __pad3: libc::c_uint,
    pub __pad4: libc::c_uint,
    pub __cur_writer: libc::c_int,
    pub __shared: libc::c_int,
    pub __rwelision: libc::c_schar,
    pub __pad1: [libc::c_uchar; 7],
    pub __pad2: libc::c_ulong,
    pub __flags: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct___wseq32_112954846 {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion____missing_field_name_216240149 {
    pub __wseq: libc::c_ulonglong,
    pub __wseq32: __anonstruct___wseq32_112954846,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct___g1_start32_718126667 {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion____missing_field_name_718126666 {
    pub __g1_start: libc::c_ulonglong,
    pub __g1_start32: __anonstruct___g1_start32_718126667,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_cond_s {
    pub __annonCompField1: __anonunion____missing_field_name_216240149,
    pub __annonCompField2: __anonunion____missing_field_name_718126666,
    pub __g_refs: [libc::c_uint; 2],
    pub __g_size: [libc::c_uint; 2],
    pub __g1_orig_size: libc::c_uint,
    pub __wrefs: libc::c_uint,
    pub __g_signals: [libc::c_uint; 2],
}
pub type pthread_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_mutexattr_t_488594144 {
    pub __size: [libc::c_char; 4],
    pub __align: libc::c_int,
}
pub type pthread_mutexattr_t = __anonunion_pthread_mutexattr_t_488594144;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_condattr_t_488594145 {
    pub __size: [libc::c_char; 4],
    pub __align: libc::c_int,
}
pub type pthread_condattr_t = __anonunion_pthread_condattr_t_488594145;
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [libc::c_char; 56],
    pub __align: libc::c_long,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_mutex_t_335460617 {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40],
    pub __align: libc::c_long,
}
pub type pthread_mutex_t = __anonunion_pthread_mutex_t_335460617;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_cond_t_951761805 {
    pub __data: __pthread_cond_s,
    pub __size: [libc::c_char; 48],
    pub __align: libc::c_longlong,
}
pub type pthread_cond_t = __anonunion_pthread_cond_t_951761805;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_rwlock_t_656928968 {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [libc::c_char; 56],
    pub __align: libc::c_long,
}
pub type pthread_rwlock_t = __anonunion_pthread_rwlock_t_656928968;
pub type __jmp_buf = [libc::c_long; 8];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct___cancel_jmp_buf_572769531 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct___pthread_unwind_buf_t_639815287 {
    pub __cancel_jmp_buf: [__anonstruct___cancel_jmp_buf_572769531; 1],
    pub __pad: [*mut libc::c_void; 4],
}
pub type __pthread_unwind_buf_t = __anonstruct___pthread_unwind_buf_t_639815287;
pub type __sighandler_t = Option::<unsafe extern "C" fn(libc::c_int) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sb_list_item_t {
    pub next_p: *mut sb_list_item_t,
    pub prev_p: *mut sb_list_item_t,
}
pub type sb_list_t = sb_list_item_t;
pub type __anonenum_sb_arg_type_t_551857569 = libc::c_uint;
pub const SB_ARG_TYPE_MAX: __anonenum_sb_arg_type_t_551857569 = 8;
pub const SB_ARG_TYPE_FILE: __anonenum_sb_arg_type_t_551857569 = 7;
pub const SB_ARG_TYPE_LIST: __anonenum_sb_arg_type_t_551857569 = 6;
pub const SB_ARG_TYPE_STRING: __anonenum_sb_arg_type_t_551857569 = 5;
pub const SB_ARG_TYPE_DOUBLE: __anonenum_sb_arg_type_t_551857569 = 4;
pub const SB_ARG_TYPE_SIZE: __anonenum_sb_arg_type_t_551857569 = 3;
pub const SB_ARG_TYPE_INT: __anonenum_sb_arg_type_t_551857569 = 2;
pub const SB_ARG_TYPE_BOOL: __anonenum_sb_arg_type_t_551857569 = 1;
pub const SB_ARG_TYPE_NULL: __anonenum_sb_arg_type_t_551857569 = 0;
pub type sb_arg_type_t = __anonenum_sb_arg_type_t_551857569;
pub type sb_opt_validate_t = unsafe extern "C" fn(
    *const libc::c_char,
    *const libc::c_char,
) -> bool;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_arg_t_433063110 {
    pub name: *const libc::c_char,
    pub desc: *const libc::c_char,
    pub value: *const libc::c_char,
    pub type_0: sb_arg_type_t,
    pub validate: Option::<sb_opt_validate_t>,
}
pub type sb_arg_t = __anonstruct_sb_arg_t_433063110;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_value_t_864021997 {
    pub data: *mut libc::c_char,
    pub ignore: libc::c_char,
    pub listitem: sb_list_item_t,
}
pub type value_t = __anonstruct_value_t_864021997;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_option_t_106369940 {
    pub name: *mut libc::c_char,
    pub type_0: sb_arg_type_t,
    pub values: sb_list_t,
    pub ignore: libc::c_char,
    pub validate: Option::<sb_opt_validate_t>,
    pub listitem: sb_list_item_t,
}
pub type option_t = __anonstruct_option_t_106369940;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ck_spinlock_fas {
    pub value: libc::c_uint,
}
pub type ck_spinlock_fas_t = ck_spinlock_fas;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_timer_t_1033142815 {
    pub time_start: timespec,
    pub time_end: timespec,
    pub events: uint64_t,
    pub queue_time: uint64_t,
    pub min_time: uint64_t,
    pub max_time: uint64_t,
    pub sum_time: uint64_t,
    pub lock: ck_spinlock_fas_t,
    pub pad: [libc::c_char; 52],
}
pub type sb_timer_t = __anonstruct_sb_timer_t_1033142815;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_histogram_t_219281153 {
    pub cumulative_array: *mut uint64_t,
    pub cumulative_nevents: uint64_t,
    pub temp_array: *mut uint64_t,
    pub interm_slots: *mut *mut uint64_t,
    pub array_size: size_t,
    pub range_min: libc::c_double,
    pub range_max: libc::c_double,
    pub range_deduct: libc::c_double,
    pub range_mult: libc::c_double,
    pub lock: pthread_rwlock_t,
}
pub type sb_histogram_t = __anonstruct_sb_histogram_t_219281153;
pub type __anonenum_log_msg_priority_t_567256638 = libc::c_uint;
pub const LOG_MAX: __anonenum_log_msg_priority_t_567256638 = 6;
pub const LOG_DEBUG: __anonenum_log_msg_priority_t_567256638 = 5;
pub const LOG_INFO: __anonenum_log_msg_priority_t_567256638 = 4;
pub const LOG_NOTICE: __anonenum_log_msg_priority_t_567256638 = 3;
pub const LOG_WARNING: __anonenum_log_msg_priority_t_567256638 = 2;
pub const LOG_ALERT: __anonenum_log_msg_priority_t_567256638 = 1;
pub const LOG_FATAL: __anonenum_log_msg_priority_t_567256638 = 0;
pub type log_msg_priority_t = __anonenum_log_msg_priority_t_567256638;
pub type __anonenum_sb_file_op_t_325925420 = libc::c_uint;
pub const FILE_OP_TYPE_FSYNC: __anonenum_sb_file_op_t_325925420 = 3;
pub const FILE_OP_TYPE_WRITE: __anonenum_sb_file_op_t_325925420 = 2;
pub const FILE_OP_TYPE_READ: __anonenum_sb_file_op_t_325925420 = 1;
pub const FILE_OP_TYPE_NULL: __anonenum_sb_file_op_t_325925420 = 0;
pub type sb_file_op_t = __anonenum_sb_file_op_t_325925420;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_file_request_t_644421212 {
    pub file_id: libc::c_uint,
    pub pos: libc::c_longlong,
    pub size: ssize_t,
    pub operation: sb_file_op_t,
}
pub type sb_file_request_t = __anonstruct_sb_file_request_t_644421212;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_threads_request_t_888776187 {
    pub lock_num: libc::c_uint,
}
pub type sb_threads_request_t = __anonstruct_sb_threads_request_t_888776187;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_mutex_request_t_1037408946 {
    pub nlocks: libc::c_uint,
    pub nloops: libc::c_uint,
}
pub type sb_mutex_request_t = __anonstruct_sb_mutex_request_t_1037408946;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sb_test {
    pub sname: *const libc::c_char,
    pub lname: *const libc::c_char,
    pub ops: sb_operations_t,
    pub builtin_cmds: sb_builtin_cmds_t,
    pub args: *mut sb_arg_t,
    pub listitem: sb_list_item_t,
}
pub type sb_builtin_cmds_t = __anonstruct_sb_builtin_cmds_t_359606411;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_builtin_cmds_t_359606411 {
    pub help: Option::<sb_builtin_cmd_func_t>,
    pub prepare: Option::<sb_builtin_cmd_func_t>,
    pub run: Option::<sb_builtin_cmd_func_t>,
    pub cleanup: Option::<sb_builtin_cmd_func_t>,
}
pub type sb_builtin_cmd_func_t = unsafe extern "C" fn() -> libc::c_int;
pub type sb_operations_t = __anonstruct_sb_operations_t_306313410;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_operations_t_306313410 {
    pub init: Option::<sb_op_init>,
    pub prepare: Option::<sb_op_prepare>,
    pub thread_init: Option::<sb_op_thread_init>,
    pub print_mode: Option::<sb_op_print_mode>,
    pub next_event: Option::<sb_op_next_event>,
    pub execute_event: Option::<sb_op_execute_event>,
    pub report_intermediate: Option::<sb_op_report>,
    pub report_cumulative: Option::<sb_op_report>,
    pub thread_run: Option::<sb_op_thread_run>,
    pub thread_done: Option::<sb_op_thread_done>,
    pub cleanup: Option::<sb_op_cleanup>,
    pub done: Option::<sb_op_done>,
}
pub type sb_op_done = unsafe extern "C" fn() -> libc::c_int;
pub type sb_op_cleanup = unsafe extern "C" fn() -> libc::c_int;
pub type sb_op_thread_done = unsafe extern "C" fn(libc::c_int) -> libc::c_int;
pub type sb_op_thread_run = unsafe extern "C" fn(libc::c_int) -> libc::c_int;
pub type sb_op_report = unsafe extern "C" fn(*mut sb_stat_t) -> ();
pub type sb_stat_t = __anonstruct_sb_stat_t_688922238;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_stat_t_688922238 {
    pub threads_running: uint32_t,
    pub time_interval: libc::c_double,
    pub time_total: libc::c_double,
    pub latency_pct: libc::c_double,
    pub latency_min: libc::c_double,
    pub latency_max: libc::c_double,
    pub latency_avg: libc::c_double,
    pub latency_sum: libc::c_double,
    pub events: uint64_t,
    pub reads: uint64_t,
    pub writes: uint64_t,
    pub other: uint64_t,
    pub errors: uint64_t,
    pub reconnects: uint64_t,
    pub bytes_read: uint64_t,
    pub bytes_written: uint64_t,
    pub queue_length: uint64_t,
    pub concurrency: uint64_t,
}
pub type sb_op_execute_event = unsafe extern "C" fn(
    *mut sb_event_t,
    libc::c_int,
) -> libc::c_int;
pub type sb_event_t = __anonstruct_sb_event_t_724674437;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_event_t_724674437 {
    pub type_0: libc::c_int,
    pub test: *mut sb_test_t,
    pub u: __anonunion_u_774530261,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_u_774530261 {
    pub file_request: sb_file_request_t,
    pub threads_request: sb_threads_request_t,
    pub mutex_request: sb_mutex_request_t,
}
pub type sb_op_next_event = unsafe extern "C" fn(libc::c_int) -> sb_event_t;
pub type sb_op_print_mode = unsafe extern "C" fn() -> ();
pub type sb_op_thread_init = unsafe extern "C" fn(libc::c_int) -> libc::c_int;
pub type sb_op_prepare = unsafe extern "C" fn() -> libc::c_int;
pub type sb_op_init = unsafe extern "C" fn() -> libc::c_int;
pub type sb_test_t_0 = sb_test;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_globals_t_583026470 {
    pub error: libc::c_int,
    pub argc: libc::c_int,
    pub argv: *mut *mut libc::c_char,
    pub tx_rate: libc::c_uint,
    pub max_events: uint64_t,
    pub max_time_ns: uint64_t,
    pub exec_mutex: pthread_mutex_t,
    pub testname: *const libc::c_char,
    pub cmdname: *const libc::c_char,
    pub threads: libc::c_uint,
    pub threads_running: libc::c_uint,
    pub report_interval: libc::c_uint,
    pub percentile: libc::c_uint,
    pub histogram: libc::c_uint,
    pub checkpoints: [libc::c_uint; 256],
    pub n_checkpoints: libc::c_uint,
    pub debug: libc::c_uchar,
    pub timeout: libc::c_uint,
    pub validate: libc::c_uchar,
    pub verbosity: libc::c_uchar,
    pub concurrency: libc::c_int,
    pub force_shutdown: libc::c_int,
    pub forced_shutdown_in_progress: libc::c_int,
    pub warmup_time: libc::c_int,
    pub nevents: uint64_t,
    pub luajit_cmd: *const libc::c_char,
}
pub type sb_globals_t = __anonstruct_sb_globals_t_583026470;
pub type __anonenum_sb_counter_type_t_45835623 = libc::c_uint;
pub const SB_CNT_MAX: __anonenum_sb_counter_type_t_45835623 = 8;
pub const SB_CNT_BYTES_WRITTEN: __anonenum_sb_counter_type_t_45835623 = 7;
pub const SB_CNT_BYTES_READ: __anonenum_sb_counter_type_t_45835623 = 6;
pub const SB_CNT_RECONNECT: __anonenum_sb_counter_type_t_45835623 = 5;
pub const SB_CNT_ERROR: __anonenum_sb_counter_type_t_45835623 = 4;
pub const SB_CNT_EVENT: __anonenum_sb_counter_type_t_45835623 = 3;
pub const SB_CNT_WRITE: __anonenum_sb_counter_type_t_45835623 = 2;
pub const SB_CNT_READ: __anonenum_sb_counter_type_t_45835623 = 1;
pub const SB_CNT_OTHER: __anonenum_sb_counter_type_t_45835623 = 0;
pub type sb_counter_type_t = __anonenum_sb_counter_type_t_45835623;
pub type sb_counters_t = [uint64_t; 8];
pub type sb_rng_state_t = [uint64_t; 2];
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_u_858940928 {
    pub i: uint64_t,
    pub d: libc::c_double,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_thread_ctxt_t_825626467 {
    pub thread: pthread_t,
    pub id: libc::c_uint,
}
pub type sb_thread_ctxt_t = __anonstruct_sb_thread_ctxt_t_825626467;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_barrier_t_412736479 {
    pub count: libc::c_uint,
    pub init_count: libc::c_uint,
    pub serial: libc::c_uint,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub callback: Option::<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int>,
    pub arg: *mut libc::c_void,
    pub error: libc::c_int,
}
pub type sb_barrier_t = __anonstruct_sb_barrier_t_412736479;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ck_ring {
    pub c_head: libc::c_uint,
    pub pad: [libc::c_char; 60],
    pub p_tail: libc::c_uint,
    pub p_head: libc::c_uint,
    pub _pad: [libc::c_char; 56],
    pub size: libc::c_uint,
    pub mask: libc::c_uint,
}
pub type ck_ring_t = ck_ring;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ck_ring_buffer {
    pub value: *mut libc::c_void,
}
pub type ck_ring_buffer_t = ck_ring_buffer;
pub type __int32_t = libc::c_int;
pub type va_list___0 = __gnuc_va_list;
pub type __anonenum_log_msg_type_t_517057840 = libc::c_uint;
pub const LOG_MSG_TYPE_MAX: __anonenum_log_msg_type_t_517057840 = 3;
pub const LOG_MSG_TYPE_OPER: __anonenum_log_msg_type_t_517057840 = 2;
pub const LOG_MSG_TYPE_TEXT: __anonenum_log_msg_type_t_517057840 = 1;
pub const LOG_MSG_TYPE_MIN: __anonenum_log_msg_type_t_517057840 = 0;
pub type log_msg_type_t = __anonenum_log_msg_type_t_517057840;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_log_msg_text_t_759136118 {
    pub priority: log_msg_priority_t,
    pub text: *mut libc::c_char,
    pub flags: libc::c_uint,
}
pub type log_msg_text_t = __anonstruct_log_msg_text_t_759136118;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_log_msg_t_249600879 {
    pub type_0: log_msg_type_t,
    pub data: *mut libc::c_void,
}
pub type log_msg_t = __anonstruct_log_msg_t_249600879;
pub type log_op_init = unsafe extern "C" fn() -> libc::c_int;
pub type log_op_process = unsafe extern "C" fn(*mut log_msg_t) -> libc::c_int;
pub type log_op_done = unsafe extern "C" fn() -> libc::c_int;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_log_handler_ops_t_518111155 {
    pub init: Option::<log_op_init>,
    pub process: Option::<log_op_process>,
    pub done: Option::<log_op_done>,
}
pub type log_handler_ops_t = __anonstruct_log_handler_ops_t_518111155;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_log_handler_t_545301319 {
    pub ops: log_handler_ops_t,
    pub args: *mut sb_arg_t,
    pub listitem: sb_list_item_t,
}
pub type log_handler_t = __anonstruct_log_handler_t_545301319;
pub type __uint8_t = libc::c_uchar;
pub type uint8_t = __uint8_t;
pub type pthread_once_t = libc::c_int;
pub type __anonenum_db_ps_mode_t_182900089 = libc::c_uint;
pub const DB_PS_MODE_DISABLE: __anonenum_db_ps_mode_t_182900089 = 1;
pub const DB_PS_MODE_AUTO: __anonenum_db_ps_mode_t_182900089 = 0;
pub type db_ps_mode_t = __anonenum_db_ps_mode_t_182900089;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_db_globals_t_302997199 {
    pub ps_mode: db_ps_mode_t,
    pub driver: *mut libc::c_char,
    pub debug: libc::c_uchar,
}
pub type db_globals_t = __anonstruct_db_globals_t_302997199;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_drv_caps_t_273595944 {
    pub multi_rows_insert: libc::c_char,
    pub prepared_statements: libc::c_char,
    pub auto_increment: libc::c_char,
    pub needs_commit: libc::c_char,
    pub serial: libc::c_char,
    pub unsigned_int: libc::c_char,
}
pub type drv_caps_t = __anonstruct_drv_caps_t_273595944;
pub type __anonenum_db_error_t_209367174 = libc::c_uint;
pub const DB_ERROR_FATAL: __anonenum_db_error_t_209367174 = 2;
pub const DB_ERROR_IGNORABLE: __anonenum_db_error_t_209367174 = 1;
pub const DB_ERROR_NONE: __anonenum_db_error_t_209367174 = 0;
pub type db_error_t = __anonenum_db_error_t_209367174;
pub type __anonenum_db_bind_type_t_700304952 = libc::c_uint;
pub const DB_TYPE_VARCHAR: __anonenum_db_bind_type_t_700304952 = 12;
pub const DB_TYPE_CHAR: __anonenum_db_bind_type_t_700304952 = 11;
pub const DB_TYPE_TIMESTAMP: __anonenum_db_bind_type_t_700304952 = 10;
pub const DB_TYPE_DATETIME: __anonenum_db_bind_type_t_700304952 = 9;
pub const DB_TYPE_DATE: __anonenum_db_bind_type_t_700304952 = 8;
pub const DB_TYPE_TIME: __anonenum_db_bind_type_t_700304952 = 7;
pub const DB_TYPE_DOUBLE: __anonenum_db_bind_type_t_700304952 = 6;
pub const DB_TYPE_FLOAT: __anonenum_db_bind_type_t_700304952 = 5;
pub const DB_TYPE_BIGINT: __anonenum_db_bind_type_t_700304952 = 4;
pub const DB_TYPE_INT: __anonenum_db_bind_type_t_700304952 = 3;
pub const DB_TYPE_SMALLINT: __anonenum_db_bind_type_t_700304952 = 2;
pub const DB_TYPE_TINYINT: __anonenum_db_bind_type_t_700304952 = 1;
pub const DB_TYPE_NONE: __anonenum_db_bind_type_t_700304952 = 0;
pub type db_bind_type_t = __anonenum_db_bind_type_t_700304952;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_db_time_t_75849883 {
    pub year: libc::c_uint,
    pub month: libc::c_uint,
    pub day: libc::c_uint,
    pub hour: libc::c_uint,
    pub minute: libc::c_uint,
    pub second: libc::c_uint,
}
pub type db_time_t = __anonstruct_db_time_t_75849883;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_db_bind_t_819812802 {
    pub type_0: db_bind_type_t,
    pub buffer: *mut libc::c_void,
    pub data_len: *mut libc::c_ulong,
    pub max_len: libc::c_ulong,
    pub is_null: *mut libc::c_char,
}
pub type db_bind_t = __anonstruct_db_bind_t_819812802;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct db_conn {
    pub error: db_error_t,
    pub sql_errno: libc::c_int,
    pub sql_state: *const libc::c_char,
    pub sql_errmsg: *const libc::c_char,
    pub driver: *mut db_driver_t,
    pub ptr: *mut libc::c_void,
    pub rs: db_result_t,
    pub state: db_conn_state_t,
    pub thread_id: libc::c_int,
    pub bulk_cnt: libc::c_uint,
    pub bulk_buflen: libc::c_uint,
    pub bulk_buffer: *mut libc::c_char,
    pub bulk_ptr: libc::c_uint,
    pub bulk_values: libc::c_uint,
    pub bulk_commit_cnt: libc::c_uint,
    pub bulk_commit_max: libc::c_uint,
    pub pad: [libc::c_char; 0],
}
pub type db_conn_state_t = __anonenum_db_conn_state_t_86569355;
pub type __anonenum_db_conn_state_t_86569355 = libc::c_uint;
pub const DB_CONN_INVALID: __anonenum_db_conn_state_t_86569355 = 2;
pub const DB_CONN_RESULT_SET: __anonenum_db_conn_state_t_86569355 = 1;
pub const DB_CONN_READY: __anonenum_db_conn_state_t_86569355 = 0;
pub type db_result_t = db_result;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct db_result {
    pub counter: sb_counter_type_t,
    pub nrows: uint32_t,
    pub nfields: uint32_t,
    pub statement: *mut db_stmt,
    pub ptr: *mut libc::c_void,
    pub row: db_row_t,
}
pub type db_row_t = db_row;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct db_row {
    pub ptr: *mut libc::c_void,
    pub values: *mut db_value_t,
}
pub type db_value_t = __anonstruct_db_value_t_876670679;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_db_value_t_876670679 {
    pub len: uint32_t,
    pub ptr: *const libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct db_stmt {
    pub connection: *mut db_conn_t,
    pub query: *mut libc::c_char,
    pub bound_param: *mut db_bind_t,
    pub bound_param_len: libc::c_uint,
    pub bound_res: *mut db_bind_t,
    pub bound_res_len: *mut db_bind_t,
    pub emulated: libc::c_char,
    pub ptr: *mut libc::c_void,
}
pub type db_conn_t = db_conn;
pub type db_driver_t = __anonstruct_db_driver_t_476605101;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_db_driver_t_476605101 {
    pub sname: *const libc::c_char,
    pub lname: *const libc::c_char,
    pub args: *mut sb_arg_t,
    pub ops: drv_ops_t,
    pub listitem: sb_list_item_t,
    pub initialized: bool,
    pub mutex: pthread_mutex_t,
}
pub type drv_ops_t = __anonstruct_drv_ops_t_35973810;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_drv_ops_t_35973810 {
    pub init: Option::<drv_op_init>,
    pub thread_init: Option::<drv_op_thread_init>,
    pub describe: Option::<drv_op_describe>,
    pub connect: Option::<drv_op_connect>,
    pub disconnect: Option::<drv_op_disconnect>,
    pub reconnect: Option::<drv_op_reconnect>,
    pub prepare: Option::<drv_op_prepare>,
    pub bind_param: Option::<drv_op_bind_param>,
    pub bind_result: Option::<drv_op_bind_result>,
    pub execute: Option::<drv_op_execute>,
    pub stmt_next_result: Option::<drv_op_stmt_next_result>,
    pub fetch: Option::<drv_op_fetch>,
    pub fetch_row: Option::<drv_op_fetch_row>,
    pub free_results: Option::<drv_op_free_results>,
    pub more_results: Option::<drv_op_more_results>,
    pub next_result: Option::<drv_op_next_result>,
    pub close: Option::<drv_op_close>,
    pub query: Option::<drv_op_query>,
    pub thread_done: Option::<drv_op_thread_done>,
    pub done: Option::<drv_op_done>,
}
pub type drv_op_done = unsafe extern "C" fn() -> libc::c_int;
pub type drv_op_thread_done = unsafe extern "C" fn(libc::c_int) -> libc::c_int;
pub type drv_op_query = unsafe extern "C" fn(
    *mut db_conn,
    *const libc::c_char,
    size_t,
    *mut db_result,
) -> db_error_t;
pub type drv_op_close = unsafe extern "C" fn(*mut db_stmt) -> libc::c_int;
pub type drv_op_next_result = unsafe extern "C" fn(
    *mut db_conn,
    *mut db_result,
) -> db_error_t;
pub type drv_op_more_results = unsafe extern "C" fn(*mut db_conn) -> bool;
pub type drv_op_free_results = unsafe extern "C" fn(*mut db_result) -> libc::c_int;
pub type drv_op_fetch_row = unsafe extern "C" fn(
    *mut db_result,
    *mut db_row,
) -> libc::c_int;
pub type drv_op_fetch = unsafe extern "C" fn(*mut db_result) -> libc::c_int;
pub type drv_op_stmt_next_result = unsafe extern "C" fn(
    *mut db_stmt,
    *mut db_result,
) -> db_error_t;
pub type drv_op_execute = unsafe extern "C" fn(
    *mut db_stmt,
    *mut db_result,
) -> db_error_t;
pub type drv_op_bind_result = unsafe extern "C" fn(
    *mut db_stmt,
    *mut db_bind_t,
    size_t,
) -> libc::c_int;
pub type drv_op_bind_param = unsafe extern "C" fn(
    *mut db_stmt,
    *mut db_bind_t,
    size_t,
) -> libc::c_int;
pub type drv_op_prepare = unsafe extern "C" fn(
    *mut db_stmt,
    *const libc::c_char,
    size_t,
) -> libc::c_int;
pub type drv_op_reconnect = unsafe extern "C" fn(*mut db_conn) -> libc::c_int;
pub type drv_op_disconnect = unsafe extern "C" fn(*mut db_conn) -> libc::c_int;
pub type drv_op_connect = unsafe extern "C" fn(*mut db_conn) -> libc::c_int;
pub type drv_op_describe = unsafe extern "C" fn(*mut drv_caps_t) -> libc::c_int;
pub type drv_op_thread_init = unsafe extern "C" fn(libc::c_int) -> libc::c_int;
pub type drv_op_init = unsafe extern "C" fn() -> libc::c_int;
pub type db_stmt_t = db_stmt;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_rwlockattr_t_145707745 {
    pub __size: [libc::c_char; 8],
    pub __align: libc::c_long,
}
pub type pthread_rwlockattr_t = __anonunion_pthread_rwlockattr_t_145707745;
pub type __anonenum_rand_dist_t_489145955 = libc::c_uint;
pub const DIST_TYPE_ZIPFIAN: __anonenum_rand_dist_t_489145955 = 3;
pub const DIST_TYPE_PARETO: __anonenum_rand_dist_t_489145955 = 2;
pub const DIST_TYPE_GAUSSIAN: __anonenum_rand_dist_t_489145955 = 1;
pub const DIST_TYPE_UNIFORM: __anonenum_rand_dist_t_489145955 = 0;
pub type rand_dist_t = __anonenum_rand_dist_t_489145955;
pub type lua_Number = libc::c_double;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_sb_lua_ctxt_t_239495378 {
    pub con: *mut db_conn_t,
    pub driver: *mut db_driver_t,
    pub L: *mut lua_State,
}
pub type sb_lua_ctxt_t = __anonstruct_sb_lua_ctxt_t_239495378;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_internal_script_t_141024058 {
    pub name: *const libc::c_char,
    pub source: *const libc::c_uchar,
    pub source_len: *mut size_t,
}
pub type internal_script_t = __anonstruct_internal_script_t_141024058;
#[inline]
unsafe extern "C" fn ck_pr_stall() {

}
#[inline]
unsafe extern "C" fn ck_pr_fas_uint(
    mut target: *mut libc::c_uint,
    mut v: libc::c_uint,
) -> libc::c_uint {




    return v;
}
#[inline]
unsafe extern "C" fn ck_pr_md_load_uint(
    mut target: *const libc::c_uint,
) -> libc::c_uint {
    let mut r: libc::c_uint = 0;




    return r;
}
#[inline]
unsafe extern "C" fn ck_pr_md_load_int(mut target: *const libc::c_int) -> libc::c_int {
    let mut r: libc::c_int = 0;




    return r;
}
#[inline]
unsafe extern "C" fn ck_pr_md_load_64(mut target: *const uint64_t) -> uint64_t {
    let mut r: uint64_t = 0;




    return r;
}
#[inline]
unsafe extern "C" fn ck_pr_md_store_uint(
    mut target: *mut libc::c_uint,
    mut v: libc::c_uint,
) {




}
#[inline]
unsafe extern "C" fn ck_pr_md_store_64(mut target: *mut uint64_t, mut v: uint64_t) {




}
#[inline]
unsafe extern "C" fn ck_pr_faa_64(
    mut target: *mut uint64_t,
    mut d: uint64_t,
) -> uint64_t {




    return d;
}
#[inline]
unsafe extern "C" fn ck_pr_inc_int(mut target: *mut libc::c_int) {

}
#[inline]
unsafe extern "C" fn ck_pr_dec_int(mut target: *mut libc::c_int) {

}
#[inline]
unsafe extern "C" fn ck_pr_cas_uint_value(
    mut target: *mut libc::c_uint,
    mut compare: libc::c_uint,
    mut set: libc::c_uint,
    mut v: *mut libc::c_uint,
) -> bool {
    let mut z: bool = false;






    return z;
}
#[inline]
unsafe extern "C" fn ck_pr_barrier() {

}
#[inline]
unsafe extern "C" fn ck_pr_fence_store_atomic() {
    ck_pr_barrier();
}
#[inline]
unsafe extern "C" fn ck_spinlock_fas_lock(mut lock: *mut ck_spinlock_fas) {
    let mut tmp: libc::c_uint = 0;
    let mut tmp___0: libc::c_uint = 0;
    loop {
        tmp___0 = ck_pr_fas_uint(&mut (*lock).value, 1 as libc::c_uint);
        if !(tmp___0 == 1 as libc::c_uint) {
            break;
        }
        loop {
            tmp = ck_pr_md_load_uint(
                &mut (*lock).value as *mut libc::c_uint as *const libc::c_uint,
            );
            if !(tmp == 1 as libc::c_uint) {
                break;
            }
            ck_pr_stall();
        }
    }
    ck_pr_fence_store_atomic();
}
#[inline]
unsafe extern "C" fn ck_spinlock_fas_unlock(mut lock: *mut ck_spinlock_fas) {
    ck_pr_fence_store_atomic();
    ck_pr_md_store_uint(&mut (*lock).value, 0 as libc::c_uint);
}
#[inline]
unsafe extern "C" fn sb_nanosleep(mut ns: uint64_t) -> libc::c_int {
    let mut ts: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut tmp: libc::c_int = 0;
    ts.tv_sec = ns.wrapping_div(1000000000 as libc::c_ulong) as __time_t;
    ts.tv_nsec = ns.wrapping_rem(1000000000 as libc::c_ulong) as __syscall_slong_t;
    tmp = nanosleep(
        &mut ts as *mut timespec as *const timespec,
        0 as *mut libc::c_void as *mut timespec,
    );
    return tmp;
}
#[inline]
unsafe extern "C" fn sb_timer_start(mut t: *mut sb_timer_t) {
    ck_spinlock_fas_lock(&mut (*t).lock);
    clock_gettime(1 as libc::c_int, &mut (*t).time_start);
    ck_spinlock_fas_unlock(&mut (*t).lock);
}
#[inline]
unsafe extern "C" fn sb_timer_stop(mut t: *mut sb_timer_t) -> uint64_t {
    let mut elapsed: uint64_t = 0;
    let mut tmp: libc::c_long = 0;
    let mut tmp___0: libc::c_long = 0;
    ck_spinlock_fas_lock(&mut (*t).lock);
    clock_gettime(1 as libc::c_int, &mut (*t).time_end);
    elapsed = (((*t).time_end.tv_sec - (*t).time_start.tv_sec) as uint64_t)
        .wrapping_mul(1000000000 as libc::c_ulong)
        .wrapping_add(((*t).time_end.tv_nsec - (*t).time_start.tv_nsec) as uint64_t)
        .wrapping_add((*t).queue_time);
    (*t).events = ((*t).events).wrapping_add(1);
    (*t)
        .sum_time = ((*t).sum_time as libc::c_ulong).wrapping_add(elapsed) as uint64_t
        as uint64_t;
    tmp = (elapsed < (*t).min_time) as libc::c_int as libc::c_long;
    if tmp != 0 {
        (*t).min_time = elapsed;
    }
    tmp___0 = (elapsed > (*t).max_time) as libc::c_int as libc::c_long;
    if tmp___0 != 0 {
        (*t).max_time = elapsed;
    }
    ck_spinlock_fas_unlock(&mut (*t).lock);
    return elapsed;
}
#[inline]
unsafe extern "C" fn sb_timer_value(mut t: *mut sb_timer_t) -> uint64_t {
    let mut ts: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    clock_gettime(1 as libc::c_int, &mut ts);
    return ((ts.tv_sec - (*t).time_start.tv_sec) as uint64_t)
        .wrapping_mul(1000000000 as libc::c_ulong)
        .wrapping_add((ts.tv_nsec - (*t).time_start.tv_nsec) as uint64_t)
        .wrapping_add((*t).queue_time);
}
pub static mut sb_globals: sb_globals_t = sb_globals_t {
    error: 0,
    argc: 0,
    argv: 0 as *const *mut libc::c_char as *mut *mut libc::c_char,
    tx_rate: 0,
    max_events: 0,
    max_time_ns: 0,
    exec_mutex: __anonunion_pthread_mutex_t_335460617 {
        __data: __pthread_mutex_s {
            __lock: 0,
            __count: 0,
            __owner: 0,
            __nusers: 0,
            __kind: 0,
            __spins: 0,
            __elision: 0,
            __list: __pthread_list_t {
                __prev: 0 as *const __pthread_internal_list
                    as *mut __pthread_internal_list,
                __next: 0 as *const __pthread_internal_list
                    as *mut __pthread_internal_list,
            },
        },
    },
    testname: 0 as *const libc::c_char,
    cmdname: 0 as *const libc::c_char,
    threads: 0,
    threads_running: 0,
    report_interval: 0,
    percentile: 0,
    histogram: 0,
    checkpoints: [0; 256],
    n_checkpoints: 0,
    debug: 0,
    timeout: 0,
    validate: 0,
    verbosity: 0,
    concurrency: 0,
    force_shutdown: 0,
    forced_shutdown_in_progress: 0,
    warmup_time: 0,
    nevents: 0,
    luajit_cmd: 0 as *const libc::c_char,
};
pub static mut sb_exec_timer: sb_timer_t = sb_timer_t {
    time_start: timespec { tv_sec: 0, tv_nsec: 0 },
    time_end: timespec { tv_sec: 0, tv_nsec: 0 },
    events: 0,
    queue_time: 0,
    min_time: 0,
    max_time: 0,
    sum_time: 0,
    lock: ck_spinlock_fas_t { value: 0 },
    pad: [0; 52],
};
pub static mut sb_intermediate_timer: sb_timer_t = sb_timer_t {
    time_start: timespec { tv_sec: 0, tv_nsec: 0 },
    time_end: timespec { tv_sec: 0, tv_nsec: 0 },
    events: 0,
    queue_time: 0,
    min_time: 0,
    max_time: 0,
    sum_time: 0,
    lock: ck_spinlock_fas_t { value: 0 },
    pad: [0; 52],
};
pub static mut sb_checkpoint_timer: sb_timer_t = sb_timer_t {
    time_start: timespec { tv_sec: 0, tv_nsec: 0 },
    time_end: timespec { tv_sec: 0, tv_nsec: 0 },
    events: 0,
    queue_time: 0,
    min_time: 0,
    max_time: 0,
    sum_time: 0,
    lock: ck_spinlock_fas_t { value: 0 },
    pad: [0; 52],
};
pub static mut sb_tls_thread_id: libc::c_int = 0;
#[inline]
unsafe extern "C" fn sb_counter_val___0(
    mut thread_id: libc::c_int,
    mut type_0: sb_counter_type_t,
) -> uint64_t {
    let mut tmp: uint64_t = 0;
    tmp = ck_pr_md_load_64(
        &mut *(*sb_counters.offset(thread_id as isize))
            .as_mut_ptr()
            .offset(type_0 as isize) as *mut uint64_t as *const uint64_t,
    );
    return tmp;
}
#[inline]
unsafe extern "C" fn sb_counter_add___0(
    mut thread_id: libc::c_int,
    mut type_0: sb_counter_type_t,
    mut val: uint64_t,
) {
    let mut tmp: uint64_t = 0;
    tmp = sb_counter_val___0(thread_id, type_0);
    ck_pr_md_store_64(
        &mut *(*sb_counters.offset(thread_id as isize))
            .as_mut_ptr()
            .offset(type_0 as isize),
        tmp.wrapping_add(val),
    );
}
#[inline]
unsafe extern "C" fn sb_counter_inc___0(
    mut thread_id: libc::c_int,
    mut type_0: sb_counter_type_t,
) {
    sb_counter_add___0(thread_id, type_0, 1 as libc::c_int as uint64_t);
}
#[inline]
unsafe extern "C" fn xoroshiro_rotl(x: uint64_t, mut k: libc::c_int) -> uint64_t {
    return x << k | x >> 64 as libc::c_int - k;
}
#[inline]
unsafe extern "C" fn xoroshiro_next(mut s: *mut uint64_t) -> uint64_t {
    let mut s0: uint64_t = 0;
    let mut s1: uint64_t = 0;
    let mut result: uint64_t = 0;
    let mut tmp: uint64_t = 0;
    s0 = *s.offset(0 as libc::c_int as isize);
    s1 = *s.offset(1 as libc::c_int as isize);
    result = s0.wrapping_add(s1);
    s1 ^= s0;
    tmp = xoroshiro_rotl(s0, 55 as libc::c_int);
    *s.offset(0 as libc::c_int as isize) = tmp ^ s1 ^ s1 << 14 as libc::c_int;
    *s.offset(1 as libc::c_int as isize) = xoroshiro_rotl(s1, 36 as libc::c_int);
    return result;
}
#[inline]
unsafe extern "C" fn sb_rand_uniform_uint64() -> uint64_t {
    let mut tmp: uint64_t = 0;
    tmp = xoroshiro_next(sb_rng_state.as_mut_ptr());
    return tmp;
}
#[inline]
unsafe extern "C" fn sb_rand_uniform_double() -> libc::c_double {
    let mut x: uint64_t = 0;
    let mut tmp: uint64_t = 0;
    let mut u: __anonunion_u_858940928 = __anonunion_u_858940928 { i: 0 };
    tmp = sb_rand_uniform_uint64();
    x = tmp;
    u.i = (1023 as libc::c_ulong) << 52 as libc::c_int | x >> 12 as libc::c_int;
    return u.d - 1.0f64;
}
#[inline]
unsafe extern "C" fn ck_ring_size(mut ring: *const ck_ring) -> libc::c_uint {
    let mut c: libc::c_uint = 0;
    let mut p: libc::c_uint = 0;
    c = ck_pr_md_load_uint(&(*ring).c_head);
    p = ck_pr_md_load_uint(&(*ring).p_tail);
    return p.wrapping_sub(c) & (*ring).mask;
}
#[inline]
unsafe extern "C" fn ck_ring_init(mut ring: *mut ck_ring, mut size: libc::c_uint) {
    (*ring).size = size;
    (*ring).mask = size.wrapping_sub(1 as libc::c_uint);
    (*ring).p_tail = 0 as libc::c_uint;
    (*ring).p_head = 0 as libc::c_uint;
    (*ring).c_head = 0 as libc::c_uint;
}
#[inline(always)]
unsafe extern "C" fn _ck_ring_enqueue_sp(
    mut ring: *mut ck_ring,
    mut buffer: *mut libc::c_void,
    mut entry: *const libc::c_void,
    mut ts: libc::c_uint,
    mut size: *mut libc::c_uint,
) -> bool {
    let mut mask: libc::c_uint = 0;
    let mut consumer: libc::c_uint = 0;
    let mut producer: libc::c_uint = 0;
    let mut delta: libc::c_uint = 0;
    let mut tmp: libc::c_long = 0;
    mask = (*ring).mask;
    consumer = ck_pr_md_load_uint(
        &mut (*ring).c_head as *mut libc::c_uint as *const libc::c_uint,
    );
    producer = (*ring).p_tail;
    delta = producer.wrapping_add(1 as libc::c_uint);
    if size as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        *size = producer.wrapping_sub(consumer) & mask;
    }
    tmp = (delta & mask == consumer & mask) as libc::c_int as libc::c_long;
    if tmp != 0 {
        return 0 as libc::c_int != 0;
    }
    buffer = (buffer as *mut libc::c_char)
        .offset(ts.wrapping_mul(producer & mask) as isize) as *mut libc::c_void;
    memcpy(buffer, entry, ts as size_t);
    ck_pr_fence_store_atomic();
    ck_pr_md_store_uint(&mut (*ring).p_tail, delta);
    return 1 as libc::c_int != 0;
}
#[inline(always)]
unsafe extern "C" fn _ck_ring_dequeue_mc(
    mut ring: *mut ck_ring,
    mut buffer: *const libc::c_void,
    mut data: *mut libc::c_void,
    mut ts: libc::c_uint,
) -> bool {
    let mut mask: libc::c_uint = 0;
    let mut consumer: libc::c_uint = 0;
    let mut producer: libc::c_uint = 0;
    let mut target: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: libc::c_long = 0;
    let mut tmp___0: bool = false;
    mask = (*ring).mask;
    consumer = ck_pr_md_load_uint(
        &mut (*ring).c_head as *mut libc::c_uint as *const libc::c_uint,
    );
    loop {
        ck_pr_fence_store_atomic();
        producer = ck_pr_md_load_uint(
            &mut (*ring).p_tail as *mut libc::c_uint as *const libc::c_uint,
        );
        tmp = (consumer == producer) as libc::c_int as libc::c_long;
        if tmp != 0 {
            return 0 as libc::c_int != 0;
        }
        ck_pr_fence_store_atomic();
        target = (buffer as *const libc::c_char)
            .offset(ts.wrapping_mul(consumer & mask) as isize);
        memcpy(data, target as *const libc::c_void, ts as size_t);
        ck_pr_fence_store_atomic();
        tmp___0 = ck_pr_cas_uint_value(
            &mut (*ring).c_head,
            consumer,
            consumer.wrapping_add(1 as libc::c_uint),
            &mut consumer,
        );
        if !(tmp___0 as libc::c_int == 0 as libc::c_int) {
            break;
        }
    }
    return 1 as libc::c_int != 0;
}
#[inline]
unsafe extern "C" fn ck_ring_enqueue_spmc(
    mut ring: *mut ck_ring,
    mut buffer: *mut ck_ring_buffer,
    mut entry: *const libc::c_void,
) -> bool {
    let mut tmp: bool = false;
    tmp = _ck_ring_enqueue_sp(
        ring,
        buffer as *mut libc::c_void,
        &mut entry as *mut *const libc::c_void as *const libc::c_void,
        ::std::mem::size_of::<*const libc::c_void>() as libc::c_ulong as libc::c_uint,
        0 as *mut libc::c_void as *mut libc::c_uint,
    );
    return tmp;
}
#[inline]
unsafe extern "C" fn ck_ring_dequeue_spmc(
    mut ring: *mut ck_ring,
    mut buffer: *const ck_ring_buffer,
    mut data: *mut libc::c_void,
) -> bool {
    let mut tmp: bool = false;
    tmp = _ck_ring_dequeue_mc(
        ring,
        buffer as *const libc::c_void,
        data as *mut *mut libc::c_void as *mut libc::c_void,
        ::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong as libc::c_uint,
    );
    return tmp;
}
pub static mut general_args: [sb_arg_t; 17] = [
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"threads\0" as *const u8 as *const libc::c_char,
            desc: b"number of threads to use\0" as *const u8 as *const libc::c_char,
            value: b"1\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"events\0" as *const u8 as *const libc::c_char,
            desc: b"limit for total number of events\0" as *const u8
                as *const libc::c_char,
            value: b"0\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"time\0" as *const u8 as *const libc::c_char,
            desc: b"limit for total execution time in seconds\0" as *const u8
                as *const libc::c_char,
            value: b"10\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"warmup-time\0" as *const u8 as *const libc::c_char,
            desc: b"execute events for this many seconds with statistics disabled before the actual benchmark run with statistics enabled\0"
                as *const u8 as *const libc::c_char,
            value: b"0\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"forced-shutdown\0" as *const u8 as *const libc::c_char,
            desc: b"number of seconds to wait after the --time limit before forcing shutdown, or 'off' to disable\0"
                as *const u8 as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_STRING,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"thread-stack-size\0" as *const u8 as *const libc::c_char,
            desc: b"size of stack per thread\0" as *const u8 as *const libc::c_char,
            value: b"64K\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_SIZE,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"thread-init-timeout\0" as *const u8 as *const libc::c_char,
            desc: b"wait time in seconds for worker threads to initialize\0" as *const u8
                as *const libc::c_char,
            value: b"30\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"rate\0" as *const u8 as *const libc::c_char,
            desc: b"average transactions rate. 0 for unlimited rate\0" as *const u8
                as *const libc::c_char,
            value: b"0\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"report-interval\0" as *const u8 as *const libc::c_char,
            desc: b"periodically report intermediate statistics with a specified interval in seconds. 0 disables intermediate reports\0"
                as *const u8 as *const libc::c_char,
            value: b"0\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"report-checkpoints\0" as *const u8 as *const libc::c_char,
            desc: b"dump full statistics and reset all counters at specified points in time. The argument is a list of comma-separated values representing the amount of time in seconds elapsed from start of test when report checkpoint(s) must be performed. Report checkpoints are off by default.\0"
                as *const u8 as *const libc::c_char,
            value: b"\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_LIST,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"debug\0" as *const u8 as *const libc::c_char,
            desc: b"print more debugging info\0" as *const u8 as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_BOOL,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"validate\0" as *const u8 as *const libc::c_char,
            desc: b"perform validation checks where possible\0" as *const u8
                as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_BOOL,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"help\0" as *const u8 as *const libc::c_char,
            desc: b"print help and exit\0" as *const u8 as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_BOOL,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"version\0" as *const u8 as *const libc::c_char,
            desc: b"print version and exit\0" as *const u8 as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_BOOL,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"config-file\0" as *const u8 as *const libc::c_char,
            desc: b"File containing command line options\0" as *const u8
                as *const libc::c_char,
            value: 0 as *const libc::c_void as *mut libc::c_void as *const libc::c_char,
            type_0: SB_ARG_TYPE_FILE,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"luajit-cmd\0" as *const u8 as *const libc::c_char,
            desc: b"perform LuaJIT control command. This option is equivalent to 'luajit -j'. See LuaJIT documentation for more information\0"
                as *const u8 as *const libc::c_char,
            value: 0 as *const libc::c_void as *mut libc::c_void as *const libc::c_char,
            type_0: SB_ARG_TYPE_STRING,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: 0 as *const libc::c_char,
            desc: 0 as *const libc::c_char,
            value: 0 as *const libc::c_char,
            type_0: SB_ARG_TYPE_NULL,
            validate: None,
        };
        init
    },
];
pub static mut tests: sb_list_t = sb_list_t {
    next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
    prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
};
pub static mut current_test: *mut sb_test_t_0 = 0 as *const sb_test_t_0
    as *mut sb_test_t_0;
static mut worker_barrier: sb_barrier_t = sb_barrier_t {
    count: 0,
    init_count: 0,
    serial: 0,
    mutex: __anonunion_pthread_mutex_t_335460617 {
        __data: __pthread_mutex_s {
            __lock: 0,
            __count: 0,
            __owner: 0,
            __nusers: 0,
            __kind: 0,
            __spins: 0,
            __elision: 0,
            __list: __pthread_list_t {
                __prev: 0 as *const __pthread_internal_list
                    as *mut __pthread_internal_list,
                __next: 0 as *const __pthread_internal_list
                    as *mut __pthread_internal_list,
            },
        },
    },
    cond: __anonunion_pthread_cond_t_951761805 {
        __data: __pthread_cond_s {
            __annonCompField1: __anonunion____missing_field_name_216240149 {
                __wseq: 0,
            },
            __annonCompField2: __anonunion____missing_field_name_718126666 {
                __g1_start: 0,
            },
            __g_refs: [0; 2],
            __g_size: [0; 2],
            __g1_orig_size: 0,
            __wrefs: 0,
            __g_signals: [0; 2],
        },
    },
    callback: None,
    arg: 0 as *const libc::c_void as *mut libc::c_void,
    error: 0,
};
static mut thread_init_timeout: libc::c_int = 0;
static mut report_barrier: sb_barrier_t = sb_barrier_t {
    count: 0,
    init_count: 0,
    serial: 0,
    mutex: __anonunion_pthread_mutex_t_335460617 {
        __data: __pthread_mutex_s {
            __lock: 0,
            __count: 0,
            __owner: 0,
            __nusers: 0,
            __kind: 0,
            __spins: 0,
            __elision: 0,
            __list: __pthread_list_t {
                __prev: 0 as *const __pthread_internal_list
                    as *mut __pthread_internal_list,
                __next: 0 as *const __pthread_internal_list
                    as *mut __pthread_internal_list,
            },
        },
    },
    cond: __anonunion_pthread_cond_t_951761805 {
        __data: __pthread_cond_s {
            __annonCompField1: __anonunion____missing_field_name_216240149 {
                __wseq: 0,
            },
            __annonCompField2: __anonunion____missing_field_name_718126666 {
                __g1_start: 0,
            },
            __g_refs: [0; 2],
            __g_size: [0; 2],
            __g1_orig_size: 0,
            __wrefs: 0,
            __g_signals: [0; 2],
        },
    },
    callback: None,
    arg: 0 as *const libc::c_void as *mut libc::c_void,
    error: 0,
};
static mut queue_mutex: pthread_mutex_t = __anonunion_pthread_mutex_t_335460617 {
    __data: __pthread_mutex_s {
        __lock: 0,
        __count: 0,
        __owner: 0,
        __nusers: 0,
        __kind: 0,
        __spins: 0,
        __elision: 0,
        __list: __pthread_list_t {
            __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
            __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
        },
    },
};
static mut queue_cond: pthread_cond_t = __anonunion_pthread_cond_t_951761805 {
    __data: __pthread_cond_s {
        __annonCompField1: __anonunion____missing_field_name_216240149 {
            __wseq: 0,
        },
        __annonCompField2: __anonunion____missing_field_name_718126666 {
            __g1_start: 0,
        },
        __g_refs: [0; 2],
        __g_size: [0; 2],
        __g1_orig_size: 0,
        __wrefs: 0,
        __g_signals: [0; 2],
    },
};
static mut queue_array: [uint64_t; 131072] = [0; 131072];
static mut queue_ring_buffer: [ck_ring_buffer_t; 131072] = [ck_ring_buffer_t {
    value: 0 as *const libc::c_void as *mut libc::c_void,
}; 131072];
static mut queue_ring: ck_ring_t = ck_ring_t {
    c_head: 0,
    pad: [0; 60],
    p_tail: 0,
    p_head: 0,
    _pad: [0; 56],
    size: 0,
    mask: 0,
};
static mut report_thread_created: libc::c_int = 0;
static mut checkpoints_thread_created: libc::c_int = 0;
static mut eventgen_thread_created: libc::c_int = 0;
static mut timers: *mut sb_timer_t = 0 as *const sb_timer_t as *mut sb_timer_t;
static mut timers_copy: *mut sb_timer_t = 0 as *const sb_timer_t as *mut sb_timer_t;
unsafe extern "C" fn sigalrm_thread_init_timeout_handler(mut sig: libc::c_int) {
    if sig != 14 as libc::c_int {
        return;
    }
    log_text(
        LOG_FATAL,
        b"Worker threads failed to initialize within %u seconds!\0" as *const u8
            as *const libc::c_char,
        thread_init_timeout,
    );
    exit(2 as libc::c_int);
}
pub unsafe extern "C" fn sb_report_intermediate(mut stat___0: *mut sb_stat_t) {
    log_timestamp(
        LOG_NOTICE,
        (*stat___0).time_total,
        b"thds: %u eps: %4.2f lat (ms,%u%%): %4.2f\0" as *const u8
            as *const libc::c_char,
        (*stat___0).threads_running,
        (*stat___0).events as libc::c_double / (*stat___0).time_interval,
        sb_globals.percentile,
        (*stat___0).latency_pct * 1000 as libc::c_int as libc::c_double,
    );
    if sb_globals.tx_rate > 0 as libc::c_uint {
        log_timestamp(
            LOG_NOTICE,
            (*stat___0).time_total,
            b"queue length: %lu concurrency: %lu\0" as *const u8 as *const libc::c_char,
            (*stat___0).queue_length,
            (*stat___0).concurrency,
        );
    }
}
unsafe extern "C" fn report_get_common_stat(
    mut stat___0: *mut sb_stat_t,
    mut cnt: *mut uint64_t,
) {
    let mut tmp: uint64_t = 0;
    memset(
        stat___0 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sb_stat_t>() as libc::c_ulong,
    );
    (*stat___0).threads_running = sb_globals.threads_running;
    (*stat___0).events = *cnt.offset(3 as libc::c_int as isize);
    (*stat___0).reads = *cnt.offset(1 as libc::c_int as isize);
    (*stat___0).writes = *cnt.offset(2 as libc::c_int as isize);
    (*stat___0).other = *cnt.offset(0 as libc::c_int as isize);
    (*stat___0).errors = *cnt.offset(4 as libc::c_int as isize);
    (*stat___0).reconnects = *cnt.offset(5 as libc::c_int as isize);
    (*stat___0).bytes_read = *cnt.offset(6 as libc::c_int as isize);
    (*stat___0).bytes_written = *cnt.offset(7 as libc::c_int as isize);
    tmp = sb_timer_value(&mut sb_exec_timer);
    (*stat___0)
        .time_total = tmp as libc::c_double / 1000000000 as libc::c_int as libc::c_double
        - sb_globals.warmup_time as libc::c_double;
}
unsafe extern "C" fn report_intermediate() {
    let mut stat___0: sb_stat_t = sb_stat_t {
        threads_running: 0,
        time_interval: 0.,
        time_total: 0.,
        latency_pct: 0.,
        latency_min: 0.,
        latency_max: 0.,
        latency_avg: 0.,
        latency_sum: 0.,
        events: 0,
        reads: 0,
        writes: 0,
        other: 0,
        errors: 0,
        reconnects: 0,
        bytes_read: 0,
        bytes_written: 0,
        queue_length: 0,
        concurrency: 0,
    };
    let mut cnt: sb_counters_t = [0; 8];
    let mut tmp: libc::c_uint = 0;
    let mut tmp___0: libc::c_double = 0.;
    let mut tmp___1: uint64_t = 0;
    let mut tmp___2: libc::c_uint = 0;
    let mut tmp___3: libc::c_int = 0;
    tmp = ck_pr_md_load_uint(
        &mut sb_globals.report_interval as *mut libc::c_uint as *const libc::c_uint,
    );
    if tmp == 0 as libc::c_uint {
        return;
    }
    sb_counters_agg_intermediate(cnt.as_mut_ptr());
    report_get_common_stat(&mut stat___0, cnt.as_mut_ptr());
    tmp___0 = sb_histogram_get_pct_intermediate(
        &mut sb_latency_histogram,
        sb_globals.percentile as libc::c_double,
    );
    stat___0.latency_pct = tmp___0 / 1000 as libc::c_int as libc::c_double;
    tmp___1 = sb_timer_current(&mut sb_intermediate_timer);
    stat___0
        .time_interval = tmp___1 as libc::c_double
        / 1000000000 as libc::c_int as libc::c_double;
    if sb_globals.tx_rate > 0 as libc::c_uint {
        tmp___2 = ck_ring_size(&mut queue_ring as *mut ck_ring_t as *const ck_ring);
        stat___0.queue_length = tmp___2 as uint64_t;
        tmp___3 = ck_pr_md_load_int(
            &mut sb_globals.concurrency as *mut libc::c_int as *const libc::c_int,
        );
        stat___0.concurrency = tmp___3 as uint64_t;
    }
    if !current_test.is_null() {
        if ((*current_test).ops.report_intermediate).is_some() {
            (Some(
                ((*current_test).ops.report_intermediate)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")(&mut stat___0);
        } else {
            sb_report_intermediate(&mut stat___0);
        }
    } else {
        sb_report_intermediate(&mut stat___0);
    };
}
pub unsafe extern "C" fn sb_report_cumulative(mut stat___0: *mut sb_stat_t) {
    let mut nthreads: libc::c_uint = 0;
    let mut unfinished: libc::c_uint = 0;
    let mut i: libc::c_uint = 0;
    let mut tmp: bool = false;
    let mut t: sb_timer_t = sb_timer_t {
        time_start: timespec { tv_sec: 0, tv_nsec: 0 },
        time_end: timespec { tv_sec: 0, tv_nsec: 0 },
        events: 0,
        queue_time: 0,
        min_time: 0,
        max_time: 0,
        sum_time: 0,
        lock: ck_spinlock_fas_t { value: 0 },
        pad: [0; 52],
    };
    let mut i___0: libc::c_uint = 0;
    let mut events_avg: libc::c_double = 0.;
    let mut time_avg: libc::c_double = 0.;
    let mut events_stddev: libc::c_double = 0.;
    let mut time_stddev: libc::c_double = 0.;
    let mut i___1: libc::c_uint = 0;
    let mut diff: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    let mut tmp___1: uint64_t = 0;
    let mut i___2: libc::c_uint = 0;
    let mut tmp___2: uint64_t = 0;
    let mut tmp___3: uint64_t = 0;
    let mut tmp___4: uint64_t = 0;
    let mut tmp___5: uint64_t = 0;
    nthreads = sb_globals.threads;
    if sb_globals.forced_shutdown_in_progress != 0 {
        unfinished = 0 as libc::c_uint;
        i = 0 as libc::c_uint;
        while i < nthreads {
            tmp = sb_timer_running(timers_copy.offset(i as isize));
            if tmp {
                unfinished = unfinished.wrapping_add(1);
                sb_timer_stop(timers_copy.offset(i as isize));
            }
            i = i.wrapping_add(1);
        }
        if unfinished > 0 as libc::c_uint {
            log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
            log_text(
                LOG_NOTICE,
                b"Number of unfinished transactions on forced shutdown: %u\0"
                    as *const u8 as *const libc::c_char,
                unfinished,
            );
        }
    }
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    log_text(LOG_NOTICE, b"Throughput:\0" as *const u8 as *const libc::c_char);
    log_text(
        LOG_NOTICE,
        b"    events/s (eps):                      %.4f\0" as *const u8
            as *const libc::c_char,
        (*stat___0).events as libc::c_double / (*stat___0).time_interval,
    );
    log_text(
        LOG_NOTICE,
        b"    time elapsed:                        %.4fs\0" as *const u8
            as *const libc::c_char,
        (*stat___0).time_total,
    );
    log_text(
        LOG_NOTICE,
        b"    total number of events:              %lu\0" as *const u8
            as *const libc::c_char,
        (*stat___0).events,
    );
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    log_text(LOG_NOTICE, b"Latency (ms):\0" as *const u8 as *const libc::c_char);
    log_text(
        LOG_NOTICE,
        b"         min: %39.2f\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_min * 1000 as libc::c_int as libc::c_double,
    );
    log_text(
        LOG_NOTICE,
        b"         avg: %39.2f\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_avg * 1000 as libc::c_int as libc::c_double,
    );
    log_text(
        LOG_NOTICE,
        b"         max: %39.2f\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_max * 1000 as libc::c_int as libc::c_double,
    );
    if sb_globals.percentile > 0 as libc::c_uint {
        log_text(
            LOG_NOTICE,
            b"        %3dth percentile: %27.2f\0" as *const u8 as *const libc::c_char,
            sb_globals.percentile,
            (*stat___0).latency_pct * 1000 as libc::c_int as libc::c_double,
        );
    } else {
        log_text(
            LOG_NOTICE,
            b"         percentile stats:               disabled\0" as *const u8
                as *const libc::c_char,
        );
    }
    log_text(
        LOG_NOTICE,
        b"         sum: %39.2f\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_sum * 1000 as libc::c_int as libc::c_double,
    );
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    sb_timer_init(&mut t);
    i___0 = 0 as libc::c_uint;
    while i___0 < nthreads {
        t = sb_timer_merge(&mut t, timers_copy.offset(i___0 as isize));
        i___0 = i___0.wrapping_add(1);
    }
    events_avg = t.events as libc::c_double / nthreads as libc::c_double;
    time_avg = (*stat___0).latency_sum / nthreads as libc::c_double;
    events_stddev = 0 as libc::c_int as libc::c_double;
    time_stddev = 0 as libc::c_int as libc::c_double;
    i___1 = 0 as libc::c_uint;
    while i___1 < nthreads {
        tmp___0 = fabs(
            events_avg - (*timers_copy.offset(i___1 as isize)).events as libc::c_double,
        );
        diff = tmp___0;
        events_stddev += diff * diff;
        tmp___1 = sb_timer_sum(timers_copy.offset(i___1 as isize));
        diff = fabs(
            time_avg
                - tmp___1 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        time_stddev += diff * diff;
        i___1 = i___1.wrapping_add(1);
    }
    events_stddev = sqrt(events_stddev / nthreads as libc::c_double);
    time_stddev = sqrt(time_stddev / nthreads as libc::c_double);
    log_text(LOG_NOTICE, b"Threads fairness:\0" as *const u8 as *const libc::c_char);
    log_text(
        LOG_NOTICE,
        b"    events (avg/stddev):           %.4f/%3.2f\0" as *const u8
            as *const libc::c_char,
        events_avg,
        events_stddev,
    );
    log_text(
        LOG_NOTICE,
        b"    execution time (avg/stddev):   %.4f/%3.2f\0" as *const u8
            as *const libc::c_char,
        time_avg,
        time_stddev,
    );
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    if sb_globals.debug != 0 {
        log_text(
            LOG_DEBUG,
            b"Verbose per-thread statistics:\n\0" as *const u8 as *const libc::c_char,
        );
        i___2 = 0 as libc::c_uint;
        while i___2 < nthreads {
            tmp___2 = sb_timer_max(timers_copy.offset(i___2 as isize));
            tmp___3 = sb_timer_avg(timers_copy.offset(i___2 as isize));
            tmp___4 = sb_timer_min(timers_copy.offset(i___2 as isize));
            log_text(
                LOG_DEBUG,
                b"    thread #%3d: min: %.4fs  avg: %.4fs  max: %.4fs  events: %lu\0"
                    as *const u8 as *const libc::c_char,
                i___2,
                tmp___4 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
                tmp___3 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
                tmp___2 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
                (*timers_copy.offset(i___2 as isize)).events,
            );
            tmp___5 = sb_timer_sum(timers_copy.offset(i___2 as isize));
            log_text(
                LOG_DEBUG,
                b"                 total time taken by event execution: %.4fs\0"
                    as *const u8 as *const libc::c_char,
                tmp___5 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
            );
            i___2 = i___2.wrapping_add(1);
        }
        log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    }
}
unsafe extern "C" fn checkpoint(mut stat___0: *mut sb_stat_t) {
    let mut cnt: sb_counters_t = [0; 8];
    let mut tmp: uint64_t = 0;
    let mut tmp___0: libc::c_double = 0.;
    let mut i: size_t = 0;
    sb_counters_agg_cumulative(cnt.as_mut_ptr());
    report_get_common_stat(stat___0, cnt.as_mut_ptr());
    tmp = sb_timer_current(&mut sb_checkpoint_timer);
    (*stat___0)
        .time_interval = tmp as libc::c_double
        / 1000000000 as libc::c_int as libc::c_double;
    tmp___0 = sb_histogram_get_pct_checkpoint(
        &mut sb_latency_histogram,
        sb_globals.percentile as libc::c_double,
    );
    (*stat___0).latency_pct = tmp___0 / 1000 as libc::c_int as libc::c_double;
    i = 0 as libc::c_int as size_t;
    while i < sb_globals.threads as size_t {
        sb_timer_checkpoint(timers.offset(i as isize), timers_copy.offset(i as isize));
        i = i.wrapping_add(1);
    }
}
unsafe extern "C" fn report_cumulative() {
    let mut stat___0: sb_stat_t = sb_stat_t {
        threads_running: 0,
        time_interval: 0.,
        time_total: 0.,
        latency_pct: 0.,
        latency_min: 0.,
        latency_max: 0.,
        latency_avg: 0.,
        latency_sum: 0.,
        events: 0,
        reads: 0,
        writes: 0,
        other: 0,
        errors: 0,
        reconnects: 0,
        bytes_read: 0,
        bytes_written: 0,
        queue_length: 0,
        concurrency: 0,
    };
    let mut t: sb_timer_t = sb_timer_t {
        time_start: timespec { tv_sec: 0, tv_nsec: 0 },
        time_end: timespec { tv_sec: 0, tv_nsec: 0 },
        events: 0,
        queue_time: 0,
        min_time: 0,
        max_time: 0,
        sum_time: 0,
        lock: ck_spinlock_fas_t { value: 0 },
        pad: [0; 52],
    };
    let mut i: size_t = 0;
    let mut tmp: uint64_t = 0;
    let mut tmp___0: uint64_t = 0;
    let mut tmp___1: uint64_t = 0;
    let mut tmp___2: uint64_t = 0;
    checkpoint(&mut stat___0);
    sb_timer_init(&mut t);
    i = 0 as libc::c_int as size_t;
    while i < sb_globals.threads as size_t {
        t = sb_timer_merge(&mut t, timers_copy.offset(i as isize));
        i = i.wrapping_add(1);
    }
    tmp = sb_timer_min(&mut t);
    stat___0
        .latency_min = tmp as libc::c_double
        / 1000000000 as libc::c_int as libc::c_double;
    tmp___0 = sb_timer_max(&mut t);
    stat___0
        .latency_max = tmp___0 as libc::c_double
        / 1000000000 as libc::c_int as libc::c_double;
    tmp___1 = sb_timer_avg(&mut t);
    stat___0
        .latency_avg = tmp___1 as libc::c_double
        / 1000000000 as libc::c_int as libc::c_double;
    tmp___2 = sb_timer_sum(&mut t);
    stat___0
        .latency_sum = tmp___2 as libc::c_double
        / 1000000000 as libc::c_int as libc::c_double;
    if !current_test.is_null() {
        if ((*current_test).ops.report_cumulative).is_some() {
            (Some(
                ((*current_test).ops.report_cumulative)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")(&mut stat___0);
        } else {
            sb_report_cumulative(&mut stat___0);
        }
    } else {
        sb_report_cumulative(&mut stat___0);
    };
}
unsafe extern "C" fn sigalrm_forced_shutdown_handler(mut sig: libc::c_int) {
    if sig != 14 as libc::c_int {
        return;
    }
    sb_globals.forced_shutdown_in_progress = 1 as libc::c_int;
    sb_timer_stop(&mut sb_exec_timer);
    sb_timer_stop(&mut sb_intermediate_timer);
    sb_timer_stop(&mut sb_checkpoint_timer);
    log_text(
        LOG_FATAL,
        b"The --max-time limit has expired, forcing shutdown...\0" as *const u8
            as *const libc::c_char,
    );
    report_cumulative();
    log_done();
    exit(2 as libc::c_int);
}
unsafe extern "C" fn register_tests() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    tests.next_p = &mut tests;
    tests.prev_p = &mut tests;
    tmp = register_test_fileio(&mut tests);
    tmp___0 = register_test_cpu(&mut tests);
    tmp___1 = register_test_memory(&mut tests);
    tmp___2 = register_test_threads(&mut tests);
    tmp___3 = register_test_mutex(&mut tests);
    tmp___4 = db_register();
    tmp___5 = sb_rand_register();
    return tmp + tmp___0 + tmp___1 + tmp___2 + tmp___3 + tmp___4 + tmp___5;
}
unsafe extern "C" fn print_header() {
    log_text(
        LOG_NOTICE,
        b"%s (using %s %s)\n\0" as *const u8 as *const libc::c_char,
        b"sysbench 1.1.0-df89d34\0" as *const u8 as *const libc::c_char,
        b"bundled\0" as *const u8 as *const libc::c_char,
        b"LuaJIT 2.1.0-beta3\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn print_help() {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut test: *mut sb_test_t_0 = 0 as *mut sb_test_t_0;
    printf(b"Usage:\n\0" as *const u8 as *const libc::c_char);
    printf(
        b"  sysbench [options]... [testname] [command]\n\n\0" as *const u8
            as *const libc::c_char,
    );
    printf(
        b"Commands implemented by most tests: prepare run cleanup help\n\n\0"
            as *const u8 as *const libc::c_char,
    );
    printf(b"General options:\n\0" as *const u8 as *const libc::c_char);
    sb_print_options(general_args.as_mut_ptr());
    sb_rand_print_help();
    log_print_help();
    db_print_help();
    printf(b"Compiled-in tests:\n\0" as *const u8 as *const libc::c_char);
    pos = tests.next_p;
    while pos as libc::c_ulong != &mut tests as *mut sb_list_t as libc::c_ulong {
        test = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut sb_test_t_0)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut sb_test_t_0;
        printf(
            b"  %s - %s\n\0" as *const u8 as *const libc::c_char,
            (*test).sname,
            (*test).lname,
        );
        pos = (*pos).next_p;
    }
    printf(b"\n\0" as *const u8 as *const libc::c_char);
    printf(
        b"See 'sysbench <testname> help' for a list of options for each test.\n\n\0"
            as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn parse_option(
    mut name: *mut libc::c_char,
    mut ignore_unknown: bool,
) -> libc::c_int {
    let mut value: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut ctmp: libc::c_char = 0;
    let mut rc: libc::c_int = 0;
    let mut tmp___0: libc::c_uint = 0;
    let mut tmp___1: *mut option_t = 0 as *mut option_t;
    ctmp = 0 as libc::c_int as libc::c_char;
    tmp = strchr(name as *const libc::c_char, '=' as i32);
    if tmp as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        ctmp = *tmp;
        *tmp = '\u{0}' as i32 as libc::c_char;
        value = tmp.offset(1 as libc::c_int as isize) as *const libc::c_char;
    } else {
        value = 0 as *mut libc::c_void as *const libc::c_char;
    }
    opt = sb_find_option(name as *const libc::c_char);
    let mut current_block_18: u64;
    if opt as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        current_block_18 = 3520522821122993565;
    } else if ignore_unknown {
        current_block_18 = 3520522821122993565;
    } else {
        rc = 1 as libc::c_int;
        current_block_18 = 2838571290723028321;
    }
    match current_block_18 {
        3520522821122993565 => {
            if opt as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                tmp___0 = (*opt).type_0 as libc::c_uint;
            } else {
                tmp___0 = 5 as libc::c_uint;
            }
            tmp___1 = set_option(
                name as *const libc::c_char,
                value,
                tmp___0 as sb_arg_type_t,
            );
            rc = (tmp___1 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong)
                as libc::c_int;
        }
        _ => {}
    }
    if tmp as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        *tmp = ctmp;
    }
    return rc;
}
unsafe extern "C" fn parse_general_arguments(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut testname: *const libc::c_char = 0 as *const libc::c_char;
    let mut cmdname: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    tmp = sb_register_arg_set(general_args.as_mut_ptr());
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    testname = 0 as *mut libc::c_void as *const libc::c_char;
    cmdname = 0 as *mut libc::c_void as *const libc::c_char;
    i = 1 as libc::c_int;
    while i < argc {
        tmp___1 = strncmp(
            *argv.offset(i as isize) as *const libc::c_char,
            b"--\0" as *const u8 as *const libc::c_char,
            2 as libc::c_int as size_t,
        );
        if tmp___1 != 0 {
            if testname as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                testname = *argv.offset(i as isize) as *const libc::c_char;
            } else if cmdname as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong
                {
                cmdname = *argv.offset(i as isize) as *const libc::c_char;
            } else {
                fprintf(
                    stderr,
                    b"Unrecognized command line argument: %s\n\0" as *const u8
                        as *const libc::c_char,
                    *argv.offset(i as isize),
                );
                return 1 as libc::c_int;
            }
        } else {
            tmp___0 = parse_option(
                (*argv.offset(i as isize)).offset(2 as libc::c_int as isize),
                0 as libc::c_int != 0,
            );
            if tmp___0 == 0 {
                let ref mut fresh0 = *argv.offset(i as isize);
                *fresh0 = 0 as *mut libc::c_void as *mut libc::c_char;
            }
        }
        i += 1;
    }
    sb_globals.testname = testname;
    sb_globals.cmdname = cmdname;
    return 0 as libc::c_int;
}
unsafe extern "C" fn parse_test_arguments(
    mut test: *mut sb_test_t_0,
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    if (*test).args as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp = sb_register_arg_set((*test).args);
        if tmp != 0 {
            return 1 as libc::c_int;
        }
    }
    i = 1 as libc::c_int;
    while i < argc {
        if !(*argv.offset(i as isize) as libc::c_ulong
            == 0 as *mut libc::c_void as libc::c_ulong)
        {
            tmp___0 = strncmp(
                *argv.offset(i as isize) as *const libc::c_char,
                b"--\0" as *const u8 as *const libc::c_char,
                2 as libc::c_int as size_t,
            );
            if !(tmp___0 != 0) {
                tmp___1 = parse_option(
                    (*argv.offset(i as isize)).offset(2 as libc::c_int as isize),
                    0 as libc::c_int != 0,
                );
                if tmp___1 != 0 {
                    fprintf(
                        stderr,
                        b"invalid option: %s\n\0" as *const u8 as *const libc::c_char,
                        *argv.offset(i as isize),
                    );
                    return 1 as libc::c_int;
                }
                let ref mut fresh1 = *argv.offset(i as isize);
                *fresh1 = 0 as *mut libc::c_void as *mut libc::c_char;
            }
        }
        i += 1;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn print_run_mode(mut test: *mut sb_test_t_0) {
    let mut list_str: [libc::c_char; 3072] = [0; 3072];
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut i: libc::c_uint = 0;
    let mut n: libc::c_int = 0;
    let mut size: libc::c_int = 0;
    let mut tmp___0: time_t = 0;
    log_text(
        LOG_NOTICE,
        b"Running the test with following options:\0" as *const u8 as *const libc::c_char,
    );
    log_text(
        LOG_NOTICE,
        b"Number of threads: %d\0" as *const u8 as *const libc::c_char,
        sb_globals.threads,
    );
    if sb_globals.warmup_time > 0 as libc::c_int {
        log_text(
            LOG_NOTICE,
            b"Warmup time: %ds\0" as *const u8 as *const libc::c_char,
            sb_globals.warmup_time,
        );
    }
    if sb_globals.tx_rate > 0 as libc::c_uint {
        log_text(
            LOG_NOTICE,
            b"Target transaction rate: %d/sec\0" as *const u8 as *const libc::c_char,
            sb_globals.tx_rate,
        );
    }
    if sb_globals.report_interval != 0 {
        log_text(
            LOG_NOTICE,
            b"Report intermediate results every %d second(s)\0" as *const u8
                as *const libc::c_char,
            sb_globals.report_interval,
        );
    }
    if sb_globals.n_checkpoints > 0 as libc::c_uint {
        tmp = list_str.as_mut_ptr();
        size = ::std::mem::size_of::<[libc::c_char; 3072]>() as libc::c_ulong
            as libc::c_int;
        i = 0 as libc::c_uint;
        while i < (sb_globals.n_checkpoints).wrapping_sub(1 as libc::c_uint) {
            n = snprintf(
                tmp,
                size as size_t,
                b"%u, \0" as *const u8 as *const libc::c_char,
                sb_globals.checkpoints[i as usize],
            );
            if n >= size {
                break;
            }
            tmp = tmp.offset(n as isize);
            size -= n;
            i = i.wrapping_add(1);
        }
        if i == (sb_globals.n_checkpoints).wrapping_sub(1 as libc::c_uint) {
            snprintf(
                tmp,
                size as size_t,
                b"%u\0" as *const u8 as *const libc::c_char,
                sb_globals.checkpoints[i as usize],
            );
        }
        log_text(
            LOG_NOTICE,
            b"Report checkpoint(s) at %s seconds\0" as *const u8 as *const libc::c_char,
            list_str.as_mut_ptr(),
        );
    }
    if sb_globals.debug != 0 {
        log_text(
            LOG_NOTICE,
            b"Debug mode enabled.\n\0" as *const u8 as *const libc::c_char,
        );
    }
    if sb_globals.validate != 0 {
        log_text(
            LOG_NOTICE,
            b"Validation checks: on.\n\0" as *const u8 as *const libc::c_char,
        );
    }
    if sb_rand_seed != 0 {
        log_text(
            LOG_NOTICE,
            b"Initializing random number generator from seed (%d).\n\0" as *const u8
                as *const libc::c_char,
            sb_rand_seed,
        );
        srandom(sb_rand_seed as libc::c_uint);
    } else {
        log_text(
            LOG_NOTICE,
            b"Initializing random number generator from current time\n\0" as *const u8
                as *const libc::c_char,
        );
        tmp___0 = time(0 as *mut libc::c_void as *mut time_t);
        srandom(tmp___0 as libc::c_uint);
    }
    if sb_globals.force_shutdown != 0 {
        log_text(
            LOG_NOTICE,
            b"Forcing shutdown in %u seconds\0" as *const u8 as *const libc::c_char,
            ((sb_globals.max_time_ns as libc::c_double
                / 1000000000 as libc::c_int as libc::c_double) as libc::c_uint)
                .wrapping_add(sb_globals.timeout),
        );
    }
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    if ::std::mem::transmute::<
        Option::<sb_op_print_mode>,
        libc::c_ulong,
    >((*test).ops.print_mode) != 0 as *mut libc::c_void as libc::c_ulong
    {
        (Some(((*test).ops.print_mode).expect("non-null function pointer")))
            .expect("non-null function pointer")();
    }
}
pub unsafe extern "C" fn sb_more_events(mut thread_id: libc::c_int) -> bool {
    let mut tmp: uint64_t = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_long = 0;
    let mut max_events: uint64_t = 0;
    let mut tmp___2: uint64_t = 0;
    let mut tmp___3: uint64_t = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_long = 0;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___6: uint64_t = 0;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: libc::c_long = 0;
    let mut tmp___9: bool = false;
    let mut tmp___10: uint64_t = 0;
    if sb_globals.error != 0 {
        return 0 as libc::c_int != 0;
    }
    if sb_globals.max_time_ns > 0 as libc::c_ulong {
        tmp = sb_timer_value(&mut sb_exec_timer);
        if tmp >= sb_globals.max_time_ns {
            tmp___0 = 1 as libc::c_int;
        } else {
            tmp___0 = 0 as libc::c_int;
        }
        tmp___1 = tmp___0 as libc::c_long;
        if tmp___1 != 0 {
            log_text(
                LOG_INFO,
                b"Time limit exceeded, exiting...\0" as *const u8 as *const libc::c_char,
            );
            return 0 as libc::c_int != 0;
        }
    }
    tmp___2 = ck_pr_md_load_64(
        &mut sb_globals.max_events as *mut uint64_t as *const uint64_t,
    );
    max_events = tmp___2;
    if max_events > 0 as libc::c_ulong {
        tmp___3 = ck_pr_faa_64(&mut sb_globals.nevents, 1 as libc::c_int as uint64_t);
        if tmp___3 >= max_events {
            tmp___4 = 1 as libc::c_int;
        } else {
            tmp___4 = 0 as libc::c_int;
        }
        tmp___5 = tmp___4 as libc::c_long;
        if tmp___5 != 0 {
            log_text(
                LOG_INFO,
                b"Event limit exceeded, exiting...\0" as *const u8 as *const libc::c_char,
            );
            return 0 as libc::c_int != 0;
        }
    }
    if sb_globals.tx_rate > 0 as libc::c_uint {
        ptr = 0 as *mut libc::c_void;
        loop {
            tmp___9 = ck_ring_dequeue_spmc(
                &mut queue_ring,
                queue_ring_buffer.as_mut_ptr() as *const ck_ring_buffer,
                &mut ptr as *mut *mut libc::c_void as *mut libc::c_void,
            );
            if tmp___9 {
                break;
            }
            if sb_globals.error != 0 {
                break;
            }
            pthread_mutex_lock(&mut queue_mutex);
            pthread_cond_wait(
                &mut queue_cond as *mut pthread_cond_t,
                &mut queue_mutex as *mut pthread_mutex_t,
            );
            pthread_mutex_unlock(&mut queue_mutex);
            if sb_globals.error != 0 {
                return 0 as libc::c_int != 0;
            }
            if sb_globals.max_time_ns > 0 as libc::c_ulong {
                tmp___6 = sb_timer_value(&mut sb_exec_timer);
                if tmp___6 >= sb_globals.max_time_ns {
                    tmp___7 = 1 as libc::c_int;
                } else {
                    tmp___7 = 0 as libc::c_int;
                }
                tmp___8 = tmp___7 as libc::c_long;
                if tmp___8 != 0 {
                    log_text(
                        LOG_INFO,
                        b"Time limit exceeded, exiting...\0" as *const u8
                            as *const libc::c_char,
                    );
                    return 0 as libc::c_int != 0;
                }
            }
        }
        ck_pr_inc_int(&mut sb_globals.concurrency);
        tmp___10 = sb_timer_value(&mut sb_exec_timer);
        (*timers.offset(thread_id as isize))
            .queue_time = tmp___10
            .wrapping_sub(*(ptr as *mut uint64_t).offset(0 as libc::c_int as isize));
    }
    return 1 as libc::c_int != 0;
}
pub unsafe extern "C" fn sb_event_start(mut thread_id: libc::c_int) {
    sb_timer_start(timers.offset(thread_id as isize));
}
pub unsafe extern "C" fn sb_event_stop(mut thread_id: libc::c_int) {
    let mut timer: *mut sb_timer_t = 0 as *mut sb_timer_t;
    let mut value: libc::c_longlong = 0;
    let mut tmp: uint64_t = 0;
    timer = timers.offset(thread_id as isize);
    tmp = sb_timer_stop(timer);
    value = tmp as libc::c_longlong;
    if sb_globals.percentile > 0 as libc::c_uint {
        sb_histogram_update(
            &mut sb_latency_histogram,
            value as libc::c_double / 1000000 as libc::c_int as libc::c_double,
        );
    }
    sb_counter_inc___0(thread_id, SB_CNT_EVENT);
    if sb_globals.tx_rate > 0 as libc::c_uint {
        ck_pr_dec_int(&mut sb_globals.concurrency);
    }
}
unsafe extern "C" fn thread_run(
    mut test: *mut sb_test_t_0,
    mut thread_id: libc::c_int,
) -> libc::c_int {
    let mut event: sb_event_t = sb_event_t {
        type_0: 0,
        test: 0 as *mut sb_test_t,
        u: __anonunion_u_774530261 {
            file_request: sb_file_request_t {
                file_id: 0,
                pos: 0,
                size: 0,
                operation: FILE_OP_TYPE_NULL,
            },
        },
    };
    let mut rc: libc::c_int = 0;
    let mut tmp: bool = false;
    rc = 0 as libc::c_int;
    loop {
        tmp = sb_more_events(thread_id);
        if !tmp {
            break;
        }
        if !(rc == 0 as libc::c_int) {
            break;
        }
        event = (Some(((*test).ops.next_event).expect("non-null function pointer")))
            .expect("non-null function pointer")(thread_id);
        if event.type_0 == 0 as libc::c_int {
            break;
        }
        sb_event_start(thread_id);
        rc = (Some(((*test).ops.execute_event).expect("non-null function pointer")))
            .expect("non-null function pointer")(&mut event, thread_id);
        sb_event_stop(thread_id);
    }
    return rc;
}
unsafe extern "C" fn worker_thread(mut arg: *mut libc::c_void) -> *mut libc::c_void {
    let mut ctxt: *mut sb_thread_ctxt_t = 0 as *mut sb_thread_ctxt_t;
    let mut thread_id: libc::c_uint = 0;
    let mut rc: libc::c_int = 0;
    let mut test: *mut sb_test_t_0 = 0 as *mut sb_test_t_0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    ctxt = arg as *mut sb_thread_ctxt_t;
    test = current_test;
    thread_id = (*ctxt).id;
    sb_tls_thread_id = thread_id as libc::c_int;
    sb_rand_thread_init();
    log_text(
        LOG_DEBUG,
        b"Worker thread (#%d) started\0" as *const u8 as *const libc::c_char,
        thread_id,
    );
    if ::std::mem::transmute::<
        Option::<sb_op_thread_init>,
        libc::c_ulong,
    >((*test).ops.thread_init) != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp = (Some(((*test).ops.thread_init).expect("non-null function pointer")))
            .expect("non-null function pointer")(thread_id as libc::c_int);
        if tmp != 0 as libc::c_int {
            log_text(
                LOG_DEBUG,
                b"Worker thread (#%d) failed to initialize!\0" as *const u8
                    as *const libc::c_char,
                thread_id,
            );
            sb_globals.error = 1 as libc::c_int;
            sb_barrier_wait(&mut worker_barrier);
            return 0 as *mut libc::c_void;
        }
    }
    log_text(
        LOG_DEBUG,
        b"Worker thread (#%d) initialized\0" as *const u8 as *const libc::c_char,
        thread_id,
    );
    tmp___0 = sb_barrier_wait(&mut worker_barrier);
    if tmp___0 < 0 as libc::c_int {
        return 0 as *mut libc::c_void;
    }
    if ::std::mem::transmute::<
        Option::<sb_op_thread_run>,
        libc::c_ulong,
    >((*test).ops.thread_run) != 0 as *mut libc::c_void as libc::c_ulong
    {
        rc = (Some(((*test).ops.thread_run).expect("non-null function pointer")))
            .expect("non-null function pointer")(thread_id as libc::c_int);
    } else {
        rc = thread_run(test, thread_id as libc::c_int);
    }
    if rc != 0 as libc::c_int {
        sb_globals.error = 1 as libc::c_int;
    } else if ::std::mem::transmute::<
            Option::<sb_op_thread_done>,
            libc::c_ulong,
        >((*test).ops.thread_done) != 0 as *mut libc::c_void as libc::c_ulong
        {
        (Some(((*test).ops.thread_done).expect("non-null function pointer")))
            .expect("non-null function pointer")(thread_id as libc::c_int);
    }
    return 0 as *mut libc::c_void;
}
#[inline]
unsafe extern "C" fn sb_rand_exp(mut lambda: libc::c_double) -> libc::c_double {
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp = sb_rand_uniform_double();
    tmp___0 = log(1 as libc::c_int as libc::c_double - tmp);
    return -lambda * tmp___0;
}
unsafe extern "C" fn eventgen_thread_proc(
    mut arg: *mut libc::c_void,
) -> *mut libc::c_void {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut lambda: libc::c_double = 0.;
    let mut curr_ns: uint64_t = 0;
    let mut tmp___2: uint64_t = 0;
    let mut intr_ns: uint64_t = 0;
    let mut tmp___3: libc::c_double = 0.;
    let mut next_ns: uint64_t = 0;
    let mut i: libc::c_int = 0;
    let mut tmp___4: libc::c_double = 0.;
    let mut tmp___5: libc::c_long = 0;
    let mut tmp___6: bool = false;
    sb_tls_thread_id = sb_globals.threads as libc::c_int;
    sb_rand_thread_init();
    ck_ring_init(&mut queue_ring, 131072 as libc::c_uint);
    tmp = pthread_mutex_init(
        &mut queue_mutex,
        0 as *mut libc::c_void as *const pthread_mutexattr_t,
    );
    if tmp != 0 {
        sb_barrier_wait(&mut worker_barrier);
        return 0 as *mut libc::c_void;
    } else {
        tmp___0 = pthread_cond_init(
            &mut queue_cond as *mut pthread_cond_t,
            0 as *mut libc::c_void as *const pthread_condattr_t,
        );
        if tmp___0 != 0 {
            sb_barrier_wait(&mut worker_barrier);
            return 0 as *mut libc::c_void;
        }
    }
    log_text(
        LOG_DEBUG,
        b"Event generating thread started\0" as *const u8 as *const libc::c_char,
    );
    tmp___1 = sb_barrier_wait(&mut worker_barrier);
    if tmp___1 < 0 as libc::c_int {
        return 0 as *mut libc::c_void;
    }
    eventgen_thread_created = 1 as libc::c_int;
    lambda = 1e9f64 / sb_globals.tx_rate as libc::c_double;
    tmp___2 = sb_timer_value(&mut sb_exec_timer);
    curr_ns = tmp___2;
    tmp___3 = sb_rand_exp(lambda);
    intr_ns = tmp___3 as uint64_t;
    next_ns = curr_ns.wrapping_add(intr_ns);
    i = 0 as libc::c_int;
    loop {
        curr_ns = sb_timer_value(&mut sb_exec_timer);
        tmp___4 = sb_rand_exp(lambda);
        intr_ns = tmp___4 as uint64_t;
        next_ns = (next_ns as libc::c_ulong).wrapping_add(intr_ns) as uint64_t
            as uint64_t;
        if sb_globals.max_time_ns > 0 as libc::c_ulong {
            tmp___5 = (curr_ns >= sb_globals.max_time_ns) as libc::c_int as libc::c_long;
            if tmp___5 != 0 {
                pthread_cond_broadcast(&mut queue_cond);
                return 0 as *mut libc::c_void;
            }
        }
        if next_ns > curr_ns {
            sb_nanosleep(next_ns.wrapping_sub(curr_ns));
        }
        queue_array[i as usize] = sb_timer_value(&mut sb_exec_timer);
        tmp___6 = ck_ring_enqueue_spmc(
            &mut queue_ring,
            queue_ring_buffer.as_mut_ptr(),
            &mut *queue_array.as_mut_ptr().offset(i as isize) as *mut uint64_t
                as *const libc::c_void,
        );
        if tmp___6 as libc::c_int == 0 as libc::c_int {
            sb_globals.error = 1 as libc::c_int;
            log_text(
                LOG_FATAL,
                b"The event queue is full. This means the worker threads are unable to keep up with the specified event generation rate\0"
                    as *const u8 as *const libc::c_char,
            );
            pthread_cond_broadcast(&mut queue_cond);
            return 0 as *mut libc::c_void;
        }
        pthread_cond_signal(&mut queue_cond);
        i = (i + 1 as libc::c_int) % 131072 as libc::c_int;
    };
}
unsafe extern "C" fn report_thread_proc(
    mut arg: *mut libc::c_void,
) -> *mut libc::c_void {
    let mut pause_ns: libc::c_ulonglong = 0;
    let mut prev_ns: libc::c_ulonglong = 0;
    let mut next_ns: libc::c_ulonglong = 0;
    let mut curr_ns: libc::c_ulonglong = 0;
    let mut interval_ns: libc::c_ulonglong = 0;
    let mut tmp: bool = false;
    let mut tmp___0: libc::c_int = 0;
    let mut __cancel_buf: __pthread_unwind_buf_t = __pthread_unwind_buf_t {
        __cancel_jmp_buf: [__anonstruct___cancel_jmp_buf_572769531 {
            __cancel_jmp_buf: [0; 8],
            __mask_was_saved: 0,
        }; 1],
        __pad: [0 as *mut libc::c_void; 4],
    };
    let mut __cancel_routine: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()> = None;
    let mut __cancel_arg: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut __not_first_call: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_long = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: uint64_t = 0;
    let mut tmp___5: uint64_t = 0;
    interval_ns = (sb_globals.report_interval as uint64_t)
        .wrapping_mul(1000000000 as libc::c_ulong) as libc::c_ulonglong;
    sb_tls_thread_id = sb_globals.threads as libc::c_int;
    sb_rand_thread_init();
    tmp = sb_lua_loaded();
    if tmp {
        tmp___0 = sb_lua_report_thread_init();
        if tmp___0 != 0 {
            return 0 as *mut libc::c_void;
        }
    }
    __cancel_routine = Some(
        sb_lua_report_thread_done as unsafe extern "C" fn(*mut libc::c_void) -> (),
    );
    __cancel_arg = 0 as *mut libc::c_void;
    tmp___1 = __sigsetjmp(
        (__cancel_buf.__cancel_jmp_buf).as_mut_ptr() as *mut libc::c_void
            as *mut __jmp_buf_tag,
        0 as libc::c_int,
    );
    __not_first_call = tmp___1;
    tmp___2 = __not_first_call as libc::c_long;
    if tmp___2 != 0 {
        (Some(__cancel_routine.expect("non-null function pointer")))
            .expect("non-null function pointer")(__cancel_arg);
        __pthread_unwind_next(&mut __cancel_buf);
    }
    __pthread_register_cancel(&mut __cancel_buf);
    log_text(
        LOG_DEBUG,
        b"Reporting thread started\0" as *const u8 as *const libc::c_char,
    );
    tmp___3 = sb_barrier_wait(&mut report_barrier);
    if tmp___3 < 0 as libc::c_int {
        return 0 as *mut libc::c_void;
    }
    report_thread_created = 1 as libc::c_int;
    pause_ns = interval_ns;
    tmp___4 = sb_timer_value(&mut sb_exec_timer);
    prev_ns = (tmp___4 as libc::c_ulonglong).wrapping_add(interval_ns);
    loop {
        sb_nanosleep(pause_ns as uint64_t);
        report_intermediate();
        tmp___5 = sb_timer_value(&mut sb_exec_timer);
        curr_ns = tmp___5 as libc::c_ulonglong;
        loop {
            next_ns = prev_ns.wrapping_add(interval_ns);
            prev_ns = next_ns;
            if !(curr_ns >= next_ns) {
                break;
            }
        }
        pause_ns = next_ns.wrapping_sub(curr_ns);
    };
}
unsafe extern "C" fn checkpoints_thread_proc(
    mut arg: *mut libc::c_void,
) -> *mut libc::c_void {
    let mut next_ns: libc::c_ulonglong = 0;
    let mut curr_ns: libc::c_ulonglong = 0;
    let mut i: libc::c_uint = 0;
    let mut tmp: bool = false;
    let mut tmp___0: libc::c_int = 0;
    let mut __cancel_buf: __pthread_unwind_buf_t = __pthread_unwind_buf_t {
        __cancel_jmp_buf: [__anonstruct___cancel_jmp_buf_572769531 {
            __cancel_jmp_buf: [0; 8],
            __mask_was_saved: 0,
        }; 1],
        __pad: [0 as *mut libc::c_void; 4],
    };
    let mut __cancel_routine: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()> = None;
    let mut __cancel_arg: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut __not_first_call: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_long = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: uint64_t = 0;
    let mut tmp___5: uint64_t = 0;
    sb_tls_thread_id = sb_globals.threads as libc::c_int;
    sb_rand_thread_init();
    tmp = sb_lua_loaded();
    if tmp {
        tmp___0 = sb_lua_report_thread_init();
        if tmp___0 != 0 {
            return 0 as *mut libc::c_void;
        }
    }
    __cancel_routine = Some(
        sb_lua_report_thread_done as unsafe extern "C" fn(*mut libc::c_void) -> (),
    );
    __cancel_arg = 0 as *mut libc::c_void;
    tmp___1 = __sigsetjmp(
        (__cancel_buf.__cancel_jmp_buf).as_mut_ptr() as *mut libc::c_void
            as *mut __jmp_buf_tag,
        0 as libc::c_int,
    );
    __not_first_call = tmp___1;
    tmp___2 = __not_first_call as libc::c_long;
    if tmp___2 != 0 {
        (Some(__cancel_routine.expect("non-null function pointer")))
            .expect("non-null function pointer")(__cancel_arg);
        __pthread_unwind_next(&mut __cancel_buf);
    }
    __pthread_register_cancel(&mut __cancel_buf);
    log_text(
        LOG_DEBUG,
        b"Checkpoints report thread started\0" as *const u8 as *const libc::c_char,
    );
    tmp___3 = sb_barrier_wait(&mut report_barrier);
    if tmp___3 < 0 as libc::c_int {
        return 0 as *mut libc::c_void;
    }
    checkpoints_thread_created = 1 as libc::c_int;
    i = 0 as libc::c_uint;
    while i < sb_globals.n_checkpoints {
        next_ns = (sb_globals.checkpoints[i as usize] as uint64_t)
            .wrapping_mul(1000000000 as libc::c_ulong) as libc::c_ulonglong;
        tmp___4 = sb_timer_value(&mut sb_exec_timer);
        curr_ns = tmp___4 as libc::c_ulonglong;
        if !(next_ns <= curr_ns) {
            sb_nanosleep(next_ns.wrapping_sub(curr_ns) as uint64_t);
            tmp___5 = sb_timer_value(&mut sb_exec_timer);
            log_timestamp(
                LOG_NOTICE,
                tmp___5 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
                b"Checkpoint report:\0" as *const u8 as *const libc::c_char,
            );
            report_cumulative();
        }
        i = i.wrapping_add(1);
    }
    __pthread_unregister_cancel(&mut __cancel_buf);
    (Some(__cancel_routine.expect("non-null function pointer")))
        .expect("non-null function pointer")(__cancel_arg);
    return 0 as *mut libc::c_void;
}
unsafe extern "C" fn threads_started_callback(
    mut arg: *mut libc::c_void,
) -> libc::c_int {
    if sb_globals.error != 0 {
        return 1 as libc::c_int;
    }
    sb_globals.threads_running = sb_globals.threads;
    sb_timer_start(&mut sb_exec_timer);
    sb_timer_copy(&mut sb_intermediate_timer, &mut sb_exec_timer);
    sb_timer_copy(&mut sb_checkpoint_timer, &mut sb_exec_timer);
    log_text(LOG_NOTICE, b"Threads started!\n\0" as *const u8 as *const libc::c_char);
    return 0 as libc::c_int;
}
unsafe extern "C" fn run_test(mut test: *mut sb_test_t_0) -> libc::c_int {
    let mut err: libc::c_int = 0;
    let mut report_thread: pthread_t = 0;
    let mut checkpoints_thread: pthread_t = 0;
    let mut eventgen_thread: pthread_t = 0;
    let mut barrier_threads: libc::c_uint = 0;
    let mut old_max_events: uint64_t = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut stat___0: sb_stat_t = sb_stat_t {
        threads_running: 0,
        time_interval: 0.,
        time_total: 0.,
        latency_pct: 0.,
        latency_min: 0.,
        latency_max: 0.,
        latency_avg: 0.,
        latency_sum: 0.,
        events: 0,
        reads: 0,
        writes: 0,
        other: 0,
        errors: 0,
        reconnects: 0,
        bytes_read: 0,
        bytes_written: 0,
        queue_length: 0,
        concurrency: 0,
    };
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: libc::c_int = 0;
    let mut tmp___9: libc::c_int = 0;
    let mut tmp___10: libc::c_int = 0;
    let mut tmp___11: libc::c_int = 0;
    old_max_events = 0 as libc::c_int as uint64_t;
    if ::std::mem::transmute::<Option::<sb_op_init>, libc::c_ulong>((*test).ops.init)
        != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp = (Some(((*test).ops.init).expect("non-null function pointer")))
            .expect("non-null function pointer")();
        if tmp != 0 as libc::c_int {
            return 1 as libc::c_int;
        }
    }
    print_run_mode(test);
    sb_timer_init(&mut sb_exec_timer);
    sb_timer_init(&mut sb_intermediate_timer);
    sb_timer_init(&mut sb_checkpoint_timer);
    if ::std::mem::transmute::<
        Option::<sb_op_prepare>,
        libc::c_ulong,
    >((*test).ops.prepare) != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp___0 = (Some(((*test).ops.prepare).expect("non-null function pointer")))
            .expect("non-null function pointer")();
        if tmp___0 != 0 as libc::c_int {
            return 1 as libc::c_int;
        }
    }
    pthread_mutex_init(
        &mut sb_globals.exec_mutex,
        0 as *mut libc::c_void as *const pthread_mutexattr_t,
    );
    sb_globals.threads_running = 0 as libc::c_uint;
    barrier_threads = (1 as libc::c_uint)
        .wrapping_add(sb_globals.threads)
        .wrapping_add(
            (sb_globals.tx_rate > 0 as libc::c_uint) as libc::c_int as libc::c_uint,
        );
    tmp___1 = sb_barrier_init(
        &mut worker_barrier,
        barrier_threads,
        Some(
            threads_started_callback
                as unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int,
        ),
        0 as *mut libc::c_void,
    );
    if tmp___1 != 0 {
        log_errno(
            LOG_FATAL,
            b"sb_barrier_init() failed\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    barrier_threads = (1 as libc::c_int
        + (sb_globals.report_interval > 0 as libc::c_uint) as libc::c_int
        + (sb_globals.n_checkpoints > 0 as libc::c_uint) as libc::c_int) as libc::c_uint;
    tmp___2 = sb_barrier_init(
        &mut report_barrier,
        barrier_threads,
        ::std::mem::transmute::<
            *mut libc::c_void,
            Option::<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int>,
        >(0 as *mut libc::c_void),
        0 as *mut libc::c_void,
    );
    if tmp___2 != 0 {
        log_errno(
            LOG_FATAL,
            b"sb_barrier_init() failed\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    if sb_globals.report_interval > 0 as libc::c_uint {
        err = sb_thread_create(
            &mut report_thread,
            &mut sb_thread_attr as *mut pthread_attr_t as *const pthread_attr_t,
            Some(
                report_thread_proc
                    as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
            ),
            0 as *mut libc::c_void,
        );
        if err != 0 as libc::c_int {
            log_errno(
                LOG_FATAL,
                b"sb_thread_create() for the reporting thread failed.\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    if sb_globals.tx_rate > 0 as libc::c_uint {
        err = sb_thread_create(
            &mut eventgen_thread,
            &mut sb_thread_attr as *mut pthread_attr_t as *const pthread_attr_t,
            Some(
                eventgen_thread_proc
                    as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
            ),
            0 as *mut libc::c_void,
        );
        if err != 0 as libc::c_int {
            log_errno(
                LOG_FATAL,
                b"sb_thread_create() for the reporting thread failed.\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    if sb_globals.n_checkpoints > 0 as libc::c_uint {
        err = sb_thread_create(
            &mut checkpoints_thread,
            &mut sb_thread_attr as *mut pthread_attr_t as *const pthread_attr_t,
            Some(
                checkpoints_thread_proc
                    as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
            ),
            0 as *mut libc::c_void,
        );
        if err != 0 as libc::c_int {
            log_errno(
                LOG_FATAL,
                b"sb_thread_create() for the checkpoint thread failed.\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    err = sb_thread_create_workers(
        Some(
            worker_thread as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
        ),
    );
    if err != 0 {
        return err;
    }
    signal(
        14 as libc::c_int,
        Some(
            sigalrm_thread_init_timeout_handler
                as unsafe extern "C" fn(libc::c_int) -> (),
        ),
    );
    alarm(thread_init_timeout as libc::c_uint);
    if sb_globals.warmup_time > 0 as libc::c_int {
        old_max_events = sb_globals.max_events;
        sb_globals.max_events = 0 as libc::c_int as uint64_t;
    }
    tmp___3 = sb_barrier_wait(&mut worker_barrier);
    if tmp___3 < 0 as libc::c_int {
        log_text(
            LOG_FATAL,
            b"Threads initialization failed!\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    alarm(0 as libc::c_uint);
    if sb_globals.force_shutdown != 0 {
        signal(
            14 as libc::c_int,
            Some(
                sigalrm_forced_shutdown_handler
                    as unsafe extern "C" fn(libc::c_int) -> (),
            ),
        );
        alarm(
            (sb_globals.max_time_ns as libc::c_double
                / 1000000000 as libc::c_int as libc::c_double
                + sb_globals.timeout as libc::c_double) as libc::c_uint,
        );
    }
    if sb_globals.warmup_time > 0 as libc::c_int {
        log_text(
            LOG_NOTICE,
            b"Warming up for %d seconds...\n\0" as *const u8 as *const libc::c_char,
            sb_globals.warmup_time,
        );
        usleep((sb_globals.warmup_time * 1000000 as libc::c_int) as __useconds_t);
        ck_pr_md_store_64(&mut sb_globals.max_events, old_max_events);
        checkpoint(&mut stat___0);
    }
    tmp___4 = sb_barrier_wait(&mut report_barrier);
    if tmp___4 < 0 as libc::c_int {
        log_text(
            LOG_FATAL,
            b"Failed to signal reporting threads\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    err = sb_thread_join_workers();
    if err != 0 {
        return err;
    }
    sb_timer_stop(&mut sb_exec_timer);
    sb_timer_stop(&mut sb_intermediate_timer);
    sb_timer_stop(&mut sb_checkpoint_timer);
    ck_pr_md_store_uint(&mut sb_globals.report_interval, 0 as libc::c_uint);
    alarm(0 as libc::c_uint);
    log_text(LOG_INFO, b"Done.\n\0" as *const u8 as *const libc::c_char);
    if ::std::mem::transmute::<
        Option::<sb_op_cleanup>,
        libc::c_ulong,
    >((*test).ops.cleanup) != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp___5 = (Some(((*test).ops.cleanup).expect("non-null function pointer")))
            .expect("non-null function pointer")();
        if tmp___5 != 0 as libc::c_int {
            return 1 as libc::c_int;
        }
    }
    if report_thread_created != 0 {
        tmp___6 = sb_thread_cancel(report_thread);
        if tmp___6 != 0 {
            log_errno(
                LOG_FATAL,
                b"Terminating the reporting thread failed.\0" as *const u8
                    as *const libc::c_char,
            );
        } else {
            tmp___7 = sb_thread_join(
                report_thread,
                0 as *mut libc::c_void as *mut *mut libc::c_void,
            );
            if tmp___7 != 0 {
                log_errno(
                    LOG_FATAL,
                    b"Terminating the reporting thread failed.\0" as *const u8
                        as *const libc::c_char,
                );
            }
        }
    }
    if eventgen_thread_created != 0 {
        tmp___8 = sb_thread_cancel(eventgen_thread);
        let mut current_block_114: u64;
        if tmp___8 != 0 {
            current_block_114 = 12540068422418179691;
        } else {
            tmp___9 = sb_thread_join(
                eventgen_thread,
                0 as *mut libc::c_void as *mut *mut libc::c_void,
            );
            if tmp___9 != 0 {
                current_block_114 = 12540068422418179691;
            } else {
                current_block_114 = 10369920510435091891;
            }
        }
        match current_block_114 {
            12540068422418179691 => {
                if sb_globals.max_time_ns == 0 as libc::c_ulong {
                    log_text(
                        LOG_FATAL,
                        b"Terminating the event generator thread failed.\0" as *const u8
                            as *const libc::c_char,
                    );
                }
            }
            _ => {}
        }
    }
    if checkpoints_thread_created != 0 {
        tmp___10 = sb_thread_cancel(checkpoints_thread);
        if tmp___10 != 0 {
            log_errno(
                LOG_FATAL,
                b"Terminating the checkpoint thread failed.\0" as *const u8
                    as *const libc::c_char,
            );
        } else {
            tmp___11 = sb_thread_join(
                checkpoints_thread,
                0 as *mut libc::c_void as *mut *mut libc::c_void,
            );
            if tmp___11 != 0 {
                log_errno(
                    LOG_FATAL,
                    b"Terminating the checkpoint thread failed.\0" as *const u8
                        as *const libc::c_char,
                );
            }
        }
    }
    if sb_globals.error == 0 {
        if sb_globals.histogram != 0 {
            log_text(
                LOG_NOTICE,
                b"Latency histogram (values are in milliseconds)\0" as *const u8
                    as *const libc::c_char,
            );
            sb_histogram_print(&mut sb_latency_histogram);
            log_text(LOG_NOTICE, b" \0" as *const u8 as *const libc::c_char);
        }
        report_cumulative();
    }
    pthread_mutex_destroy(&mut sb_globals.exec_mutex);
    if ::std::mem::transmute::<Option::<sb_op_done>, libc::c_ulong>((*test).ops.done)
        != 0 as *mut libc::c_void as libc::c_ulong
    {
        (Some(((*test).ops.done).expect("non-null function pointer")))
            .expect("non-null function pointer")();
    }
    return (sb_globals.error != 0 as libc::c_int) as libc::c_int;
}
unsafe extern "C" fn find_test(mut name: *const libc::c_char) -> *mut sb_test_t_0 {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut test: *mut sb_test_t_0 = 0 as *mut sb_test_t_0;
    let mut tmp: libc::c_int = 0;
    pos = tests.next_p;
    while pos as libc::c_ulong != &mut tests as *mut sb_list_t as libc::c_ulong {
        test = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut sb_test_t_0)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut sb_test_t_0;
        tmp = strcmp((*test).sname, name);
        if tmp == 0 {
            return test;
        }
        pos = (*pos).next_p;
    }
    return 0 as *mut libc::c_void as *mut sb_test_t_0;
}
unsafe extern "C" fn checkpoint_cmp(
    mut a_ptr: *const libc::c_void,
    mut b_ptr: *const libc::c_void,
) -> libc::c_int {
    let mut a: libc::c_uint = 0;
    let mut b: libc::c_uint = 0;
    a = *(a_ptr as *const libc::c_uint);
    b = *(b_ptr as *const libc::c_uint);
    return a.wrapping_sub(b) as libc::c_int;
}
unsafe extern "C" fn init() -> libc::c_int {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut checkpoints_list: *mut sb_list_t = 0 as *mut sb_list_t;
    let mut pos_val: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut val: *mut value_t = 0 as *mut value_t;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut max_time: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut endptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: libc::c_long = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut err: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: libc::c_int = 0;
    let mut tmp___9: libc::c_int = 0;
    let mut endptr___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut res: libc::c_long = 0;
    let mut tmp___10: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___11: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut i: libc::c_uint = 0;
    let mut tmp___12: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp___0 = sb_get_value_int(b"threads\0" as *const u8 as *const libc::c_char);
    sb_globals.threads = tmp___0 as libc::c_uint;
    thread_init_timeout = sb_get_value_int(
        b"thread-init-timeout\0" as *const u8 as *const libc::c_char,
    );
    if sb_globals.threads <= 0 as libc::c_uint {
        log_text(
            LOG_FATAL,
            b"Invalid value for --threads: %d.\n\0" as *const u8 as *const libc::c_char,
            sb_globals.threads,
        );
        return 1 as libc::c_int;
    }
    tmp___1 = sb_get_value_int(b"events\0" as *const u8 as *const libc::c_char);
    sb_globals.max_events = tmp___1 as uint64_t;
    sb_globals
        .warmup_time = sb_get_value_int(
        b"warmup-time\0" as *const u8 as *const libc::c_char,
    );
    if sb_globals.warmup_time < 0 as libc::c_int {
        log_text(
            LOG_FATAL,
            b"Invalid value for --warmup-time: %d.\n\0" as *const u8
                as *const libc::c_char,
            sb_globals.warmup_time,
        );
        return 1 as libc::c_int;
    }
    tmp___2 = sb_get_value_int(b"time\0" as *const u8 as *const libc::c_char);
    max_time = tmp___2;
    sb_globals
        .max_time_ns = (max_time as uint64_t).wrapping_mul(1000000000 as libc::c_ulong);
    if sb_globals.max_events == 0 {
        if sb_globals.max_time_ns == 0 {
            log_text(
                LOG_WARNING,
                b"Both event and time limits are disabled, running an endless test\0"
                    as *const u8 as *const libc::c_char,
            );
        }
    }
    if sb_globals.max_time_ns > 0 as libc::c_ulong {
        if sb_globals.warmup_time > 0 as libc::c_int {
            sb_globals
                .max_time_ns = (sb_globals.max_time_ns as libc::c_ulong)
                .wrapping_add(
                    (sb_globals.warmup_time as uint64_t)
                        .wrapping_mul(1000000000 as libc::c_ulong),
                ) as uint64_t as uint64_t;
        }
        tmp = sb_get_value_string(
            b"forced-shutdown\0" as *const u8 as *const libc::c_char,
        );
        if tmp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            sb_globals.force_shutdown = 1 as libc::c_int;
            sb_globals
                .timeout = (sb_globals.max_time_ns as libc::c_double
                / 1000000000 as libc::c_int as libc::c_double
                / 20 as libc::c_int as libc::c_double) as libc::c_uint;
        } else {
            tmp___4 = strcasecmp(
                tmp as *const libc::c_char,
                b"off\0" as *const u8 as *const libc::c_char,
            );
            if tmp___4 != 0 {
                sb_globals.force_shutdown = 1 as libc::c_int;
                tmp___3 = strtol(
                    tmp as *const libc::c_char,
                    &mut endptr as *mut *mut libc::c_char,
                    10 as libc::c_int,
                );
                sb_globals.timeout = tmp___3 as libc::c_uint;
                if *endptr as libc::c_int == 37 as libc::c_int {
                    sb_globals
                        .timeout = (sb_globals.timeout as libc::c_double
                        * (sb_globals.max_time_ns as libc::c_double
                            / 1000000000 as libc::c_int as libc::c_double)
                        / 100 as libc::c_int as libc::c_double) as libc::c_uint;
                } else if *tmp as libc::c_int == 0 as libc::c_int {
                    log_text(
                        LOG_FATAL,
                        b"Invalid value for --forced-shutdown: '%s'\0" as *const u8
                            as *const libc::c_char,
                        tmp,
                    );
                    return 1 as libc::c_int;
                } else {
                    if *endptr as libc::c_int != 0 as libc::c_int {
                        log_text(
                            LOG_FATAL,
                            b"Invalid value for --forced-shutdown: '%s'\0" as *const u8
                                as *const libc::c_char,
                            tmp,
                        );
                        return 1 as libc::c_int;
                    }
                }
            } else {
                sb_globals.force_shutdown = 0 as libc::c_int;
            }
        }
    }
    err = sb_thread_init();
    if err != 0 {
        return err;
    }
    tmp___5 = sb_get_value_flag(b"debug\0" as *const u8 as *const libc::c_char);
    sb_globals.debug = tmp___5 as libc::c_uchar;
    if sb_globals.debug != 0 {
        opt = sb_find_option(b"verbosity\0" as *const u8 as *const libc::c_char);
        if opt as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            set_option(
                (*opt).name as *const libc::c_char,
                b"5\0" as *const u8 as *const libc::c_char,
                (*opt).type_0,
            );
        }
    }
    tmp___6 = sb_get_value_flag(b"validate\0" as *const u8 as *const libc::c_char);
    sb_globals.validate = tmp___6 as libc::c_uchar;
    tmp___7 = sb_rand_init();
    if tmp___7 != 0 {
        return 1 as libc::c_int;
    }
    tmp___8 = sb_get_value_int(b"rate\0" as *const u8 as *const libc::c_char);
    sb_globals.tx_rate = tmp___8 as libc::c_uint;
    tmp___9 = sb_get_value_int(b"report-interval\0" as *const u8 as *const libc::c_char);
    sb_globals.report_interval = tmp___9 as libc::c_uint;
    sb_globals.n_checkpoints = 0 as libc::c_uint;
    checkpoints_list = sb_get_value_list(
        b"report-checkpoints\0" as *const u8 as *const libc::c_char,
    );
    pos_val = (*checkpoints_list).next_p;
    while pos_val as libc::c_ulong != checkpoints_list as libc::c_ulong {
        val = (pos_val as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        res = strtol(
            (*val).data as *const libc::c_char,
            &mut endptr___0 as *mut *mut libc::c_char,
            10 as libc::c_int,
        );
        if *endptr___0 as libc::c_int != 0 as libc::c_int {
            log_text(
                LOG_FATAL,
                b"Invalid value for --report-checkpoints: '%s'\0" as *const u8
                    as *const libc::c_char,
                (*val).data,
            );
            return 1 as libc::c_int;
        } else {
            if res < 0 as libc::c_long {
                log_text(
                    LOG_FATAL,
                    b"Invalid value for --report-checkpoints: '%s'\0" as *const u8
                        as *const libc::c_char,
                    (*val).data,
                );
                return 1 as libc::c_int;
            } else {
                if res > 2147483647 as libc::c_long {
                    log_text(
                        LOG_FATAL,
                        b"Invalid value for --report-checkpoints: '%s'\0" as *const u8
                            as *const libc::c_char,
                        (*val).data,
                    );
                    return 1 as libc::c_int;
                }
            }
        }
        sb_globals.n_checkpoints = (sb_globals.n_checkpoints).wrapping_add(1);
        if sb_globals.n_checkpoints > 256 as libc::c_uint {
            log_text(
                LOG_FATAL,
                b"Too many checkpoints in --report-checkpoints (up to %d can be defined)\0"
                    as *const u8 as *const libc::c_char,
                256 as libc::c_int,
            );
            return 1 as libc::c_int;
        }
        sb_globals
            .checkpoints[(sb_globals.n_checkpoints).wrapping_sub(1 as libc::c_uint)
            as usize] = res as libc::c_uint;
        pos_val = (*pos_val).next_p;
    }
    if sb_globals.n_checkpoints > 0 as libc::c_uint {
        qsort(
            (sb_globals.checkpoints).as_mut_ptr() as *mut libc::c_void,
            sb_globals.n_checkpoints as size_t,
            ::std::mem::size_of::<libc::c_uint>() as libc::c_ulong,
            Some(
                checkpoint_cmp
                    as unsafe extern "C" fn(
                        *const libc::c_void,
                        *const libc::c_void,
                    ) -> libc::c_int,
            ),
        );
    }
    tmp___10 = sb_alloc_per_thread_array(
        ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
    );
    timers = tmp___10 as *mut sb_timer_t;
    tmp___11 = sb_alloc_per_thread_array(
        ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
    );
    timers_copy = tmp___11 as *mut sb_timer_t;
    if timers as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        log_text(
            LOG_FATAL,
            b"Memory allocation failure\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    } else {
        if timers_copy as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            log_text(
                LOG_FATAL,
                b"Memory allocation failure\0" as *const u8 as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    i = 0 as libc::c_uint;
    while i < sb_globals.threads {
        sb_timer_init(timers.offset(i as isize));
        i = i.wrapping_add(1);
    }
    tmp___12 = sb_get_value_string(b"luajit-cmd\0" as *const u8 as *const libc::c_char);
    sb_globals.luajit_cmd = tmp___12 as *const libc::c_char;
    return 0 as libc::c_int;
}
unsafe fn main_0(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut current_block: u64;
    let mut test: *mut sb_test_t_0 = 0 as *mut sb_test_t_0;
    let mut rc: libc::c_int = 0;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: libc::c_int = 0;
    let mut tmp___9: libc::c_int = 0;
    let mut tmp___10: libc::c_int = 0;
    let mut tmp___11: libc::c_int = 0;
    let mut tmp___12: libc::c_int = 0;
    let mut tmp___14: libc::c_int = 0;
    let mut tmp___15: libc::c_int = 0;
    let mut tmp___16: libc::c_int = 0;
    let mut tmp___17: libc::c_int = 0;
    let mut tmp___18: libc::c_int = 0;
    let mut tmp___19: bool = false;
    let mut tmp___20: bool = false;
    let mut tmp___21: bool = false;
    test = 0 as *mut libc::c_void as *mut sb_test_t_0;
    sb_globals.argc = argc;
    tmp = malloc(
        (argc as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong),
    );
    sb_globals.argv = tmp as *mut *mut libc::c_char;
    memcpy(
        sb_globals.argv as *mut libc::c_void,
        argv as *const libc::c_void,
        (argc as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong),
    );
    sb_options_init();
    tmp___0 = log_register();
    if tmp___0 != 0 {
        return 1 as libc::c_int;
    }
    tmp___1 = register_tests();
    if tmp___1 != 0 {
        fprintf(
            stderr,
            b"Failed to register tests.\n\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    tmp___2 = parse_general_arguments(argc, argv);
    if tmp___2 != 0 {
        return 1 as libc::c_int;
    }
    tmp___3 = sb_get_value_flag(b"help\0" as *const u8 as *const libc::c_char);
    if tmp___3 != 0 {
        print_help();
        return 0 as libc::c_int;
    }
    tmp___4 = sb_get_value_flag(b"version\0" as *const u8 as *const libc::c_char);
    if tmp___4 != 0 {
        printf(
            b"%s\n\0" as *const u8 as *const libc::c_char,
            b"sysbench 1.1.0-df89d34\0" as *const u8 as *const libc::c_char,
        );
        return 0 as libc::c_int;
    }
    tmp___5 = init();
    if tmp___5 != 0 {
        return 1 as libc::c_int
    } else {
        tmp___6 = log_init();
        if tmp___6 != 0 {
            return 1 as libc::c_int
        } else {
            tmp___7 = sb_counters_init();
            if tmp___7 != 0 {
                return 1 as libc::c_int;
            }
        }
    }
    print_header();
    's_340: {
        if sb_globals.testname as libc::c_ulong
            != 0 as *mut libc::c_void as libc::c_ulong
        {
            tmp___11 = strcmp(
                sb_globals.testname,
                b"-\0" as *const u8 as *const libc::c_char,
            );
            if tmp___11 != 0 {
                test = find_test(sb_globals.testname);
                if test as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    if sb_globals.cmdname as libc::c_ulong
                        == 0 as *mut libc::c_void as libc::c_ulong
                    {
                        fprintf(
                            stderr,
                            b"The '%s' test requires a command argument. See 'sysbench %s help'\n\0"
                                as *const u8 as *const libc::c_char,
                            (*test).sname,
                            (*test).sname,
                        );
                        return 1 as libc::c_int;
                    }
                }
                if test as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                    test = sb_load_lua(sb_globals.testname);
                    if test as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                        return 1 as libc::c_int;
                    }
                    if sb_globals.cmdname as libc::c_ulong
                        == 0 as *mut libc::c_void as libc::c_ulong
                    {
                        if test as libc::c_ulong
                            != 0 as *mut libc::c_void as libc::c_ulong
                        {
                            tmp___8 = 0 as libc::c_int;
                        } else {
                            tmp___8 = 1 as libc::c_int;
                        }
                        return tmp___8;
                    }
                }
                break 's_340;
            }
        }
        sb_globals.testname = 0 as *mut libc::c_void as *const libc::c_char;
        tmp___9 = isatty(0 as libc::c_int);
        if tmp___9 != 0 {
            log_text(
                LOG_NOTICE,
                b"Reading the script from the standard input:\n\0" as *const u8
                    as *const libc::c_char,
            );
        }
        test = sb_load_lua(0 as *mut libc::c_void as *const libc::c_char);
        if test as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            tmp___10 = 0 as libc::c_int;
        } else {
            tmp___10 = 1 as libc::c_int;
        }
        return tmp___10;
    }
    current_test = test;
    tmp___12 = parse_test_arguments(test, argc, argv);
    if tmp___12 != 0 {
        return 1 as libc::c_int;
    }
    tmp___19 = sb_lua_loaded();
    if tmp___19 {
        tmp___20 = sb_lua_custom_command_defined(sb_globals.cmdname);
        if tmp___20 {
            rc = sb_lua_call_custom_command(sb_globals.cmdname);
            current_block = 10610812561313984246;
        } else {
            current_block = 1214473980952716406;
        }
    } else {
        current_block = 1214473980952716406;
    }
    match current_block {
        1214473980952716406 => {
            tmp___18 = strcmp(
                sb_globals.cmdname,
                b"help\0" as *const u8 as *const libc::c_char,
            );
            if tmp___18 != 0 {
                tmp___17 = strcmp(
                    sb_globals.cmdname,
                    b"prepare\0" as *const u8 as *const libc::c_char,
                );
                if tmp___17 != 0 {
                    tmp___16 = strcmp(
                        sb_globals.cmdname,
                        b"cleanup\0" as *const u8 as *const libc::c_char,
                    );
                    if tmp___16 != 0 {
                        tmp___15 = strcmp(
                            sb_globals.cmdname,
                            b"run\0" as *const u8 as *const libc::c_char,
                        );
                        if tmp___15 != 0 {
                            fprintf(
                                stderr,
                                b"Unknown command: %s\n\0" as *const u8
                                    as *const libc::c_char,
                                sb_globals.cmdname,
                            );
                            rc = 1 as libc::c_int;
                        } else {
                            tmp___14 = run_test(test);
                            if tmp___14 != 0 {
                                rc = 1 as libc::c_int;
                            } else {
                                rc = 0 as libc::c_int;
                            }
                        }
                    } else if ::std::mem::transmute::<
                            Option::<sb_builtin_cmd_func_t>,
                            libc::c_ulong,
                        >((*test).builtin_cmds.cleanup)
                            == 0 as *mut libc::c_void as libc::c_ulong
                        {
                        fprintf(
                            stderr,
                            b"'%s' test does not implement the 'cleanup' command.\n\0"
                                as *const u8 as *const libc::c_char,
                            (*test).sname,
                        );
                        rc = 1 as libc::c_int;
                    } else {
                        rc = (Some(
                            ((*test).builtin_cmds.cleanup)
                                .expect("non-null function pointer"),
                        ))
                            .expect("non-null function pointer")();
                    }
                } else if ::std::mem::transmute::<
                        Option::<sb_builtin_cmd_func_t>,
                        libc::c_ulong,
                    >((*test).builtin_cmds.prepare)
                        == 0 as *mut libc::c_void as libc::c_ulong
                    {
                    fprintf(
                        stderr,
                        b"'%s' test does not implement the 'prepare' command.\n\0"
                            as *const u8 as *const libc::c_char,
                        (*test).sname,
                    );
                    rc = 1 as libc::c_int;
                } else {
                    rc = (Some(
                        ((*test).builtin_cmds.prepare)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")();
                }
            } else if ::std::mem::transmute::<
                    Option::<sb_builtin_cmd_func_t>,
                    libc::c_ulong,
                >((*test).builtin_cmds.help) != 0 as *mut libc::c_void as libc::c_ulong
                {
                (Some(((*test).builtin_cmds.help).expect("non-null function pointer")))
                    .expect("non-null function pointer")();
                rc = 0 as libc::c_int;
            } else if (*test).args as libc::c_ulong
                    != 0 as *mut libc::c_void as libc::c_ulong
                {
                printf(
                    b"%s options:\n\0" as *const u8 as *const libc::c_char,
                    (*test).sname,
                );
                sb_print_test_options();
                rc = 0 as libc::c_int;
            } else {
                fprintf(
                    stderr,
                    b"'%s' test does not implement the 'help' command.\n\0" as *const u8
                        as *const libc::c_char,
                    (*test).sname,
                );
                return 1 as libc::c_int;
            }
        }
        _ => {}
    }
    tmp___21 = sb_lua_loaded();
    if tmp___21 {
        sb_lua_done();
    }
    db_done();
    sb_counters_done();
    log_done();
    sb_options_done();
    sb_rand_done();
    sb_thread_done();
    free(timers as *mut libc::c_void);
    free(timers_copy as *mut libc::c_void);
    free(sb_globals.argv as *mut libc::c_void);
    return rc;
}
pub unsafe extern "C" fn sb_print_test_options() {
    if current_test as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        sb_print_options((*current_test).args);
    }
}
pub unsafe extern "C" fn sb_alloc_per_thread_array(
    mut size: size_t,
) -> *mut libc::c_void {
    let mut bsize: size_t = 0;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    bsize = ((sb_globals.threads).wrapping_add(1 as libc::c_uint) as size_t)
        .wrapping_mul(size);
    tmp = sb_memalign(bsize, 64 as libc::c_int as size_t);
    ptr = tmp;
    memset(ptr, 0 as libc::c_int, bsize);
    return ptr;
}
#[inline]
unsafe extern "C" fn ck_spinlock_fas_init(mut lock: *mut ck_spinlock_fas) {
    (*lock).value = 0 as libc::c_uint;
    ck_pr_barrier();
}
pub unsafe extern "C" fn sb_timer_init(mut t: *mut sb_timer_t) {
    memset(
        &mut (*t).time_start as *mut timespec as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<timespec>() as libc::c_ulong,
    );
    memset(
        &mut (*t).time_end as *mut timespec as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<timespec>() as libc::c_ulong,
    );
    ck_spinlock_fas_init(&mut (*t).lock);
    sb_timer_reset(t);
}
pub unsafe extern "C" fn sb_timer_reset(mut t: *mut sb_timer_t) {
    (*t).min_time = 18446744073709551615 as libc::c_ulonglong as uint64_t;
    (*t).max_time = 0 as libc::c_int as uint64_t;
    (*t).sum_time = 0 as libc::c_int as uint64_t;
    (*t).events = 0 as libc::c_int as uint64_t;
    (*t).queue_time = 0 as libc::c_int as uint64_t;
}
pub unsafe extern "C" fn sb_timer_copy(
    mut to: *mut sb_timer_t,
    mut from: *mut sb_timer_t,
) {
    memcpy(
        to as *mut libc::c_void,
        from as *const libc::c_void,
        ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
    );
    ck_spinlock_fas_init(&mut (*to).lock);
}
pub unsafe extern "C" fn sb_timer_running(mut t: *mut sb_timer_t) -> bool {
    return (((*t).time_start.tv_sec - (*t).time_end.tv_sec) as uint64_t)
        .wrapping_mul(1000000000 as libc::c_ulong)
        .wrapping_add(((*t).time_start.tv_nsec - (*t).time_end.tv_nsec) as uint64_t)
        > 0 as libc::c_ulong;
}
pub unsafe extern "C" fn sb_timer_current(mut t: *mut sb_timer_t) -> uint64_t {
    let mut tmp: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut res: uint64_t = 0;
    clock_gettime(1 as libc::c_int, &mut tmp);
    res = ((tmp.tv_sec - (*t).time_start.tv_sec) as uint64_t)
        .wrapping_mul(1000000000 as libc::c_ulong)
        .wrapping_add((tmp.tv_nsec - (*t).time_start.tv_nsec) as uint64_t);
    (*t).time_start = tmp;
    return res;
}
pub unsafe extern "C" fn sb_timer_checkpoint(
    mut t: *mut sb_timer_t,
    mut old: *mut sb_timer_t,
) {
    ck_spinlock_fas_lock(&mut (*t).lock);
    memcpy(
        old as *mut libc::c_void,
        t as *const libc::c_void,
        ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
    );
    ck_spinlock_fas_init(&mut (*old).lock);
    sb_timer_reset(t);
    ck_spinlock_fas_unlock(&mut (*t).lock);
}
pub unsafe extern "C" fn sb_timer_avg(mut t: *mut sb_timer_t) -> uint64_t {
    if (*t).events == 0 as libc::c_ulong {
        return 0 as libc::c_int as uint64_t;
    }
    return ((*t).sum_time).wrapping_div((*t).events);
}
pub unsafe extern "C" fn sb_timer_sum(mut t: *mut sb_timer_t) -> uint64_t {
    return (*t).sum_time;
}
pub unsafe extern "C" fn sb_timer_min(mut t: *mut sb_timer_t) -> uint64_t {
    if (*t).events == 0 as libc::c_ulong {
        return 0 as libc::c_int as uint64_t;
    }
    return (*t).min_time;
}
pub unsafe extern "C" fn sb_timer_max(mut t: *mut sb_timer_t) -> uint64_t {
    return (*t).max_time;
}
pub unsafe extern "C" fn sb_timer_merge(
    mut t1: *mut sb_timer_t,
    mut t2: *mut sb_timer_t,
) -> sb_timer_t {
    let mut t: sb_timer_t = sb_timer_t {
        time_start: timespec { tv_sec: 0, tv_nsec: 0 },
        time_end: timespec { tv_sec: 0, tv_nsec: 0 },
        events: 0,
        queue_time: 0,
        min_time: 0,
        max_time: 0,
        sum_time: 0,
        lock: ck_spinlock_fas_t { value: 0 },
        pad: [0; 52],
    };
    memset(
        &mut t as *mut sb_timer_t as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
    );
    t.sum_time = ((*t1).sum_time).wrapping_add((*t2).sum_time);
    t.events = ((*t1).events).wrapping_add((*t2).events);
    if (*t1).max_time > (*t2).max_time {
        t.max_time = (*t1).max_time;
    } else {
        t.max_time = (*t2).max_time;
    }
    if (*t1).min_time < (*t2).min_time {
        t.min_time = (*t1).min_time;
    } else {
        t.min_time = (*t2).min_time;
    }
    return t;
}
#[inline]
unsafe extern "C" fn toupper(mut __c: libc::c_int) -> libc::c_int {
    let mut tmp: *mut *const __int32_t = 0 as *mut *const __int32_t;
    let mut tmp___0: __int32_t = 0;
    if __c >= -(128 as libc::c_int) {
        if __c < 256 as libc::c_int {
            tmp = __ctype_toupper_loc();
            tmp___0 = *(*tmp).offset(__c as isize);
        } else {
            tmp___0 = __c;
        }
    } else {
        tmp___0 = __c;
    }
    return tmp___0;
}
static mut options: sb_list_t = sb_list_t {
    next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
    prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
};
static mut sizemods: [libc::c_char; 5] = [
    'K' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'G' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    '\u{0}' as i32 as libc::c_char,
];
static mut opt_formats: [*mut libc::c_char; 8] = [
    0 as *const libc::c_void as *mut libc::c_void as *mut libc::c_char,
    b"[=on|off]\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    b"=N\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    b"=SIZE\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    b"=N\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    b"=STRING\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    b"=[LIST,...]\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    b"=FILENAME\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
];
pub unsafe extern "C" fn sb_options_init() -> libc::c_int {
    options.next_p = &mut options;
    options.prev_p = &mut options;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_options_done() -> libc::c_int {
    free_options(&mut options);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_register_arg_set(mut set: *mut sb_arg_t) -> libc::c_int {
    let mut i: libc::c_uint = 0;
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut option_t = 0 as *mut option_t;
    i = 0 as libc::c_uint;
    while (*set.offset(i as isize)).name as libc::c_ulong
        != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp = set_option(
            (*set.offset(i as isize)).name,
            (*set.offset(i as isize)).value,
            (*set.offset(i as isize)).type_0,
        );
        opt = tmp;
        if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 1 as libc::c_int;
        }
        (*opt).validate = (*set).validate;
        i = i.wrapping_add(1);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_find_option(mut name: *const libc::c_char) -> *mut option_t {
    let mut tmp: *mut option_t = 0 as *mut option_t;
    tmp = find_option(&mut options, name);
    return tmp;
}
unsafe extern "C" fn read_config_file(mut filename: *const libc::c_char) {
    let mut fp: *mut FILE = 0 as *mut FILE;
    let mut tmp: *mut FILE = 0 as *mut FILE;
    tmp = fopen(filename, b"r\0" as *const u8 as *const libc::c_char);
    fp = tmp;
    if fp.is_null() {
        perror(filename);
    } else {
        read_config(fp, &mut options);
        fclose(fp);
    };
}
pub unsafe extern "C" fn set_option(
    mut name: *const libc::c_char,
    mut value: *const libc::c_char,
    mut type_0: sb_arg_type_t,
) -> *mut option_t {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmpbuf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: bool = false;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    opt = add_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut option_t;
    }
    free_values(&mut (*opt).values);
    (*opt).type_0 = type_0;
    if ::std::mem::transmute::<
        Option::<sb_opt_validate_t>,
        libc::c_ulong,
    >((*opt).validate) != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp___0 = (Some(((*opt).validate).expect("non-null function pointer")))
            .expect("non-null function pointer")(name, value);
        if !tmp___0 {
            return 0 as *mut libc::c_void as *mut option_t;
        }
    }
    if type_0 as libc::c_uint != 1 as libc::c_uint {
        if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return opt
        } else {
            if *value.offset(0 as libc::c_int as isize) as libc::c_int
                == 0 as libc::c_int
            {
                return opt;
            }
        }
    }
    match type_0 as libc::c_uint {
        1 => {
            if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                add_value(
                    &mut (*opt).values,
                    b"on\0" as *const u8 as *const libc::c_char,
                );
            } else {
                tmp___4 = strcmp(value, b"on\0" as *const u8 as *const libc::c_char);
                if tmp___4 != 0 {
                    tmp___5 = strcmp(
                        value,
                        b"true\0" as *const u8 as *const libc::c_char,
                    );
                    if tmp___5 != 0 {
                        tmp___6 = strcmp(
                            value,
                            b"1\0" as *const u8 as *const libc::c_char,
                        );
                        if tmp___6 != 0 {
                            tmp___1 = strcmp(
                                value,
                                b"off\0" as *const u8 as *const libc::c_char,
                            );
                            if tmp___1 != 0 {
                                tmp___2 = strcmp(
                                    value,
                                    b"false\0" as *const u8 as *const libc::c_char,
                                );
                                if tmp___2 != 0 {
                                    tmp___3 = strcmp(
                                        value,
                                        b"0\0" as *const u8 as *const libc::c_char,
                                    );
                                    if tmp___3 != 0 {
                                        return 0 as *mut libc::c_void as *mut option_t;
                                    }
                                }
                            }
                        } else {
                            add_value(
                                &mut (*opt).values,
                                b"on\0" as *const u8 as *const libc::c_char,
                            );
                        }
                    } else {
                        add_value(
                            &mut (*opt).values,
                            b"on\0" as *const u8 as *const libc::c_char,
                        );
                    }
                } else {
                    add_value(
                        &mut (*opt).values,
                        b"on\0" as *const u8 as *const libc::c_char,
                    );
                }
            }
        }
        5 | 4 | 3 | 2 => {
            add_value(&mut (*opt).values, value);
        }
        6 => {
            if !(value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong) {
                tmpbuf = strdup(value);
                tmp = tmpbuf;
                tmp = strtok(tmp, b",\0" as *const u8 as *const libc::c_char);
                while tmp as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    add_value(&mut (*opt).values, tmp as *const libc::c_char);
                    tmp = strtok(
                        0 as *mut libc::c_void as *mut libc::c_char,
                        b",\0" as *const u8 as *const libc::c_char,
                    );
                }
                free(tmpbuf as *mut libc::c_void);
            }
        }
        7 => {
            read_config_file(value);
        }
        _ => {
            printf(
                b"Unknown argument type: %d\0" as *const u8 as *const libc::c_char,
                type_0 as libc::c_uint,
            );
            return 0 as *mut libc::c_void as *mut option_t;
        }
    }
    return opt;
}
pub unsafe extern "C" fn sb_print_options(mut opts: *mut sb_arg_t) {
    let mut i: libc::c_uint = 0;
    let mut len: libc::c_uint = 0;
    let mut maxlen: libc::c_uint = 0;
    let mut fmt: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: size_t = 0;
    i = 0 as libc::c_uint;
    maxlen = 0 as libc::c_uint;
    while (*opts.offset(i as isize)).name as libc::c_ulong
        != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp = strlen((*opts.offset(i as isize)).name);
        len = tmp as libc::c_uint;
        if ((*opts.offset(i as isize)).type_0 as libc::c_uint) < 8 as libc::c_uint {
            tmp___0 = strlen(
                opt_formats[(*opts.offset(i as isize)).type_0 as usize]
                    as *const libc::c_char,
            );
            tmp___1 = tmp___0;
        } else {
            tmp___1 = 8 as libc::c_int as size_t;
        }
        len = (len as size_t).wrapping_add(tmp___1) as libc::c_uint;
        if len > maxlen {
            maxlen = len;
        }
        i = i.wrapping_add(1);
    }
    i = 0 as libc::c_uint;
    while (*opts.offset(i as isize)).name as libc::c_ulong
        != 0 as *mut libc::c_void as libc::c_ulong
    {
        if ((*opts.offset(i as isize)).type_0 as libc::c_uint) < 8 as libc::c_uint {
            fmt = opt_formats[(*opts.offset(i as isize)).type_0 as usize];
        } else {
            fmt = b"=UNKNOWN\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
        }
        tmp___2 = strlen((*opts.offset(i as isize)).name);
        printf(
            b"  --%s%-*s%s\0" as *const u8 as *const libc::c_char,
            (*opts.offset(i as isize)).name,
            (maxlen as size_t).wrapping_sub(tmp___2).wrapping_add(1 as libc::c_ulong)
                as libc::c_int,
            fmt,
            (*opts.offset(i as isize)).desc,
        );
        if (*opts.offset(i as isize)).value as libc::c_ulong
            != 0 as *mut libc::c_void as libc::c_ulong
        {
            printf(
                b" [%s]\0" as *const u8 as *const libc::c_char,
                (*opts.offset(i as isize)).value,
            );
        }
        printf(b"\n\0" as *const u8 as *const libc::c_char);
        i = i.wrapping_add(1);
    }
    printf(b"\n\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn sb_opt_to_flag(mut opt: *mut option_t) -> libc::c_int {
    return !((*opt).values.next_p as libc::c_ulong
        == &mut (*opt).values as *mut sb_list_t as libc::c_ulong) as libc::c_int;
}
pub unsafe extern "C" fn sb_get_value_flag(
    mut name: *const libc::c_char,
) -> libc::c_int {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: libc::c_int = 0;
    opt = find_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_int;
    }
    tmp = sb_opt_to_flag(opt);
    return tmp;
}
pub unsafe extern "C" fn sb_opt_to_int(mut opt: *mut option_t) -> libc::c_int {
    let mut val: *mut value_t = 0 as *mut value_t;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut res: libc::c_long = 0;
    let mut endptr: *mut libc::c_char = 0 as *mut libc::c_char;
    pos = (*opt).values.next_p;
    if pos as libc::c_ulong != &mut (*opt).values as *mut sb_list_t as libc::c_ulong {
        val = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        res = strtol(
            (*val).data as *const libc::c_char,
            &mut endptr as *mut *mut libc::c_char,
            10 as libc::c_int,
        );
        if *endptr as libc::c_int != 0 as libc::c_int {
            fprintf(
                stderr,
                b"Invalid value for the '%s' option: '%s'\n\0" as *const u8
                    as *const libc::c_char,
                (*opt).name,
                (*val).data,
            );
            exit(1 as libc::c_int);
        } else {
            if res > 2147483647 as libc::c_long {
                fprintf(
                    stderr,
                    b"Invalid value for the '%s' option: '%s'\n\0" as *const u8
                        as *const libc::c_char,
                    (*opt).name,
                    (*val).data,
                );
                exit(1 as libc::c_int);
            } else {
                if res
                    < (-(0x7fffffff as libc::c_int) - 1 as libc::c_int) as libc::c_long
                {
                    fprintf(
                        stderr,
                        b"Invalid value for the '%s' option: '%s'\n\0" as *const u8
                            as *const libc::c_char,
                        (*opt).name,
                        (*val).data,
                    );
                    exit(1 as libc::c_int);
                }
            }
        }
        return res as libc::c_int;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_get_value_int(mut name: *const libc::c_char) -> libc::c_int {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: libc::c_int = 0;
    opt = find_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_int;
    }
    tmp = sb_opt_to_int(opt);
    return tmp;
}
pub unsafe extern "C" fn sb_opt_to_size(mut opt: *mut option_t) -> libc::c_ulonglong {
    let mut val: *mut value_t = 0 as *mut value_t;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut res: libc::c_ulonglong = 0;
    let mut mult: libc::c_char = 0;
    let mut rc: libc::c_int = 0;
    let mut i: libc::c_uint = 0;
    let mut n: libc::c_uint = 0;
    let mut c: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut __res: libc::c_int = 0;
    let mut tmp___0: *mut *const __int32_t = 0 as *mut *const __int32_t;
    res = 0 as libc::c_ulonglong;
    mult = 0 as libc::c_int as libc::c_char;
    pos = (*opt).values.next_p;
    if pos as libc::c_ulong != &mut (*opt).values as *mut sb_list_t as libc::c_ulong {
        val = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        res = 0 as libc::c_ulonglong;
        rc = 0 as libc::c_int;
        c = (*val).data;
        while *c as libc::c_int != 0 as libc::c_int {
            if !((*c as libc::c_int) < 48 as libc::c_int) {
                if !(*c as libc::c_int > 57 as libc::c_int) {
                    rc = 1 as libc::c_int;
                    res = res
                        .wrapping_mul(10 as libc::c_ulonglong)
                        .wrapping_add(*c as libc::c_ulonglong)
                        .wrapping_sub(48 as libc::c_ulonglong);
                    c = c.offset(1);
                    continue;
                }
            }
            if rc == 1 as libc::c_int {
                rc = 2 as libc::c_int;
                mult = *c;
            }
            break;
        }
        if rc == 2 as libc::c_int {
            n = 0 as libc::c_uint;
            while sizemods[n as usize] as libc::c_int != 0 as libc::c_int {
                if ::std::mem::size_of::<libc::c_char>() as libc::c_ulong
                    > 1 as libc::c_ulong
                {
                    __res = toupper(mult as libc::c_int);
                } else {
                    tmp___0 = __ctype_toupper_loc();
                    __res = *(*tmp___0).offset(mult as libc::c_int as isize);
                }
                if __res == sizemods[n as usize] as libc::c_int {
                    break;
                }
                n = n.wrapping_add(1);
            }
            if sizemods[n as usize] as libc::c_int != 0 as libc::c_int {
                i = 0 as libc::c_uint;
                while i <= n {
                    res = res.wrapping_mul(1024 as libc::c_ulonglong);
                    i = i.wrapping_add(1);
                }
            } else {
                res = 0 as libc::c_ulonglong;
            }
        }
    }
    return res;
}
pub unsafe extern "C" fn sb_get_value_size(
    mut name: *const libc::c_char,
) -> libc::c_ulonglong {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: libc::c_ulonglong = 0;
    opt = find_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_ulonglong;
    }
    tmp = sb_opt_to_size(opt);
    return tmp;
}
pub unsafe extern "C" fn sb_opt_to_double(mut opt: *mut option_t) -> libc::c_double {
    let mut val: *mut value_t = 0 as *mut value_t;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut res: libc::c_double = 0.;
    res = 0 as libc::c_int as libc::c_double;
    pos = (*opt).values.next_p;
    while pos as libc::c_ulong != &mut (*opt).values as *mut sb_list_t as libc::c_ulong {
        val = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        res = strtod(
            (*val).data as *const libc::c_char,
            0 as *mut libc::c_void as *mut *mut libc::c_char,
        );
        pos = (*pos).next_p;
    }
    return res;
}
pub unsafe extern "C" fn sb_get_value_double(
    mut name: *const libc::c_char,
) -> libc::c_double {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: libc::c_double = 0.;
    opt = find_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_int as libc::c_double;
    }
    tmp = sb_opt_to_double(opt);
    return tmp;
}
pub unsafe extern "C" fn sb_opt_to_string(mut opt: *mut option_t) -> *mut libc::c_char {
    let mut val: *mut value_t = 0 as *mut value_t;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    pos = (*opt).values.next_p;
    if pos as libc::c_ulong != &mut (*opt).values as *mut sb_list_t as libc::c_ulong {
        val = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        return (*val).data;
    }
    return 0 as *mut libc::c_void as *mut libc::c_char;
}
pub unsafe extern "C" fn sb_get_value_string(
    mut name: *const libc::c_char,
) -> *mut libc::c_char {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    opt = find_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = sb_opt_to_string(opt);
    return tmp;
}
pub unsafe extern "C" fn sb_opt_copy(
    mut to: *const libc::c_char,
    mut from: *const libc::c_char,
) -> bool {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut option_t = 0 as *mut option_t;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = find_option(&mut options, from);
    opt = tmp;
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_int != 0;
    }
    tmp___0 = sb_opt_to_string(opt);
    set_option(to, tmp___0 as *const libc::c_char, (*opt).type_0);
    return 1 as libc::c_int != 0;
}
pub unsafe extern "C" fn sb_opt_to_list(mut opt: *mut option_t) -> *mut sb_list_t {
    return &mut (*opt).values;
}
pub unsafe extern "C" fn sb_get_value_list(
    mut name: *const libc::c_char,
) -> *mut sb_list_t {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut sb_list_t = 0 as *mut sb_list_t;
    opt = find_option(&mut options, name);
    if opt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut sb_list_t;
    }
    tmp = sb_opt_to_list(opt);
    return tmp;
}
pub unsafe extern "C" fn sb_print_value_size(
    mut buf: *mut libc::c_char,
    mut buflen: libc::c_uint,
    mut value: libc::c_double,
) -> *mut libc::c_char {
    let mut i: libc::c_uint = 0;
    i = 0 as libc::c_uint;
    while (i as libc::c_ulong)
        < ::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong
    {
        if !(value >= 1024 as libc::c_int as libc::c_double) {
            break;
        }
        i = i.wrapping_add(1);
        value /= 1024 as libc::c_int as libc::c_double;
    }
    if i > 0 as libc::c_uint {
        snprintf(
            buf,
            buflen as size_t,
            b"%.5g%ci\0" as *const u8 as *const libc::c_char,
            value,
            sizemods[i.wrapping_sub(1 as libc::c_uint) as usize] as libc::c_int,
        );
    } else {
        snprintf(
            buf,
            buflen as size_t,
            b"%.5g\0" as *const u8 as *const libc::c_char,
            value,
        );
    }
    return buf;
}
pub unsafe extern "C" fn new_value() -> *mut value_t {
    let mut newval: *mut value_t = 0 as *mut value_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(::std::mem::size_of::<value_t>() as libc::c_ulong);
    newval = tmp as *mut value_t;
    if newval as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        memset(
            newval as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<value_t>() as libc::c_ulong,
        );
    }
    return newval;
}
pub unsafe extern "C" fn new_option() -> *mut option_t {
    let mut newopt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(::std::mem::size_of::<option_t>() as libc::c_ulong);
    newopt = tmp as *mut option_t;
    if newopt as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        memset(
            newopt as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<option_t>() as libc::c_ulong,
        );
        (*newopt).values.next_p = &mut (*newopt).values;
        (*newopt).values.prev_p = &mut (*newopt).values;
    }
    return newopt;
}
pub unsafe extern "C" fn free_values(mut values: *mut sb_list_t) {
    let mut next: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut cur: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut val: *mut value_t = 0 as *mut value_t;
    if values as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return;
    }
    cur = (*values).next_p;
    next = (*cur).next_p;
    while cur as libc::c_ulong != values as libc::c_ulong {
        val = (cur as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        if (*val).data as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            free((*val).data as *mut libc::c_void);
        }
        (*(*cur).next_p).prev_p = (*cur).prev_p;
        (*(*cur).prev_p).next_p = (*cur).next_p;
        free(val as *mut libc::c_void);
        cur = next;
        next = (*cur).next_p;
    }
}
pub unsafe extern "C" fn free_options(mut options___0: *mut sb_list_t) {
    let mut next: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut cur: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut opt: *mut option_t = 0 as *mut option_t;
    if options___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return;
    }
    cur = (*options___0).next_p;
    next = (*cur).next_p;
    while cur as libc::c_ulong != options___0 as libc::c_ulong {
        opt = (cur as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut option_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut option_t;
        if (*opt).name as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            free((*opt).name as *mut libc::c_void);
        }
        free_values(&mut (*opt).values);
        free(opt as *mut libc::c_void);
        cur = next;
        next = (*cur).next_p;
    }
}
pub unsafe extern "C" fn remove_value(
    mut values: *mut sb_list_t,
    mut valname: *mut libc::c_char,
) -> libc::c_int {
    let mut value: *mut value_t = 0 as *mut value_t;
    if values as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int
    } else {
        if valname as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 1 as libc::c_int;
        }
    }
    value = find_value(values, valname as *const libc::c_char);
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int;
    }
    if (*value).data as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free((*value).data as *mut libc::c_void);
    }
    (*(*value).listitem.next_p).prev_p = (*value).listitem.prev_p;
    (*(*value).listitem.prev_p).next_p = (*value).listitem.next_p;
    free(value as *mut libc::c_void);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn remove_option(
    mut options___0: *mut sb_list_t,
    mut optname: *mut libc::c_char,
) -> libc::c_int {
    let mut option: *mut option_t = 0 as *mut option_t;
    if options___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int
    } else {
        if optname as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 1 as libc::c_int;
        }
    }
    option = find_option(options___0, optname as *const libc::c_char);
    if option as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int;
    }
    free_values(&mut (*option).values);
    if (*option).name as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free((*option).name as *mut libc::c_void);
    }
    (*(*option).listitem.next_p).prev_p = (*option).listitem.prev_p;
    (*(*option).listitem.prev_p).next_p = (*option).listitem.next_p;
    free(option as *mut libc::c_void);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn add_value(
    mut values: *mut sb_list_t,
    mut data: *const libc::c_char,
) -> *mut value_t {
    let mut newval: *mut value_t = 0 as *mut value_t;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    if values as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut value_t
    } else {
        if data as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut value_t;
        }
    }
    newval = new_value();
    if newval as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut value_t;
    }
    tmp = strdup(data);
    (*newval).data = tmp;
    if tmp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        free(newval as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut value_t;
    }
    (*newval).listitem.prev_p = (*values).prev_p;
    (*newval).listitem.next_p = values;
    (*values).prev_p = &mut (*newval).listitem;
    (*(*newval).listitem.prev_p).next_p = &mut (*newval).listitem;
    return newval;
}
pub unsafe extern "C" fn find_value(
    mut values: *mut sb_list_t,
    mut data: *const libc::c_char,
) -> *mut value_t {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut value: *mut value_t = 0 as *mut value_t;
    let mut tmp: libc::c_int = 0;
    if values as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut value_t
    } else {
        if data as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut value_t;
        }
    }
    pos = (*values).next_p;
    while pos as libc::c_ulong != values as libc::c_ulong {
        value = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut value_t;
        tmp = strcmp((*value).data as *const libc::c_char, data);
        if tmp == 0 {
            return value;
        }
        pos = (*pos).next_p;
    }
    return 0 as *mut libc::c_void as *mut value_t;
}
pub unsafe extern "C" fn add_option(
    mut options___0: *mut sb_list_t,
    mut name: *const libc::c_char,
) -> *mut option_t {
    let mut option: *mut option_t = 0 as *mut option_t;
    if options___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut option_t
    } else {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut option_t;
        }
    }
    option = find_option(options___0, name);
    if option as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        return option;
    }
    option = new_option();
    if option as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut option_t;
    }
    (*option).name = strdup(name);
    convert_dashes((*option).name);
    (*option).listitem.prev_p = (*options___0).prev_p;
    (*option).listitem.next_p = options___0;
    (*options___0).prev_p = &mut (*option).listitem;
    (*(*option).listitem.prev_p).next_p = &mut (*option).listitem;
    return option;
}
unsafe extern "C" fn convert_dashes(mut s: *mut libc::c_char) {
    while *s as libc::c_int != 0 as libc::c_int {
        if *s as libc::c_int == 45 as libc::c_int {
            *s = '_' as i32 as libc::c_char;
        }
        s = s.offset(1);
    }
}
unsafe extern "C" fn opt_name_cmp(
    mut s1: *const libc::c_char,
    mut s2: *const libc::c_char,
) -> libc::c_int {
    while *s1 as libc::c_int != 0 as libc::c_int {
        if !(*s1 as libc::c_int == *s2 as libc::c_int) {
            if *s1 as libc::c_int != 45 as libc::c_int {
                if *s1 as libc::c_int != 95 as libc::c_int {
                    break;
                }
            }
            if *s2 as libc::c_int != 45 as libc::c_int {
                if *s2 as libc::c_int != 95 as libc::c_int {
                    break;
                }
            }
        }
        s1 = s1.offset(1);
        s2 = s2.offset(1);
    }
    return *s1 as libc::c_int - *s2 as libc::c_int;
}
pub unsafe extern "C" fn find_option(
    mut options___0: *mut sb_list_t,
    mut name: *const libc::c_char,
) -> *mut option_t {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: libc::c_int = 0;
    if options___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut option_t
    } else {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut option_t;
        }
    }
    pos = (*options___0).next_p;
    while pos as libc::c_ulong != options___0 as libc::c_ulong {
        opt = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut option_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut option_t;
        tmp = opt_name_cmp((*opt).name as *const libc::c_char, name);
        if tmp == 0 {
            return opt;
        }
        pos = (*pos).next_p;
    }
    return 0 as *mut libc::c_void as *mut option_t;
}
pub unsafe extern "C" fn sb_options_enum_start() -> *mut sb_list_item_t {
    return &mut options;
}
pub unsafe extern "C" fn sb_options_enum_next(
    mut pos: *mut sb_list_item_t,
    mut opt: *mut *mut option_t,
) -> *mut sb_list_item_t {
    if (*pos).next_p as libc::c_ulong != &mut options as *mut sb_list_t as libc::c_ulong
    {
        pos = (*pos).next_p;
    } else {
        pos = 0 as *mut libc::c_void as *mut sb_list_item_t;
    }
    if pos as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut sb_list_item_t;
    }
    *opt = (pos as *mut libc::c_char)
        .offset(
            -(&mut (*(0 as *mut option_t)).listitem as *mut sb_list_item_t
                as libc::c_ulong as isize),
        ) as *mut libc::c_void as *mut option_t;
    return pos;
}
pub unsafe extern "C" fn read_config(
    mut fp: *mut FILE,
    mut options___0: *mut sb_list_t,
) -> *mut sb_list_t {
    let mut buf: [libc::c_char; 256] = [0; 256];
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut qc: libc::c_char = 0;
    let mut newopt: *mut option_t = 0 as *mut option_t;
    let mut optlen: libc::c_int = 0;
    let mut nline: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    if fp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut sb_list_t
    } else {
        if options___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut sb_list_t;
        }
    }
    nline = 0 as libc::c_int;
    loop {
        tmp___5 = fgets(buf.as_mut_ptr(), 256 as libc::c_int, fp);
        if !(tmp___5 as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong) {
            break;
        }
        nline += 1;
        tmp = strchr(buf.as_mut_ptr() as *const libc::c_char, '=' as i32);
        if tmp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            continue;
        }
        if *tmp as libc::c_int != 0 as libc::c_int {
            tmp___0 = tmp;
            tmp = tmp.offset(1);
            *tmp___0 = '\u{0}' as i32 as libc::c_char;
        }
        newopt = add_option(options___0, buf.as_mut_ptr() as *const libc::c_char);
        if newopt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut sb_list_t;
        }
        free_values(&mut (*newopt).values);
        while *tmp as libc::c_int != 0 as libc::c_int {
            tmp___1 = __ctype_b_loc();
            if *(*tmp___1).offset(*tmp as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int != 0
            {
                tmp = tmp.offset(1);
            } else {
                if *tmp as libc::c_int == 35 as libc::c_int {
                    break;
                }
                let mut current_block_52: u64;
                if *tmp as libc::c_int == 39 as libc::c_int {
                    current_block_52 = 16727810913910436825;
                } else if *tmp as libc::c_int == 34 as libc::c_int {
                    current_block_52 = 16727810913910436825;
                } else {
                    optlen = 0 as libc::c_int;
                    while *tmp.offset(optlen as isize) as libc::c_int != 0 as libc::c_int
                    {
                        if !(*tmp.offset(optlen as isize) as libc::c_int
                            != 44 as libc::c_int)
                        {
                            break;
                        }
                        tmp___3 = __ctype_b_loc();
                        if *(*tmp___3)
                            .offset(*tmp.offset(optlen as isize) as libc::c_int as isize)
                            as libc::c_int & 8192 as libc::c_int != 0
                        {
                            break;
                        }
                        optlen += 1;
                    }
                    if *tmp.offset(optlen as isize) as libc::c_int != 0 as libc::c_int {
                        tmp___4 = optlen;
                        optlen += 1;
                        *tmp.offset(tmp___4 as isize) = '\u{0}' as i32 as libc::c_char;
                    }
                    add_value(&mut (*newopt).values, tmp as *const libc::c_char);
                    tmp = tmp.offset(optlen as isize);
                    current_block_52 = 1874315696050160458;
                }
                match current_block_52 {
                    16727810913910436825 => {
                        qc = *tmp;
                        tmp = tmp.offset(1);
                        optlen = 0 as libc::c_int;
                        while *tmp.offset(optlen as isize) as libc::c_int
                            != 0 as libc::c_int
                        {
                            if !(*tmp.offset(optlen as isize) as libc::c_int
                                != qc as libc::c_int)
                            {
                                break;
                            }
                            optlen += 1;
                        }
                        if *tmp.offset(optlen as isize) as libc::c_int
                            == 0 as libc::c_int
                        {
                            fprintf(
                                stderr,
                                b"unexpected EOL on line %d\n\0" as *const u8
                                    as *const libc::c_char,
                                nline,
                            );
                            return 0 as *mut libc::c_void as *mut sb_list_t;
                        }
                        tmp___2 = optlen;
                        optlen += 1;
                        *tmp.offset(tmp___2 as isize) = '\u{0}' as i32 as libc::c_char;
                        add_value(&mut (*newopt).values, tmp as *const libc::c_char);
                        tmp = tmp.offset(optlen as isize);
                        while *tmp as libc::c_int != 0 as libc::c_int {
                            if !(*tmp as libc::c_int != 44 as libc::c_int) {
                                break;
                            }
                            tmp = tmp.offset(1);
                        }
                        if *tmp as libc::c_int == 44 as libc::c_int {
                            tmp = tmp.offset(1);
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    return options___0;
}
pub unsafe extern "C" fn write_config(
    mut fp: *mut FILE,
    mut options___0: *mut sb_list_t,
) -> libc::c_int {
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut val: *mut value_t = 0 as *mut value_t;
    let mut pos_opt: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut pos_val: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    if fp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int
    } else {
        if options___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 1 as libc::c_int;
        }
    }
    pos_opt = (*options___0).next_p;
    while pos_opt as libc::c_ulong != options___0 as libc::c_ulong {
        opt = (pos_opt as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut option_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut option_t;
        if !((*opt).ignore != 0) {
            if !((*opt).name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong)
            {
                (*opt).ignore = 1 as libc::c_int as libc::c_char;
                fprintf(
                    fp,
                    b"%s %c \0" as *const u8 as *const libc::c_char,
                    (*opt).name,
                    '=' as i32,
                );
                pos_val = (*opt).values.next_p;
                while pos_val as libc::c_ulong
                    != &mut (*opt).values as *mut sb_list_t as libc::c_ulong
                {
                    val = (pos_val as *mut libc::c_char)
                        .offset(
                            -(&mut (*(0 as *mut value_t)).listitem as *mut sb_list_item_t
                                as libc::c_ulong as isize),
                        ) as *mut libc::c_void as *mut value_t;
                    if (*val).ignore == 0 {
                        if (*val).data as libc::c_ulong
                            != 0 as *mut libc::c_void as libc::c_ulong
                        {
                            fprintf(
                                fp,
                                b"%s\0" as *const u8 as *const libc::c_char,
                                (*val).data,
                            );
                        }
                    }
                    if !((*pos_val).next_p as libc::c_ulong
                        == &mut (*opt).values as *mut sb_list_t as libc::c_ulong)
                    {
                        fprintf(
                            fp,
                            b"%c \0" as *const u8 as *const libc::c_char,
                            ',' as i32,
                        );
                    }
                    pos_val = (*pos_val).next_p;
                }
                fputc('\n' as i32, fp);
            }
        }
        pos_opt = (*pos_opt).next_p;
    }
    return 0 as libc::c_int;
}
static mut handlers: [sb_list_t; 3] = [sb_list_t {
    next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
    prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
}; 3];
static mut initialized: libc::c_uchar = 0;
static mut text_mutex: pthread_mutex_t = __anonunion_pthread_mutex_t_335460617 {
    __data: __pthread_mutex_s {
        __lock: 0,
        __count: 0,
        __owner: 0,
        __nusers: 0,
        __kind: 0,
        __spins: 0,
        __elision: 0,
        __list: __pthread_list_t {
            __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
            __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
        },
    },
};
static mut text_cnt: libc::c_uint = 0;
static mut text_buf: [libc::c_char; 4096] = [0; 4096];
static mut text_handler_args: [sb_arg_t; 2] = [
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"verbosity\0" as *const u8 as *const libc::c_char,
            desc: b"verbosity level {5 - debug, 0 - only critical messages}\0"
                as *const u8 as *const libc::c_char,
            value: b"3\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: 0 as *const libc::c_char,
            desc: 0 as *const libc::c_char,
            value: 0 as *const libc::c_char,
            type_0: SB_ARG_TYPE_NULL,
            validate: None,
        };
        init
    },
];
static mut text_handler: log_handler_t = unsafe {
    {
        let mut init = __anonstruct_log_handler_t_545301319 {
            ops: {
                let mut init = __anonstruct_log_handler_ops_t_518111155 {
                    init: Some(
                        text_handler_init as unsafe extern "C" fn() -> libc::c_int,
                    ),
                    process: Some(
                        text_handler_process
                            as unsafe extern "C" fn(*mut log_msg_t) -> libc::c_int,
                    ),
                    done: ::std::mem::transmute::<
                        *mut libc::c_void,
                        Option::<log_op_done>,
                    >(0 as *const libc::c_void as *mut libc::c_void),
                };
                init
            },
            args: text_handler_args.as_ptr() as *mut _,
            listitem: {
                let mut init = sb_list_item_t {
                    next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
                    prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
                };
                init
            },
        };
        init
    }
};
static mut oper_handler_args: [sb_arg_t; 3] = [
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"percentile\0" as *const u8 as *const libc::c_char,
            desc: b"percentile to calculate in latency statistics (1-100). Use the special value of 0 to disable percentile calculations\0"
                as *const u8 as *const libc::c_char,
            value: b"95\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"histogram\0" as *const u8 as *const libc::c_char,
            desc: b"print latency histogram in report\0" as *const u8
                as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_BOOL,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: 0 as *const libc::c_char,
            desc: 0 as *const libc::c_char,
            value: 0 as *const libc::c_char,
            type_0: SB_ARG_TYPE_NULL,
            validate: None,
        };
        init
    },
];
static mut oper_handler: log_handler_t = unsafe {
    {
        let mut init = __anonstruct_log_handler_t_545301319 {
            ops: {
                let mut init = __anonstruct_log_handler_ops_t_518111155 {
                    init: Some(
                        oper_handler_init as unsafe extern "C" fn() -> libc::c_int,
                    ),
                    process: ::std::mem::transmute::<
                        *mut libc::c_void,
                        Option::<log_op_process>,
                    >(0 as *const libc::c_void as *mut libc::c_void),
                    done: Some(
                        oper_handler_done as unsafe extern "C" fn() -> libc::c_int,
                    ),
                };
                init
            },
            args: oper_handler_args.as_ptr() as *mut _,
            listitem: {
                let mut init = sb_list_item_t {
                    next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
                    prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
                };
                init
            },
        };
        init
    }
};
pub unsafe extern "C" fn log_register() -> libc::c_int {
    let mut i: libc::c_uint = 0;
    i = 0 as libc::c_uint;
    while i < 3 as libc::c_uint {
        let ref mut fresh2 = (*handlers.as_mut_ptr().offset(i as isize)).next_p;
        *fresh2 = handlers.as_mut_ptr().offset(i as isize);
        let ref mut fresh3 = (*handlers.as_mut_ptr().offset(i as isize)).prev_p;
        *fresh3 = handlers.as_mut_ptr().offset(i as isize);
        i = i.wrapping_add(1);
    }
    log_add_handler(LOG_MSG_TYPE_TEXT, &mut text_handler);
    log_add_handler(LOG_MSG_TYPE_OPER, &mut oper_handler);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn log_print_help() {
    let mut i: libc::c_uint = 0;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut handler: *mut log_handler_t = 0 as *mut log_handler_t;
    printf(b"Log options:\n\0" as *const u8 as *const libc::c_char);
    i = 0 as libc::c_uint;
    while i < 3 as libc::c_uint {
        pos = (*handlers.as_mut_ptr().offset(i as isize)).next_p;
        while pos as libc::c_ulong
            != handlers.as_mut_ptr().offset(i as isize) as libc::c_ulong
        {
            handler = (pos as *mut libc::c_char)
                .offset(
                    -(&mut (*(0 as *mut log_handler_t)).listitem as *mut sb_list_item_t
                        as libc::c_ulong as isize),
                ) as *mut libc::c_void as *mut log_handler_t;
            if (*handler).args as libc::c_ulong
                != 0 as *mut libc::c_void as libc::c_ulong
            {
                sb_print_options((*handler).args);
            }
            pos = (*pos).next_p;
        }
        i = i.wrapping_add(1);
    }
}
pub unsafe extern "C" fn log_init() -> libc::c_int {
    let mut i: libc::c_uint = 0;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut handler: *mut log_handler_t = 0 as *mut log_handler_t;
    let mut tmp: libc::c_int = 0;
    i = 0 as libc::c_uint;
    while i < 3 as libc::c_uint {
        pos = (*handlers.as_mut_ptr().offset(i as isize)).next_p;
        while pos as libc::c_ulong
            != handlers.as_mut_ptr().offset(i as isize) as libc::c_ulong
        {
            handler = (pos as *mut libc::c_char)
                .offset(
                    -(&mut (*(0 as *mut log_handler_t)).listitem as *mut sb_list_item_t
                        as libc::c_ulong as isize),
                ) as *mut libc::c_void as *mut log_handler_t;
            if ::std::mem::transmute::<
                Option::<log_op_init>,
                libc::c_ulong,
            >((*handler).ops.init) != 0 as *mut libc::c_void as libc::c_ulong
            {
                tmp = (Some(((*handler).ops.init).expect("non-null function pointer")))
                    .expect("non-null function pointer")();
                if tmp != 0 {
                    return 1 as libc::c_int;
                }
            }
            pos = (*pos).next_p;
        }
        i = i.wrapping_add(1);
    }
    initialized = 1 as libc::c_int as libc::c_uchar;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn log_done() {
    let mut i: libc::c_uint = 0;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut handler: *mut log_handler_t = 0 as *mut log_handler_t;
    i = 0 as libc::c_uint;
    while i < 3 as libc::c_uint {
        pos = (*handlers.as_mut_ptr().offset(i as isize)).next_p;
        while pos as libc::c_ulong
            != handlers.as_mut_ptr().offset(i as isize) as libc::c_ulong
        {
            handler = (pos as *mut libc::c_char)
                .offset(
                    -(&mut (*(0 as *mut log_handler_t)).listitem as *mut sb_list_item_t
                        as libc::c_ulong as isize),
                ) as *mut libc::c_void as *mut log_handler_t;
            if ::std::mem::transmute::<
                Option::<log_op_done>,
                libc::c_ulong,
            >((*handler).ops.done) != 0 as *mut libc::c_void as libc::c_ulong
            {
                (Some(((*handler).ops.done).expect("non-null function pointer")))
                    .expect("non-null function pointer")();
            }
            pos = (*pos).next_p;
        }
        i = i.wrapping_add(1);
    }
    initialized = 0 as libc::c_int as libc::c_uchar;
}
pub unsafe extern "C" fn log_add_handler(
    mut type_0: log_msg_type_t,
    mut handler: *mut log_handler_t,
) -> libc::c_int {
    if type_0 as libc::c_uint <= 0 as libc::c_uint {
        return 1 as libc::c_int
    } else {
        if type_0 as libc::c_uint >= 3 as libc::c_uint {
            return 1 as libc::c_int;
        }
    }
    if (*handler).args as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        sb_register_arg_set((*handler).args);
    }
    (*handler)
        .listitem
        .prev_p = (*handlers.as_mut_ptr().offset(type_0 as libc::c_uint as isize))
        .prev_p;
    (*handler)
        .listitem
        .next_p = handlers.as_mut_ptr().offset(type_0 as libc::c_uint as isize);
    let ref mut fresh4 = (*handlers.as_mut_ptr().offset(type_0 as libc::c_uint as isize))
        .prev_p;
    *fresh4 = &mut (*handler).listitem;
    (*(*handler).listitem.prev_p).next_p = &mut (*handler).listitem;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn log_msg(mut msg: *mut log_msg_t) {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut handler: *mut log_handler_t = 0 as *mut log_handler_t;
    pos = (*handlers.as_mut_ptr().offset((*msg).type_0 as libc::c_uint as isize)).next_p;
    while pos as libc::c_ulong
        != handlers.as_mut_ptr().offset((*msg).type_0 as libc::c_uint as isize)
            as libc::c_ulong
    {
        handler = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut log_handler_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut log_handler_t;
        if ::std::mem::transmute::<
            Option::<log_op_process>,
            libc::c_ulong,
        >((*handler).ops.process) != 0 as *mut libc::c_void as libc::c_ulong
        {
            (Some(((*handler).ops.process).expect("non-null function pointer")))
                .expect("non-null function pointer")(msg);
        }
        pos = (*pos).next_p;
    }
}
unsafe extern "C" fn get_msg_prefix(
    mut priority: log_msg_priority_t,
) -> *const libc::c_char {
    let mut prefix: *const libc::c_char = 0 as *const libc::c_char;
    match priority as libc::c_uint {
        0 => {
            prefix = b"FATAL: \0" as *const u8 as *const libc::c_char;
        }
        1 => {
            prefix = b"ALERT: \0" as *const u8 as *const libc::c_char;
        }
        2 => {
            prefix = b"WARNING: \0" as *const u8 as *const libc::c_char;
        }
        5 => {
            prefix = b"DEBUG: \0" as *const u8 as *const libc::c_char;
        }
        _ => {
            prefix = b"\0" as *const u8 as *const libc::c_char;
        }
    }
    return prefix;
}
pub unsafe extern "C" fn log_text(
    mut priority: log_msg_priority_t,
    mut fmt: *const libc::c_char,
    mut args: ...
) {
    let mut msg: log_msg_t = log_msg_t {
        type_0: LOG_MSG_TYPE_MIN,
        data: 0 as *mut libc::c_void,
    };
    let mut text_msg: log_msg_text_t = log_msg_text_t {
        priority: LOG_FATAL,
        text: 0 as *mut libc::c_char,
        flags: 0,
    };
    let mut buf: [libc::c_char; 4096] = [0; 4096];
    let mut ap: ::std::ffi::VaListImpl;
    let mut n: libc::c_int = 0;
    let mut clen: libc::c_int = 0;
    let mut maxlen: libc::c_int = 0;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    maxlen = 4096 as libc::c_int;
    clen = 0 as libc::c_int;
    ap = args.clone();
    n = vsnprintf(
        buf.as_mut_ptr().offset(clen as isize),
        maxlen as size_t,
        fmt,
        ap.as_va_list(),
    );
    if n < 0 as libc::c_int {
        n = maxlen;
    } else if n >= maxlen {
        n = maxlen;
    }
    clen += n;
    maxlen -= n;
    snprintf(
        buf.as_mut_ptr().offset(clen as isize),
        maxlen as size_t,
        b"\n\0" as *const u8 as *const libc::c_char,
    );
    if initialized == 0 {
        tmp = get_msg_prefix(priority);
        printf(b"%s%s\0" as *const u8 as *const libc::c_char, tmp, buf.as_mut_ptr());
        return;
    }
    msg.type_0 = LOG_MSG_TYPE_TEXT;
    msg.data = &mut text_msg as *mut log_msg_text_t as *mut libc::c_void;
    text_msg.priority = priority;
    text_msg.text = buf.as_mut_ptr();
    text_msg.flags = 0 as libc::c_uint;
    log_msg(&mut msg);
}
pub unsafe extern "C" fn log_timestamp(
    mut priority: log_msg_priority_t,
    mut seconds: libc::c_double,
    mut fmt: *const libc::c_char,
    mut args: ...
) {
    let mut msg: log_msg_t = log_msg_t {
        type_0: LOG_MSG_TYPE_MIN,
        data: 0 as *mut libc::c_void,
    };
    let mut text_msg: log_msg_text_t = log_msg_text_t {
        priority: LOG_FATAL,
        text: 0 as *mut libc::c_char,
        flags: 0,
    };
    let mut buf: [libc::c_char; 4096] = [0; 4096];
    let mut ap: ::std::ffi::VaListImpl;
    let mut n: libc::c_int = 0;
    let mut clen: libc::c_int = 0;
    let mut maxlen: libc::c_int = 0;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    maxlen = 4096 as libc::c_int;
    clen = 0 as libc::c_int;
    n = snprintf(
        buf.as_mut_ptr(),
        maxlen as size_t,
        b"[ %.0fs ] \0" as *const u8 as *const libc::c_char,
        seconds,
    );
    clen += n;
    maxlen -= n;
    ap = args.clone();
    n = vsnprintf(
        buf.as_mut_ptr().offset(clen as isize),
        maxlen as size_t,
        fmt,
        ap.as_va_list(),
    );
    if n < 0 as libc::c_int {
        n = maxlen;
    } else if n >= maxlen {
        n = maxlen;
    }
    clen += n;
    maxlen -= n;
    snprintf(
        buf.as_mut_ptr().offset(clen as isize),
        maxlen as size_t,
        b"\n\0" as *const u8 as *const libc::c_char,
    );
    if initialized == 0 {
        tmp = get_msg_prefix(priority);
        printf(b"%s%s\0" as *const u8 as *const libc::c_char, tmp, buf.as_mut_ptr());
        return;
    }
    msg.type_0 = LOG_MSG_TYPE_TEXT;
    msg.data = &mut text_msg as *mut log_msg_text_t as *mut libc::c_void;
    text_msg.priority = priority;
    text_msg.text = buf.as_mut_ptr();
    text_msg.flags = 1 as libc::c_uint;
    log_msg(&mut msg);
}
pub unsafe extern "C" fn log_errno(
    mut priority: log_msg_priority_t,
    mut fmt: *const libc::c_char,
    mut args: ...
) {
    let mut buf: [libc::c_char; 4096] = [0; 4096];
    let mut errbuf: [libc::c_char; 256] = [0; 256];
    let mut ap: ::std::ffi::VaListImpl;
    let mut n: libc::c_int = 0;
    let mut old_errno: libc::c_int = 0;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_int = 0 as *mut libc::c_int;
    tmp___0 = __errno_location();
    old_errno = *tmp___0;
    tmp = strerror_r(
        old_errno,
        errbuf.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
    );
    ap = args.clone();
    n = vsnprintf(buf.as_mut_ptr(), 4096 as libc::c_int as size_t, fmt, ap.as_va_list());
    if n < 0 as libc::c_int {
        return
    } else {
        if n == 4096 as libc::c_int {
            return;
        }
    }
    snprintf(
        buf.as_mut_ptr().offset(n as isize),
        (4096 as libc::c_int - n) as size_t,
        b" errno = %d (%s)\0" as *const u8 as *const libc::c_char,
        old_errno,
        tmp,
    );
    log_text(priority, b"%s\0" as *const u8 as *const libc::c_char, buf.as_mut_ptr());
}
unsafe extern "C" fn text_handler_init() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    setvbuf(
        stdout,
        0 as *mut libc::c_void as *mut libc::c_char,
        2 as libc::c_int,
        0 as libc::c_int as size_t,
    );
    tmp = sb_get_value_int(b"verbosity\0" as *const u8 as *const libc::c_char);
    sb_globals.verbosity = tmp as libc::c_uchar;
    if sb_globals.verbosity as libc::c_int > 5 as libc::c_int {
        printf(
            b"Invalid value for verbosity: %d\n\0" as *const u8 as *const libc::c_char,
            sb_globals.verbosity as libc::c_int,
        );
        return 1 as libc::c_int;
    }
    pthread_mutex_init(
        &mut text_mutex,
        0 as *mut libc::c_void as *const pthread_mutexattr_t,
    );
    text_cnt = 0 as libc::c_uint;
    text_buf[0 as libc::c_int as usize] = '\u{0}' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn text_handler_process(mut msg: *mut log_msg_t) -> libc::c_int {
    let mut text_msg: *mut log_msg_text_t = 0 as *mut log_msg_text_t;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    text_msg = (*msg).data as *mut log_msg_text_t;
    if (*text_msg).priority as libc::c_uint > sb_globals.verbosity as libc::c_uint {
        return 0 as libc::c_int;
    }
    if (*text_msg).flags & 1 as libc::c_uint == 0 {
        pthread_mutex_lock(&mut text_mutex);
        tmp = strcmp(
            text_buf.as_mut_ptr() as *const libc::c_char,
            (*text_msg).text as *const libc::c_char,
        );
        if tmp != 0 {
            if text_cnt > 0 as libc::c_uint {
                printf(
                    b"(last message repeated %u times)\n\0" as *const u8
                        as *const libc::c_char,
                    text_cnt,
                );
            }
            text_cnt = 0 as libc::c_uint;
            strncpy(
                text_buf.as_mut_ptr(),
                (*text_msg).text as *const libc::c_char,
                4096 as libc::c_int as size_t,
            );
        } else {
            text_cnt = text_cnt.wrapping_add(1);
            pthread_mutex_unlock(&mut text_mutex);
            return 0 as libc::c_int;
        }
        pthread_mutex_unlock(&mut text_mutex);
    }
    tmp___0 = get_msg_prefix((*text_msg).priority);
    printf(b"%s%s\0" as *const u8 as *const libc::c_char, tmp___0, (*text_msg).text);
    return 0 as libc::c_int;
}
unsafe extern "C" fn oper_handler_init() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    tmp = sb_get_value_int(b"percentile\0" as *const u8 as *const libc::c_char);
    if tmp < 0 as libc::c_int {
        log_text(
            LOG_FATAL,
            b"Invalid value for --percentile: %d\0" as *const u8 as *const libc::c_char,
            tmp,
        );
        return 1 as libc::c_int;
    } else {
        if tmp > 100 as libc::c_int {
            log_text(
                LOG_FATAL,
                b"Invalid value for --percentile: %d\0" as *const u8
                    as *const libc::c_char,
                tmp,
            );
            return 1 as libc::c_int;
        }
    }
    sb_globals.percentile = tmp as libc::c_uint;
    tmp___0 = sb_get_value_flag(b"histogram\0" as *const u8 as *const libc::c_char);
    sb_globals.histogram = tmp___0 as libc::c_uint;
    if sb_globals.percentile == 0 as libc::c_uint {
        if sb_globals.histogram != 0 as libc::c_uint {
            log_text(
                LOG_FATAL,
                b"--histogram cannot be used with --percentile=0\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    tmp___1 = sb_histogram_init(
        &mut sb_latency_histogram,
        1024 as libc::c_int as size_t,
        1e-3f64,
        1E5f64,
    );
    if tmp___1 != 0 {
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn oper_handler_done() -> libc::c_int {
    sb_histogram_done(&mut sb_latency_histogram);
    return 0 as libc::c_int;
}
#[inline]
unsafe extern "C" fn ck_pr_md_load_8(mut target: *const uint8_t) -> uint8_t {
    let mut r: uint8_t = 0;




    return r;
}
#[inline]
unsafe extern "C" fn ck_pr_md_store_8(mut target: *mut uint8_t, mut v: uint8_t) {




}
pub static mut db_globals: db_globals_t = db_globals_t {
    ps_mode: DB_PS_MODE_AUTO,
    driver: 0 as *const libc::c_char as *mut libc::c_char,
    debug: 0,
};
static mut drivers: sb_list_t = sb_list_t {
    next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
    prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
};
static mut stats_enabled: uint8_t = 0;
static mut db_global_initialized: bool = false;
static mut db_global_once: pthread_once_t = 0 as libc::c_int;
static mut exec_timers: *mut sb_timer_t = 0 as *const sb_timer_t as *mut sb_timer_t;
static mut fetch_timers: *mut sb_timer_t = 0 as *const sb_timer_t as *mut sb_timer_t;
static mut db_args: [sb_arg_t; 4] = [
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"db-driver\0" as *const u8 as *const libc::c_char,
            desc: b"specifies database driver to use ('help' to get list of available drivers)\0"
                as *const u8 as *const libc::c_char,
            value: b"mysql\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_STRING,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"db-ps-mode\0" as *const u8 as *const libc::c_char,
            desc: b"prepared statements usage mode {auto, disable}\0" as *const u8
                as *const libc::c_char,
            value: b"auto\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_STRING,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"db-debug\0" as *const u8 as *const libc::c_char,
            desc: b"print database-specific debug information\0" as *const u8
                as *const libc::c_char,
            value: b"off\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_BOOL,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: 0 as *const libc::c_char,
            desc: 0 as *const libc::c_char,
            value: 0 as *const libc::c_char,
            type_0: SB_ARG_TYPE_NULL,
            validate: None,
        };
        init
    },
];
pub unsafe extern "C" fn db_register() -> libc::c_int {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut drv: *mut db_driver_t = 0 as *mut db_driver_t;
    drivers.next_p = &mut drivers;
    drivers.prev_p = &mut drivers;
    register_driver_mysql(&mut drivers);
    pos = drivers.next_p;
    while pos as libc::c_ulong != &mut drivers as *mut sb_list_t as libc::c_ulong {
        drv = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut db_driver_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut db_driver_t;
        if (*drv).args as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            sb_register_arg_set((*drv).args);
        }
        (*drv).initialized = 0 as libc::c_int != 0;
        pthread_mutex_init(
            &mut (*drv).mutex,
            0 as *mut libc::c_void as *const pthread_mutexattr_t,
        );
        pos = (*pos).next_p;
    }
    sb_register_arg_set(db_args.as_mut_ptr());
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn db_print_help() {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut drv: *mut db_driver_t = 0 as *mut db_driver_t;
    log_text(
        LOG_NOTICE,
        b"General database options:\n\0" as *const u8 as *const libc::c_char,
    );
    sb_print_options(db_args.as_mut_ptr());
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    log_text(
        LOG_NOTICE,
        b"Compiled-in database drivers:\0" as *const u8 as *const libc::c_char,
    );
    pos = drivers.next_p;
    while pos as libc::c_ulong != &mut drivers as *mut sb_list_t as libc::c_ulong {
        drv = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut db_driver_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut db_driver_t;
        log_text(
            LOG_NOTICE,
            b"  %s - %s\0" as *const u8 as *const libc::c_char,
            (*drv).sname,
            (*drv).lname,
        );
        pos = (*pos).next_p;
    }
    log_text(LOG_NOTICE, b"\0" as *const u8 as *const libc::c_char);
    pos = drivers.next_p;
    while pos as libc::c_ulong != &mut drivers as *mut sb_list_t as libc::c_ulong {
        drv = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut db_driver_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut db_driver_t;
        log_text(
            LOG_NOTICE,
            b"%s options:\0" as *const u8 as *const libc::c_char,
            (*drv).sname,
        );
        sb_print_options((*drv).args);
        pos = (*pos).next_p;
    }
}
unsafe extern "C" fn enable_print_stats() {
    ck_pr_fence_store_atomic();
    ck_pr_md_store_8(&mut stats_enabled, 1 as libc::c_int as uint8_t);
}
unsafe extern "C" fn disable_print_stats() {
    ck_pr_md_store_8(&mut stats_enabled, 0 as libc::c_int as uint8_t);
    ck_pr_fence_store_atomic();
}
unsafe extern "C" fn check_print_stats() -> bool {
    let mut rc: bool = false;
    let mut tmp: uint8_t = 0;
    tmp = ck_pr_md_load_8(&mut stats_enabled as *mut uint8_t as *const uint8_t);
    rc = tmp as libc::c_int == 1 as libc::c_int;
    ck_pr_fence_store_atomic();
    return rc;
}
unsafe extern "C" fn db_init() {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    if drivers.next_p as libc::c_ulong == &mut drivers as *mut sb_list_t as libc::c_ulong
    {
        log_text(
            LOG_FATAL,
            b"No DB drivers available\0" as *const u8 as *const libc::c_char,
        );
        return;
    }
    tmp = db_parse_arguments();
    if tmp != 0 {
        return;
    }
    if db_globals.debug != 0 {
        tmp___0 = sb_alloc_per_thread_array(
            ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
        );
        exec_timers = tmp___0 as *mut sb_timer_t;
        tmp___1 = sb_alloc_per_thread_array(
            ::std::mem::size_of::<sb_timer_t>() as libc::c_ulong,
        );
        fetch_timers = tmp___1 as *mut sb_timer_t;
    }
    db_reset_stats();
    enable_print_stats();
    db_global_initialized = 1 as libc::c_int != 0;
}
pub unsafe extern "C" fn db_create(mut name: *const libc::c_char) -> *mut db_driver_t {
    let mut current_block: u64;
    let mut drv: *mut db_driver_t = 0 as *mut db_driver_t;
    let mut tmp: *mut db_driver_t = 0 as *mut db_driver_t;
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    drv = 0 as *mut libc::c_void as *mut db_driver_t;
    pthread_once(&mut db_global_once, Some(db_init as unsafe extern "C" fn() -> ()));
    if db_global_initialized {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            if db_globals.driver as libc::c_ulong
                == 0 as *mut libc::c_void as libc::c_ulong
            {
                drv = (drivers.next_p as *mut libc::c_char)
                    .offset(
                        -(&mut (*(0 as *mut db_driver_t)).listitem as *mut sb_list_item_t
                            as libc::c_ulong as isize),
                    ) as *mut libc::c_void as *mut db_driver_t;
                if (*drv).listitem.next_p as libc::c_ulong
                    == (*drv).listitem.prev_p as libc::c_ulong
                {
                    log_text(
                        LOG_INFO,
                        b"No DB drivers specified, using %s\0" as *const u8
                            as *const libc::c_char,
                        (*drv).sname,
                    );
                    current_block = 14576567515993809846;
                } else {
                    log_text(
                        LOG_FATAL,
                        b"Multiple DB drivers are available. Use --db-driver=name to specify which one to use\0"
                            as *const u8 as *const libc::c_char,
                    );
                    current_block = 4519071079872203859;
                }
            } else {
                current_block = 5043415446234504278;
            }
        } else {
            current_block = 5043415446234504278;
        }
        match current_block {
            4519071079872203859 => {}
            _ => {
                match current_block {
                    5043415446234504278 => {
                        if name as libc::c_ulong
                            == 0 as *mut libc::c_void as libc::c_ulong
                        {
                            name = db_globals.driver as *const libc::c_char;
                        }
                        pos = drivers.next_p;
                        while pos as libc::c_ulong
                            != &mut drivers as *mut sb_list_t as libc::c_ulong
                        {
                            tmp = (pos as *mut libc::c_char)
                                .offset(
                                    -(&mut (*(0 as *mut db_driver_t)).listitem
                                        as *mut sb_list_item_t as libc::c_ulong as isize),
                                ) as *mut libc::c_void as *mut db_driver_t;
                            tmp___0 = strcmp((*tmp).sname, name);
                            if tmp___0 == 0 {
                                drv = tmp;
                                break;
                            } else {
                                pos = (*pos).next_p;
                            }
                        }
                    }
                    _ => {}
                }
                if drv as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                    log_text(
                        LOG_FATAL,
                        b"invalid database driver name: '%s'\0" as *const u8
                            as *const libc::c_char,
                        name,
                    );
                } else {
                    pthread_mutex_lock(&mut (*drv).mutex);
                    if !(*drv).initialized {
                        tmp___1 = (Some(
                            ((*drv).ops.init).expect("non-null function pointer"),
                        ))
                            .expect("non-null function pointer")();
                        if tmp___1 != 0 {
                            pthread_mutex_unlock(&mut (*drv).mutex);
                            return 0 as *mut libc::c_void as *mut db_driver_t;
                        }
                        (*drv).initialized = 1 as libc::c_int != 0;
                    }
                    pthread_mutex_unlock(&mut (*drv).mutex);
                    if ::std::mem::transmute::<
                        Option::<drv_op_thread_init>,
                        libc::c_ulong,
                    >((*drv).ops.thread_init) != 0 as *mut libc::c_void as libc::c_ulong
                    {
                        tmp___2 = (Some(
                            ((*drv).ops.thread_init).expect("non-null function pointer"),
                        ))
                            .expect("non-null function pointer")(sb_tls_thread_id);
                        if tmp___2 != 0 {
                            log_text(
                                LOG_FATAL,
                                b"thread-local driver initialization failed.\0" as *const u8
                                    as *const libc::c_char,
                            );
                            return 0 as *mut libc::c_void as *mut db_driver_t;
                        }
                    }
                    return drv;
                }
            }
        }
    }
    return 0 as *mut libc::c_void as *mut db_driver_t;
}
pub unsafe extern "C" fn db_destroy(mut drv: *mut db_driver_t) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    if ::std::mem::transmute::<
        Option::<drv_op_thread_done>,
        libc::c_ulong,
    >((*drv).ops.thread_done) != 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp = (Some(((*drv).ops.thread_done).expect("non-null function pointer")))
            .expect("non-null function pointer")(sb_tls_thread_id);
        return tmp;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn db_describe(
    mut drv: *mut db_driver_t,
    mut caps: *mut drv_caps_t,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    if ::std::mem::transmute::<
        Option::<drv_op_describe>,
        libc::c_ulong,
    >((*drv).ops.describe) == 0 as *mut libc::c_void as libc::c_ulong
    {
        return 1 as libc::c_int;
    }
    tmp = (Some(((*drv).ops.describe).expect("non-null function pointer")))
        .expect("non-null function pointer")(caps);
    return tmp;
}
pub unsafe extern "C" fn db_connection_create(
    mut drv: *mut db_driver_t,
) -> *mut db_conn_t {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: libc::c_int = 0;
    tmp = calloc(
        1 as libc::c_int as size_t,
        ::std::mem::size_of::<db_conn_t>() as libc::c_ulong,
    );
    con = tmp as *mut db_conn_t;
    if con as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut db_conn_t;
    }
    (*con).driver = drv;
    (*con).state = DB_CONN_READY;
    (*con).thread_id = sb_tls_thread_id;
    tmp___0 = (Some(((*drv).ops.connect).expect("non-null function pointer")))
        .expect("non-null function pointer")(con);
    if tmp___0 != 0 {
        free(con as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut db_conn_t;
    }
    return con;
}
pub unsafe extern "C" fn db_connection_close(mut con: *mut db_conn_t) -> libc::c_int {
    let mut rc: libc::c_int = 0;
    let mut drv: *mut db_driver_t = 0 as *mut db_driver_t;
    drv = (*con).driver;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to close an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            db_free_results_int(con);
        }
    }
    rc = (Some(((*drv).ops.disconnect).expect("non-null function pointer")))
        .expect("non-null function pointer")(con);
    (*con).state = DB_CONN_INVALID;
    return rc;
}
pub unsafe extern "C" fn db_connection_reconnect(
    mut con: *mut db_conn_t,
) -> libc::c_int {
    let mut rc: libc::c_int = 0;
    let mut drv: *mut db_driver_t = 0 as *mut db_driver_t;
    drv = (*con).driver;
    if ::std::mem::transmute::<
        Option::<drv_op_reconnect>,
        libc::c_ulong,
    >((*drv).ops.reconnect) == 0 as *mut libc::c_void as libc::c_ulong
    {
        log_text(
            LOG_ALERT,
            b"reconnect is not supported by the current driver\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    }
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to close an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            db_free_results_int(con);
        }
    }
    rc = (Some(((*drv).ops.reconnect).expect("non-null function pointer")))
        .expect("non-null function pointer")(con);
    if rc == 2 as libc::c_int {
        (*con).state = DB_CONN_INVALID;
        sb_counter_inc___0((*con).thread_id, SB_CNT_ERROR);
    } else {
        (*con).state = DB_CONN_READY;
        sb_counter_inc___0((*con).thread_id, SB_CNT_RECONNECT);
        rc = 0 as libc::c_int;
    }
    return rc;
}
pub unsafe extern "C" fn db_connection_free(mut con: *mut db_conn_t) {
    if (*con).state as libc::c_uint != 2 as libc::c_uint {
        db_connection_close(con);
    }
    free(con as *mut libc::c_void);
}
pub unsafe extern "C" fn db_prepare(
    mut con: *mut db_conn_t,
    mut query: *const libc::c_char,
    mut len: size_t,
) -> *mut db_stmt_t {
    let mut stmt: *mut db_stmt_t = 0 as *mut db_stmt_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: libc::c_int = 0;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as *mut libc::c_void as *mut db_stmt_t;
    }
    tmp = calloc(
        1 as libc::c_int as size_t,
        ::std::mem::size_of::<db_stmt_t>() as libc::c_ulong,
    );
    stmt = tmp as *mut db_stmt_t;
    if stmt as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut db_stmt_t;
    }
    (*stmt).connection = con;
    tmp___0 = (Some(((*(*con).driver).ops.prepare).expect("non-null function pointer")))
        .expect("non-null function pointer")(stmt, query, len);
    if tmp___0 != 0 {
        (*con).error = DB_ERROR_FATAL;
        free(stmt as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut db_stmt_t;
    }
    return stmt;
}
pub unsafe extern "C" fn db_bind_param(
    mut stmt: *mut db_stmt_t,
    mut params: *mut db_bind_t,
    mut len: size_t,
) -> libc::c_int {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut tmp: libc::c_int = 0;
    con = (*stmt).connection;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    tmp = (Some(((*(*con).driver).ops.bind_param).expect("non-null function pointer")))
        .expect("non-null function pointer")(stmt, params, len);
    return tmp;
}
pub unsafe extern "C" fn db_bind_result(
    mut stmt: *mut db_stmt_t,
    mut results: *mut db_bind_t,
    mut len: size_t,
) -> libc::c_int {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut tmp: libc::c_int = 0;
    con = (*stmt).connection;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    tmp = (Some(((*(*con).driver).ops.bind_result).expect("non-null function pointer")))
        .expect("non-null function pointer")(stmt, results, len);
    return tmp;
}
pub unsafe extern "C" fn db_execute(mut stmt: *mut db_stmt_t) -> *mut db_result_t {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut rs: *mut db_result_t = 0 as *mut db_result_t;
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_long = 0;
    con = (*stmt).connection;
    rs = &mut (*con).rs;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as *mut libc::c_void as *mut db_result_t;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                return 0 as *mut libc::c_void as *mut db_result_t;
            }
        }
    }
    (*rs).statement = stmt;
    (*con)
        .error = (Some(
        ((*(*con).driver).ops.execute).expect("non-null function pointer"),
    ))
        .expect("non-null function pointer")(stmt, rs);
    sb_counter_inc___0((*con).thread_id, (*rs).counter);
    tmp = ((*con).error as libc::c_uint == 0 as libc::c_uint) as libc::c_int
        as libc::c_long;
    if tmp != 0 {
        if (*rs).counter as libc::c_uint == 1 as libc::c_uint {
            (*con).state = DB_CONN_RESULT_SET;
            return rs;
        }
        (*con).state = DB_CONN_READY;
        return 0 as *mut libc::c_void as *mut db_result_t;
    }
    return 0 as *mut libc::c_void as *mut db_result_t;
}
pub unsafe extern "C" fn db_stmt_next_result(
    mut stmt: *mut db_stmt_t,
) -> *mut db_result_t {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut rs: *mut db_result_t = 0 as *mut db_result_t;
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_long = 0;
    con = (*stmt).connection;
    rs = &mut (*con).rs;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as *mut libc::c_void as *mut db_result_t;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                return 0 as *mut libc::c_void as *mut db_result_t;
            }
        }
    }
    (*rs).statement = stmt;
    if ::std::mem::transmute::<
        Option::<drv_op_stmt_next_result>,
        libc::c_ulong,
    >((*(*con).driver).ops.stmt_next_result) == 0 as *mut libc::c_void as libc::c_ulong
    {
        (*con).error = DB_ERROR_NONE;
        return 0 as *mut libc::c_void as *mut db_result_t;
    }
    (*con)
        .error = (Some(
        ((*(*con).driver).ops.stmt_next_result).expect("non-null function pointer"),
    ))
        .expect("non-null function pointer")(stmt, rs);
    sb_counter_inc___0((*con).thread_id, (*rs).counter);
    tmp = ((*con).error as libc::c_uint == 0 as libc::c_uint) as libc::c_int
        as libc::c_long;
    if tmp != 0 {
        if (*rs).counter as libc::c_uint == 1 as libc::c_uint {
            (*con).state = DB_CONN_RESULT_SET;
            return rs;
        }
        (*con).state = DB_CONN_READY;
        return 0 as *mut libc::c_void as *mut db_result_t;
    }
    return 0 as *mut libc::c_void as *mut db_result_t;
}
pub unsafe extern "C" fn db_fetch_row(mut rs: *mut db_result_t) -> *mut db_row_t {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut __constr_expr_0: *mut db_result_t = 0 as *mut db_result_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: libc::c_int = 0;
    __constr_expr_0 = rs;
    con = (__constr_expr_0 as *mut libc::c_char)
        .offset(
            -(&mut (*(0 as *mut db_conn_t)).rs as *mut db_result_t as libc::c_ulong
                as isize),
        ) as *mut libc::c_void as *mut db_conn_t;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as *mut libc::c_void as *mut db_row_t;
    } else {
        if (*con).state as libc::c_uint != 1 as libc::c_uint {
            log_text(
                LOG_ALERT,
                b"attempt to fetch row from an invalid result set\0" as *const u8
                    as *const libc::c_char,
            );
            return 0 as *mut libc::c_void as *mut db_row_t;
        }
    }
    if ::std::mem::transmute::<
        Option::<drv_op_fetch_row>,
        libc::c_ulong,
    >((*(*con).driver).ops.fetch_row) == 0 as *mut libc::c_void as libc::c_ulong
    {
        log_text(
            LOG_ALERT,
            b"fetching rows is not supported by the driver\0" as *const u8
                as *const libc::c_char,
        );
    }
    if (*rs).nrows == 0 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to fetch row from an empty result set\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as *mut libc::c_void as *mut db_row_t;
    } else {
        if (*rs).nfields == 0 as libc::c_uint {
            log_text(
                LOG_ALERT,
                b"attempt to fetch row from an empty result set\0" as *const u8
                    as *const libc::c_char,
            );
            return 0 as *mut libc::c_void as *mut db_row_t;
        }
    }
    if (*rs).row.values as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp = malloc(
            ((*rs).nfields as libc::c_ulong)
                .wrapping_mul(::std::mem::size_of::<db_value_t>() as libc::c_ulong),
        );
        (*rs).row.values = tmp as *mut db_value_t;
    }
    tmp___0 = (Some(
        ((*(*con).driver).ops.fetch_row).expect("non-null function pointer"),
    ))
        .expect("non-null function pointer")(rs, &mut (*rs).row);
    if tmp___0 != 0 {
        return 0 as *mut libc::c_void as *mut db_row_t;
    }
    return &mut (*rs).row;
}
pub unsafe extern "C" fn db_query(
    mut con: *mut db_conn_t,
    mut query: *const libc::c_char,
    mut len: size_t,
) -> *mut db_result_t {
    let mut rs: *mut db_result_t = 0 as *mut db_result_t;
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_long = 0;
    rs = &mut (*con).rs;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        (*con).error = DB_ERROR_FATAL;
        return 0 as *mut libc::c_void as *mut db_result_t;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                (*con).error = DB_ERROR_FATAL;
                return 0 as *mut libc::c_void as *mut db_result_t;
            }
        }
    }
    (*con)
        .error = (Some(((*(*con).driver).ops.query).expect("non-null function pointer")))
        .expect("non-null function pointer")(con, query, len, rs);
    sb_counter_inc___0((*con).thread_id, (*rs).counter);
    tmp = ((*con).error as libc::c_uint == 0 as libc::c_uint) as libc::c_int
        as libc::c_long;
    if tmp != 0 {
        if (*rs).counter as libc::c_uint == 1 as libc::c_uint {
            (*con).state = DB_CONN_RESULT_SET;
            return rs;
        }
        (*con).state = DB_CONN_READY;
        return 0 as *mut libc::c_void as *mut db_result_t;
    }
    return 0 as *mut libc::c_void as *mut db_result_t;
}
pub unsafe extern "C" fn db_more_results(mut con: *mut db_conn_t) -> bool {
    let mut tmp: bool = false;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int != 0;
    }
    if (*con).state as libc::c_uint != 1 as libc::c_uint {
        return 0 as libc::c_int != 0
    } else {
        if ::std::mem::transmute::<
            Option::<drv_op_more_results>,
            libc::c_ulong,
        >((*(*con).driver).ops.more_results) == 0 as *mut libc::c_void as libc::c_ulong
        {
            return 0 as libc::c_int != 0
        } else {
            tmp = (Some(
                ((*(*con).driver).ops.more_results).expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")(con);
            if tmp as libc::c_int == 0 as libc::c_int {
                return 0 as libc::c_int != 0;
            }
        }
    }
    return 1 as libc::c_int != 0;
}
pub unsafe extern "C" fn db_next_result(mut con: *mut db_conn_t) -> *mut db_result_t {
    let mut rs: *mut db_result_t = 0 as *mut db_result_t;
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_long = 0;
    rs = &mut (*con).rs;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        (*con).error = DB_ERROR_FATAL;
        return 0 as *mut libc::c_void as *mut db_result_t;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                (*con).error = DB_ERROR_FATAL;
                return 0 as *mut libc::c_void as *mut db_result_t;
            }
        }
    }
    if ::std::mem::transmute::<
        Option::<drv_op_next_result>,
        libc::c_ulong,
    >((*(*con).driver).ops.next_result) == 0 as *mut libc::c_void as libc::c_ulong
    {
        (*con).error = DB_ERROR_NONE;
        return 0 as *mut libc::c_void as *mut db_result_t;
    }
    (*con)
        .error = (Some(
        ((*(*con).driver).ops.next_result).expect("non-null function pointer"),
    ))
        .expect("non-null function pointer")(con, rs);
    sb_counter_inc___0((*con).thread_id, (*rs).counter);
    tmp = ((*con).error as libc::c_uint == 0 as libc::c_uint) as libc::c_int
        as libc::c_long;
    if tmp != 0 {
        if (*rs).counter as libc::c_uint == 1 as libc::c_uint {
            (*con).state = DB_CONN_RESULT_SET;
            return rs;
        }
        (*con).state = DB_CONN_READY;
    }
    return 0 as *mut libc::c_void as *mut db_result_t;
}
unsafe extern "C" fn db_free_results_int(mut con: *mut db_conn_t) -> libc::c_int {
    let mut rc: libc::c_int = 0;
    rc = (Some(((*(*con).driver).ops.free_results).expect("non-null function pointer")))
        .expect("non-null function pointer")(&mut (*con).rs);
    if (*con).rs.row.values as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free((*con).rs.row.values as *mut libc::c_void);
        (*con).rs.row.values = 0 as *mut libc::c_void as *mut db_value_t;
    }
    (*con).rs.nrows = 0 as libc::c_int as uint32_t;
    (*con).rs.nfields = 0 as libc::c_int as uint32_t;
    (*con).rs.statement = 0 as *mut libc::c_void as *mut db_stmt;
    (*con).state = DB_CONN_READY;
    return rc;
}
pub unsafe extern "C" fn db_free_results(mut rs: *mut db_result_t) -> libc::c_int {
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    let mut __constr_expr_1: *mut db_result_t = 0 as *mut db_result_t;
    let mut tmp: libc::c_int = 0;
    __constr_expr_1 = rs;
    con = (__constr_expr_1 as *mut libc::c_char)
        .offset(
            -(&mut (*(0 as *mut db_conn_t)).rs as *mut db_result_t as libc::c_ulong
                as isize),
        ) as *mut libc::c_void as *mut db_conn_t;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 1 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint != 1 as libc::c_uint {
            log_text(
                LOG_ALERT,
                b"attempt to free an invalid result set\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    tmp = db_free_results_int(con);
    return tmp;
}
pub unsafe extern "C" fn db_close(mut stmt: *mut db_stmt_t) -> libc::c_int {
    let mut rc: libc::c_int = 0;
    let mut con: *mut db_conn_t = 0 as *mut db_conn_t;
    con = (*stmt).connection;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                return 2 as libc::c_int;
            }
        }
    }
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            if (*con).rs.statement as libc::c_ulong == stmt as libc::c_ulong {
                rc = db_free_results_int(con);
                if rc != 0 as libc::c_int {
                    return 0 as libc::c_int;
                }
            }
        }
    }
    rc = (Some(((*(*con).driver).ops.close).expect("non-null function pointer")))
        .expect("non-null function pointer")(stmt);
    if (*stmt).query as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free((*stmt).query as *mut libc::c_void);
        (*stmt).query = 0 as *mut libc::c_void as *mut libc::c_char;
    }
    if (*stmt).bound_param as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free((*stmt).bound_param as *mut libc::c_void);
        (*stmt).bound_param = 0 as *mut libc::c_void as *mut db_bind_t;
    }
    free(stmt as *mut libc::c_void);
    return rc;
}
pub unsafe extern "C" fn db_done() {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut drv: *mut db_driver_t = 0 as *mut db_driver_t;
    if !db_global_initialized {
        return;
    }
    disable_print_stats();
    if db_globals.debug != 0 {
        free(exec_timers as *mut libc::c_void);
        free(fetch_timers as *mut libc::c_void);
        fetch_timers = 0 as *mut libc::c_void as *mut sb_timer_t;
        exec_timers = fetch_timers;
    }
    pos = drivers.next_p;
    while pos as libc::c_ulong != &mut drivers as *mut sb_list_t as libc::c_ulong {
        drv = (pos as *mut libc::c_char)
            .offset(
                -(&mut (*(0 as *mut db_driver_t)).listitem as *mut sb_list_item_t
                    as libc::c_ulong as isize),
            ) as *mut libc::c_void as *mut db_driver_t;
        if (*drv).initialized {
            (Some(((*drv).ops.done).expect("non-null function pointer")))
                .expect("non-null function pointer")();
            pthread_mutex_destroy(&mut (*drv).mutex);
        }
        pos = (*pos).next_p;
    }
}
unsafe extern "C" fn db_parse_arguments() -> libc::c_int {
    let mut s: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    s = sb_get_value_string(b"db-ps-mode\0" as *const u8 as *const libc::c_char);
    tmp___0 = strcmp(
        s as *const libc::c_char,
        b"auto\0" as *const u8 as *const libc::c_char,
    );
    if tmp___0 != 0 {
        tmp = strcmp(
            s as *const libc::c_char,
            b"disable\0" as *const u8 as *const libc::c_char,
        );
        if tmp != 0 {
            log_text(
                LOG_FATAL,
                b"Invalid value for db-ps-mode: %s\0" as *const u8
                    as *const libc::c_char,
                s,
            );
            return 1 as libc::c_int;
        } else {
            db_globals.ps_mode = DB_PS_MODE_DISABLE;
        }
    } else {
        db_globals.ps_mode = DB_PS_MODE_AUTO;
    }
    db_globals
        .driver = sb_get_value_string(
        b"db-driver\0" as *const u8 as *const libc::c_char,
    );
    tmp___1 = sb_get_value_flag(b"db-debug\0" as *const u8 as *const libc::c_char);
    db_globals.debug = tmp___1 as libc::c_uchar;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn db_print_value(
    mut var: *mut db_bind_t,
    mut buf: *mut libc::c_char,
    mut buflen: libc::c_int,
) -> libc::c_int {
    let mut n: libc::c_int = 0;
    let mut tm: *mut db_time_t = 0 as *mut db_time_t;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    if (*var).is_null as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        if *(*var).is_null != 0 {
            n = snprintf(
                buf,
                buflen as size_t,
                b"NULL\0" as *const u8 as *const libc::c_char,
            );
            if n < buflen {
                tmp = n;
            } else {
                tmp = -(1 as libc::c_int);
            }
            return tmp;
        }
    }
    match (*var).type_0 as libc::c_uint {
        1 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"%hhd\0" as *const u8 as *const libc::c_char,
                *((*var).buffer as *mut libc::c_char) as libc::c_int,
            );
        }
        2 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"%hd\0" as *const u8 as *const libc::c_char,
                *((*var).buffer as *mut libc::c_short) as libc::c_int,
            );
        }
        3 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"%d\0" as *const u8 as *const libc::c_char,
                *((*var).buffer as *mut libc::c_int),
            );
        }
        4 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"%lld\0" as *const u8 as *const libc::c_char,
                *((*var).buffer as *mut libc::c_longlong),
            );
        }
        5 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"%f\0" as *const u8 as *const libc::c_char,
                *((*var).buffer as *mut libc::c_float) as libc::c_double,
            );
        }
        6 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"%f\0" as *const u8 as *const libc::c_char,
                *((*var).buffer as *mut libc::c_double),
            );
        }
        12 | 11 => {
            n = snprintf(
                buf,
                buflen as size_t,
                b"'%s'\0" as *const u8 as *const libc::c_char,
                (*var).buffer as *mut libc::c_char,
            );
        }
        8 => {
            tm = (*var).buffer as *mut db_time_t;
            n = snprintf(
                buf,
                buflen as size_t,
                b"'%d-%d-%d'\0" as *const u8 as *const libc::c_char,
                (*tm).year,
                (*tm).month,
                (*tm).day,
            );
        }
        7 => {
            tm = (*var).buffer as *mut db_time_t;
            n = snprintf(
                buf,
                buflen as size_t,
                b"'%d:%d:%d'\0" as *const u8 as *const libc::c_char,
                (*tm).hour,
                (*tm).minute,
                (*tm).second,
            );
        }
        10 | 9 => {
            tm = (*var).buffer as *mut db_time_t;
            n = snprintf(
                buf,
                buflen as size_t,
                b"'%d-%d-%d %d:%d:%d'\0" as *const u8 as *const libc::c_char,
                (*tm).year,
                (*tm).month,
                (*tm).day,
                (*tm).hour,
                (*tm).minute,
                (*tm).second,
            );
        }
        _ => {
            n = 0 as libc::c_int;
        }
    }
    if n < buflen {
        tmp___0 = n;
    } else {
        tmp___0 = -(1 as libc::c_int);
    }
    return tmp___0;
}
pub unsafe extern "C" fn db_bulk_insert_init(
    mut con: *mut db_conn_t,
    mut query: *const libc::c_char,
    mut query_len: size_t,
) -> libc::c_int {
    let mut driver_caps: drv_caps_t = drv_caps_t {
        multi_rows_insert: 0,
        prepared_statements: 0,
        auto_increment: 0,
        needs_commit: 0,
        serial: 0,
        unsigned_int: 0,
    };
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                return 0 as libc::c_int;
            }
        }
    }
    tmp = db_describe((*con).driver, &mut driver_caps);
    if tmp != 0 {
        log_text(
            LOG_FATAL,
            b"failed to get database capabilities!\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    if query_len.wrapping_add(1 as libc::c_ulong) > 524288 as libc::c_ulong {
        log_text(
            LOG_FATAL,
            b"Query length exceeds the maximum value (%u), aborting\0" as *const u8
                as *const libc::c_char,
            524288 as libc::c_int,
        );
        return 1 as libc::c_int;
    }
    (*con).bulk_buflen = 524288 as libc::c_uint;
    tmp___0 = malloc((*con).bulk_buflen as size_t);
    (*con).bulk_buffer = tmp___0 as *mut libc::c_char;
    if (*con).bulk_buffer as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int;
    }
    if driver_caps.needs_commit != 0 {
        (*con).bulk_commit_max = 1000 as libc::c_uint;
    } else {
        (*con).bulk_commit_max = 0 as libc::c_uint;
    }
    (*con).bulk_commit_cnt = 0 as libc::c_uint;
    strcpy((*con).bulk_buffer, query);
    (*con).bulk_ptr = query_len as libc::c_uint;
    (*con).bulk_values = query_len as libc::c_uint;
    (*con).bulk_cnt = 0 as libc::c_uint;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn db_bulk_insert_next(
    mut con: *mut db_conn_t,
    mut query: *const libc::c_char,
    mut query_len: size_t,
) -> libc::c_int {
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    if (*con).state as libc::c_uint == 2 as libc::c_uint {
        log_text(
            LOG_ALERT,
            b"attempt to use an already closed connection\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as libc::c_int;
    } else {
        if (*con).state as libc::c_uint == 1 as libc::c_uint {
            rc = db_free_results_int(con);
            if rc != 0 as libc::c_int {
                return 0 as libc::c_int;
            }
        }
    }
    if (*con).bulk_buffer as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        log_text(
            LOG_ALERT,
            b"attempt to call bulk_insert_next() before bulk_insert_init()\0"
                as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    if ((*con).bulk_ptr as size_t)
        .wrapping_add(query_len)
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(((*con).bulk_cnt > 0 as libc::c_uint) as libc::c_int as size_t)
        > (*con).bulk_buflen as size_t
    {
        if (*con).bulk_cnt == 0 {
            log_text(
                LOG_FATAL,
                b"Query length exceeds the maximum value (%u), aborting\0" as *const u8
                    as *const libc::c_char,
                (*con).bulk_buflen,
            );
            return 1 as libc::c_int;
        }
        tmp = db_bulk_do_insert(con, 0 as libc::c_int);
        if tmp != 0 {
            return 1 as libc::c_int;
        }
    }
    if (*con).bulk_cnt > 0 as libc::c_uint {
        *((*con).bulk_buffer)
            .offset((*con).bulk_ptr as isize) = ',' as i32 as libc::c_char;
        strcpy(
            ((*con).bulk_buffer)
                .offset((*con).bulk_ptr as isize)
                .offset(1 as libc::c_int as isize),
            query,
        );
    } else {
        strcpy(((*con).bulk_buffer).offset((*con).bulk_ptr as isize), query);
    }
    (*con)
        .bulk_ptr = ((*con).bulk_ptr as size_t)
        .wrapping_add(
            query_len
                .wrapping_add(
                    ((*con).bulk_cnt > 0 as libc::c_uint) as libc::c_int as size_t,
                ),
        ) as libc::c_uint;
    (*con).bulk_cnt = ((*con).bulk_cnt).wrapping_add(1);
    return 0 as libc::c_int;
}
unsafe extern "C" fn db_bulk_do_insert(
    mut con: *mut db_conn_t,
    mut is_last: libc::c_int,
) -> libc::c_int {
    let mut tmp: *mut db_result_t = 0 as *mut db_result_t;
    let mut tmp___0: *mut db_result_t = 0 as *mut db_result_t;
    if (*con).bulk_cnt == 0 {
        return 0 as libc::c_int;
    }
    tmp = db_query(
        con,
        (*con).bulk_buffer as *const libc::c_char,
        (*con).bulk_ptr as size_t,
    );
    if tmp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        if (*con).error as libc::c_uint != 0 as libc::c_uint {
            return 1 as libc::c_int;
        }
    }
    if (*con).bulk_commit_max != 0 as libc::c_uint {
        (*con).bulk_commit_cnt = ((*con).bulk_commit_cnt).wrapping_add((*con).bulk_cnt);
        let mut current_block_16: u64;
        if is_last != 0 {
            current_block_16 = 7177995817771013126;
        } else if (*con).bulk_commit_cnt >= (*con).bulk_commit_max {
            current_block_16 = 7177995817771013126;
        } else {
            current_block_16 = 7149356873433890176;
        }
        match current_block_16 {
            7177995817771013126 => {
                tmp___0 = db_query(
                    con,
                    b"COMMIT\0" as *const u8 as *const libc::c_char,
                    6 as libc::c_int as size_t,
                );
                if tmp___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                    if (*con).error as libc::c_uint != 0 as libc::c_uint {
                        return 1 as libc::c_int;
                    }
                }
                (*con).bulk_commit_cnt = 0 as libc::c_uint;
            }
            _ => {}
        }
    }
    (*con).bulk_ptr = (*con).bulk_values;
    (*con).bulk_cnt = 0 as libc::c_uint;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn db_bulk_insert_done(mut con: *mut db_conn_t) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = db_bulk_do_insert(con, 1 as libc::c_int);
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    if (*con).bulk_buffer as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free((*con).bulk_buffer as *mut libc::c_void);
        (*con).bulk_buffer = 0 as *mut libc::c_void as *mut libc::c_char;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn db_report_intermediate(mut stat___0: *mut sb_stat_t) {
    let mut tmp: bool = false;
    let mut seconds: libc::c_double = 0.;
    tmp = check_print_stats();
    if !tmp {
        sb_report_intermediate(stat___0);
        return;
    }
    seconds = (*stat___0).time_interval;
    log_timestamp(
        LOG_NOTICE,
        (*stat___0).time_total,
        b"thds: %u tps: %4.2f qps: %4.2f (r/w/o: %4.2f/%4.2f/%4.2f) lat (ms,%u%%): %4.2f err/s: %4.2f reconn/s: %4.2f\0"
            as *const u8 as *const libc::c_char,
        (*stat___0).threads_running,
        (*stat___0).events as libc::c_double / seconds,
        ((*stat___0).reads)
            .wrapping_add((*stat___0).writes)
            .wrapping_add((*stat___0).other) as libc::c_double / seconds,
        (*stat___0).reads as libc::c_double / seconds,
        (*stat___0).writes as libc::c_double / seconds,
        (*stat___0).other as libc::c_double / seconds,
        sb_globals.percentile,
        (*stat___0).latency_pct * 1000 as libc::c_int as libc::c_double,
        (*stat___0).errors as libc::c_double / seconds,
        (*stat___0).reconnects as libc::c_double / seconds,
    );
    if sb_globals.tx_rate > 0 as libc::c_uint {
        log_timestamp(
            LOG_NOTICE,
            (*stat___0).time_total,
            b"queue length: %lu, concurrency: %lu\0" as *const u8 as *const libc::c_char,
            (*stat___0).queue_length,
            (*stat___0).concurrency,
        );
    }
}
pub unsafe extern "C" fn db_report_cumulative(mut stat___0: *mut sb_stat_t) {
    let mut exec_timer: sb_timer_t = sb_timer_t {
        time_start: timespec { tv_sec: 0, tv_nsec: 0 },
        time_end: timespec { tv_sec: 0, tv_nsec: 0 },
        events: 0,
        queue_time: 0,
        min_time: 0,
        max_time: 0,
        sum_time: 0,
        lock: ck_spinlock_fas_t { value: 0 },
        pad: [0; 52],
    };
    let mut fetch_timer: sb_timer_t = sb_timer_t {
        time_start: timespec { tv_sec: 0, tv_nsec: 0 },
        time_end: timespec { tv_sec: 0, tv_nsec: 0 },
        events: 0,
        queue_time: 0,
        min_time: 0,
        max_time: 0,
        sum_time: 0,
        lock: ck_spinlock_fas_t { value: 0 },
        pad: [0; 52],
    };
    let mut tmp: bool = false;
    let mut seconds: libc::c_double = 0.;
    let mut queries: uint64_t = 0;
    let mut i: libc::c_uint = 0;
    let mut tmp___0: uint64_t = 0;
    let mut tmp___1: uint64_t = 0;
    let mut tmp___2: uint64_t = 0;
    let mut tmp___3: uint64_t = 0;
    let mut tmp___4: uint64_t = 0;
    let mut tmp___5: uint64_t = 0;
    let mut tmp___6: uint64_t = 0;
    let mut tmp___7: uint64_t = 0;
    tmp = check_print_stats();
    if !tmp {
        sb_report_cumulative(stat___0);
        return;
    }
    seconds = (*stat___0).time_interval;
    queries = ((*stat___0).reads)
        .wrapping_add((*stat___0).writes)
        .wrapping_add((*stat___0).other);
    log_text(LOG_NOTICE, b"SQL statistics:\0" as *const u8 as *const libc::c_char);
    log_text(
        LOG_NOTICE,
        b"    queries performed:\0" as *const u8 as *const libc::c_char,
    );
    log_text(
        LOG_NOTICE,
        b"        read:                            %lu\0" as *const u8
            as *const libc::c_char,
        (*stat___0).reads,
    );
    log_text(
        LOG_NOTICE,
        b"        write:                           %lu\0" as *const u8
            as *const libc::c_char,
        (*stat___0).writes,
    );
    log_text(
        LOG_NOTICE,
        b"        other:                           %lu\0" as *const u8
            as *const libc::c_char,
        (*stat___0).other,
    );
    log_text(
        LOG_NOTICE,
        b"        total:                           %lu\0" as *const u8
            as *const libc::c_char,
        queries,
    );
    log_text(
        LOG_NOTICE,
        b"    transactions:                        %-6lu (%.2f per sec.)\0" as *const u8
            as *const libc::c_char,
        (*stat___0).events,
        (*stat___0).events as libc::c_double / seconds,
    );
    log_text(
        LOG_NOTICE,
        b"    queries:                             %-6lu (%.2f per sec.)\0" as *const u8
            as *const libc::c_char,
        queries,
        queries as libc::c_double / seconds,
    );
    log_text(
        LOG_NOTICE,
        b"    ignored errors:                      %-6lu (%.2f per sec.)\0" as *const u8
            as *const libc::c_char,
        (*stat___0).errors,
        (*stat___0).errors as libc::c_double / seconds,
    );
    log_text(
        LOG_NOTICE,
        b"    reconnects:                          %-6lu (%.2f per sec.)\0" as *const u8
            as *const libc::c_char,
        (*stat___0).reconnects,
        (*stat___0).reconnects as libc::c_double / seconds,
    );
    if db_globals.debug != 0 {
        sb_timer_init(&mut exec_timer);
        sb_timer_init(&mut fetch_timer);
        i = 0 as libc::c_uint;
        while i < sb_globals.threads {
            exec_timer = sb_timer_merge(&mut exec_timer, exec_timers.offset(i as isize));
            fetch_timer = sb_timer_merge(
                &mut fetch_timer,
                fetch_timers.offset(i as isize),
            );
            i = i.wrapping_add(1);
        }
        log_text(LOG_DEBUG, b"\0" as *const u8 as *const libc::c_char);
        log_text(
            LOG_DEBUG,
            b"Query execution statistics:\0" as *const u8 as *const libc::c_char,
        );
        tmp___0 = sb_timer_min(&mut exec_timer);
        log_text(
            LOG_DEBUG,
            b"    min:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___0 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        tmp___1 = sb_timer_avg(&mut exec_timer);
        log_text(
            LOG_DEBUG,
            b"    avg:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___1 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        tmp___2 = sb_timer_max(&mut exec_timer);
        log_text(
            LOG_DEBUG,
            b"    max:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___2 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        tmp___3 = sb_timer_sum(&mut exec_timer);
        log_text(
            LOG_DEBUG,
            b"  total:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___3 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        log_text(
            LOG_DEBUG,
            b"Results fetching statistics:\0" as *const u8 as *const libc::c_char,
        );
        tmp___4 = sb_timer_min(&mut fetch_timer);
        log_text(
            LOG_DEBUG,
            b"    min:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___4 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        tmp___5 = sb_timer_avg(&mut fetch_timer);
        log_text(
            LOG_DEBUG,
            b"    avg:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___5 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        tmp___6 = sb_timer_max(&mut fetch_timer);
        log_text(
            LOG_DEBUG,
            b"    max:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___6 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
        tmp___7 = sb_timer_sum(&mut fetch_timer);
        log_text(
            LOG_DEBUG,
            b"  total:                                %.4fs\0" as *const u8
                as *const libc::c_char,
            tmp___7 as libc::c_double / 1000000000 as libc::c_int as libc::c_double,
        );
    }
    sb_report_cumulative(stat___0);
}
unsafe extern "C" fn db_reset_stats() {
    let mut i: libc::c_uint = 0;
    sb_timer_current(&mut sb_intermediate_timer);
    if db_globals.debug != 0 {
        i = 0 as libc::c_uint;
        while i < sb_globals.threads {
            sb_timer_init(exec_timers.offset(i as isize));
            sb_timer_init(fetch_timers.offset(i as isize));
            i = i.wrapping_add(1);
        }
    }
}
#[inline]
unsafe extern "C" fn ck_pr_fas_64(
    mut target: *mut uint64_t,
    mut v: uint64_t,
) -> uint64_t {




    return v;
}
#[inline]
unsafe extern "C" fn ck_pr_inc_64(mut target: *mut uint64_t) {

}
pub static mut sb_latency_histogram: sb_histogram_t = sb_histogram_t {
    cumulative_array: 0 as *const uint64_t as *mut uint64_t,
    cumulative_nevents: 0,
    temp_array: 0 as *const uint64_t as *mut uint64_t,
    interm_slots: 0 as *const *mut uint64_t as *mut *mut uint64_t,
    array_size: 0,
    range_min: 0.,
    range_max: 0.,
    range_deduct: 0.,
    range_mult: 0.,
    lock: __anonunion_pthread_rwlock_t_656928968 {
        __data: __pthread_rwlock_arch_t {
            __readers: 0,
            __writers: 0,
            __wrphase_futex: 0,
            __writers_futex: 0,
            __pad3: 0,
            __pad4: 0,
            __cur_writer: 0,
            __shared: 0,
            __rwelision: 0,
            __pad1: [0; 7],
            __pad2: 0,
            __flags: 0,
        },
    },
};
pub unsafe extern "C" fn sb_histogram_init(
    mut h___0: *mut sb_histogram_t,
    mut size: size_t,
    mut range_min: libc::c_double,
    mut range_max: libc::c_double,
) -> libc::c_int {
    let mut i: size_t = 0;
    let mut tmp: *mut uint64_t = 0 as *mut uint64_t;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___2: libc::c_double = 0.;
    tmp___0 = calloc(
        size.wrapping_mul(130 as libc::c_ulong),
        ::std::mem::size_of::<uint64_t>() as libc::c_ulong,
    );
    tmp = tmp___0 as *mut uint64_t;
    tmp___1 = malloc(
        (128 as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<*mut uint64_t>() as libc::c_ulong),
    );
    (*h___0).interm_slots = tmp___1 as *mut *mut uint64_t;
    if tmp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        log_text(
            LOG_FATAL,
            b"Failed to allocate memory for a histogram object, size = %zd\0"
                as *const u8 as *const libc::c_char,
            size,
        );
        return 1 as libc::c_int;
    } else {
        if (*h___0).interm_slots as libc::c_ulong
            == 0 as *mut libc::c_void as libc::c_ulong
        {
            log_text(
                LOG_FATAL,
                b"Failed to allocate memory for a histogram object, size = %zd\0"
                    as *const u8 as *const libc::c_char,
                size,
            );
            return 1 as libc::c_int;
        }
    }
    (*h___0).cumulative_array = tmp;
    tmp = tmp.offset(size as isize);
    (*h___0).temp_array = tmp;
    tmp = tmp.offset(size as isize);
    i = 0 as libc::c_int as size_t;
    while i < 128 as libc::c_ulong {
        let ref mut fresh5 = *((*h___0).interm_slots).offset(i as isize);
        *fresh5 = tmp;
        tmp = tmp.offset(size as isize);
        i = i.wrapping_add(1);
    }
    (*h___0).range_deduct = log(range_min);
    tmp___2 = log(range_max);
    (*h___0)
        .range_mult = size.wrapping_sub(1 as libc::c_ulong) as libc::c_double
        / (tmp___2 - (*h___0).range_deduct);
    (*h___0).range_min = range_min;
    (*h___0).range_max = range_max;
    (*h___0).array_size = size;
    pthread_rwlock_init(
        &mut (*h___0).lock as *mut pthread_rwlock_t,
        0 as *mut libc::c_void as *const pthread_rwlockattr_t,
    );
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_histogram_update(
    mut h___0: *mut sb_histogram_t,
    mut value: libc::c_double,
) {
    let mut slot: size_t = 0;
    let mut i: ssize_t = 0;
    let mut tmp: uint64_t = 0;
    let mut tmp___0: libc::c_double = 0.;
    let mut tmp___1: libc::c_double = 0.;
    let mut tmp___2: libc::c_long = 0;
    let mut tmp___3: libc::c_long = 0;
    tmp = sb_rand_uniform_uint64();
    slot = tmp.wrapping_rem(128 as libc::c_ulong);
    tmp___0 = log(value);
    tmp___1 = floor((tmp___0 - (*h___0).range_deduct) * (*h___0).range_mult + 0.5f64);
    i = tmp___1 as ssize_t;
    tmp___3 = (i < 0 as libc::c_long) as libc::c_int as libc::c_long;
    if tmp___3 != 0 {
        i = 0 as libc::c_int as ssize_t;
    } else {
        tmp___2 = (i >= (*h___0).array_size as ssize_t) as libc::c_int as libc::c_long;
        if tmp___2 != 0 {
            i = ((*h___0).array_size).wrapping_sub(1 as libc::c_ulong) as ssize_t;
        }
    }
    ck_pr_inc_64((*((*h___0).interm_slots).offset(slot as isize)).offset(i as isize));
}
pub unsafe extern "C" fn sb_histogram_get_pct_intermediate(
    mut h___0: *mut sb_histogram_t,
    mut percentile: libc::c_double,
) -> libc::c_double {
    let mut i: size_t = 0;
    let mut s: size_t = 0;
    let mut nevents: uint64_t = 0;
    let mut ncur: uint64_t = 0;
    let mut nmax: uint64_t = 0;
    let mut res: libc::c_double = 0.;
    let mut size: size_t = 0;
    let mut array: *mut uint64_t = 0 as *mut uint64_t;
    let mut t: uint64_t = 0;
    let mut tmp: libc::c_double = 0.;
    nevents = 0 as libc::c_int as uint64_t;
    pthread_rwlock_wrlock(&mut (*h___0).lock);
    size = (*h___0).array_size;
    array = (*h___0).temp_array;
    i = 0 as libc::c_int as size_t;
    while i < size {
        *array
            .offset(
                i as isize,
            ) = ck_pr_fas_64(
            (*((*h___0).interm_slots).offset(0 as libc::c_int as isize))
                .offset(i as isize),
            0 as libc::c_int as uint64_t,
        );
        nevents = (nevents as libc::c_ulong).wrapping_add(*array.offset(i as isize))
            as uint64_t as uint64_t;
        i = i.wrapping_add(1);
    }
    s = 1 as libc::c_int as size_t;
    while s < 128 as libc::c_ulong {
        i = 0 as libc::c_int as size_t;
        while i < size {
            t = ck_pr_fas_64(
                (*((*h___0).interm_slots).offset(s as isize)).offset(i as isize),
                0 as libc::c_int as uint64_t,
            );
            let ref mut fresh6 = *array.offset(i as isize);
            *fresh6 = (*fresh6 as libc::c_ulong).wrapping_add(t) as uint64_t as uint64_t;
            nevents = (nevents as libc::c_ulong).wrapping_add(t) as uint64_t as uint64_t;
            i = i.wrapping_add(1);
        }
        s = s.wrapping_add(1);
    }
    tmp = floor(
        nevents as libc::c_double * percentile / 100 as libc::c_int as libc::c_double
            + 0.5f64,
    );
    nmax = tmp as uint64_t;
    ncur = 0 as libc::c_int as uint64_t;
    i = 0 as libc::c_int as size_t;
    while i < size {
        ncur = (ncur as libc::c_ulong).wrapping_add(*array.offset(i as isize))
            as uint64_t as uint64_t;
        if ncur >= nmax {
            break;
        }
        i = i.wrapping_add(1);
    }
    res = exp(i as libc::c_double / (*h___0).range_mult + (*h___0).range_deduct);
    i = 0 as libc::c_int as size_t;
    while i < size {
        let ref mut fresh7 = *((*h___0).cumulative_array).offset(i as isize);
        *fresh7 = (*fresh7 as libc::c_ulong).wrapping_add(*array.offset(i as isize))
            as uint64_t as uint64_t;
        i = i.wrapping_add(1);
    }
    (*h___0)
        .cumulative_nevents = ((*h___0).cumulative_nevents as libc::c_ulong)
        .wrapping_add(nevents) as uint64_t as uint64_t;
    pthread_rwlock_unlock(&mut (*h___0).lock);
    return res;
}
unsafe extern "C" fn merge_intermediate_into_cumulative(mut h___0: *mut sb_histogram_t) {
    let mut i: size_t = 0;
    let mut s: size_t = 0;
    let mut nevents: uint64_t = 0;
    let mut size: size_t = 0;
    let mut array: *mut uint64_t = 0 as *mut uint64_t;
    let mut t: uint64_t = 0;
    let mut tmp: uint64_t = 0;
    nevents = (*h___0).cumulative_nevents;
    size = (*h___0).array_size;
    array = (*h___0).cumulative_array;
    s = 0 as libc::c_int as size_t;
    while s < 128 as libc::c_ulong {
        i = 0 as libc::c_int as size_t;
        while i < size {
            tmp = ck_pr_fas_64(
                (*((*h___0).interm_slots).offset(s as isize)).offset(i as isize),
                0 as libc::c_int as uint64_t,
            );
            t = tmp;
            let ref mut fresh8 = *array.offset(i as isize);
            *fresh8 = (*fresh8 as libc::c_ulong).wrapping_add(t) as uint64_t as uint64_t;
            nevents = (nevents as libc::c_ulong).wrapping_add(t) as uint64_t as uint64_t;
            i = i.wrapping_add(1);
        }
        s = s.wrapping_add(1);
    }
    (*h___0).cumulative_nevents = nevents;
}
unsafe extern "C" fn get_pct_cumulative(
    mut h___0: *mut sb_histogram_t,
    mut percentile: libc::c_double,
) -> libc::c_double {
    let mut i: size_t = 0;
    let mut ncur: uint64_t = 0;
    let mut nmax: uint64_t = 0;
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp = floor(
        (*h___0).cumulative_nevents as libc::c_double * percentile
            / 100 as libc::c_int as libc::c_double + 0.5f64,
    );
    nmax = tmp as uint64_t;
    ncur = 0 as libc::c_int as uint64_t;
    i = 0 as libc::c_int as size_t;
    while i < (*h___0).array_size {
        ncur = (ncur as libc::c_ulong)
            .wrapping_add(*((*h___0).cumulative_array).offset(i as isize)) as uint64_t
            as uint64_t;
        if ncur >= nmax {
            break;
        }
        i = i.wrapping_add(1);
    }
    tmp___0 = exp(i as libc::c_double / (*h___0).range_mult + (*h___0).range_deduct);
    return tmp___0;
}
pub unsafe extern "C" fn sb_histogram_get_pct_cumulative(
    mut h___0: *mut sb_histogram_t,
    mut percentile: libc::c_double,
) -> libc::c_double {
    let mut res: libc::c_double = 0.;
    pthread_rwlock_wrlock(&mut (*h___0).lock);
    merge_intermediate_into_cumulative(h___0);
    res = get_pct_cumulative(h___0, percentile);
    pthread_rwlock_unlock(&mut (*h___0).lock);
    return res;
}
pub unsafe extern "C" fn sb_histogram_get_pct_checkpoint(
    mut h___0: *mut sb_histogram_t,
    mut percentile: libc::c_double,
) -> libc::c_double {
    let mut res: libc::c_double = 0.;
    pthread_rwlock_wrlock(&mut (*h___0).lock);
    merge_intermediate_into_cumulative(h___0);
    res = get_pct_cumulative(h___0, percentile);
    memset(
        (*h___0).cumulative_array as *mut libc::c_void,
        0 as libc::c_int,
        ((*h___0).array_size)
            .wrapping_mul(::std::mem::size_of::<uint64_t>() as libc::c_ulong),
    );
    (*h___0).cumulative_nevents = 0 as libc::c_int as uint64_t;
    pthread_rwlock_unlock(&mut (*h___0).lock);
    return res;
}
pub unsafe extern "C" fn sb_histogram_print(mut h___0: *mut sb_histogram_t) {
    let mut maxcnt: uint64_t = 0;
    let mut width: libc::c_int = 0;
    let mut i: size_t = 0;
    let mut array: *mut uint64_t = 0 as *mut uint64_t;
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    pthread_rwlock_wrlock(&mut (*h___0).lock);
    merge_intermediate_into_cumulative(h___0);
    array = (*h___0).cumulative_array;
    maxcnt = 0 as libc::c_int as uint64_t;
    i = 0 as libc::c_int as size_t;
    while i < (*h___0).array_size {
        if *array.offset(i as isize) > maxcnt {
            maxcnt = *array.offset(i as isize);
        }
        i = i.wrapping_add(1);
    }
    if maxcnt == 0 as libc::c_ulong {
        return;
    }
    printf(
        b"       value  ------------- distribution ------------- count\n\0" as *const u8
            as *const libc::c_char,
    );
    i = 0 as libc::c_int as size_t;
    while i < (*h___0).array_size {
        if !(*array.offset(i as isize) == 0 as libc::c_ulong) {
            tmp = floor(
                *array.offset(i as isize) as libc::c_double
                    * 40 as libc::c_int as libc::c_double / maxcnt as libc::c_double
                    + 0.5f64,
            );
            width = tmp as libc::c_int;
            tmp___0 = exp(
                i as libc::c_double / (*h___0).range_mult + (*h___0).range_deduct,
            );
            printf(
                b"%12.3f |%-40.*s %lu\n\0" as *const u8 as *const libc::c_char,
                tmp___0,
                width,
                b"****************************************\0" as *const u8
                    as *const libc::c_char,
                *array.offset(i as isize),
            );
        }
        i = i.wrapping_add(1);
    }
    pthread_rwlock_unlock(&mut (*h___0).lock);
}
pub unsafe extern "C" fn sb_histogram_done(mut h___0: *mut sb_histogram_t) {
    pthread_rwlock_destroy(&mut (*h___0).lock);
    free((*h___0).cumulative_array as *mut libc::c_void);
    free((*h___0).interm_slots as *mut libc::c_void);
}
pub unsafe extern "C" fn sb_histogram_new(
    mut size: size_t,
    mut range_min: libc::c_double,
    mut range_max: libc::c_double,
) -> *mut sb_histogram_t {
    let mut h___0: *mut sb_histogram_t = 0 as *mut sb_histogram_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: libc::c_int = 0;
    tmp = malloc(::std::mem::size_of::<sb_histogram_t>() as libc::c_ulong);
    h___0 = tmp as *mut sb_histogram_t;
    if h___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut sb_histogram_t;
    }
    tmp___0 = sb_histogram_init(h___0, size, range_min, range_max);
    if tmp___0 != 0 {
        free(h___0 as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut sb_histogram_t;
    }
    return h___0;
}
pub unsafe extern "C" fn sb_histogram_delete(mut h___0: *mut sb_histogram_t) {
    sb_histogram_done(h___0);
    free(h___0 as *mut libc::c_void);
}
pub static mut sb_rand_seed: libc::c_int = 0;
pub static mut sb_rng_state: sb_rng_state_t = [0; 2];
#[inline]
unsafe extern "C" fn ck_pr_faa_32(
    mut target: *mut uint32_t,
    mut d: uint32_t,
) -> uint32_t {




    return d;
}
static mut rand_args: [sb_arg_t; 5] = [
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"rand-type\0" as *const u8 as *const libc::c_char,
            desc: b"random numbers distribution {uniform, gaussian, pareto, zipfian} to use by default\0"
                as *const u8 as *const libc::c_char,
            value: b"uniform\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_STRING,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"rand-seed\0" as *const u8 as *const libc::c_char,
            desc: b"seed for random number generator. When 0, the current time is used as an RNG seed.\0"
                as *const u8 as *const libc::c_char,
            value: b"0\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_INT,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"rand-pareto-h\0" as *const u8 as *const libc::c_char,
            desc: b"shape parameter for the Pareto distribution\0" as *const u8
                as *const libc::c_char,
            value: b"0.2\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_DOUBLE,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: b"rand-zipfian-exp\0" as *const u8 as *const libc::c_char,
            desc: b"shape parameter (exponent, theta) for the Zipfian distribution\0"
                as *const u8 as *const libc::c_char,
            value: b"0.8\0" as *const u8 as *const libc::c_char,
            type_0: SB_ARG_TYPE_DOUBLE,
            validate: None,
        };
        init
    },
    {
        let mut init = __anonstruct_sb_arg_t_433063110 {
            name: 0 as *const libc::c_char,
            desc: 0 as *const libc::c_char,
            value: 0 as *const libc::c_char,
            type_0: SB_ARG_TYPE_NULL,
            validate: None,
        };
        init
    },
];
static mut rand_type: rand_dist_t = DIST_TYPE_UNIFORM;
static mut rand_func: Option::<unsafe extern "C" fn(uint32_t, uint32_t) -> uint32_t> = None;
static mut rand_iter: libc::c_uint = 0;
static mut rand_pct: libc::c_uint = 0;
static mut rand_res: libc::c_uint = 0;
static mut rand_iter_mult: libc::c_double = 0.;
static mut rand_pct_mult: libc::c_double = 0.;
static mut rand_pct_2_mult: libc::c_double = 0.;
static mut rand_res_mult: libc::c_double = 0.;
static mut pareto_h: libc::c_double = 0.;
static mut pareto_power: libc::c_double = 0.;
static mut zipf_exp: libc::c_double = 0.;
static mut zipf_s: libc::c_double = 0.;
static mut zipf_hIntegralX1: libc::c_double = 0.;
static mut rand_unique_index: uint32_t = 0;
static mut rand_unique_offset: uint32_t = 0;
pub unsafe extern "C" fn sb_rand_register() -> libc::c_int {
    sb_register_arg_set(rand_args.as_mut_ptr());
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_rand_init() -> libc::c_int {
    let mut s: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_double = 0.;
    let mut tmp___7: libc::c_double = 0.;
    let mut tmp___8: libc::c_double = 0.;
    let mut tmp___9: libc::c_double = 0.;
    let mut tmp___10: libc::c_double = 0.;
    let mut tmp___11: libc::c_double = 0.;
    let mut tmp___12: libc::c_long = 0;
    let mut tmp___13: libc::c_long = 0;
    sb_rand_seed = sb_get_value_int(b"rand-seed\0" as *const u8 as *const libc::c_char);
    s = sb_get_value_string(b"rand-type\0" as *const u8 as *const libc::c_char);
    tmp___2 = strcmp(
        s as *const libc::c_char,
        b"uniform\0" as *const u8 as *const libc::c_char,
    );
    if tmp___2 != 0 {
        tmp___1 = strcmp(
            s as *const libc::c_char,
            b"gaussian\0" as *const u8 as *const libc::c_char,
        );
        if tmp___1 != 0 {
            tmp___0 = strcmp(
                s as *const libc::c_char,
                b"pareto\0" as *const u8 as *const libc::c_char,
            );
            if tmp___0 != 0 {
                tmp = strcmp(
                    s as *const libc::c_char,
                    b"zipfian\0" as *const u8 as *const libc::c_char,
                );
                if tmp != 0 {
                    log_text(
                        LOG_FATAL,
                        b"Invalid random numbers distribution: %s.\0" as *const u8
                            as *const libc::c_char,
                        s,
                    );
                    return 1 as libc::c_int;
                } else {
                    rand_type = DIST_TYPE_ZIPFIAN;
                    rand_func = Some(
                        sb_rand_zipfian
                            as unsafe extern "C" fn(uint32_t, uint32_t) -> uint32_t,
                    );
                }
            } else {
                rand_type = DIST_TYPE_PARETO;
                rand_func = Some(
                    sb_rand_pareto
                        as unsafe extern "C" fn(uint32_t, uint32_t) -> uint32_t,
                );
            }
        } else {
            rand_type = DIST_TYPE_GAUSSIAN;
            rand_func = Some(
                sb_rand_gaussian as unsafe extern "C" fn(uint32_t, uint32_t) -> uint32_t,
            );
        }
    } else {
        rand_type = DIST_TYPE_UNIFORM;
        rand_func = Some(
            sb_rand_uniform as unsafe extern "C" fn(uint32_t, uint32_t) -> uint32_t,
        );
    }
    tmp___3 = sb_get_value_int(b"rand-spec-iter\0" as *const u8 as *const libc::c_char);
    rand_iter = tmp___3 as libc::c_uint;
    rand_iter_mult = 1.0f64 / rand_iter as libc::c_double;
    tmp___4 = sb_get_value_int(b"rand-spec-pct\0" as *const u8 as *const libc::c_char);
    rand_pct = tmp___4 as libc::c_uint;
    rand_pct_mult = rand_pct as libc::c_double / 100.0f64;
    rand_pct_2_mult = rand_pct as libc::c_double / 200.0f64;
    tmp___5 = sb_get_value_int(b"rand-spec-res\0" as *const u8 as *const libc::c_char);
    rand_res = tmp___5 as libc::c_uint;
    rand_res_mult = 100.0f64 / (100.0f64 - rand_res as libc::c_double);
    pareto_h = sb_get_value_double(
        b"rand-pareto-h\0" as *const u8 as *const libc::c_char,
    );
    tmp___6 = log(pareto_h);
    tmp___7 = log(1.0f64 - pareto_h);
    pareto_power = tmp___6 / tmp___7;
    zipf_exp = sb_get_value_double(
        b"rand-zipfian-exp\0" as *const u8 as *const libc::c_char,
    );
    if zipf_exp < 0 as libc::c_int as libc::c_double {
        log_text(
            LOG_FATAL,
            b"--rand-zipfian-exp must be >= 0\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    tmp___8 = hIntegral(2.5f64, zipf_exp);
    tmp___9 = h(2 as libc::c_int as libc::c_double, zipf_exp);
    tmp___10 = hIntegralInverse(tmp___8 - tmp___9, zipf_exp);
    zipf_s = 2 as libc::c_int as libc::c_double - tmp___10;
    tmp___11 = hIntegral(1.5f64, zipf_exp);
    zipf_hIntegralX1 = tmp___11 - 1 as libc::c_int as libc::c_double;
    sb_rand_thread_init();
    tmp___12 = random();
    tmp___13 = random();
    rand_unique_seed(tmp___13 as uint32_t, tmp___12 as uint32_t);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_rand_print_help() {
    printf(
        b"Pseudo-Random Numbers Generator options:\n\0" as *const u8
            as *const libc::c_char,
    );
    sb_print_options(rand_args.as_mut_ptr());
}
pub unsafe extern "C" fn sb_rand_done() {}
pub unsafe extern "C" fn sb_rand_thread_init() {
    let mut tmp: libc::c_long = 0;
    let mut tmp___0: libc::c_long = 0;
    let mut tmp___1: libc::c_long = 0;
    let mut tmp___2: libc::c_long = 0;
    tmp = random();
    tmp___0 = random();
    sb_rng_state[0 as libc::c_int
        as usize] = (tmp as uint64_t) << 32 as libc::c_int
        | tmp___0 as uint64_t & 4294967295 as libc::c_ulong;
    tmp___1 = random();
    tmp___2 = random();
    sb_rng_state[1 as libc::c_int
        as usize] = (tmp___1 as uint64_t) << 32 as libc::c_int
        | tmp___2 as uint64_t & 4294967295 as libc::c_ulong;
}
pub unsafe extern "C" fn sb_rand_default(mut a: uint32_t, mut b: uint32_t) -> uint32_t {
    let mut tmp: uint32_t = 0;
    tmp = (Some(rand_func.expect("non-null function pointer")))
        .expect("non-null function pointer")(a, b);
    return tmp;
}
pub unsafe extern "C" fn sb_rand_uniform(mut a: uint32_t, mut b: uint32_t) -> uint32_t {
    let mut tmp: libc::c_double = 0.;
    return (a as libc::c_double
        + tmp * b.wrapping_sub(a).wrapping_add(1 as libc::c_uint) as libc::c_double)
        as uint32_t;
}
pub unsafe extern "C" fn sb_rand_gaussian(mut a: uint32_t, mut b: uint32_t) -> uint32_t {
    let mut sum: libc::c_double = 0.;
    let mut t: libc::c_double = 0.;
    let mut i: libc::c_uint = 0;
    let mut tmp: libc::c_double = 0.;
    t = b.wrapping_sub(a).wrapping_add(1 as libc::c_uint) as libc::c_double;
    i = 0 as libc::c_uint;
    sum = 0 as libc::c_int as libc::c_double;
    while i < rand_iter {
        sum += tmp * t;
        i = i.wrapping_add(1);
    }
    return a.wrapping_add((sum * rand_iter_mult) as uint32_t);
}
pub unsafe extern "C" fn sb_rand_pareto(mut a: uint32_t, mut b: uint32_t) -> uint32_t {
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp___0 = pow(tmp, pareto_power);
    return a
        .wrapping_add(
            (b.wrapping_sub(a).wrapping_add(1 as libc::c_uint) as libc::c_double
                * tmp___0) as uint32_t,
        );
}
pub unsafe extern "C" fn sb_rand_str(
    mut fmt: *const libc::c_char,
    mut buf: *mut libc::c_char,
) {
    let mut i: libc::c_uint = 0;
    let mut tmp: uint32_t = 0;
    let mut tmp___0: uint32_t = 0;
    i = 0 as libc::c_uint;
    while *fmt.offset(i as isize) as libc::c_int != 0 as libc::c_int {
        if *fmt.offset(i as isize) as libc::c_int == 35 as libc::c_int {
            tmp = sb_rand_uniform('0' as i32 as uint32_t, '9' as i32 as uint32_t);
            *buf.offset(i as isize) = tmp as libc::c_char;
        } else if *fmt.offset(i as isize) as libc::c_int == 64 as libc::c_int {
            tmp___0 = sb_rand_uniform('a' as i32 as uint32_t, 'z' as i32 as uint32_t);
            *buf.offset(i as isize) = tmp___0 as libc::c_char;
        } else {
            *buf.offset(i as isize) = *fmt.offset(i as isize);
        }
        i = i.wrapping_add(1);
    }
}
pub unsafe extern "C" fn sb_rand_varstr(
    mut buf: *mut libc::c_char,
    mut min_len: uint32_t,
    mut max_len: uint32_t,
) -> uint32_t {
    let mut i: libc::c_uint = 0;
    let mut num_chars: uint32_t = 0;
    let mut tmp: uint32_t = 0;
    if max_len == 0 as libc::c_uint {
        return 0 as libc::c_int as uint32_t;
    }
    if min_len > max_len {
        min_len = 1 as libc::c_int as uint32_t;
    }
    num_chars = sb_rand_uniform(min_len, max_len);
    i = 0 as libc::c_uint;
    while i < num_chars {
        tmp = sb_rand_uniform('0' as i32 as uint32_t, 'z' as i32 as uint32_t);
        *buf.offset(i as isize) = tmp as libc::c_char;
        i = i.wrapping_add(1);
    }
    return num_chars;
}
static mut prime: libc::c_uint = 4294967291 as libc::c_uint;
unsafe extern "C" fn rand_unique_permute(mut x: uint32_t) -> uint32_t {
    let mut residue: uint32_t = 0;
    let mut tmp: uint32_t = 0;
    if x >= prime {
        return x;
    }
    residue = (x as uint64_t)
        .wrapping_mul(x as uint64_t)
        .wrapping_rem(prime as libc::c_ulong) as uint32_t;
    if x <= prime.wrapping_div(2 as libc::c_uint) {
        tmp = residue;
    } else {
        tmp = prime.wrapping_sub(residue);
    }
    return tmp;
}
unsafe extern "C" fn rand_unique_seed(mut index___0: uint32_t, mut offset: uint32_t) {
    let mut tmp: uint32_t = 0;
    let mut tmp___0: uint32_t = 0;
    tmp = rand_unique_permute(index___0);
    rand_unique_index = rand_unique_permute(
        tmp.wrapping_add(1747911009 as libc::c_uint),
    );
    tmp___0 = rand_unique_permute(offset);
    rand_unique_offset = rand_unique_permute(
        tmp___0.wrapping_add(1182337285 as libc::c_uint),
    );
}
pub unsafe extern "C" fn sb_rand_unique() -> uint32_t {
    let mut index___0: uint32_t = 0;
    let mut tmp: uint32_t = 0;
    let mut tmp___0: uint32_t = 0;
    let mut tmp___1: uint32_t = 0;
    tmp = ck_pr_faa_32(&mut rand_unique_index, 1 as libc::c_int as uint32_t);
    index___0 = tmp;
    tmp___0 = rand_unique_permute(index___0);
    tmp___1 = rand_unique_permute(
        tmp___0.wrapping_add(rand_unique_offset) ^ 1542469173 as libc::c_uint,
    );
    return tmp___1;
}
unsafe extern "C" fn sb_rand_zipfian_int(
    mut n: uint32_t,
    mut e: libc::c_double,
    mut s: libc::c_double,
    mut hIntegralX1: libc::c_double,
) -> uint32_t {
    let mut hIntegralNumberOfElements: libc::c_double = 0.;
    let mut tmp: libc::c_double = 0.;
    let mut u: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    let mut x: libc::c_double = 0.;
    let mut tmp___1: libc::c_double = 0.;
    let mut k: uint32_t = 0;
    let mut tmp___2: libc::c_long = 0;
    let mut tmp___3: libc::c_long = 0;
    let mut tmp___4: libc::c_double = 0.;
    let mut tmp___5: libc::c_double = 0.;
    tmp = hIntegral(n as libc::c_double + 0.5f64, e);
    hIntegralNumberOfElements = tmp;
    loop {
        u = hIntegralNumberOfElements
            + tmp___0 * (hIntegralX1 - hIntegralNumberOfElements);
        tmp___1 = hIntegralInverse(u, e);
        x = tmp___1;
        k = (x + 0.5f64) as uint32_t;
        tmp___3 = (k < 1 as libc::c_uint) as libc::c_int as libc::c_long;
        if tmp___3 != 0 {
            k = 1 as libc::c_int as uint32_t;
        } else {
            tmp___2 = (k > n) as libc::c_int as libc::c_long;
            if tmp___2 != 0 {
                k = n;
            }
        }
        if k as libc::c_double - x <= s {
            return k
        } else {
            tmp___4 = hIntegral(k as libc::c_double + 0.5f64, e);
            tmp___5 = h(k as libc::c_double, e);
            if u >= tmp___4 - tmp___5 {
                return k;
            }
        }
    };
}
pub unsafe extern "C" fn sb_rand_zipfian(mut a: uint32_t, mut b: uint32_t) -> uint32_t {
    let mut tmp: uint32_t = 0;
    tmp = sb_rand_zipfian_int(
        b.wrapping_sub(a).wrapping_add(1 as libc::c_uint),
        zipf_exp,
        zipf_s,
        zipf_hIntegralX1,
    );
    return a.wrapping_add(tmp).wrapping_sub(1 as libc::c_uint);
}
unsafe extern "C" fn hIntegral(
    mut x: libc::c_double,
    mut e: libc::c_double,
) -> libc::c_double {
    let mut logX: libc::c_double = 0.;
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp = log(x);
    logX = tmp;
    tmp___0 = helper2((1 as libc::c_int as libc::c_double - e) * logX);
    return tmp___0 * logX;
}
unsafe extern "C" fn h(mut x: libc::c_double, mut e: libc::c_double) -> libc::c_double {
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp = log(x);
    tmp___0 = exp(-e * tmp);
    return tmp___0;
}
unsafe extern "C" fn hIntegralInverse(
    mut x: libc::c_double,
    mut e: libc::c_double,
) -> libc::c_double {
    let mut t: libc::c_double = 0.;
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    t = x * (1 as libc::c_int as libc::c_double - e);
    if t < -(1 as libc::c_int) as libc::c_double {
        t = -(1 as libc::c_int) as libc::c_double;
    }
    tmp = helper1(t);
    tmp___0 = exp(tmp * x);
    return tmp___0;
}
unsafe extern "C" fn helper1(mut x: libc::c_double) -> libc::c_double {
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp___0 = fabs(x);
    if tmp___0 > 1e-8f64 {
        tmp = log1p(x);
        return tmp / x;
    } else {
        return 1 as libc::c_int as libc::c_double
            - x * (0.5f64 - x * (0.33333333333333333f64 - 0.25f64 * x))
    };
}
unsafe extern "C" fn helper2(mut x: libc::c_double) -> libc::c_double {
    let mut tmp: libc::c_double = 0.;
    let mut tmp___0: libc::c_double = 0.;
    tmp___0 = fabs(x);
    if tmp___0 > 1e-8f64 {
        tmp = expm1(x);
        return tmp / x;
    } else {
        return 1 as libc::c_int as libc::c_double
            + x * 0.5f64
                * (1 as libc::c_int as libc::c_double
                    + x * 0.33333333333333333f64
                        * (1 as libc::c_int as libc::c_double + 0.25f64 * x))
    };
}
pub static mut sb_thread_attr: pthread_attr_t = pthread_attr_t { __size: [0; 56] };
#[inline]
unsafe extern "C" fn ck_pr_dec_uint(mut target: *mut libc::c_uint) {

}
static mut threads: *mut sb_thread_ctxt_t = 0 as *const sb_thread_ctxt_t
    as *mut sb_thread_ctxt_t;
static mut thread_stack_size: libc::c_int = 0;
pub unsafe extern "C" fn sb_thread_init() -> libc::c_int {
    let mut tmp: libc::c_ulonglong = 0;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = sb_get_value_size(b"thread-stack-size\0" as *const u8 as *const libc::c_char);
    thread_stack_size = tmp as libc::c_int;
    if thread_stack_size <= 0 as libc::c_int {
        log_text(
            LOG_FATAL,
            b"Invalid value for thread-stack-size: %d.\n\0" as *const u8
                as *const libc::c_char,
            thread_stack_size,
        );
        return 1 as libc::c_int;
    }
    pthread_attr_init(&mut sb_thread_attr);
    pthread_attr_setscope(&mut sb_thread_attr, 0 as libc::c_int);
    pthread_attr_setstacksize(&mut sb_thread_attr, thread_stack_size as size_t);
    tmp___0 = malloc(
        (sb_globals.threads as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<sb_thread_ctxt_t>() as libc::c_ulong),
    );
    threads = tmp___0 as *mut sb_thread_ctxt_t;
    if threads as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        log_text(
            LOG_FATAL,
            b"Memory allocation failure.\n\0" as *const u8 as *const libc::c_char,
        );
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_thread_done() {
    if threads as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free(threads as *mut libc::c_void);
    }
}
pub unsafe extern "C" fn sb_thread_create(
    mut thread: *mut pthread_t,
    mut attr: *const pthread_attr_t,
    mut start_routine: Option::<
        unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
    >,
    mut arg: *mut libc::c_void,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = pthread_create(thread, attr, start_routine, arg);
    return tmp;
}
pub unsafe extern "C" fn sb_thread_join(
    mut thread: pthread_t,
    mut retval: *mut *mut libc::c_void,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = pthread_join(thread, retval);
    return tmp;
}
pub unsafe extern "C" fn sb_thread_cancel(mut thread: pthread_t) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = pthread_cancel(thread);
    return tmp;
}
pub unsafe extern "C" fn sb_thread_create_workers(
    mut worker_routine: Option::<
        unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
    >,
) -> libc::c_int {
    let mut i: libc::c_uint = 0;
    let mut err: libc::c_int = 0;
    log_text(
        LOG_NOTICE,
        b"Initializing worker threads...\n\0" as *const u8 as *const libc::c_char,
    );
    i = 0 as libc::c_uint;
    while i < sb_globals.threads {
        (*threads.offset(i as isize)).id = i;
        i = i.wrapping_add(1);
    }
    i = 0 as libc::c_uint;
    while i < sb_globals.threads {
        err = sb_thread_create(
            &mut (*threads.offset(i as isize)).thread,
            &mut sb_thread_attr as *mut pthread_attr_t as *const pthread_attr_t,
            worker_routine,
            threads.offset(i as isize) as *mut libc::c_void,
        );
        if err != 0 as libc::c_int {
            log_errno(
                LOG_FATAL,
                b"sb_thread_create() for thread #%d failed.\0" as *const u8
                    as *const libc::c_char,
                i,
            );
            return 1 as libc::c_int;
        }
        i = i.wrapping_add(1);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_thread_join_workers() -> libc::c_int {
    let mut i: libc::c_uint = 0;
    let mut err: libc::c_int = 0;
    i = 0 as libc::c_uint;
    while i < sb_globals.threads {
        err = sb_thread_join(
            (*threads.offset(i as isize)).thread,
            0 as *mut libc::c_void as *mut *mut libc::c_void,
        );
        if err != 0 as libc::c_int {
            log_errno(
                LOG_FATAL,
                b"sb_thread_join() for thread #%d failed.\0" as *const u8
                    as *const libc::c_char,
                i,
            );
        }
        ck_pr_dec_uint(&mut sb_globals.threads_running);
        i = i.wrapping_add(1);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_barrier_init(
    mut barrier: *mut sb_barrier_t,
    mut count: libc::c_uint,
    mut callback: Option::<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int>,
    mut arg: *mut libc::c_void,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    if count == 0 as libc::c_uint {
        return 1 as libc::c_int;
    }
    tmp = pthread_mutex_init(
        &mut (*barrier).mutex,
        0 as *mut libc::c_void as *const pthread_mutexattr_t,
    );
    if tmp != 0 {
        return 1 as libc::c_int
    } else {
        tmp___0 = pthread_cond_init(
            &mut (*barrier).cond as *mut pthread_cond_t,
            0 as *mut libc::c_void as *const pthread_condattr_t,
        );
        if tmp___0 != 0 {
            return 1 as libc::c_int;
        }
    }
    (*barrier).init_count = count;
    (*barrier).count = count;
    (*barrier).callback = callback;
    (*barrier).arg = arg;
    (*barrier).serial = 0 as libc::c_uint;
    (*barrier).error = 0 as libc::c_int;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_barrier_wait(mut barrier: *mut sb_barrier_t) -> libc::c_int {
    let mut res: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut serial: libc::c_uint = 0;
    pthread_mutex_lock(&mut (*barrier).mutex);
    (*barrier).count = ((*barrier).count).wrapping_sub(1);
    if (*barrier).count != 0 {
        serial = (*barrier).serial;
        loop {
            pthread_cond_wait(
                &mut (*barrier).cond as *mut pthread_cond_t,
                &mut (*barrier).mutex as *mut pthread_mutex_t,
            );
            if !(serial == (*barrier).serial) {
                break;
            }
        }
        if (*barrier).error != 0 {
            res = -(1 as libc::c_int);
        } else {
            res = 0 as libc::c_int;
        }
        pthread_mutex_unlock(&mut (*barrier).mutex);
    } else {
        (*barrier).serial = ((*barrier).serial).wrapping_add(1);
        (*barrier).count = (*barrier).init_count;
        res = 1 as libc::c_int;
        pthread_cond_broadcast(&mut (*barrier).cond);
        if ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int>,
            libc::c_ulong,
        >((*barrier).callback) != 0 as *mut libc::c_void as libc::c_ulong
        {
            tmp = (Some(((*barrier).callback).expect("non-null function pointer")))
                .expect("non-null function pointer")((*barrier).arg);
            if tmp != 0 as libc::c_int {
                (*barrier).error = 1 as libc::c_int;
                res = -(1 as libc::c_int);
            }
        }
        pthread_mutex_unlock(&mut (*barrier).mutex);
    }
    return res;
}
pub unsafe extern "C" fn sb_barrier_destroy(mut barrier: *mut sb_barrier_t) {
    pthread_mutex_destroy(&mut (*barrier).mutex);
    pthread_cond_destroy(&mut (*barrier).cond);
}
pub unsafe extern "C" fn sb_counter_val(
    mut thread_id: libc::c_int,
    mut type_0: sb_counter_type_t,
) -> uint64_t {
    let mut tmp: uint64_t = 0;
    tmp = ck_pr_md_load_64(
        &mut *(*sb_counters.offset(thread_id as isize))
            .as_mut_ptr()
            .offset(type_0 as isize) as *mut uint64_t as *const uint64_t,
    );
    return tmp;
}
pub unsafe extern "C" fn sb_counter_add(
    mut thread_id: libc::c_int,
    mut type_0: sb_counter_type_t,
    mut val: uint64_t,
) {
    let mut tmp: uint64_t = 0;
    tmp = sb_counter_val(thread_id, type_0);
    ck_pr_md_store_64(
        &mut *(*sb_counters.offset(thread_id as isize))
            .as_mut_ptr()
            .offset(type_0 as isize),
        tmp.wrapping_add(val),
    );
}
pub unsafe extern "C" fn sb_counter_inc(
    mut thread_id: libc::c_int,
    mut type_0: sb_counter_type_t,
) {
    sb_counter_add(thread_id, type_0, 1 as libc::c_int as uint64_t);
}
pub static mut sysbench_lua: [libc::c_uchar; 5464] = [
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '8' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'K' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '@' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '5' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'J' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'j' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'j' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'j' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\\' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'j' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'j' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '\\' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\\' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\\' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\u{0}' as i32 as libc::c_uchar,
];
pub static mut sysbench_lua_len: size_t = 0;
pub static mut sysbench_cmdline_lua: [libc::c_uchar; 6311] = [
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '7' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '8' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'K' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '@' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '5' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'Z' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'X' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'Z' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'Z' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'X' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'X' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\u{0}' as i32 as libc::c_uchar,
];
pub static mut sysbench_cmdline_lua_len: size_t = 0;
pub static mut sysbench_rand_lua: [libc::c_uchar; 2543] = [
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '7' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'K' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '@' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '5' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '8' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '8' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\u{0}' as i32 as libc::c_uchar,
];
pub static mut sysbench_rand_lua_len: size_t = 0;
pub static mut sysbench_sql_lua: [libc::c_uchar; 14705] = [
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '7' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'K' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '@' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '5' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'X' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'X' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'J' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'Q' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '%' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '6' as i32 as libc::c_uchar,
    '4' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '8' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '8' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '#' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '?' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'V' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '~' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '+' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\u{0}' as i32 as libc::c_uchar,
];
pub static mut sysbench_sql_lua_len: size_t = 0;
pub static mut sysbench_histogram_lua: [libc::c_uchar; 2019] = [
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '7' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'K' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    '@' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'W' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'H' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'T' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'R' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'O' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'E' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'Y' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'N' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'G' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'L' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '5' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'k' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'F' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'M' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '2' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    '3' as i32 as libc::c_uchar,
    '0' as i32 as libc::c_uchar,
    '1' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'S' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'B' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'I' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '-' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'q' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '"' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '[' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'A' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'D' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'U' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'P' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    '/' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '*' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    ';' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    ']' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'v' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ':' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '{' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '<' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '>' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '}' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    'p' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    '\'' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'y' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    '=' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'w' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'z' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'x' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'u' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'c' as i32 as libc::c_uchar,
    '(' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    ',' as i32 as libc::c_uchar,
    ' ' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'f' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    'C' as i32 as libc::c_uchar,
    '.' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    'b' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'h' as i32 as libc::c_uchar,
    'i' as i32 as libc::c_uchar,
    's' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'o' as i32 as libc::c_uchar,
    'g' as i32 as libc::c_uchar,
    'r' as i32 as libc::c_uchar,
    'a' as i32 as libc::c_uchar,
    'm' as i32 as libc::c_uchar,
    '_' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'l' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    't' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    ')' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    'e' as i32 as libc::c_uchar,
    'n' as i32 as libc::c_uchar,
    'd' as i32 as libc::c_uchar,
    '\n' as i32 as libc::c_uchar,
    '\u{0}' as i32 as libc::c_uchar,
];
pub static mut sysbench_histogram_lua_len: size_t = 0;
static mut states: *mut *mut lua_State = 0 as *const *mut lua_State
    as *mut *mut lua_State;
static mut sbtest: sb_test_t_0 = sb_test_t_0 {
    sname: 0 as *const libc::c_char,
    lname: 0 as *const libc::c_char,
    ops: sb_operations_t {
        init: None,
        prepare: None,
        thread_init: None,
        print_mode: None,
        next_event: None,
        execute_event: None,
        report_intermediate: None,
        report_cumulative: None,
        thread_run: None,
        thread_done: None,
        cleanup: None,
        done: None,
    },
    builtin_cmds: sb_builtin_cmds_t {
        help: None,
        prepare: None,
        run: None,
        cleanup: None,
    },
    args: 0 as *const sb_arg_t as *mut sb_arg_t,
    listitem: sb_list_t {
        next_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
        prev_p: 0 as *const sb_list_item_t as *mut sb_list_item_t,
    },
};
static mut tls_lua_ctxt: sb_lua_ctxt_t = sb_lua_ctxt_t {
    con: 0 as *const db_conn_t as *mut db_conn_t,
    driver: 0 as *const db_driver_t as *mut db_driver_t,
    L: 0 as *const lua_State as *mut lua_State,
};
static mut internal_scripts: [internal_script_t; 6] = unsafe {
    [
        {
            let mut init = __anonstruct_internal_script_t_141024058 {
                name: b"sysbench.rand.lua\0" as *const u8 as *const libc::c_char,
                source: sysbench_rand_lua.as_ptr() as *const libc::c_uchar,
                source_len: &sysbench_rand_lua_len as *const size_t as *mut size_t,
            };
            init
        },
        {
            let mut init = __anonstruct_internal_script_t_141024058 {
                name: b"sysbench.lua\0" as *const u8 as *const libc::c_char,
                source: sysbench_lua.as_ptr() as *const libc::c_uchar,
                source_len: &sysbench_lua_len as *const size_t as *mut size_t,
            };
            init
        },
        {
            let mut init = __anonstruct_internal_script_t_141024058 {
                name: b"sysbench.cmdline.lua\0" as *const u8 as *const libc::c_char,
                source: sysbench_cmdline_lua.as_ptr() as *const libc::c_uchar,
                source_len: &sysbench_cmdline_lua_len as *const size_t as *mut size_t,
            };
            init
        },
        {
            let mut init = __anonstruct_internal_script_t_141024058 {
                name: b"sysbench.sql.lua\0" as *const u8 as *const libc::c_char,
                source: sysbench_sql_lua.as_ptr() as *const libc::c_uchar,
                source_len: &sysbench_sql_lua_len as *const size_t as *mut size_t,
            };
            init
        },
        {
            let mut init = __anonstruct_internal_script_t_141024058 {
                name: b"sysbench.histogram.lua\0" as *const u8 as *const libc::c_char,
                source: sysbench_histogram_lua.as_ptr()
                    as *const libc::c_uchar,
                source_len: &sysbench_histogram_lua_len as *const size_t as *mut size_t,
            };
            init
        },
        {
            let mut init = __anonstruct_internal_script_t_141024058 {
                name: 0 as *const libc::c_void as *mut libc::c_void
                    as *const libc::c_char,
                source: 0 as *const libc::c_void as *mut libc::c_void
                    as *const libc::c_uchar,
                source_len: 0 as *const size_t as *mut size_t,
            };
            init
        },
    ]
};
static mut gstate: *mut lua_State = 0 as *const lua_State as *mut lua_State;
static mut sb_lua_custom_command: *const libc::c_char = 0 as *const libc::c_char;
static mut lua_ops: sb_operations_t = {
    let mut init = __anonstruct_sb_operations_t_306313410 {
        init: Some(sb_lua_op_init as unsafe extern "C" fn() -> libc::c_int),
        prepare: None,
        thread_init: Some(
            sb_lua_op_thread_init as unsafe extern "C" fn(libc::c_int) -> libc::c_int,
        ),
        print_mode: None,
        next_event: None,
        execute_event: None,
        report_intermediate: Some(
            db_report_intermediate as unsafe extern "C" fn(*mut sb_stat_t) -> (),
        ),
        report_cumulative: Some(
            db_report_cumulative as unsafe extern "C" fn(*mut sb_stat_t) -> (),
        ),
        thread_run: None,
        thread_done: Some(
            sb_lua_op_thread_done as unsafe extern "C" fn(libc::c_int) -> libc::c_int,
        ),
        cleanup: None,
        done: Some(sb_lua_op_done as unsafe extern "C" fn() -> libc::c_int),
    };
    init
};
unsafe extern "C" fn call_error(mut L: *mut lua_State, mut name: *const libc::c_char) {
    let mut err: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = lua_tolstring(L, -(1 as libc::c_int), 0 as *mut libc::c_void as *mut size_t);
    err = tmp;
    if !err.is_null() {
        tmp___0 = err;
    } else {
        tmp___0 = b"(not a string)\0" as *const u8 as *const libc::c_char;
    }
    log_text(
        LOG_FATAL,
        b"`%s' function failed: %s\0" as *const u8 as *const libc::c_char,
        name,
        tmp___0,
    );
    lua_settop(L, -(2 as libc::c_int));
}
unsafe extern "C" fn report_error(mut L: *mut lua_State) {
    let mut err: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = lua_tolstring(L, -(1 as libc::c_int), 0 as *mut libc::c_void as *mut size_t);
    err = tmp;
    if !err.is_null() {
        tmp___0 = err;
    } else {
        tmp___0 = b"(not a string)\0" as *const u8 as *const libc::c_char;
    }
    log_text(LOG_FATAL, b"%s\0" as *const u8 as *const libc::c_char, tmp___0);
    lua_settop(L, -(2 as libc::c_int));
}
unsafe extern "C" fn func_available(
    mut L: *mut lua_State,
    mut func: *const libc::c_char,
) -> bool {
    let mut rc: bool = false;
    let mut tmp: libc::c_int = 0;
    lua_getfield(L, -(10002 as libc::c_int), func);
    tmp = lua_type(L, -(1 as libc::c_int));
    rc = tmp == 6 as libc::c_int;
    lua_settop(L, -(2 as libc::c_int));
    return rc;
}
unsafe extern "C" fn do_export_options(
    mut L: *mut lua_State,
    mut global: bool,
) -> libc::c_int {
    let mut pos: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut opt: *mut option_t = 0 as *mut option_t;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_double = 0.;
    let mut tmp___4: libc::c_ulonglong = 0;
    let mut tmp___5: *const libc::c_char = 0 as *const libc::c_char;
    let mut val: *mut sb_list_item_t = 0 as *mut sb_list_item_t;
    let mut count: libc::c_int = 0;
    let mut tmp___6: *mut sb_list_t = 0 as *mut sb_list_t;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: *mut sb_list_t = 0 as *mut sb_list_t;
    if !global {
        lua_getfield(
            L,
            -(10002 as libc::c_int),
            b"sysbench\0" as *const u8 as *const libc::c_char,
        );
        lua_pushlstring(
            L,
            b"opt\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
        lua_createtable(L, 0 as libc::c_int, 0 as libc::c_int);
    }
    pos = sb_options_enum_start();
    loop {
        pos = sb_options_enum_next(pos, &mut opt);
        if !(pos as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong) {
            break;
        }
        if global {
            lua_getfield(L, -(10002 as libc::c_int), (*opt).name as *const libc::c_char);
            tmp___0 = lua_type(L, -(1 as libc::c_int));
            if tmp___0 == 6 as libc::c_int {
                lua_settop(L, -(2 as libc::c_int));
                continue;
            } else {
                lua_settop(L, -(2 as libc::c_int));
            }
        } else {
            lua_pushstring(L, (*opt).name as *const libc::c_char);
        }
        match (*opt).type_0 as libc::c_uint {
            1 => {
                tmp___1 = sb_opt_to_flag(opt);
                lua_pushboolean(L, tmp___1);
            }
            2 => {
                tmp___2 = sb_opt_to_int(opt);
                lua_pushnumber(L, tmp___2 as lua_Number);
            }
            4 => {
                tmp___3 = sb_opt_to_double(opt);
                lua_pushnumber(L, tmp___3);
            }
            3 => {
                tmp___4 = sb_opt_to_size(opt);
                lua_pushnumber(L, tmp___4 as lua_Number);
            }
            5 => {
                tmp = sb_opt_to_string(opt);
                if !tmp.is_null() {
                    tmp___5 = tmp as *const libc::c_char;
                } else {
                    tmp___5 = b"\0" as *const u8 as *const libc::c_char;
                }
                lua_pushstring(L, tmp___5);
            }
            6 => {
                lua_createtable(L, 0 as libc::c_int, 0 as libc::c_int);
                count = 1 as libc::c_int;
                tmp___6 = sb_opt_to_list(opt);
                val = (*tmp___6).next_p;
                loop {
                    tmp___8 = sb_opt_to_list(opt);
                    if !(val as libc::c_ulong != tmp___8 as libc::c_ulong) {
                        break;
                    }
                    lua_pushstring(
                        L,
                        (*((val as *mut libc::c_char)
                            .offset(
                                -(&mut (*(0 as *mut value_t)).listitem
                                    as *mut sb_list_item_t as libc::c_ulong as isize),
                            ) as *mut libc::c_void as *mut value_t))
                            .data as *const libc::c_char,
                    );
                    tmp___7 = count;
                    count += 1;
                    lua_rawseti(L, -(2 as libc::c_int), tmp___7);
                    val = (*val).next_p;
                }
            }
            7 => {
                lua_pushnil(L);
            }
            _ => {
                log_text(
                    LOG_WARNING,
                    b"Global option '%s' will not be exported, because the type is unknown\0"
                        as *const u8 as *const libc::c_char,
                    (*opt).name,
                );
                lua_pushnil(L);
            }
        }
        if global {
            lua_setfield(L, -(10002 as libc::c_int), (*opt).name as *const libc::c_char);
        } else {
            lua_settable(L, -(3 as libc::c_int));
        }
    }
    if !global {
        lua_settable(L, -(3 as libc::c_int));
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn export_options(mut L: *mut lua_State) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = do_export_options(L, 0 as libc::c_int != 0);
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_load_lua(
    mut testname: *const libc::c_char,
) -> *mut sb_test_t_0 {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: bool = false;
    let mut tmp___11: *mut libc::c_void = 0 as *mut libc::c_void;
    if testname as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = strdup(testname);
        tmp = tmp___0;
        tmp___1 = __xpg_basename(tmp);
        tmp___2 = strdup(tmp___1 as *const libc::c_char);
        sbtest.sname = tmp___2 as *const libc::c_char;
        sbtest.lname = tmp as *const libc::c_char;
    } else {
        tmp___3 = strdup(b"<stdin>\0" as *const u8 as *const libc::c_char);
        sbtest.sname = tmp___3 as *const libc::c_char;
        sbtest.lname = 0 as *mut libc::c_void as *const libc::c_char;
    }
    gstate = sb_lua_new_state();
    if !(gstate as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong) {
        tmp___4 = read_cmdline_options(gstate);
        if !(tmp___4 != 0) {
            tmp___5 = func_available(
                gstate,
                b"prepare\0" as *const u8 as *const libc::c_char,
            );
            if tmp___5 {
                sbtest
                    .builtin_cmds
                    .prepare = Some(
                    sb_lua_cmd_prepare as unsafe extern "C" fn() -> libc::c_int,
                );
            }
            tmp___6 = func_available(
                gstate,
                b"cleanup\0" as *const u8 as *const libc::c_char,
            );
            if tmp___6 {
                sbtest
                    .builtin_cmds
                    .cleanup = Some(
                    sb_lua_cmd_cleanup as unsafe extern "C" fn() -> libc::c_int,
                );
            }
            tmp___7 = func_available(
                gstate,
                b"help\0" as *const u8 as *const libc::c_char,
            );
            if tmp___7 {
                sbtest
                    .builtin_cmds
                    .help = Some(
                    sb_lua_cmd_help as unsafe extern "C" fn() -> libc::c_int,
                );
            }
            sbtest.ops = lua_ops;
            tmp___8 = func_available(
                gstate,
                b"thread_run\0" as *const u8 as *const libc::c_char,
            );
            if tmp___8 {
                sbtest
                    .ops
                    .thread_run = Some(
                    sb_lua_op_thread_run
                        as unsafe extern "C" fn(libc::c_int) -> libc::c_int,
                );
            }
            tmp___9 = sb_lua_hook_defined(
                gstate,
                b"report_intermediate\0" as *const u8 as *const libc::c_char,
            );
            if tmp___9 {
                sbtest
                    .ops
                    .report_intermediate = Some(
                    sb_lua_report_intermediate
                        as unsafe extern "C" fn(*mut sb_stat_t) -> (),
                );
            }
            tmp___10 = sb_lua_hook_defined(
                gstate,
                b"report_cumulative\0" as *const u8 as *const libc::c_char,
            );
            if tmp___10 {
                sbtest
                    .ops
                    .report_cumulative = Some(
                    sb_lua_report_cumulative
                        as unsafe extern "C" fn(*mut sb_stat_t) -> (),
                );
            }
            tmp___11 = calloc(
                sb_globals.threads as size_t,
                ::std::mem::size_of::<*mut lua_State>() as libc::c_ulong,
            );
            states = tmp___11 as *mut *mut lua_State;
            if !(states as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong) {
                return &mut sbtest;
            }
        }
    }
    sb_lua_done();
    return 0 as *mut libc::c_void as *mut sb_test_t_0;
}
pub unsafe extern "C" fn sb_lua_done() {
    let mut i: size_t = 0;
    sb_lua_close_state(gstate);
    gstate = 0 as *mut libc::c_void as *mut lua_State;
    if states as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free(states as *mut libc::c_void);
    }
    states = 0 as *mut libc::c_void as *mut *mut lua_State;
    if sbtest.args as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        i = 0 as libc::c_int as size_t;
        while (*(sbtest.args).offset(i as isize)).name as libc::c_ulong
            != 0 as *mut libc::c_void as libc::c_ulong
        {
            if (*(sbtest.args).offset(i as isize)).name as libc::c_ulong
                != 0 as *mut libc::c_void as libc::c_ulong
            {
                free((*(sbtest.args).offset(i as isize)).name as *mut libc::c_void);
            }
            let ref mut fresh9 = (*(sbtest.args).offset(i as isize)).name;
            *fresh9 = 0 as *mut libc::c_void as *const libc::c_char;
            if (*(sbtest.args).offset(i as isize)).desc as libc::c_ulong
                != 0 as *mut libc::c_void as libc::c_ulong
            {
                free((*(sbtest.args).offset(i as isize)).desc as *mut libc::c_void);
            }
            let ref mut fresh10 = (*(sbtest.args).offset(i as isize)).desc;
            *fresh10 = 0 as *mut libc::c_void as *const libc::c_char;
            if (*(sbtest.args).offset(i as isize)).value as libc::c_ulong
                != 0 as *mut libc::c_void as libc::c_ulong
            {
                free((*(sbtest.args).offset(i as isize)).value as *mut libc::c_void);
            }
            let ref mut fresh11 = (*(sbtest.args).offset(i as isize)).value;
            *fresh11 = 0 as *mut libc::c_void as *const libc::c_char;
            i = i.wrapping_add(1);
        }
        if sbtest.args as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            free(sbtest.args as *mut libc::c_void);
        }
        sbtest.args = 0 as *mut libc::c_void as *mut sb_arg_t;
    }
    if sbtest.sname as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free(sbtest.sname as *mut libc::c_void);
    }
    sbtest.sname = 0 as *mut libc::c_void as *const libc::c_char;
    if sbtest.lname as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free(sbtest.lname as *mut libc::c_void);
    }
    sbtest.lname = 0 as *mut libc::c_void as *const libc::c_char;
}
unsafe extern "C" fn sb_lua_op_init() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: bool = false;
    tmp = export_options(gstate);
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    lua_getfield(
        gstate,
        -(10002 as libc::c_int),
        b"init\0" as *const u8 as *const libc::c_char,
    );
    tmp___1 = lua_type(gstate, -(1 as libc::c_int));
    if !(tmp___1 == 0 as libc::c_int) {
        tmp___0 = lua_pcall(
            gstate,
            0 as libc::c_int,
            0 as libc::c_int,
            0 as libc::c_int,
        );
        if tmp___0 != 0 {
            call_error(gstate, b"init\0" as *const u8 as *const libc::c_char);
            return 1 as libc::c_int;
        }
    }
    tmp___2 = func_available(gstate, b"event\0" as *const u8 as *const libc::c_char);
    if !tmp___2 {
        log_text(
            LOG_FATAL,
            b"cannot find the event() function in %s\0" as *const u8
                as *const libc::c_char,
            sbtest.sname,
        );
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sb_lua_op_thread_init(mut thread_id: libc::c_int) -> libc::c_int {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    L = sb_lua_new_state();
    if L as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 1 as libc::c_int;
    }
    let ref mut fresh12 = *states.offset(thread_id as isize);
    *fresh12 = L;
    tmp = export_options(L);
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"thread_init\0" as *const u8 as *const libc::c_char,
    );
    tmp___1 = lua_type(L, -(1 as libc::c_int));
    if !(tmp___1 == 0 as libc::c_int) {
        lua_pushnumber(L, thread_id as lua_Number);
        tmp___0 = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
        if tmp___0 != 0 {
            call_error(L, b"thread_init\0" as *const u8 as *const libc::c_char);
            return 1 as libc::c_int;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sb_lua_op_thread_run(mut thread_id: libc::c_int) -> libc::c_int {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: libc::c_int = 0;
    L = *states.offset(thread_id as isize);
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"thread_run\0" as *const u8 as *const libc::c_char,
    );
    lua_pushnumber(L, thread_id as lua_Number);
    tmp = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
    if tmp != 0 {
        call_error(L, b"thread_run\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sb_lua_op_thread_done(mut thread_id: libc::c_int) -> libc::c_int {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    L = *states.offset(thread_id as isize);
    rc = 0 as libc::c_int;
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"thread_done\0" as *const u8 as *const libc::c_char,
    );
    tmp___0 = lua_type(L, -(1 as libc::c_int));
    if !(tmp___0 == 0 as libc::c_int) {
        lua_pushnumber(L, thread_id as lua_Number);
        tmp = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
        if tmp != 0 {
            call_error(L, b"thread_done\0" as *const u8 as *const libc::c_char);
            rc = 1 as libc::c_int;
        }
    }
    sb_lua_close_state(L);
    return rc;
}
unsafe extern "C" fn sb_lua_op_done() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    lua_getfield(
        gstate,
        -(10002 as libc::c_int),
        b"done\0" as *const u8 as *const libc::c_char,
    );
    tmp___0 = lua_type(gstate, -(1 as libc::c_int));
    if !(tmp___0 == 0 as libc::c_int) {
        tmp = lua_pcall(gstate, 0 as libc::c_int, 0 as libc::c_int, 0 as libc::c_int);
        if tmp != 0 {
            call_error(gstate, b"done\0" as *const u8 as *const libc::c_char);
            return 1 as libc::c_int;
        }
    }
    sb_lua_done();
    return 0 as libc::c_int;
}
unsafe extern "C" fn load_internal_scripts(mut L: *mut lua_State) -> libc::c_int {
    let mut s: *mut internal_script_t = 0 as *mut internal_script_t;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: libc::c_int = 0;
    s = internal_scripts.as_mut_ptr();
    while (*s).name as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = luaL_loadbuffer(
            L,
            (*s).source as *const libc::c_char,
            *((*s).source_len).offset(0 as libc::c_int as isize),
            (*s).name,
        );
        if tmp___0 != 0 {
            tmp = lua_tolstring(
                L,
                -(1 as libc::c_int),
                0 as *mut libc::c_void as *mut size_t,
            );
            log_text(
                LOG_FATAL,
                b"failed to load internal module '%s': %s\0" as *const u8
                    as *const libc::c_char,
                (*s).name,
                tmp,
            );
            lua_settop(L, -(2 as libc::c_int));
            return 1 as libc::c_int;
        }
        lua_call(L, 0 as libc::c_int, 0 as libc::c_int);
        s = s.offset(1);
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sb_lua_var_number(
    mut L: *mut lua_State,
    mut name: *const libc::c_char,
    mut n: lua_Number,
) {
    lua_pushstring(L, name);
    lua_pushnumber(L, n);
    lua_settable(L, -(3 as libc::c_int));
}
unsafe extern "C" fn sb_lua_var_string(
    mut L: *mut lua_State,
    mut name: *const libc::c_char,
    mut s: *const libc::c_char,
) {
    lua_pushstring(L, name);
    lua_pushstring(L, s);
    lua_settable(L, -(3 as libc::c_int));
}
unsafe extern "C" fn sb_lua_set_paths(mut L: *mut lua_State) {
    let mut top: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut home: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: libc::c_int = 0;
    let mut path: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut def: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___3: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut def___0: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___6: *const libc::c_char = 0 as *const libc::c_char;
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"package\0" as *const u8 as *const libc::c_char,
    );
    tmp = lua_gettop(L);
    top = tmp;
    lua_pushlstring(
        L,
        b"./?.lua;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_pushlstring(
        L,
        b"./?/init.lua;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_pushlstring(
        L,
        b"./src/lua/?.lua;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    tmp___0 = getenv(b"HOME\0" as *const u8 as *const libc::c_char);
    home = tmp___0 as *const libc::c_char;
    if home as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        lua_pushstring(L, home);
        lua_pushlstring(
            L,
            b"/.luarocks/share/lua/5.1/?.lua;\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
        lua_pushstring(L, home);
        lua_pushlstring(
            L,
            b"/.luarocks/share/lua/5.1/?/init.lua;\0" as *const u8
                as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 37]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
        lua_pushstring(L, home);
        lua_pushlstring(
            L,
            b"/.luarocks/share/lua/?.lua;\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 28]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
        lua_pushstring(L, home);
        lua_pushlstring(
            L,
            b"/.luarocks/share/lua/?/init.lua;\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
    }
    lua_pushlstring(
        L,
        b"/usr/local/share/lua/5.1/?.lua;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_pushlstring(
        L,
        b"/usr/share/lua/5.1/?.lua;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 26]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_pushlstring(
        L,
        b"/usr/local/share/sysbench/?.lua;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    tmp___1 = lua_gettop(L);
    lua_concat(L, tmp___1 - top);
    tmp___2 = getenv(b"LUA_PATH\0" as *const u8 as *const libc::c_char);
    path = tmp___2 as *const libc::c_char;
    if path as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp___3 = lua_tolstring(
            L,
            -(1 as libc::c_int),
            0 as *mut libc::c_void as *mut size_t,
        );
        def = tmp___3;
        path = luaL_gsub(
            L,
            path,
            b";;\0" as *const u8 as *const libc::c_char,
            b";\x01;\0" as *const u8 as *const libc::c_char,
        );
        luaL_gsub(L, path, b"\x01\0" as *const u8 as *const libc::c_char, def);
        lua_remove(L, -(2 as libc::c_int));
        lua_remove(L, -(2 as libc::c_int));
    }
    lua_setfield(L, top, b"path\0" as *const u8 as *const libc::c_char);
    lua_pushlstring(
        L,
        b"./?.so;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    if home as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        lua_pushstring(L, home);
        lua_pushlstring(
            L,
            b"/.luarocks/lib/lua/5.1/?.so;\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 29]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
        lua_pushstring(L, home);
        lua_pushlstring(
            L,
            b"/.luarocks/lib/lua/?.so;\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 25]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
    }
    lua_pushlstring(
        L,
        b"/usr/local/lib/lua/5.1/?.so;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 29]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_pushlstring(
        L,
        b"/usr/lib/lua/5.1/?.so;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_pushlstring(
        L,
        b"/usr/local/lib/sysbench;\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 25]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    tmp___4 = lua_gettop(L);
    lua_concat(L, tmp___4 - top);
    tmp___5 = getenv(b"LUA_CPATH\0" as *const u8 as *const libc::c_char);
    path = tmp___5 as *const libc::c_char;
    if path as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp___6 = lua_tolstring(
            L,
            -(1 as libc::c_int),
            0 as *mut libc::c_void as *mut size_t,
        );
        def___0 = tmp___6;
        path = luaL_gsub(
            L,
            path,
            b";;\0" as *const u8 as *const libc::c_char,
            b";\x01;\0" as *const u8 as *const libc::c_char,
        );
        luaL_gsub(L, path, b"\x01\0" as *const u8 as *const libc::c_char, def___0);
        lua_remove(L, -(2 as libc::c_int));
        lua_remove(L, -(2 as libc::c_int));
    }
    lua_setfield(L, top, b"cpath\0" as *const u8 as *const libc::c_char);
    lua_settop(L, -(2 as libc::c_int));
}
pub unsafe extern "C" fn sb_lua_set_test_args(
    mut args: *mut sb_arg_t,
    mut len: size_t,
) -> libc::c_int {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut i: size_t = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut __constr_expr_2: sb_arg_t = sb_arg_t {
        name: 0 as *const libc::c_char,
        desc: 0 as *const libc::c_char,
        value: 0 as *const libc::c_char,
        type_0: SB_ARG_TYPE_NULL,
        validate: None,
    };
    tmp = malloc(
        len
            .wrapping_add(1 as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<sb_arg_t>() as libc::c_ulong),
    );
    sbtest.args = tmp as *mut sb_arg_t;
    i = 0 as libc::c_int as size_t;
    while i < len {
        tmp___0 = strdup((*args.offset(i as isize)).name);
        let ref mut fresh13 = (*(sbtest.args).offset(i as isize)).name;
        *fresh13 = tmp___0 as *const libc::c_char;
        tmp___1 = strdup((*args.offset(i as isize)).desc);
        let ref mut fresh14 = (*(sbtest.args).offset(i as isize)).desc;
        *fresh14 = tmp___1 as *const libc::c_char;
        (*(sbtest.args).offset(i as isize)).type_0 = (*args.offset(i as isize)).type_0;
        if (*args.offset(i as isize)).value as libc::c_ulong
            != 0 as *mut libc::c_void as libc::c_ulong
        {
            tmp___2 = strdup((*args.offset(i as isize)).value);
            let ref mut fresh15 = (*(sbtest.args).offset(i as isize)).value;
            *fresh15 = tmp___2 as *const libc::c_char;
        } else {
            let ref mut fresh16 = (*(sbtest.args).offset(i as isize)).value;
            *fresh16 = 0 as *mut libc::c_void as *const libc::c_char;
        }
        let ref mut fresh17 = (*(sbtest.args).offset(i as isize)).validate;
        *fresh17 = (*args.offset(i as isize)).validate;
        i = i.wrapping_add(1);
    }
    __constr_expr_2.name = 0 as *mut libc::c_void as *const libc::c_char;
    __constr_expr_2.desc = 0 as *const libc::c_char;
    __constr_expr_2.value = 0 as *const libc::c_char;
    __constr_expr_2.type_0 = SB_ARG_TYPE_NULL;
    __constr_expr_2.validate = None;
    *(sbtest.args).offset(len as isize) = __constr_expr_2;
    return 0 as libc::c_int;
}
unsafe extern "C" fn read_cmdline_options(mut L: *mut lua_State) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut rc: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"cmdline\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"read_cmdline_options\0" as *const u8 as *const libc::c_char,
    );
    tmp = lua_type(L, -(1 as libc::c_int));
    if !(tmp == 6 as libc::c_int) {
        log_text(
            LOG_WARNING,
            b"Cannot find sysbench.cmdline.read_cmdline_options()\0" as *const u8
                as *const libc::c_char,
        );
        lua_settop(L, -(4 as libc::c_int));
        return 1 as libc::c_int;
    }
    tmp___0 = lua_pcall(L, 0 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
    if tmp___0 != 0 as libc::c_int {
        call_error(
            L,
            b"sysbench.cmdline.read_cmdline_options\0" as *const u8
                as *const libc::c_char,
        );
        lua_settop(L, -(3 as libc::c_int));
        return 1 as libc::c_int;
    }
    tmp___1 = lua_toboolean(L, -(1 as libc::c_int));
    rc = (tmp___1 == 0 as libc::c_int) as libc::c_int;
    lua_settop(L, -(4 as libc::c_int));
    return rc;
}
unsafe extern "C" fn sb_lua_new_state() -> *mut lua_State {
    let mut current_block: u64;
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut rc: libc::c_int = 0;
    let mut msg: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___1: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    L = luaL_newstate();
    luaL_openlibs(L);
    if !(sb_globals.luajit_cmd).is_null() {
        tmp = sb_lua_do_jitcmd(L, sb_globals.luajit_cmd);
        if tmp != 0 {
            return 0 as *mut libc::c_void as *mut lua_State;
        }
    }
    sb_lua_set_paths(L);
    lua_createtable(L, 0 as libc::c_int, 0 as libc::c_int);
    sb_lua_var_number(
        L,
        b"tid\0" as *const u8 as *const libc::c_char,
        sb_tls_thread_id as lua_Number,
    );
    lua_pushlstring(
        L,
        b"error\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_createtable(L, 0 as libc::c_int, 0 as libc::c_int);
    sb_lua_var_number(
        L,
        b"NONE\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"RESTART_EVENT\0" as *const u8 as *const libc::c_char,
        1 as libc::c_int as lua_Number,
    );
    lua_settable(L, -(3 as libc::c_int));
    sb_lua_var_string(
        L,
        b"version\0" as *const u8 as *const libc::c_char,
        b"1.1.0\0" as *const u8 as *const libc::c_char,
    );
    sb_lua_var_string(
        L,
        b"version_string\0" as *const u8 as *const libc::c_char,
        b"sysbench 1.1.0-df89d34\0" as *const u8 as *const libc::c_char,
    );
    lua_pushlstring(
        L,
        b"cmdline\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_createtable(L, 0 as libc::c_int, 0 as libc::c_int);
    lua_pushlstring(
        L,
        b"argv\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
    );
    lua_createtable(L, sb_globals.argc, 0 as libc::c_int);
    i = 0 as libc::c_int;
    while i < sb_globals.argc {
        lua_pushstring(L, *(sb_globals.argv).offset(i as isize) as *const libc::c_char);
        lua_rawseti(L, -(2 as libc::c_int), i);
        i += 1;
    }
    lua_settable(L, -(3 as libc::c_int));
    if !(sb_globals.cmdname).is_null() {
        lua_pushlstring(
            L,
            b"command\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        );
        lua_pushstring(L, sb_globals.cmdname);
        lua_settable(L, -(3 as libc::c_int));
    }
    sb_lua_var_string(
        L,
        b"script_path\0" as *const u8 as *const libc::c_char,
        sbtest.lname,
    );
    lua_settable(L, -(3 as libc::c_int));
    lua_setfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    luaL_newmetatable(L, b"sysbench.stmt\0" as *const u8 as *const libc::c_char);
    luaL_newmetatable(L, b"sysbench.rs\0" as *const u8 as *const libc::c_char);
    tmp___0 = load_internal_scripts(L);
    if tmp___0 != 0 {
        return 0 as *mut libc::c_void as *mut lua_State;
    }
    rc = luaL_loadfile(L, sbtest.lname);
    if rc != 0 as libc::c_int {
        if rc != 6 as libc::c_int {
            current_block = 14784156606906206788;
        } else {
            lua_getfield(
                L,
                -(10002 as libc::c_int),
                b"require\0" as *const u8 as *const libc::c_char,
            );
            lua_pushstring(L, sbtest.lname);
            tmp___3 = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
            if tmp___3 != 0 {
                tmp___1 = lua_tolstring(
                    L,
                    -(1 as libc::c_int),
                    0 as *mut libc::c_void as *mut size_t,
                );
                msg = tmp___1;
                if !msg.is_null() {
                    tmp___2 = strncmp(
                        msg,
                        b"module \0" as *const u8 as *const libc::c_char,
                        7 as libc::c_int as size_t,
                    );
                    if tmp___2 != 0 {
                        current_block = 14784156606906206788;
                    } else {
                        current_block = 4567019141635105728;
                    }
                } else {
                    current_block = 4567019141635105728;
                }
                match current_block {
                    14784156606906206788 => {}
                    _ => {
                        log_text(
                            LOG_FATAL,
                            b"Cannot find benchmark '%s': no such built-in test, file or module\0"
                                as *const u8 as *const libc::c_char,
                            sbtest.lname,
                        );
                        return 0 as *mut libc::c_void as *mut lua_State;
                    }
                }
            } else {
                current_block = 6174974146017752131;
            }
        }
    } else {
        tmp___4 = lua_pcall(L, 0 as libc::c_int, 0 as libc::c_int, 0 as libc::c_int);
        if tmp___4 != 0 {
            current_block = 14784156606906206788;
        } else {
            current_block = 6174974146017752131;
        }
    }
    match current_block {
        14784156606906206788 => {
            report_error(L);
            return 0 as *mut libc::c_void as *mut lua_State;
        }
        _ => {
            tls_lua_ctxt.L = L;
            return L;
        }
    };
}
unsafe extern "C" fn sb_lua_close_state(mut state: *mut lua_State) -> libc::c_int {
    let mut ctxt: *mut sb_lua_ctxt_t = 0 as *mut sb_lua_ctxt_t;
    ctxt = &mut tls_lua_ctxt;
    if state as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        lua_close(state);
    }
    if ctxt as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        (*ctxt).L = 0 as *mut libc::c_void as *mut lua_State;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn execute_command(mut cmd: *const libc::c_char) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = export_options(gstate);
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    lua_getfield(gstate, -(10002 as libc::c_int), cmd);
    tmp___0 = lua_pcall(gstate, 0 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
    if tmp___0 != 0 as libc::c_int {
        call_error(gstate, cmd);
        return 1 as libc::c_int;
    }
    lua_settop(gstate, -(2 as libc::c_int));
    return 0 as libc::c_int;
}
unsafe extern "C" fn sb_lua_cmd_prepare() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = execute_command(b"prepare\0" as *const u8 as *const libc::c_char);
    return tmp;
}
unsafe extern "C" fn sb_lua_cmd_cleanup() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = execute_command(b"cleanup\0" as *const u8 as *const libc::c_char);
    return tmp;
}
unsafe extern "C" fn sb_lua_cmd_help() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = execute_command(b"help\0" as *const u8 as *const libc::c_char);
    return tmp;
}
unsafe extern "C" fn sb_lua_hook_defined(
    mut L: *mut lua_State,
    mut name: *const libc::c_char,
) -> bool {
    let mut rc: bool = false;
    let mut tmp: libc::c_int = 0;
    if L as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_int != 0;
    }
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(L, -(1 as libc::c_int), b"hooks\0" as *const u8 as *const libc::c_char);
    lua_getfield(L, -(1 as libc::c_int), name);
    tmp = lua_type(L, -(1 as libc::c_int));
    rc = tmp == 6 as libc::c_int;
    lua_settop(L, -(4 as libc::c_int));
    return rc;
}
unsafe extern "C" fn sb_lua_hook_push(
    mut L: *mut lua_State,
    mut name: *const libc::c_char,
) -> bool {
    let mut tmp: libc::c_int = 0;
    if L as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as libc::c_int != 0;
    }
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(L, -(1 as libc::c_int), b"hooks\0" as *const u8 as *const libc::c_char);
    lua_getfield(L, -(1 as libc::c_int), name);
    tmp = lua_type(L, -(1 as libc::c_int));
    if !(tmp == 6 as libc::c_int) {
        lua_settop(L, -(4 as libc::c_int));
        return 0 as libc::c_int != 0;
    }
    lua_remove(L, -(2 as libc::c_int));
    lua_remove(L, -(2 as libc::c_int));
    return 1 as libc::c_int != 0;
}
pub unsafe extern "C" fn sb_lua_loaded() -> bool {
    return gstate as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong;
}
pub unsafe extern "C" fn sb_lua_custom_command_defined(
    mut name: *const libc::c_char,
) -> bool {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut rc: bool = false;
    let mut tmp___1: libc::c_int = 0;
    L = gstate;
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"cmdline\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"command_defined\0" as *const u8 as *const libc::c_char,
    );
    tmp = lua_type(L, -(1 as libc::c_int));
    if !(tmp == 6 as libc::c_int) {
        log_text(
            LOG_WARNING,
            b"Cannot find the sysbench.cmdline.command_defined function\0" as *const u8
                as *const libc::c_char,
        );
        lua_settop(L, -(4 as libc::c_int));
        return 1 as libc::c_int != 0;
    }
    lua_pushstring(L, name);
    tmp___0 = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
    if tmp___0 != 0 as libc::c_int {
        call_error(
            L,
            b"sysbench.cmdline.command_defined\0" as *const u8 as *const libc::c_char,
        );
        lua_settop(L, -(3 as libc::c_int));
        return 1 as libc::c_int != 0;
    }
    tmp___1 = lua_toboolean(L, -(1 as libc::c_int));
    rc = tmp___1 != 0;
    lua_settop(L, -(4 as libc::c_int));
    return rc;
}
unsafe extern "C" fn sb_lua_custom_command_parallel(
    mut name: *const libc::c_char,
) -> bool {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut rc: bool = false;
    let mut tmp___1: libc::c_int = 0;
    L = gstate;
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"cmdline\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"command_parallel\0" as *const u8 as *const libc::c_char,
    );
    tmp = lua_type(L, -(1 as libc::c_int));
    if !(tmp == 6 as libc::c_int) {
        log_text(
            LOG_WARNING,
            b"Cannot find the sysbench.cmdline.command_parallel function\0" as *const u8
                as *const libc::c_char,
        );
        lua_settop(L, -(4 as libc::c_int));
        return 1 as libc::c_int != 0;
    }
    lua_pushstring(L, name);
    tmp___0 = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
    if tmp___0 != 0 as libc::c_int {
        call_error(
            L,
            b"sysbench.cmdline.command_parallel\0" as *const u8 as *const libc::c_char,
        );
        lua_settop(L, -(3 as libc::c_int));
        return 1 as libc::c_int != 0;
    }
    tmp___1 = lua_toboolean(L, -(1 as libc::c_int));
    rc = tmp___1 != 0;
    lua_settop(L, -(4 as libc::c_int));
    return rc;
}
unsafe extern "C" fn call_custom_command(mut L: *mut lua_State) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut rc: bool = false;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    tmp = export_options(L);
    if tmp != 0 {
        return 1 as libc::c_int;
    }
    lua_getfield(
        L,
        -(10002 as libc::c_int),
        b"sysbench\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"cmdline\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(
        L,
        -(1 as libc::c_int),
        b"call_command\0" as *const u8 as *const libc::c_char,
    );
    tmp___0 = lua_type(L, -(1 as libc::c_int));
    if !(tmp___0 == 6 as libc::c_int) {
        log_text(
            LOG_WARNING,
            b"Cannot find the sysbench.cmdline.call_command function\0" as *const u8
                as *const libc::c_char,
        );
        lua_settop(L, -(4 as libc::c_int));
        return 1 as libc::c_int;
    }
    lua_pushstring(L, sb_lua_custom_command);
    tmp___1 = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
    if tmp___1 != 0 as libc::c_int {
        call_error(
            L,
            b"sysbench.cmdline.call_command\0" as *const u8 as *const libc::c_char,
        );
        lua_settop(L, -(3 as libc::c_int));
        return 1 as libc::c_int;
    }
    tmp___2 = lua_toboolean(L, -(1 as libc::c_int));
    rc = tmp___2 != 0;
    lua_settop(L, -(4 as libc::c_int));
    if rc {
        tmp___3 = 0 as libc::c_int;
    } else {
        tmp___3 = 1 as libc::c_int;
    }
    return tmp___3;
}
unsafe extern "C" fn cmd_worker_thread(mut arg: *mut libc::c_void) -> *mut libc::c_void {
    let mut ctxt: *mut sb_thread_ctxt_t = 0 as *mut sb_thread_ctxt_t;
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: *mut lua_State = 0 as *mut lua_State;
    ctxt = arg as *mut sb_thread_ctxt_t;
    sb_tls_thread_id = (*ctxt).id as libc::c_int;
    sb_rand_thread_init();
    tmp = sb_lua_new_state();
    L = tmp;
    if L as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        log_text(
            LOG_FATAL,
            b"failed to create a thread to execute command\0" as *const u8
                as *const libc::c_char,
        );
        return 0 as *mut libc::c_void;
    }
    call_custom_command(L);
    sb_lua_close_state(L);
    return 0 as *mut libc::c_void;
}
pub unsafe extern "C" fn sb_lua_call_custom_command(
    mut name: *const libc::c_char,
) -> libc::c_int {
    let mut err: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: bool = false;
    let mut tmp___1: libc::c_int = 0;
    sb_lua_custom_command = name;
    tmp___0 = sb_lua_custom_command_parallel(name);
    if tmp___0 {
        if sb_globals.threads > 1 as libc::c_uint {
            err = sb_thread_create_workers(
                Some(
                    cmd_worker_thread
                        as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
                ),
            );
            if err != 0 {
                return err;
            }
            tmp = sb_thread_join_workers();
            return tmp;
        }
    }
    tmp___1 = call_custom_command(gstate);
    return tmp___1;
}
unsafe extern "C" fn stat_to_lua_table(
    mut L: *mut lua_State,
    mut stat___0: *mut sb_stat_t,
) {
    lua_createtable(L, 0 as libc::c_int, 0 as libc::c_int);
    sb_lua_var_number(
        L,
        b"threads_running\0" as *const u8 as *const libc::c_char,
        (*stat___0).threads_running as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"time_interval\0" as *const u8 as *const libc::c_char,
        (*stat___0).time_interval,
    );
    sb_lua_var_number(
        L,
        b"time_total\0" as *const u8 as *const libc::c_char,
        (*stat___0).time_total,
    );
    sb_lua_var_number(
        L,
        b"latency_pct\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_pct,
    );
    sb_lua_var_number(
        L,
        b"events\0" as *const u8 as *const libc::c_char,
        (*stat___0).events as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"reads\0" as *const u8 as *const libc::c_char,
        (*stat___0).reads as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"writes\0" as *const u8 as *const libc::c_char,
        (*stat___0).writes as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"other\0" as *const u8 as *const libc::c_char,
        (*stat___0).other as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"errors\0" as *const u8 as *const libc::c_char,
        (*stat___0).errors as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"reconnects\0" as *const u8 as *const libc::c_char,
        (*stat___0).reconnects as lua_Number,
    );
}
unsafe extern "C" fn sb_lua_report_intermediate(mut stat___0: *mut sb_stat_t) {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: bool = false;
    let mut tmp___0: libc::c_int = 0;
    L = tls_lua_ctxt.L;
    tmp = sb_lua_hook_push(
        L,
        b"report_intermediate\0" as *const u8 as *const libc::c_char,
    );
    if !tmp {
        return;
    }
    stat_to_lua_table(L, stat___0);
    sb_lua_var_number(
        L,
        b"queue_length\0" as *const u8 as *const libc::c_char,
        (*stat___0).queue_length as lua_Number,
    );
    sb_lua_var_number(
        L,
        b"concurrency\0" as *const u8 as *const libc::c_char,
        (*stat___0).concurrency as lua_Number,
    );
    tmp___0 = lua_pcall(L, 1 as libc::c_int, 0 as libc::c_int, 0 as libc::c_int);
    if tmp___0 != 0 {
        call_error(L, b"report_intermediate\0" as *const u8 as *const libc::c_char);
    }
}
unsafe extern "C" fn sb_lua_report_cumulative(mut stat___0: *mut sb_stat_t) {
    let mut L: *mut lua_State = 0 as *mut lua_State;
    let mut tmp: bool = false;
    let mut tmp___0: libc::c_int = 0;
    L = tls_lua_ctxt.L;
    if L as libc::c_ulong == gstate as libc::c_ulong {
        export_options(L);
    }
    tmp = sb_lua_hook_push(
        L,
        b"report_cumulative\0" as *const u8 as *const libc::c_char,
    );
    if !tmp {
        return;
    }
    stat_to_lua_table(L, stat___0);
    sb_lua_var_number(
        L,
        b"latency_min\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_min,
    );
    sb_lua_var_number(
        L,
        b"latency_max\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_max,
    );
    sb_lua_var_number(
        L,
        b"latency_avg\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_avg,
    );
    sb_lua_var_number(
        L,
        b"latency_sum\0" as *const u8 as *const libc::c_char,
        (*stat___0).latency_sum,
    );
    tmp___0 = lua_pcall(L, 1 as libc::c_int, 0 as libc::c_int, 0 as libc::c_int);
    if tmp___0 != 0 {
        call_error(L, b"report_cumulative\0" as *const u8 as *const libc::c_char);
    }
}
pub unsafe extern "C" fn sb_lua_report_thread_init() -> libc::c_int {
    if tls_lua_ctxt.L as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        sb_lua_new_state();
        export_options(tls_lua_ctxt.L);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_lua_report_thread_done(mut arg: *mut libc::c_void) {
    let mut tmp: bool = false;
    tmp = sb_lua_loaded();
    if tmp {
        sb_lua_close_state(tls_lua_ctxt.L);
    }
}
unsafe extern "C" fn sb_lua_do_jitcmd(
    mut L: *mut lua_State,
    mut cmd: *const libc::c_char,
) -> libc::c_int {
    let mut opt: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    let mut msg: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___2: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    let mut narg: libc::c_int = 0;
    let mut p: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___7: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___8: libc::c_int = 0;
    tmp = strchr(cmd, '=' as i32);
    opt = tmp as *const libc::c_char;
    if !opt.is_null() {
        tmp___1 = opt.offset_from(cmd) as libc::c_long as size_t;
    } else {
        tmp___0 = strlen(cmd);
        tmp___1 = tmp___0;
    }
    lua_pushlstring(L, cmd, tmp___1);
    lua_getfield(
        L,
        -(10000 as libc::c_int),
        b"_LOADED\0" as *const u8 as *const libc::c_char,
    );
    lua_getfield(L, -(1 as libc::c_int), b"jit\0" as *const u8 as *const libc::c_char);
    lua_remove(L, -(2 as libc::c_int));
    lua_pushvalue(L, -(2 as libc::c_int));
    lua_gettable(L, -(2 as libc::c_int));
    tmp___6 = lua_type(L, -(1 as libc::c_int));
    if tmp___6 == 6 as libc::c_int {
        lua_remove(L, -(2 as libc::c_int));
    } else {
        's_166: {
            let mut current_block_32: u64;
            lua_settop(L, -(3 as libc::c_int));
            lua_getfield(
                L,
                -(10002 as libc::c_int),
                b"require\0" as *const u8 as *const libc::c_char,
            );
            lua_pushlstring(
                L,
                b"jit.\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            );
            lua_pushvalue(L, -(3 as libc::c_int));
            lua_concat(L, 2 as libc::c_int);
            tmp___4 = lua_pcall(L, 1 as libc::c_int, 1 as libc::c_int, 0 as libc::c_int);
            if tmp___4 != 0 {
                tmp___2 = lua_tolstring(
                    L,
                    -(1 as libc::c_int),
                    0 as *mut libc::c_void as *mut size_t,
                );
                msg = tmp___2;
                if !msg.is_null() {
                    tmp___3 = strncmp(
                        msg,
                        b"module \0" as *const u8 as *const libc::c_char,
                        7 as libc::c_int as size_t,
                    );
                    if tmp___3 == 0 {
                        current_block_32 = 11492005225931047707;
                    } else {
                        current_block_32 = 7056779235015430508;
                    }
                } else {
                    current_block_32 = 7056779235015430508;
                }
                match current_block_32 {
                    11492005225931047707 => {}
                    _ => {
                        call_error(L, b"require\0" as *const u8 as *const libc::c_char);
                        return 1 as libc::c_int;
                    }
                }
            } else {
                lua_getfield(
                    L,
                    -(1 as libc::c_int),
                    b"start\0" as *const u8 as *const libc::c_char,
                );
                tmp___5 = lua_type(L, -(1 as libc::c_int));
                if !(tmp___5 == 0 as libc::c_int) {
                    lua_remove(L, -(2 as libc::c_int));
                    break 's_166;
                }
            }
            log_text(
                LOG_FATAL,
                b"unknown luaJIT command or jit.* modules not installed\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
    }
    lua_remove(L, -(2 as libc::c_int));
    narg = 0 as libc::c_int;
    if !opt.is_null() {
        opt = opt.offset(1);
        if *opt != 0 {
            loop {
                tmp___7 = strchr(opt, ',' as i32);
                p = tmp___7 as *const libc::c_char;
                narg += 1;
                if p.is_null() {
                    break;
                }
                if p as libc::c_ulong == opt as libc::c_ulong {
                    lua_pushnil(L);
                } else {
                    lua_pushlstring(
                        L,
                        opt,
                        p.offset_from(opt) as libc::c_long as size_t,
                    );
                }
                opt = p.offset(1 as libc::c_int as isize);
            }
            if *opt != 0 {
                lua_pushstring(L, opt);
            } else {
                lua_pushnil(L);
            }
        }
    }
    tmp___8 = lua_pcall(L, narg, 0 as libc::c_int, 0 as libc::c_int);
    if tmp___8 != 0 {
        call_error(L, b"lua_pcall\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn sb_memalign(
    mut size: size_t,
    mut alignment: size_t,
) -> *mut libc::c_void {
    let mut buf: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut ret: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    tmp = posix_memalign(&mut buf, alignment, size);
    ret = tmp;
    if ret != 0 as libc::c_int {
        buf = 0 as *mut libc::c_void;
    }
    return buf;
}
pub unsafe extern "C" fn sb_getpagesize() -> size_t {
    let mut tmp: libc::c_long = 0;
    tmp = sysconf(30 as libc::c_int);
    return tmp as size_t;
}
pub static mut sb_counters: *mut sb_counters_t = 0 as *const sb_counters_t
    as *mut sb_counters_t;
static mut last_intermediate_counters: sb_counters_t = [0; 8];
static mut last_cumulative_counters: sb_counters_t = [0; 8];
pub unsafe extern "C" fn sb_counters_init() -> libc::c_int {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = sb_alloc_per_thread_array(
        ::std::mem::size_of::<sb_counters_t>() as libc::c_ulong,
    );
    sb_counters = tmp as *mut sb_counters_t;
    return (sb_counters as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong)
        as libc::c_int;
}
pub unsafe extern "C" fn sb_counters_done() {
    if sb_counters as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        free(sb_counters as *mut libc::c_void);
        sb_counters = 0 as *mut libc::c_void as *mut sb_counters_t;
    }
}
unsafe extern "C" fn sb_counters_merge(mut dst: *mut uint64_t) {
    let mut t: size_t = 0;
    let mut i: size_t = 0;
    let mut tmp: uint64_t = 0;
    t = 0 as libc::c_int as size_t;
    while t < 8 as libc::c_ulong {
        i = 0 as libc::c_int as size_t;
        while i < sb_globals.threads as size_t {
            tmp = sb_counter_val___0(i as libc::c_int, t as sb_counter_type_t);
            let ref mut fresh18 = *dst.offset(t as isize);
            *fresh18 = (*fresh18 as libc::c_ulong).wrapping_add(tmp) as uint64_t
                as uint64_t;
            i = i.wrapping_add(1);
        }
        t = t.wrapping_add(1);
    }
}
unsafe extern "C" fn sb_counters_checkpoint(
    mut dst: *mut uint64_t,
    mut cp: *mut uint64_t,
) {
    let mut i: size_t = 0;
    let mut tmp: uint64_t = 0;
    i = 0 as libc::c_int as size_t;
    while i < 8 as libc::c_ulong {
        tmp = *cp.offset(i as isize);
        *cp.offset(i as isize) = *dst.offset(i as isize);
        let ref mut fresh19 = *dst.offset(i as isize);
        *fresh19 = (*fresh19 as libc::c_ulong).wrapping_sub(tmp) as uint64_t as uint64_t;
        i = i.wrapping_add(1);
    }
}
pub unsafe extern "C" fn sb_counters_agg_intermediate(mut val: *mut uint64_t) {
    memset(
        val as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sb_counters_t>() as libc::c_ulong,
    );
    sb_counters_merge(val);
    sb_counters_checkpoint(val, last_intermediate_counters.as_mut_ptr());
}
pub unsafe extern "C" fn sb_counters_agg_cumulative(mut val: *mut uint64_t) {
    memset(
        val as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sb_counters_t>() as libc::c_ulong,
    );
    sb_counters_merge(val);
    sb_counters_checkpoint(val, last_cumulative_counters.as_mut_ptr());
}
pub fn main() {
    let mut args: Vec::<*mut libc::c_char> = Vec::new();
    for arg in ::std::env::args() {
        args.push(
            (::std::ffi::CString::new(arg))
                .expect("Failed to convert argument into CString.")
                .into_raw(),
        );
    }
    args.push(::std::ptr::null_mut());
    unsafe {
        ::std::process::exit(
            main_0(
                (args.len() - 1) as libc::c_int,
                args.as_mut_ptr() as *mut *mut libc::c_char,
            ) as i32,
        )
    }
}
unsafe extern "C" fn run_static_initializers() {
    sysbench_lua_len = (::std::mem::size_of::<[libc::c_uchar; 5464]>() as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    sysbench_cmdline_lua_len = (::std::mem::size_of::<[libc::c_uchar; 6311]>()
        as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    sysbench_rand_lua_len = (::std::mem::size_of::<[libc::c_uchar; 2543]>()
        as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    sysbench_sql_lua_len = (::std::mem::size_of::<[libc::c_uchar; 14705]>()
        as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    sysbench_histogram_lua_len = (::std::mem::size_of::<[libc::c_uchar; 2019]>()
        as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
