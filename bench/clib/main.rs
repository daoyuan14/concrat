use ::libc;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type __dirstream;
    fn time(__timer: *mut time_t) -> time_t;
    fn sprintf(_: *mut libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn free(__ptr: *mut libc::c_void);
    fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    fn unlink(__name: *const libc::c_char) -> libc::c_int;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    fn setenv(
        __name: *const libc::c_char,
        __value: *const libc::c_char,
        __replace: libc::c_int,
    ) -> libc::c_int;
    fn system(__command: *const libc::c_char) -> libc::c_int;
    fn realpath(
        __name: *const libc::c_char,
        __resolved: *mut libc::c_char,
    ) -> *mut libc::c_char;
    static mut stdout: *mut FILE;
    static mut stderr: *mut FILE;
    fn fflush(__stream: *mut FILE) -> libc::c_int;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn curl_share_init() -> *mut libc::c_void;
    fn curl_share_setopt(
        _: *mut libc::c_void,
        option: CURLSHoption,
        _: ...
    ) -> CURLSHcode;
    fn curl_share_cleanup(_: *mut libc::c_void) -> CURLSHcode;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strrchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn __xpg_basename(__path: *mut libc::c_char) -> *mut libc::c_char;
    fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: Option::<
            unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
        >,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
    fn pthread_exit(__retval: *mut libc::c_void) -> !;
    fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut libc::c_void,
    ) -> libc::c_int;
    fn pthread_attr_init(__attr: *mut pthread_attr_t) -> libc::c_int;
    fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> libc::c_int;
    fn pthread_cancel(__th: pthread_t) -> libc::c_int;
    fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn curl_global_init(flags: libc::c_long) -> CURLcode;
    fn curl_global_cleanup();
    fn __errno_location() -> *mut libc::c_int;
    fn dirname(__path: *mut libc::c_char) -> *mut libc::c_char;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn usleep(__useconds: __useconds_t) -> libc::c_int;
    fn getcwd(__buf: *mut libc::c_char, __size: size_t) -> *mut libc::c_char;
    fn atol(__nptr: *const libc::c_char) -> libc::c_long;
    fn strncat(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn strstr(_: *const libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strncpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn lstat(__file: *const libc::c_char, __buf: *mut stat) -> libc::c_int;
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strcat(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn opendir(__name: *const libc::c_char) -> *mut DIR;
    fn closedir(__dirp: *mut DIR) -> libc::c_int;
    fn readdir(__dirp: *mut DIR) -> *mut dirent;
    fn fclose(__stream: *mut FILE) -> libc::c_int;
    fn fopen(_: *const libc::c_char, _: *const libc::c_char) -> *mut FILE;
    fn sscanf(_: *const libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
    fn fread(
        _: *mut libc::c_void,
        _: libc::c_ulong,
        _: libc::c_ulong,
        _: *mut FILE,
    ) -> libc::c_ulong;
    fn fseek(
        __stream: *mut FILE,
        __off: libc::c_long,
        __whence: libc::c_int,
    ) -> libc::c_int;
    fn ftell(__stream: *mut FILE) -> libc::c_long;
    fn rewind(__stream: *mut FILE);
    fn ferror(__stream: *mut FILE) -> libc::c_int;
    fn strtod(_: *const libc::c_char, _: *mut *mut libc::c_char) -> libc::c_double;
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn fabs(_: libc::c_double) -> libc::c_double;
    fn fwrite(
        _: *const libc::c_void,
        _: libc::c_ulong,
        _: libc::c_ulong,
        _: *mut FILE,
    ) -> libc::c_ulong;
    fn curl_easy_init() -> *mut libc::c_void;
    fn curl_easy_setopt(curl: *mut libc::c_void, option: CURLoption, _: ...) -> CURLcode;
    fn curl_easy_perform(curl: *mut libc::c_void) -> CURLcode;
    fn curl_easy_cleanup(curl: *mut libc::c_void);
    fn curl_easy_getinfo(curl: *mut libc::c_void, info: CURLINFO, _: ...) -> CURLcode;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn exit(_: libc::c_int) -> !;
    fn __assert_fail(
        __assertion: *const libc::c_char,
        __file: *const libc::c_char,
        __line: libc::c_uint,
        __function: *const libc::c_char,
    ) -> !;
    fn stat(__file: *const libc::c_char, __buf: *mut stat) -> libc::c_int;
    fn rmdir(__path: *const libc::c_char) -> libc::c_int;
    fn memmove(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn fileno(__stream: *mut FILE) -> libc::c_int;
    fn rand() -> libc::c_int;
    fn srand(__seed: libc::c_uint);
    fn strtok(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn clock() -> clock_t;
    fn isatty(__fd: libc::c_int) -> libc::c_int;
    fn mkdir(__path: *const libc::c_char, __mode: __mode_t) -> libc::c_int;
    fn access(__name: *const libc::c_char, __type: libc::c_int) -> libc::c_int;
    fn rename(__old: *const libc::c_char, __new: *const libc::c_char) -> libc::c_int;
    fn perror(__s: *const libc::c_char);
    fn fstat(__fd: libc::c_int, __buf: *mut stat) -> libc::c_int;
    fn chown(
        __file: *const libc::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> libc::c_int;
    fn fchown(__fd: libc::c_int, __owner: __uid_t, __group: __gid_t) -> libc::c_int;
    fn lchown(
        __file: *const libc::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> libc::c_int;
    fn truncate(__file: *const libc::c_char, __length: __off_t) -> libc::c_int;
    fn ftruncate(__fd: libc::c_int, __length: __off_t) -> libc::c_int;
    fn strcasecmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn abort() -> !;
    fn vsnprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ::std::ffi::VaList,
    ) -> libc::c_int;
    fn strncasecmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn memcmp(
        _: *const libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn vfprintf(
        _: *mut FILE,
        _: *const libc::c_char,
        _: ::std::ffi::VaList,
    ) -> libc::c_int;
    fn vsprintf(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: ::std::ffi::VaList,
    ) -> libc::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type time_t = __time_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type mode_t = __mode_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3],
}
pub type fs_stats = stat;
pub type __uint32_t = libc::c_uint;
pub type __off64_t = libc::c_long;
pub type __intptr_t = libc::c_long;
pub type size_t = libc::c_ulong;
pub type intptr_t = __intptr_t;
pub type uint32_t = __uint32_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}
pub type pthread_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [libc::c_char; 56],
    pub __align: libc::c_long,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_pthread_mutex_t_335460617 {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40],
    pub __align: libc::c_long,
}
pub type pthread_mutex_t = __anonunion_pthread_mutex_t_335460617;
pub type __anonenum_list_direction_t_372799795 = libc::c_uint;
pub const LIST_TAIL: __anonenum_list_direction_t_372799795 = 1;
pub const LIST_HEAD: __anonenum_list_direction_t_372799795 = 0;
pub type list_direction_t = __anonenum_list_direction_t_372799795;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct list_node {
    pub prev: *mut list_node,
    pub next: *mut list_node,
    pub val: *mut libc::c_void,
}
pub type list_node_t = list_node;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_list_t_617949005 {
    pub head: *mut list_node_t,
    pub tail: *mut list_node_t,
    pub len: libc::c_uint,
    pub free: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    pub match_0: Option::<
        unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> libc::c_int,
    >,
}
pub type list_t = __anonstruct_list_t_617949005;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_list_iterator_t_912695439 {
    pub next: *mut list_node_t,
    pub direction: list_direction_t,
}
pub type list_iterator_t = __anonstruct_list_iterator_t_912695439;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type CURL = ();
pub type CURLSH = ();
pub type __anonenum_curl_lock_data_171524127 = libc::c_uint;
pub const CURL_LOCK_DATA_LAST: __anonenum_curl_lock_data_171524127 = 7;
pub const CURL_LOCK_DATA_PSL: __anonenum_curl_lock_data_171524127 = 6;
pub const CURL_LOCK_DATA_CONNECT: __anonenum_curl_lock_data_171524127 = 5;
pub const CURL_LOCK_DATA_SSL_SESSION: __anonenum_curl_lock_data_171524127 = 4;
pub const CURL_LOCK_DATA_DNS: __anonenum_curl_lock_data_171524127 = 3;
pub const CURL_LOCK_DATA_COOKIE: __anonenum_curl_lock_data_171524127 = 2;
pub const CURL_LOCK_DATA_SHARE: __anonenum_curl_lock_data_171524127 = 1;
pub const CURL_LOCK_DATA_NONE: __anonenum_curl_lock_data_171524127 = 0;
pub type curl_lock_data = __anonenum_curl_lock_data_171524127;
pub type __anonenum_curl_lock_access_244776063 = libc::c_uint;
pub const CURL_LOCK_ACCESS_LAST: __anonenum_curl_lock_access_244776063 = 3;
pub const CURL_LOCK_ACCESS_SINGLE: __anonenum_curl_lock_access_244776063 = 2;
pub const CURL_LOCK_ACCESS_SHARED: __anonenum_curl_lock_access_244776063 = 1;
pub const CURL_LOCK_ACCESS_NONE: __anonenum_curl_lock_access_244776063 = 0;
pub type curl_lock_access = __anonenum_curl_lock_access_244776063;
pub type __anonenum_CURLSHcode_60028028 = libc::c_uint;
pub const CURLSHE_LAST: __anonenum_CURLSHcode_60028028 = 6;
pub const CURLSHE_NOT_BUILT_IN: __anonenum_CURLSHcode_60028028 = 5;
pub const CURLSHE_NOMEM: __anonenum_CURLSHcode_60028028 = 4;
pub const CURLSHE_INVALID: __anonenum_CURLSHcode_60028028 = 3;
pub const CURLSHE_IN_USE: __anonenum_CURLSHcode_60028028 = 2;
pub const CURLSHE_BAD_OPTION: __anonenum_CURLSHcode_60028028 = 1;
pub const CURLSHE_OK: __anonenum_CURLSHcode_60028028 = 0;
pub type CURLSHcode = __anonenum_CURLSHcode_60028028;
pub type __anonenum_CURLSHoption_958986232 = libc::c_uint;
pub const CURLSHOPT_LAST: __anonenum_CURLSHoption_958986232 = 6;
pub const CURLSHOPT_USERDATA: __anonenum_CURLSHoption_958986232 = 5;
pub const CURLSHOPT_UNLOCKFUNC: __anonenum_CURLSHoption_958986232 = 4;
pub const CURLSHOPT_LOCKFUNC: __anonenum_CURLSHoption_958986232 = 3;
pub const CURLSHOPT_UNSHARE: __anonenum_CURLSHoption_958986232 = 2;
pub const CURLSHOPT_SHARE: __anonenum_CURLSHoption_958986232 = 1;
pub const CURLSHOPT_NONE: __anonenum_CURLSHoption_958986232 = 0;
pub type CURLSHoption = __anonenum_CURLSHoption_958986232;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_clib_package_dependency_t_474234288 {
    pub name: *mut libc::c_char,
    pub author: *mut libc::c_char,
    pub version: *mut libc::c_char,
}
pub type clib_package_dependency_t = __anonstruct_clib_package_dependency_t_474234288;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_clib_package_t_687707428 {
    pub author: *mut libc::c_char,
    pub description: *mut libc::c_char,
    pub install: *mut libc::c_char,
    pub configure: *mut libc::c_char,
    pub json: *mut libc::c_char,
    pub license: *mut libc::c_char,
    pub name: *mut libc::c_char,
    pub repo: *mut libc::c_char,
    pub repo_name: *mut libc::c_char,
    pub url: *mut libc::c_char,
    pub version: *mut libc::c_char,
    pub makefile: *mut libc::c_char,
    pub filename: *mut libc::c_char,
    pub flags: *mut libc::c_char,
    pub prefix: *mut libc::c_char,
    pub dependencies: *mut list_t,
    pub development: *mut list_t,
    pub src: *mut list_t,
    pub data: *mut libc::c_void,
    pub refs: libc::c_uint,
}
pub type clib_package_t = __anonstruct_clib_package_t_687707428;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_clib_package_opts_t_1001569764 {
    pub skip_cache: libc::c_int,
    pub force: libc::c_int,
    pub global: libc::c_int,
    pub prefix: *mut libc::c_char,
    pub concurrency: libc::c_int,
    pub token: *mut libc::c_char,
}
pub type clib_package_opts_t = __anonstruct_clib_package_opts_t_1001569764;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_debug_t_712518223 {
    pub name: *const libc::c_char,
    pub color: libc::c_int,
    pub enabled: libc::c_int,
    pub stream: *mut FILE,
}
pub type debug_t = __anonstruct_debug_t_712518223;
pub type khint_t = uint32_t;
pub type khiter_t = khint_t;
pub type kh_cstr_t = *const libc::c_char;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_kh_ptr_t_1041758266 {
    pub n_buckets: khint_t,
    pub size: khint_t,
    pub n_occupied: khint_t,
    pub upper_bound: khint_t,
    pub flags: *mut uint32_t,
    pub keys: *mut kh_cstr_t,
    pub vals: *mut *mut libc::c_void,
}
pub type kh_ptr_t = __anonstruct_kh_ptr_t_1041758266;
pub type hash_t = kh_ptr_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_http_get_response_t_664041846 {
    pub data: *mut libc::c_char,
    pub size: size_t,
    pub status: libc::c_long,
    pub ok: libc::c_int,
}
pub type http_get_response_t = __anonstruct_http_get_response_t_664041846;
pub type __anonenum_cc_color_t_911620310 = libc::c_uint;
pub const CC_BG_WHITE: __anonenum_cc_color_t_911620310 = 512;
pub const CC_BG_CYAN: __anonenum_cc_color_t_911620310 = 480;
pub const CC_BG_MAGENTA: __anonenum_cc_color_t_911620310 = 448;
pub const CC_BG_BLUE: __anonenum_cc_color_t_911620310 = 416;
pub const CC_BG_YELLOW: __anonenum_cc_color_t_911620310 = 384;
pub const CC_BG_GREEN: __anonenum_cc_color_t_911620310 = 352;
pub const CC_BG_RED: __anonenum_cc_color_t_911620310 = 320;
pub const CC_BG_DARK_GRAY: __anonenum_cc_color_t_911620310 = 288;
pub const CC_BG_GRAY: __anonenum_cc_color_t_911620310 = 256;
pub const CC_BG_DARK_CYAN: __anonenum_cc_color_t_911620310 = 224;
pub const CC_BG_DARK_MAGENTA: __anonenum_cc_color_t_911620310 = 192;
pub const CC_BG_DARK_BLUE: __anonenum_cc_color_t_911620310 = 160;
pub const CC_BG_DARK_YELLOW: __anonenum_cc_color_t_911620310 = 128;
pub const CC_BG_DARK_GREEN: __anonenum_cc_color_t_911620310 = 96;
pub const CC_BG_DARK_RED: __anonenum_cc_color_t_911620310 = 64;
pub const CC_BG_BLACK: __anonenum_cc_color_t_911620310 = 32;
pub const CC_BG_NONE: __anonenum_cc_color_t_911620310 = 0;
pub const CC_FG_WHITE: __anonenum_cc_color_t_911620310 = 16;
pub const CC_FG_CYAN: __anonenum_cc_color_t_911620310 = 15;
pub const CC_FG_MAGENTA: __anonenum_cc_color_t_911620310 = 14;
pub const CC_FG_BLUE: __anonenum_cc_color_t_911620310 = 13;
pub const CC_FG_YELLOW: __anonenum_cc_color_t_911620310 = 12;
pub const CC_FG_GREEN: __anonenum_cc_color_t_911620310 = 11;
pub const CC_FG_RED: __anonenum_cc_color_t_911620310 = 10;
pub const CC_FG_DARK_GRAY: __anonenum_cc_color_t_911620310 = 9;
pub const CC_FG_GRAY: __anonenum_cc_color_t_911620310 = 8;
pub const CC_FG_DARK_CYAN: __anonenum_cc_color_t_911620310 = 7;
pub const CC_FG_DARK_MAGENTA: __anonenum_cc_color_t_911620310 = 6;
pub const CC_FG_DARK_BLUE: __anonenum_cc_color_t_911620310 = 5;
pub const CC_FG_DARK_YELLOW: __anonenum_cc_color_t_911620310 = 4;
pub const CC_FG_DARK_GREEN: __anonenum_cc_color_t_911620310 = 3;
pub const CC_FG_DARK_RED: __anonenum_cc_color_t_911620310 = 2;
pub const CC_FG_BLACK: __anonenum_cc_color_t_911620310 = 1;
pub const CC_FG_NONE: __anonenum_cc_color_t_911620310 = 0;
pub type cc_color_t = __anonenum_cc_color_t_911620310;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct json_object_t {
    pub names: *mut *mut libc::c_char,
    pub values: *mut *mut JSON_Value,
    pub count: size_t,
    pub capacity: size_t,
}
pub type JSON_Value = json_value_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct json_value_t {
    pub type_0: JSON_Value_Type,
    pub value: JSON_Value_Value,
}
pub type JSON_Value_Value = json_value_value;
#[derive(Copy, Clone)]
#[repr(C)]
pub union json_value_value {
    pub string: *mut libc::c_char,
    pub number: libc::c_double,
    pub object: *mut JSON_Object,
    pub array: *mut JSON_Array,
    pub boolean: libc::c_int,
    pub null: libc::c_int,
}
pub type JSON_Array = json_array_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct json_array_t {
    pub items: *mut *mut JSON_Value,
    pub count: size_t,
    pub capacity: size_t,
}
pub type JSON_Object = json_object_t;
pub type JSON_Value_Type = libc::c_int;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fetch_package_file_thread_data {
    pub pkg: *mut clib_package_t,
    pub dir: *const libc::c_char,
    pub file: *mut libc::c_char,
    pub verbose: libc::c_int,
    pub thread: pthread_t,
    pub attr: pthread_attr_t,
    pub data: *mut libc::c_void,
}
pub type fetch_package_file_thread_data_t = fetch_package_file_thread_data;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct clib_package_lock {
    pub mutex: pthread_mutex_t,
}
pub type clib_package_lock_t = clib_package_lock;
pub type __useconds_t = libc::c_uint;
pub type __anonenum_CURLcode_1040171027 = libc::c_uint;
pub const CURL_LAST: __anonenum_CURLcode_1040171027 = 96;
pub const CURLE_HTTP3: __anonenum_CURLcode_1040171027 = 95;
pub const CURLE_AUTH_ERROR: __anonenum_CURLcode_1040171027 = 94;
pub const CURLE_RECURSIVE_API_CALL: __anonenum_CURLcode_1040171027 = 93;
pub const CURLE_HTTP2_STREAM: __anonenum_CURLcode_1040171027 = 92;
pub const CURLE_SSL_INVALIDCERTSTATUS: __anonenum_CURLcode_1040171027 = 91;
pub const CURLE_SSL_PINNEDPUBKEYNOTMATCH: __anonenum_CURLcode_1040171027 = 90;
pub const CURLE_NO_CONNECTION_AVAILABLE: __anonenum_CURLcode_1040171027 = 89;
pub const CURLE_CHUNK_FAILED: __anonenum_CURLcode_1040171027 = 88;
pub const CURLE_FTP_BAD_FILE_LIST: __anonenum_CURLcode_1040171027 = 87;
pub const CURLE_RTSP_SESSION_ERROR: __anonenum_CURLcode_1040171027 = 86;
pub const CURLE_RTSP_CSEQ_ERROR: __anonenum_CURLcode_1040171027 = 85;
pub const CURLE_FTP_PRET_FAILED: __anonenum_CURLcode_1040171027 = 84;
pub const CURLE_SSL_ISSUER_ERROR: __anonenum_CURLcode_1040171027 = 83;
pub const CURLE_SSL_CRL_BADFILE: __anonenum_CURLcode_1040171027 = 82;
pub const CURLE_AGAIN: __anonenum_CURLcode_1040171027 = 81;
pub const CURLE_SSL_SHUTDOWN_FAILED: __anonenum_CURLcode_1040171027 = 80;
pub const CURLE_SSH: __anonenum_CURLcode_1040171027 = 79;
pub const CURLE_REMOTE_FILE_NOT_FOUND: __anonenum_CURLcode_1040171027 = 78;
pub const CURLE_SSL_CACERT_BADFILE: __anonenum_CURLcode_1040171027 = 77;
pub const CURLE_CONV_REQD: __anonenum_CURLcode_1040171027 = 76;
pub const CURLE_CONV_FAILED: __anonenum_CURLcode_1040171027 = 75;
pub const CURLE_TFTP_NOSUCHUSER: __anonenum_CURLcode_1040171027 = 74;
pub const CURLE_REMOTE_FILE_EXISTS: __anonenum_CURLcode_1040171027 = 73;
pub const CURLE_TFTP_UNKNOWNID: __anonenum_CURLcode_1040171027 = 72;
pub const CURLE_TFTP_ILLEGAL: __anonenum_CURLcode_1040171027 = 71;
pub const CURLE_REMOTE_DISK_FULL: __anonenum_CURLcode_1040171027 = 70;
pub const CURLE_TFTP_PERM: __anonenum_CURLcode_1040171027 = 69;
pub const CURLE_TFTP_NOTFOUND: __anonenum_CURLcode_1040171027 = 68;
pub const CURLE_LOGIN_DENIED: __anonenum_CURLcode_1040171027 = 67;
pub const CURLE_SSL_ENGINE_INITFAILED: __anonenum_CURLcode_1040171027 = 66;
pub const CURLE_SEND_FAIL_REWIND: __anonenum_CURLcode_1040171027 = 65;
pub const CURLE_USE_SSL_FAILED: __anonenum_CURLcode_1040171027 = 64;
pub const CURLE_FILESIZE_EXCEEDED: __anonenum_CURLcode_1040171027 = 63;
pub const CURLE_LDAP_INVALID_URL: __anonenum_CURLcode_1040171027 = 62;
pub const CURLE_BAD_CONTENT_ENCODING: __anonenum_CURLcode_1040171027 = 61;
pub const CURLE_PEER_FAILED_VERIFICATION: __anonenum_CURLcode_1040171027 = 60;
pub const CURLE_SSL_CIPHER: __anonenum_CURLcode_1040171027 = 59;
pub const CURLE_SSL_CERTPROBLEM: __anonenum_CURLcode_1040171027 = 58;
pub const CURLE_OBSOLETE57: __anonenum_CURLcode_1040171027 = 57;
pub const CURLE_RECV_ERROR: __anonenum_CURLcode_1040171027 = 56;
pub const CURLE_SEND_ERROR: __anonenum_CURLcode_1040171027 = 55;
pub const CURLE_SSL_ENGINE_SETFAILED: __anonenum_CURLcode_1040171027 = 54;
pub const CURLE_SSL_ENGINE_NOTFOUND: __anonenum_CURLcode_1040171027 = 53;
pub const CURLE_GOT_NOTHING: __anonenum_CURLcode_1040171027 = 52;
pub const CURLE_OBSOLETE51: __anonenum_CURLcode_1040171027 = 51;
pub const CURLE_OBSOLETE50: __anonenum_CURLcode_1040171027 = 50;
pub const CURLE_TELNET_OPTION_SYNTAX: __anonenum_CURLcode_1040171027 = 49;
pub const CURLE_UNKNOWN_OPTION: __anonenum_CURLcode_1040171027 = 48;
pub const CURLE_TOO_MANY_REDIRECTS: __anonenum_CURLcode_1040171027 = 47;
pub const CURLE_OBSOLETE46: __anonenum_CURLcode_1040171027 = 46;
pub const CURLE_INTERFACE_FAILED: __anonenum_CURLcode_1040171027 = 45;
pub const CURLE_OBSOLETE44: __anonenum_CURLcode_1040171027 = 44;
pub const CURLE_BAD_FUNCTION_ARGUMENT: __anonenum_CURLcode_1040171027 = 43;
pub const CURLE_ABORTED_BY_CALLBACK: __anonenum_CURLcode_1040171027 = 42;
pub const CURLE_FUNCTION_NOT_FOUND: __anonenum_CURLcode_1040171027 = 41;
pub const CURLE_OBSOLETE40: __anonenum_CURLcode_1040171027 = 40;
pub const CURLE_LDAP_SEARCH_FAILED: __anonenum_CURLcode_1040171027 = 39;
pub const CURLE_LDAP_CANNOT_BIND: __anonenum_CURLcode_1040171027 = 38;
pub const CURLE_FILE_COULDNT_READ_FILE: __anonenum_CURLcode_1040171027 = 37;
pub const CURLE_BAD_DOWNLOAD_RESUME: __anonenum_CURLcode_1040171027 = 36;
pub const CURLE_SSL_CONNECT_ERROR: __anonenum_CURLcode_1040171027 = 35;
pub const CURLE_HTTP_POST_ERROR: __anonenum_CURLcode_1040171027 = 34;
pub const CURLE_RANGE_ERROR: __anonenum_CURLcode_1040171027 = 33;
pub const CURLE_OBSOLETE32: __anonenum_CURLcode_1040171027 = 32;
pub const CURLE_FTP_COULDNT_USE_REST: __anonenum_CURLcode_1040171027 = 31;
pub const CURLE_FTP_PORT_FAILED: __anonenum_CURLcode_1040171027 = 30;
pub const CURLE_OBSOLETE29: __anonenum_CURLcode_1040171027 = 29;
pub const CURLE_OPERATION_TIMEDOUT: __anonenum_CURLcode_1040171027 = 28;
pub const CURLE_OUT_OF_MEMORY: __anonenum_CURLcode_1040171027 = 27;
pub const CURLE_READ_ERROR: __anonenum_CURLcode_1040171027 = 26;
pub const CURLE_UPLOAD_FAILED: __anonenum_CURLcode_1040171027 = 25;
pub const CURLE_OBSOLETE24: __anonenum_CURLcode_1040171027 = 24;
pub const CURLE_WRITE_ERROR: __anonenum_CURLcode_1040171027 = 23;
pub const CURLE_HTTP_RETURNED_ERROR: __anonenum_CURLcode_1040171027 = 22;
pub const CURLE_QUOTE_ERROR: __anonenum_CURLcode_1040171027 = 21;
pub const CURLE_OBSOLETE20: __anonenum_CURLcode_1040171027 = 20;
pub const CURLE_FTP_COULDNT_RETR_FILE: __anonenum_CURLcode_1040171027 = 19;
pub const CURLE_PARTIAL_FILE: __anonenum_CURLcode_1040171027 = 18;
pub const CURLE_FTP_COULDNT_SET_TYPE: __anonenum_CURLcode_1040171027 = 17;
pub const CURLE_HTTP2: __anonenum_CURLcode_1040171027 = 16;
pub const CURLE_FTP_CANT_GET_HOST: __anonenum_CURLcode_1040171027 = 15;
pub const CURLE_FTP_WEIRD_227_FORMAT: __anonenum_CURLcode_1040171027 = 14;
pub const CURLE_FTP_WEIRD_PASV_REPLY: __anonenum_CURLcode_1040171027 = 13;
pub const CURLE_FTP_ACCEPT_TIMEOUT: __anonenum_CURLcode_1040171027 = 12;
pub const CURLE_FTP_WEIRD_PASS_REPLY: __anonenum_CURLcode_1040171027 = 11;
pub const CURLE_FTP_ACCEPT_FAILED: __anonenum_CURLcode_1040171027 = 10;
pub const CURLE_REMOTE_ACCESS_DENIED: __anonenum_CURLcode_1040171027 = 9;
pub const CURLE_WEIRD_SERVER_REPLY: __anonenum_CURLcode_1040171027 = 8;
pub const CURLE_COULDNT_CONNECT: __anonenum_CURLcode_1040171027 = 7;
pub const CURLE_COULDNT_RESOLVE_HOST: __anonenum_CURLcode_1040171027 = 6;
pub const CURLE_COULDNT_RESOLVE_PROXY: __anonenum_CURLcode_1040171027 = 5;
pub const CURLE_NOT_BUILT_IN: __anonenum_CURLcode_1040171027 = 4;
pub const CURLE_URL_MALFORMAT: __anonenum_CURLcode_1040171027 = 3;
pub const CURLE_FAILED_INIT: __anonenum_CURLcode_1040171027 = 2;
pub const CURLE_UNSUPPORTED_PROTOCOL: __anonenum_CURLcode_1040171027 = 1;
pub const CURLE_OK: __anonenum_CURLcode_1040171027 = 0;
pub type CURLcode = __anonenum_CURLcode_1040171027;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct command {
    pub data: *mut libc::c_void,
    pub usage: *const libc::c_char,
    pub arg: *const libc::c_char,
    pub name: *const libc::c_char,
    pub version: *const libc::c_char,
    pub option_count: libc::c_int,
    pub options: [command_option_t; 32],
    pub argc: libc::c_int,
    pub argv: [*mut libc::c_char; 32],
    pub nargv: *mut *mut libc::c_char,
}
pub type command_option_t = __anonstruct_command_option_t_246293268;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_command_option_t_246293268 {
    pub optional_arg: libc::c_int,
    pub required_arg: libc::c_int,
    pub argname: *mut libc::c_char,
    pub large: *mut libc::c_char,
    pub small: *const libc::c_char,
    pub large_with_arg: *const libc::c_char,
    pub description: *const libc::c_char,
    pub cb: Option::<unsafe extern "C" fn(*mut command) -> ()>,
}
pub type command_t = command;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct options {
    pub dir: *const libc::c_char,
    pub prefix: *mut libc::c_char,
    pub force: libc::c_int,
    pub verbose: libc::c_int,
    pub dev: libc::c_int,
    pub skip_cache: libc::c_int,
    pub global: libc::c_int,
    pub clean: *mut libc::c_char,
    pub test: *mut libc::c_char,
    pub concurrency: libc::c_uint,
}
pub type options_t = options;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct clib_package_thread {
    pub dir: *const libc::c_char,
}
pub type clib_package_thread_t = clib_package_thread;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: libc::c_ushort,
    pub d_type: libc::c_uchar,
    pub d_name: [libc::c_char; 256],
}
pub type DIR = __dirstream;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct tinydir_file {
    pub path: [libc::c_char; 4096],
    pub name: [libc::c_char; 256],
    pub extension: *mut libc::c_char,
    pub is_dir: libc::c_int,
    pub is_reg: libc::c_int,
    pub _s: stat,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct tinydir_dir {
    pub path: [libc::c_char; 4096],
    pub has_next: libc::c_int,
    pub n_files: size_t,
    pub _files: *mut tinydir_file,
    pub _d: *mut DIR,
    pub _e: *mut dirent,
}
pub type JSON_Status = libc::c_int;
pub type __anonenum_CURLoption_714703655 = libc::c_uint;
pub const CURLOPT_LASTENTRY: __anonenum_CURLoption_714703655 = 10290;
pub const CURLOPT_SASL_AUTHZID: __anonenum_CURLoption_714703655 = 10289;
pub const CURLOPT_MAXAGE_CONN: __anonenum_CURLoption_714703655 = 288;
pub const CURLOPT_ALTSVC: __anonenum_CURLoption_714703655 = 10287;
pub const CURLOPT_ALTSVC_CTRL: __anonenum_CURLoption_714703655 = 286;
pub const CURLOPT_HTTP09_ALLOWED: __anonenum_CURLoption_714703655 = 285;
pub const CURLOPT_TRAILERDATA: __anonenum_CURLoption_714703655 = 10284;
pub const CURLOPT_TRAILERFUNCTION: __anonenum_CURLoption_714703655 = 20283;
pub const CURLOPT_CURLU: __anonenum_CURLoption_714703655 = 10282;
pub const CURLOPT_UPKEEP_INTERVAL_MS: __anonenum_CURLoption_714703655 = 281;
pub const CURLOPT_UPLOAD_BUFFERSIZE: __anonenum_CURLoption_714703655 = 280;
pub const CURLOPT_DOH_URL: __anonenum_CURLoption_714703655 = 10279;
pub const CURLOPT_DISALLOW_USERNAME_IN_URL: __anonenum_CURLoption_714703655 = 278;
pub const CURLOPT_PROXY_TLS13_CIPHERS: __anonenum_CURLoption_714703655 = 10277;
pub const CURLOPT_TLS13_CIPHERS: __anonenum_CURLoption_714703655 = 10276;
pub const CURLOPT_DNS_SHUFFLE_ADDRESSES: __anonenum_CURLoption_714703655 = 275;
pub const CURLOPT_HAPROXYPROTOCOL: __anonenum_CURLoption_714703655 = 274;
pub const CURLOPT_RESOLVER_START_DATA: __anonenum_CURLoption_714703655 = 10273;
pub const CURLOPT_RESOLVER_START_FUNCTION: __anonenum_CURLoption_714703655 = 20272;
pub const CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS: __anonenum_CURLoption_714703655 = 271;
pub const CURLOPT_TIMEVALUE_LARGE: __anonenum_CURLoption_714703655 = 30270;
pub const CURLOPT_MIMEPOST: __anonenum_CURLoption_714703655 = 10269;
pub const CURLOPT_SSH_COMPRESSION: __anonenum_CURLoption_714703655 = 268;
pub const CURLOPT_SOCKS5_AUTH: __anonenum_CURLoption_714703655 = 267;
pub const CURLOPT_REQUEST_TARGET: __anonenum_CURLoption_714703655 = 10266;
pub const CURLOPT_SUPPRESS_CONNECT_HEADERS: __anonenum_CURLoption_714703655 = 265;
pub const CURLOPT_ABSTRACT_UNIX_SOCKET: __anonenum_CURLoption_714703655 = 10264;
pub const CURLOPT_PROXY_PINNEDPUBLICKEY: __anonenum_CURLoption_714703655 = 10263;
pub const CURLOPT_PRE_PROXY: __anonenum_CURLoption_714703655 = 10262;
pub const CURLOPT_PROXY_SSL_OPTIONS: __anonenum_CURLoption_714703655 = 261;
pub const CURLOPT_PROXY_CRLFILE: __anonenum_CURLoption_714703655 = 10260;
pub const CURLOPT_PROXY_SSL_CIPHER_LIST: __anonenum_CURLoption_714703655 = 10259;
pub const CURLOPT_PROXY_KEYPASSWD: __anonenum_CURLoption_714703655 = 10258;
pub const CURLOPT_PROXY_SSLKEYTYPE: __anonenum_CURLoption_714703655 = 10257;
pub const CURLOPT_PROXY_SSLKEY: __anonenum_CURLoption_714703655 = 10256;
pub const CURLOPT_PROXY_SSLCERTTYPE: __anonenum_CURLoption_714703655 = 10255;
pub const CURLOPT_PROXY_SSLCERT: __anonenum_CURLoption_714703655 = 10254;
pub const CURLOPT_PROXY_TLSAUTH_TYPE: __anonenum_CURLoption_714703655 = 10253;
pub const CURLOPT_PROXY_TLSAUTH_PASSWORD: __anonenum_CURLoption_714703655 = 10252;
pub const CURLOPT_PROXY_TLSAUTH_USERNAME: __anonenum_CURLoption_714703655 = 10251;
pub const CURLOPT_PROXY_SSLVERSION: __anonenum_CURLoption_714703655 = 250;
pub const CURLOPT_PROXY_SSL_VERIFYHOST: __anonenum_CURLoption_714703655 = 249;
pub const CURLOPT_PROXY_SSL_VERIFYPEER: __anonenum_CURLoption_714703655 = 248;
pub const CURLOPT_PROXY_CAPATH: __anonenum_CURLoption_714703655 = 10247;
pub const CURLOPT_PROXY_CAINFO: __anonenum_CURLoption_714703655 = 10246;
pub const CURLOPT_KEEP_SENDING_ON_ERROR: __anonenum_CURLoption_714703655 = 245;
pub const CURLOPT_TCP_FASTOPEN: __anonenum_CURLoption_714703655 = 244;
pub const CURLOPT_CONNECT_TO: __anonenum_CURLoption_714703655 = 10243;
pub const CURLOPT_TFTP_NO_OPTIONS: __anonenum_CURLoption_714703655 = 242;
pub const CURLOPT_STREAM_DEPENDS_E: __anonenum_CURLoption_714703655 = 10241;
pub const CURLOPT_STREAM_DEPENDS: __anonenum_CURLoption_714703655 = 10240;
pub const CURLOPT_STREAM_WEIGHT: __anonenum_CURLoption_714703655 = 239;
pub const CURLOPT_DEFAULT_PROTOCOL: __anonenum_CURLoption_714703655 = 10238;
pub const CURLOPT_PIPEWAIT: __anonenum_CURLoption_714703655 = 237;
pub const CURLOPT_SERVICE_NAME: __anonenum_CURLoption_714703655 = 10236;
pub const CURLOPT_PROXY_SERVICE_NAME: __anonenum_CURLoption_714703655 = 10235;
pub const CURLOPT_PATH_AS_IS: __anonenum_CURLoption_714703655 = 234;
pub const CURLOPT_SSL_FALSESTART: __anonenum_CURLoption_714703655 = 233;
pub const CURLOPT_SSL_VERIFYSTATUS: __anonenum_CURLoption_714703655 = 232;
pub const CURLOPT_UNIX_SOCKET_PATH: __anonenum_CURLoption_714703655 = 10231;
pub const CURLOPT_PINNEDPUBLICKEY: __anonenum_CURLoption_714703655 = 10230;
pub const CURLOPT_HEADEROPT: __anonenum_CURLoption_714703655 = 229;
pub const CURLOPT_PROXYHEADER: __anonenum_CURLoption_714703655 = 10228;
pub const CURLOPT_EXPECT_100_TIMEOUT_MS: __anonenum_CURLoption_714703655 = 227;
pub const CURLOPT_SSL_ENABLE_ALPN: __anonenum_CURLoption_714703655 = 226;
pub const CURLOPT_SSL_ENABLE_NPN: __anonenum_CURLoption_714703655 = 225;
pub const CURLOPT_LOGIN_OPTIONS: __anonenum_CURLoption_714703655 = 10224;
pub const CURLOPT_DNS_LOCAL_IP6: __anonenum_CURLoption_714703655 = 10223;
pub const CURLOPT_DNS_LOCAL_IP4: __anonenum_CURLoption_714703655 = 10222;
pub const CURLOPT_DNS_INTERFACE: __anonenum_CURLoption_714703655 = 10221;
pub const CURLOPT_XOAUTH2_BEARER: __anonenum_CURLoption_714703655 = 10220;
pub const CURLOPT_XFERINFOFUNCTION: __anonenum_CURLoption_714703655 = 20219;
pub const CURLOPT_SASL_IR: __anonenum_CURLoption_714703655 = 218;
pub const CURLOPT_MAIL_AUTH: __anonenum_CURLoption_714703655 = 10217;
pub const CURLOPT_SSL_OPTIONS: __anonenum_CURLoption_714703655 = 216;
pub const CURLOPT_TCP_KEEPINTVL: __anonenum_CURLoption_714703655 = 215;
pub const CURLOPT_TCP_KEEPIDLE: __anonenum_CURLoption_714703655 = 214;
pub const CURLOPT_TCP_KEEPALIVE: __anonenum_CURLoption_714703655 = 213;
pub const CURLOPT_ACCEPTTIMEOUT_MS: __anonenum_CURLoption_714703655 = 212;
pub const CURLOPT_DNS_SERVERS: __anonenum_CURLoption_714703655 = 10211;
pub const CURLOPT_GSSAPI_DELEGATION: __anonenum_CURLoption_714703655 = 210;
pub const CURLOPT_CLOSESOCKETDATA: __anonenum_CURLoption_714703655 = 10209;
pub const CURLOPT_CLOSESOCKETFUNCTION: __anonenum_CURLoption_714703655 = 20208;
pub const CURLOPT_TRANSFER_ENCODING: __anonenum_CURLoption_714703655 = 207;
pub const CURLOPT_TLSAUTH_TYPE: __anonenum_CURLoption_714703655 = 10206;
pub const CURLOPT_TLSAUTH_PASSWORD: __anonenum_CURLoption_714703655 = 10205;
pub const CURLOPT_TLSAUTH_USERNAME: __anonenum_CURLoption_714703655 = 10204;
pub const CURLOPT_RESOLVE: __anonenum_CURLoption_714703655 = 10203;
pub const CURLOPT_FNMATCH_DATA: __anonenum_CURLoption_714703655 = 10202;
pub const CURLOPT_CHUNK_DATA: __anonenum_CURLoption_714703655 = 10201;
pub const CURLOPT_FNMATCH_FUNCTION: __anonenum_CURLoption_714703655 = 20200;
pub const CURLOPT_CHUNK_END_FUNCTION: __anonenum_CURLoption_714703655 = 20199;
pub const CURLOPT_CHUNK_BGN_FUNCTION: __anonenum_CURLoption_714703655 = 20198;
pub const CURLOPT_WILDCARDMATCH: __anonenum_CURLoption_714703655 = 197;
pub const CURLOPT_INTERLEAVEFUNCTION: __anonenum_CURLoption_714703655 = 20196;
pub const CURLOPT_INTERLEAVEDATA: __anonenum_CURLoption_714703655 = 10195;
pub const CURLOPT_RTSP_SERVER_CSEQ: __anonenum_CURLoption_714703655 = 194;
pub const CURLOPT_RTSP_CLIENT_CSEQ: __anonenum_CURLoption_714703655 = 193;
pub const CURLOPT_RTSP_TRANSPORT: __anonenum_CURLoption_714703655 = 10192;
pub const CURLOPT_RTSP_STREAM_URI: __anonenum_CURLoption_714703655 = 10191;
pub const CURLOPT_RTSP_SESSION_ID: __anonenum_CURLoption_714703655 = 10190;
pub const CURLOPT_RTSP_REQUEST: __anonenum_CURLoption_714703655 = 189;
pub const CURLOPT_FTP_USE_PRET: __anonenum_CURLoption_714703655 = 188;
pub const CURLOPT_MAIL_RCPT: __anonenum_CURLoption_714703655 = 10187;
pub const CURLOPT_MAIL_FROM: __anonenum_CURLoption_714703655 = 10186;
pub const CURLOPT_SSH_KEYDATA: __anonenum_CURLoption_714703655 = 10185;
pub const CURLOPT_SSH_KEYFUNCTION: __anonenum_CURLoption_714703655 = 20184;
pub const CURLOPT_SSH_KNOWNHOSTS: __anonenum_CURLoption_714703655 = 10183;
pub const CURLOPT_REDIR_PROTOCOLS: __anonenum_CURLoption_714703655 = 182;
pub const CURLOPT_PROTOCOLS: __anonenum_CURLoption_714703655 = 181;
pub const CURLOPT_SOCKS5_GSSAPI_NEC: __anonenum_CURLoption_714703655 = 180;
pub const CURLOPT_SOCKS5_GSSAPI_SERVICE: __anonenum_CURLoption_714703655 = 10179;
pub const CURLOPT_TFTP_BLKSIZE: __anonenum_CURLoption_714703655 = 178;
pub const CURLOPT_NOPROXY: __anonenum_CURLoption_714703655 = 10177;
pub const CURLOPT_PROXYPASSWORD: __anonenum_CURLoption_714703655 = 10176;
pub const CURLOPT_PROXYUSERNAME: __anonenum_CURLoption_714703655 = 10175;
pub const CURLOPT_PASSWORD: __anonenum_CURLoption_714703655 = 10174;
pub const CURLOPT_USERNAME: __anonenum_CURLoption_714703655 = 10173;
pub const CURLOPT_CERTINFO: __anonenum_CURLoption_714703655 = 172;
pub const CURLOPT_ADDRESS_SCOPE: __anonenum_CURLoption_714703655 = 171;
pub const CURLOPT_ISSUERCERT: __anonenum_CURLoption_714703655 = 10170;
pub const CURLOPT_CRLFILE: __anonenum_CURLoption_714703655 = 10169;
pub const CURLOPT_SEEKDATA: __anonenum_CURLoption_714703655 = 10168;
pub const CURLOPT_SEEKFUNCTION: __anonenum_CURLoption_714703655 = 20167;
pub const CURLOPT_PROXY_TRANSFER_MODE: __anonenum_CURLoption_714703655 = 166;
pub const CURLOPT_COPYPOSTFIELDS: __anonenum_CURLoption_714703655 = 10165;
pub const CURLOPT_OPENSOCKETDATA: __anonenum_CURLoption_714703655 = 10164;
pub const CURLOPT_OPENSOCKETFUNCTION: __anonenum_CURLoption_714703655 = 20163;
pub const CURLOPT_SSH_HOST_PUBLIC_KEY_MD5: __anonenum_CURLoption_714703655 = 10162;
pub const CURLOPT_POSTREDIR: __anonenum_CURLoption_714703655 = 161;
pub const CURLOPT_NEW_DIRECTORY_PERMS: __anonenum_CURLoption_714703655 = 160;
pub const CURLOPT_NEW_FILE_PERMS: __anonenum_CURLoption_714703655 = 159;
pub const CURLOPT_HTTP_CONTENT_DECODING: __anonenum_CURLoption_714703655 = 158;
pub const CURLOPT_HTTP_TRANSFER_DECODING: __anonenum_CURLoption_714703655 = 157;
pub const CURLOPT_CONNECTTIMEOUT_MS: __anonenum_CURLoption_714703655 = 156;
pub const CURLOPT_TIMEOUT_MS: __anonenum_CURLoption_714703655 = 155;
pub const CURLOPT_FTP_SSL_CCC: __anonenum_CURLoption_714703655 = 154;
pub const CURLOPT_SSH_PRIVATE_KEYFILE: __anonenum_CURLoption_714703655 = 10153;
pub const CURLOPT_SSH_PUBLIC_KEYFILE: __anonenum_CURLoption_714703655 = 10152;
pub const CURLOPT_SSH_AUTH_TYPES: __anonenum_CURLoption_714703655 = 151;
pub const CURLOPT_SSL_SESSIONID_CACHE: __anonenum_CURLoption_714703655 = 150;
pub const CURLOPT_SOCKOPTDATA: __anonenum_CURLoption_714703655 = 10149;
pub const CURLOPT_SOCKOPTFUNCTION: __anonenum_CURLoption_714703655 = 20148;
pub const CURLOPT_FTP_ALTERNATIVE_TO_USER: __anonenum_CURLoption_714703655 = 10147;
pub const CURLOPT_MAX_RECV_SPEED_LARGE: __anonenum_CURLoption_714703655 = 30146;
pub const CURLOPT_MAX_SEND_SPEED_LARGE: __anonenum_CURLoption_714703655 = 30145;
pub const CURLOPT_CONV_FROM_UTF8_FUNCTION: __anonenum_CURLoption_714703655 = 20144;
pub const CURLOPT_CONV_TO_NETWORK_FUNCTION: __anonenum_CURLoption_714703655 = 20143;
pub const CURLOPT_CONV_FROM_NETWORK_FUNCTION: __anonenum_CURLoption_714703655 = 20142;
pub const CURLOPT_CONNECT_ONLY: __anonenum_CURLoption_714703655 = 141;
pub const CURLOPT_LOCALPORTRANGE: __anonenum_CURLoption_714703655 = 140;
pub const CURLOPT_LOCALPORT: __anonenum_CURLoption_714703655 = 139;
pub const CURLOPT_FTP_FILEMETHOD: __anonenum_CURLoption_714703655 = 138;
pub const CURLOPT_FTP_SKIP_PASV_IP: __anonenum_CURLoption_714703655 = 137;
pub const CURLOPT_IGNORE_CONTENT_LENGTH: __anonenum_CURLoption_714703655 = 136;
pub const CURLOPT_COOKIELIST: __anonenum_CURLoption_714703655 = 10135;
pub const CURLOPT_FTP_ACCOUNT: __anonenum_CURLoption_714703655 = 10134;
pub const CURLOPT_IOCTLDATA: __anonenum_CURLoption_714703655 = 10131;
pub const CURLOPT_IOCTLFUNCTION: __anonenum_CURLoption_714703655 = 20130;
pub const CURLOPT_FTPSSLAUTH: __anonenum_CURLoption_714703655 = 129;
pub const CURLOPT_TCP_NODELAY: __anonenum_CURLoption_714703655 = 121;
pub const CURLOPT_POSTFIELDSIZE_LARGE: __anonenum_CURLoption_714703655 = 30120;
pub const CURLOPT_USE_SSL: __anonenum_CURLoption_714703655 = 119;
pub const CURLOPT_NETRC_FILE: __anonenum_CURLoption_714703655 = 10118;
pub const CURLOPT_MAXFILESIZE_LARGE: __anonenum_CURLoption_714703655 = 30117;
pub const CURLOPT_RESUME_FROM_LARGE: __anonenum_CURLoption_714703655 = 30116;
pub const CURLOPT_INFILESIZE_LARGE: __anonenum_CURLoption_714703655 = 30115;
pub const CURLOPT_MAXFILESIZE: __anonenum_CURLoption_714703655 = 114;
pub const CURLOPT_IPRESOLVE: __anonenum_CURLoption_714703655 = 113;
pub const CURLOPT_FTP_RESPONSE_TIMEOUT: __anonenum_CURLoption_714703655 = 112;
pub const CURLOPT_PROXYAUTH: __anonenum_CURLoption_714703655 = 111;
pub const CURLOPT_FTP_CREATE_MISSING_DIRS: __anonenum_CURLoption_714703655 = 110;
pub const CURLOPT_SSL_CTX_DATA: __anonenum_CURLoption_714703655 = 10109;
pub const CURLOPT_SSL_CTX_FUNCTION: __anonenum_CURLoption_714703655 = 20108;
pub const CURLOPT_HTTPAUTH: __anonenum_CURLoption_714703655 = 107;
pub const CURLOPT_FTP_USE_EPRT: __anonenum_CURLoption_714703655 = 106;
pub const CURLOPT_UNRESTRICTED_AUTH: __anonenum_CURLoption_714703655 = 105;
pub const CURLOPT_HTTP200ALIASES: __anonenum_CURLoption_714703655 = 10104;
pub const CURLOPT_PRIVATE: __anonenum_CURLoption_714703655 = 10103;
pub const CURLOPT_ACCEPT_ENCODING: __anonenum_CURLoption_714703655 = 10102;
pub const CURLOPT_PROXYTYPE: __anonenum_CURLoption_714703655 = 101;
pub const CURLOPT_SHARE: __anonenum_CURLoption_714703655 = 10100;
pub const CURLOPT_NOSIGNAL: __anonenum_CURLoption_714703655 = 99;
pub const CURLOPT_BUFFERSIZE: __anonenum_CURLoption_714703655 = 98;
pub const CURLOPT_CAPATH: __anonenum_CURLoption_714703655 = 10097;
pub const CURLOPT_COOKIESESSION: __anonenum_CURLoption_714703655 = 96;
pub const CURLOPT_DEBUGDATA: __anonenum_CURLoption_714703655 = 10095;
pub const CURLOPT_DEBUGFUNCTION: __anonenum_CURLoption_714703655 = 20094;
pub const CURLOPT_PREQUOTE: __anonenum_CURLoption_714703655 = 10093;
pub const CURLOPT_DNS_CACHE_TIMEOUT: __anonenum_CURLoption_714703655 = 92;
pub const CURLOPT_DNS_USE_GLOBAL_CACHE: __anonenum_CURLoption_714703655 = 91;
pub const CURLOPT_SSLENGINE_DEFAULT: __anonenum_CURLoption_714703655 = 90;
pub const CURLOPT_SSLENGINE: __anonenum_CURLoption_714703655 = 10089;
pub const CURLOPT_SSLKEYTYPE: __anonenum_CURLoption_714703655 = 10088;
pub const CURLOPT_SSLKEY: __anonenum_CURLoption_714703655 = 10087;
pub const CURLOPT_SSLCERTTYPE: __anonenum_CURLoption_714703655 = 10086;
pub const CURLOPT_FTP_USE_EPSV: __anonenum_CURLoption_714703655 = 85;
pub const CURLOPT_HTTP_VERSION: __anonenum_CURLoption_714703655 = 84;
pub const CURLOPT_SSL_CIPHER_LIST: __anonenum_CURLoption_714703655 = 10083;
pub const CURLOPT_COOKIEJAR: __anonenum_CURLoption_714703655 = 10082;
pub const CURLOPT_SSL_VERIFYHOST: __anonenum_CURLoption_714703655 = 81;
pub const CURLOPT_HTTPGET: __anonenum_CURLoption_714703655 = 80;
pub const CURLOPT_HEADERFUNCTION: __anonenum_CURLoption_714703655 = 20079;
pub const CURLOPT_CONNECTTIMEOUT: __anonenum_CURLoption_714703655 = 78;
pub const CURLOPT_EGDSOCKET: __anonenum_CURLoption_714703655 = 10077;
pub const CURLOPT_RANDOM_FILE: __anonenum_CURLoption_714703655 = 10076;
pub const CURLOPT_FORBID_REUSE: __anonenum_CURLoption_714703655 = 75;
pub const CURLOPT_FRESH_CONNECT: __anonenum_CURLoption_714703655 = 74;
pub const CURLOPT_OBSOLETE72: __anonenum_CURLoption_714703655 = 72;
pub const CURLOPT_MAXCONNECTS: __anonenum_CURLoption_714703655 = 71;
pub const CURLOPT_TELNETOPTIONS: __anonenum_CURLoption_714703655 = 10070;
pub const CURLOPT_FILETIME: __anonenum_CURLoption_714703655 = 69;
pub const CURLOPT_MAXREDIRS: __anonenum_CURLoption_714703655 = 68;
pub const CURLOPT_CAINFO: __anonenum_CURLoption_714703655 = 10065;
pub const CURLOPT_SSL_VERIFYPEER: __anonenum_CURLoption_714703655 = 64;
pub const CURLOPT_KRBLEVEL: __anonenum_CURLoption_714703655 = 10063;
pub const CURLOPT_INTERFACE: __anonenum_CURLoption_714703655 = 10062;
pub const CURLOPT_HTTPPROXYTUNNEL: __anonenum_CURLoption_714703655 = 61;
pub const CURLOPT_POSTFIELDSIZE: __anonenum_CURLoption_714703655 = 60;
pub const CURLOPT_PROXYPORT: __anonenum_CURLoption_714703655 = 59;
pub const CURLOPT_AUTOREFERER: __anonenum_CURLoption_714703655 = 58;
pub const CURLOPT_PROGRESSDATA: __anonenum_CURLoption_714703655 = 10057;
pub const CURLOPT_PROGRESSFUNCTION: __anonenum_CURLoption_714703655 = 20056;
pub const CURLOPT_PUT: __anonenum_CURLoption_714703655 = 54;
pub const CURLOPT_TRANSFERTEXT: __anonenum_CURLoption_714703655 = 53;
pub const CURLOPT_FOLLOWLOCATION: __anonenum_CURLoption_714703655 = 52;
pub const CURLOPT_NETRC: __anonenum_CURLoption_714703655 = 51;
pub const CURLOPT_APPEND: __anonenum_CURLoption_714703655 = 50;
pub const CURLOPT_DIRLISTONLY: __anonenum_CURLoption_714703655 = 48;
pub const CURLOPT_POST: __anonenum_CURLoption_714703655 = 47;
pub const CURLOPT_UPLOAD: __anonenum_CURLoption_714703655 = 46;
pub const CURLOPT_FAILONERROR: __anonenum_CURLoption_714703655 = 45;
pub const CURLOPT_NOBODY: __anonenum_CURLoption_714703655 = 44;
pub const CURLOPT_NOPROGRESS: __anonenum_CURLoption_714703655 = 43;
pub const CURLOPT_HEADER: __anonenum_CURLoption_714703655 = 42;
pub const CURLOPT_VERBOSE: __anonenum_CURLoption_714703655 = 41;
pub const CURLOPT_OBSOLETE40: __anonenum_CURLoption_714703655 = 10040;
pub const CURLOPT_POSTQUOTE: __anonenum_CURLoption_714703655 = 10039;
pub const CURLOPT_STDERR: __anonenum_CURLoption_714703655 = 10037;
pub const CURLOPT_CUSTOMREQUEST: __anonenum_CURLoption_714703655 = 10036;
pub const CURLOPT_TIMEVALUE: __anonenum_CURLoption_714703655 = 34;
pub const CURLOPT_TIMECONDITION: __anonenum_CURLoption_714703655 = 33;
pub const CURLOPT_SSLVERSION: __anonenum_CURLoption_714703655 = 32;
pub const CURLOPT_COOKIEFILE: __anonenum_CURLoption_714703655 = 10031;
pub const CURLOPT_HEADERDATA: __anonenum_CURLoption_714703655 = 10029;
pub const CURLOPT_QUOTE: __anonenum_CURLoption_714703655 = 10028;
pub const CURLOPT_CRLF: __anonenum_CURLoption_714703655 = 27;
pub const CURLOPT_KEYPASSWD: __anonenum_CURLoption_714703655 = 10026;
pub const CURLOPT_SSLCERT: __anonenum_CURLoption_714703655 = 10025;
pub const CURLOPT_HTTPPOST: __anonenum_CURLoption_714703655 = 10024;
pub const CURLOPT_HTTPHEADER: __anonenum_CURLoption_714703655 = 10023;
pub const CURLOPT_COOKIE: __anonenum_CURLoption_714703655 = 10022;
pub const CURLOPT_RESUME_FROM: __anonenum_CURLoption_714703655 = 21;
pub const CURLOPT_LOW_SPEED_TIME: __anonenum_CURLoption_714703655 = 20;
pub const CURLOPT_LOW_SPEED_LIMIT: __anonenum_CURLoption_714703655 = 19;
pub const CURLOPT_USERAGENT: __anonenum_CURLoption_714703655 = 10018;
pub const CURLOPT_FTPPORT: __anonenum_CURLoption_714703655 = 10017;
pub const CURLOPT_REFERER: __anonenum_CURLoption_714703655 = 10016;
pub const CURLOPT_POSTFIELDS: __anonenum_CURLoption_714703655 = 10015;
pub const CURLOPT_INFILESIZE: __anonenum_CURLoption_714703655 = 14;
pub const CURLOPT_TIMEOUT: __anonenum_CURLoption_714703655 = 13;
pub const CURLOPT_READFUNCTION: __anonenum_CURLoption_714703655 = 20012;
pub const CURLOPT_WRITEFUNCTION: __anonenum_CURLoption_714703655 = 20011;
pub const CURLOPT_ERRORBUFFER: __anonenum_CURLoption_714703655 = 10010;
pub const CURLOPT_READDATA: __anonenum_CURLoption_714703655 = 10009;
pub const CURLOPT_RANGE: __anonenum_CURLoption_714703655 = 10007;
pub const CURLOPT_PROXYUSERPWD: __anonenum_CURLoption_714703655 = 10006;
pub const CURLOPT_USERPWD: __anonenum_CURLoption_714703655 = 10005;
pub const CURLOPT_PROXY: __anonenum_CURLoption_714703655 = 10004;
pub const CURLOPT_PORT: __anonenum_CURLoption_714703655 = 3;
pub const CURLOPT_URL: __anonenum_CURLoption_714703655 = 10002;
pub const CURLOPT_WRITEDATA: __anonenum_CURLoption_714703655 = 10001;
pub type CURLoption = __anonenum_CURLoption_714703655;
pub type __anonenum_CURLINFO_948637033 = libc::c_uint;
pub const CURLINFO_LASTONE: __anonenum_CURLINFO_948637033 = 57;
pub const CURLINFO_RETRY_AFTER: __anonenum_CURLINFO_948637033 = 6291513;
pub const CURLINFO_APPCONNECT_TIME_T: __anonenum_CURLINFO_948637033 = 6291512;
pub const CURLINFO_REDIRECT_TIME_T: __anonenum_CURLINFO_948637033 = 6291511;
pub const CURLINFO_STARTTRANSFER_TIME_T: __anonenum_CURLINFO_948637033 = 6291510;
pub const CURLINFO_PRETRANSFER_TIME_T: __anonenum_CURLINFO_948637033 = 6291509;
pub const CURLINFO_CONNECT_TIME_T: __anonenum_CURLINFO_948637033 = 6291508;
pub const CURLINFO_NAMELOOKUP_TIME_T: __anonenum_CURLINFO_948637033 = 6291507;
pub const CURLINFO_TOTAL_TIME_T: __anonenum_CURLINFO_948637033 = 6291506;
pub const CURLINFO_SCHEME: __anonenum_CURLINFO_948637033 = 1048625;
pub const CURLINFO_PROTOCOL: __anonenum_CURLINFO_948637033 = 2097200;
pub const CURLINFO_PROXY_SSL_VERIFYRESULT: __anonenum_CURLINFO_948637033 = 2097199;
pub const CURLINFO_HTTP_VERSION: __anonenum_CURLINFO_948637033 = 2097198;
pub const CURLINFO_TLS_SSL_PTR: __anonenum_CURLINFO_948637033 = 4194349;
pub const CURLINFO_ACTIVESOCKET: __anonenum_CURLINFO_948637033 = 5242924;
pub const CURLINFO_TLS_SESSION: __anonenum_CURLINFO_948637033 = 4194347;
pub const CURLINFO_LOCAL_PORT: __anonenum_CURLINFO_948637033 = 2097194;
pub const CURLINFO_LOCAL_IP: __anonenum_CURLINFO_948637033 = 1048617;
pub const CURLINFO_PRIMARY_PORT: __anonenum_CURLINFO_948637033 = 2097192;
pub const CURLINFO_RTSP_CSEQ_RECV: __anonenum_CURLINFO_948637033 = 2097191;
pub const CURLINFO_RTSP_SERVER_CSEQ: __anonenum_CURLINFO_948637033 = 2097190;
pub const CURLINFO_RTSP_CLIENT_CSEQ: __anonenum_CURLINFO_948637033 = 2097189;
pub const CURLINFO_RTSP_SESSION_ID: __anonenum_CURLINFO_948637033 = 1048612;
pub const CURLINFO_CONDITION_UNMET: __anonenum_CURLINFO_948637033 = 2097187;
pub const CURLINFO_CERTINFO: __anonenum_CURLINFO_948637033 = 4194338;
pub const CURLINFO_APPCONNECT_TIME: __anonenum_CURLINFO_948637033 = 3145761;
pub const CURLINFO_PRIMARY_IP: __anonenum_CURLINFO_948637033 = 1048608;
pub const CURLINFO_REDIRECT_URL: __anonenum_CURLINFO_948637033 = 1048607;
pub const CURLINFO_FTP_ENTRY_PATH: __anonenum_CURLINFO_948637033 = 1048606;
pub const CURLINFO_LASTSOCKET: __anonenum_CURLINFO_948637033 = 2097181;
pub const CURLINFO_COOKIELIST: __anonenum_CURLINFO_948637033 = 4194332;
pub const CURLINFO_SSL_ENGINES: __anonenum_CURLINFO_948637033 = 4194331;
pub const CURLINFO_NUM_CONNECTS: __anonenum_CURLINFO_948637033 = 2097178;
pub const CURLINFO_OS_ERRNO: __anonenum_CURLINFO_948637033 = 2097177;
pub const CURLINFO_PROXYAUTH_AVAIL: __anonenum_CURLINFO_948637033 = 2097176;
pub const CURLINFO_HTTPAUTH_AVAIL: __anonenum_CURLINFO_948637033 = 2097175;
pub const CURLINFO_HTTP_CONNECTCODE: __anonenum_CURLINFO_948637033 = 2097174;
pub const CURLINFO_PRIVATE: __anonenum_CURLINFO_948637033 = 1048597;
pub const CURLINFO_REDIRECT_COUNT: __anonenum_CURLINFO_948637033 = 2097172;
pub const CURLINFO_REDIRECT_TIME: __anonenum_CURLINFO_948637033 = 3145747;
pub const CURLINFO_CONTENT_TYPE: __anonenum_CURLINFO_948637033 = 1048594;
pub const CURLINFO_STARTTRANSFER_TIME: __anonenum_CURLINFO_948637033 = 3145745;
pub const CURLINFO_CONTENT_LENGTH_UPLOAD_T: __anonenum_CURLINFO_948637033 = 6291472;
pub const CURLINFO_CONTENT_LENGTH_UPLOAD: __anonenum_CURLINFO_948637033 = 3145744;
pub const CURLINFO_CONTENT_LENGTH_DOWNLOAD_T: __anonenum_CURLINFO_948637033 = 6291471;
pub const CURLINFO_CONTENT_LENGTH_DOWNLOAD: __anonenum_CURLINFO_948637033 = 3145743;
pub const CURLINFO_FILETIME_T: __anonenum_CURLINFO_948637033 = 6291470;
pub const CURLINFO_FILETIME: __anonenum_CURLINFO_948637033 = 2097166;
pub const CURLINFO_SSL_VERIFYRESULT: __anonenum_CURLINFO_948637033 = 2097165;
pub const CURLINFO_REQUEST_SIZE: __anonenum_CURLINFO_948637033 = 2097164;
pub const CURLINFO_HEADER_SIZE: __anonenum_CURLINFO_948637033 = 2097163;
pub const CURLINFO_SPEED_UPLOAD_T: __anonenum_CURLINFO_948637033 = 6291466;
pub const CURLINFO_SPEED_UPLOAD: __anonenum_CURLINFO_948637033 = 3145738;
pub const CURLINFO_SPEED_DOWNLOAD_T: __anonenum_CURLINFO_948637033 = 6291465;
pub const CURLINFO_SPEED_DOWNLOAD: __anonenum_CURLINFO_948637033 = 3145737;
pub const CURLINFO_SIZE_DOWNLOAD_T: __anonenum_CURLINFO_948637033 = 6291464;
pub const CURLINFO_SIZE_DOWNLOAD: __anonenum_CURLINFO_948637033 = 3145736;
pub const CURLINFO_SIZE_UPLOAD_T: __anonenum_CURLINFO_948637033 = 6291463;
pub const CURLINFO_SIZE_UPLOAD: __anonenum_CURLINFO_948637033 = 3145735;
pub const CURLINFO_PRETRANSFER_TIME: __anonenum_CURLINFO_948637033 = 3145734;
pub const CURLINFO_CONNECT_TIME: __anonenum_CURLINFO_948637033 = 3145733;
pub const CURLINFO_NAMELOOKUP_TIME: __anonenum_CURLINFO_948637033 = 3145732;
pub const CURLINFO_TOTAL_TIME: __anonenum_CURLINFO_948637033 = 3145731;
pub const CURLINFO_RESPONSE_CODE: __anonenum_CURLINFO_948637033 = 2097154;
pub const CURLINFO_EFFECTIVE_URL: __anonenum_CURLINFO_948637033 = 1048577;
pub const CURLINFO_NONE: __anonenum_CURLINFO_948637033 = 0;
pub type CURLINFO = __anonenum_CURLINFO_948637033;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboSourcePosition_891927932 {
    pub line: libc::c_uint,
    pub column: libc::c_uint,
    pub offset: libc::c_uint,
}
pub type GumboSourcePosition = __anonstruct_GumboSourcePosition_891927932;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboStringPiece_673951369 {
    pub data: *const libc::c_char,
    pub length: size_t,
}
pub type GumboStringPiece = __anonstruct_GumboStringPiece_673951369;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboVector_216886465 {
    pub data: *mut *mut libc::c_void,
    pub length: libc::c_uint,
    pub capacity: libc::c_uint,
}
pub type GumboVector = __anonstruct_GumboVector_216886465;
pub type __anonenum_GumboTag_341509449 = libc::c_uint;
pub const GUMBO_TAG_LAST: __anonenum_GumboTag_341509449 = 150;
pub const GUMBO_TAG_UNKNOWN: __anonenum_GumboTag_341509449 = 149;
pub const GUMBO_TAG_TT: __anonenum_GumboTag_341509449 = 148;
pub const GUMBO_TAG_SPACER: __anonenum_GumboTag_341509449 = 147;
pub const GUMBO_TAG_NOBR: __anonenum_GumboTag_341509449 = 146;
pub const GUMBO_TAG_MULTICOL: __anonenum_GumboTag_341509449 = 145;
pub const GUMBO_TAG_MARQUEE: __anonenum_GumboTag_341509449 = 144;
pub const GUMBO_TAG_FONT: __anonenum_GumboTag_341509449 = 143;
pub const GUMBO_TAG_CENTER: __anonenum_GumboTag_341509449 = 142;
pub const GUMBO_TAG_BLINK: __anonenum_GumboTag_341509449 = 141;
pub const GUMBO_TAG_BIG: __anonenum_GumboTag_341509449 = 140;
pub const GUMBO_TAG_BASEFONT: __anonenum_GumboTag_341509449 = 139;
pub const GUMBO_TAG_STRIKE: __anonenum_GumboTag_341509449 = 138;
pub const GUMBO_TAG_RB: __anonenum_GumboTag_341509449 = 137;
pub const GUMBO_TAG_PLAINTEXT: __anonenum_GumboTag_341509449 = 136;
pub const GUMBO_TAG_NOEMBED: __anonenum_GumboTag_341509449 = 135;
pub const GUMBO_TAG_NEXTID: __anonenum_GumboTag_341509449 = 134;
pub const GUMBO_TAG_XMP: __anonenum_GumboTag_341509449 = 133;
pub const GUMBO_TAG_LISTING: __anonenum_GumboTag_341509449 = 132;
pub const GUMBO_TAG_ISINDEX: __anonenum_GumboTag_341509449 = 131;
pub const GUMBO_TAG_NOFRAMES: __anonenum_GumboTag_341509449 = 130;
pub const GUMBO_TAG_FRAMESET: __anonenum_GumboTag_341509449 = 129;
pub const GUMBO_TAG_FRAME: __anonenum_GumboTag_341509449 = 128;
pub const GUMBO_TAG_DIR: __anonenum_GumboTag_341509449 = 127;
pub const GUMBO_TAG_BGSOUND: __anonenum_GumboTag_341509449 = 126;
pub const GUMBO_TAG_ACRONYM: __anonenum_GumboTag_341509449 = 125;
pub const GUMBO_TAG_APPLET: __anonenum_GumboTag_341509449 = 124;
pub const GUMBO_TAG_MENUITEM: __anonenum_GumboTag_341509449 = 123;
pub const GUMBO_TAG_MENU: __anonenum_GumboTag_341509449 = 122;
pub const GUMBO_TAG_SUMMARY: __anonenum_GumboTag_341509449 = 121;
pub const GUMBO_TAG_DETAILS: __anonenum_GumboTag_341509449 = 120;
pub const GUMBO_TAG_METER: __anonenum_GumboTag_341509449 = 119;
pub const GUMBO_TAG_PROGRESS: __anonenum_GumboTag_341509449 = 118;
pub const GUMBO_TAG_OUTPUT: __anonenum_GumboTag_341509449 = 117;
pub const GUMBO_TAG_KEYGEN: __anonenum_GumboTag_341509449 = 116;
pub const GUMBO_TAG_TEXTAREA: __anonenum_GumboTag_341509449 = 115;
pub const GUMBO_TAG_OPTION: __anonenum_GumboTag_341509449 = 114;
pub const GUMBO_TAG_OPTGROUP: __anonenum_GumboTag_341509449 = 113;
pub const GUMBO_TAG_DATALIST: __anonenum_GumboTag_341509449 = 112;
pub const GUMBO_TAG_SELECT: __anonenum_GumboTag_341509449 = 111;
pub const GUMBO_TAG_BUTTON: __anonenum_GumboTag_341509449 = 110;
pub const GUMBO_TAG_INPUT: __anonenum_GumboTag_341509449 = 109;
pub const GUMBO_TAG_LABEL: __anonenum_GumboTag_341509449 = 108;
pub const GUMBO_TAG_LEGEND: __anonenum_GumboTag_341509449 = 107;
pub const GUMBO_TAG_FIELDSET: __anonenum_GumboTag_341509449 = 106;
pub const GUMBO_TAG_FORM: __anonenum_GumboTag_341509449 = 105;
pub const GUMBO_TAG_TH: __anonenum_GumboTag_341509449 = 104;
pub const GUMBO_TAG_TD: __anonenum_GumboTag_341509449 = 103;
pub const GUMBO_TAG_TR: __anonenum_GumboTag_341509449 = 102;
pub const GUMBO_TAG_TFOOT: __anonenum_GumboTag_341509449 = 101;
pub const GUMBO_TAG_THEAD: __anonenum_GumboTag_341509449 = 100;
pub const GUMBO_TAG_TBODY: __anonenum_GumboTag_341509449 = 99;
pub const GUMBO_TAG_COL: __anonenum_GumboTag_341509449 = 98;
pub const GUMBO_TAG_COLGROUP: __anonenum_GumboTag_341509449 = 97;
pub const GUMBO_TAG_CAPTION: __anonenum_GumboTag_341509449 = 96;
pub const GUMBO_TAG_TABLE: __anonenum_GumboTag_341509449 = 95;
pub const GUMBO_TAG_DESC: __anonenum_GumboTag_341509449 = 94;
pub const GUMBO_TAG_FOREIGNOBJECT: __anonenum_GumboTag_341509449 = 93;
pub const GUMBO_TAG_SVG: __anonenum_GumboTag_341509449 = 92;
pub const GUMBO_TAG_ANNOTATION_XML: __anonenum_GumboTag_341509449 = 91;
pub const GUMBO_TAG_MALIGNMARK: __anonenum_GumboTag_341509449 = 90;
pub const GUMBO_TAG_MGLYPH: __anonenum_GumboTag_341509449 = 89;
pub const GUMBO_TAG_MTEXT: __anonenum_GumboTag_341509449 = 88;
pub const GUMBO_TAG_MS: __anonenum_GumboTag_341509449 = 87;
pub const GUMBO_TAG_MN: __anonenum_GumboTag_341509449 = 86;
pub const GUMBO_TAG_MO: __anonenum_GumboTag_341509449 = 85;
pub const GUMBO_TAG_MI: __anonenum_GumboTag_341509449 = 84;
pub const GUMBO_TAG_MATH: __anonenum_GumboTag_341509449 = 83;
pub const GUMBO_TAG_AREA: __anonenum_GumboTag_341509449 = 82;
pub const GUMBO_TAG_MAP: __anonenum_GumboTag_341509449 = 81;
pub const GUMBO_TAG_CANVAS: __anonenum_GumboTag_341509449 = 80;
pub const GUMBO_TAG_TRACK: __anonenum_GumboTag_341509449 = 79;
pub const GUMBO_TAG_SOURCE: __anonenum_GumboTag_341509449 = 78;
pub const GUMBO_TAG_AUDIO: __anonenum_GumboTag_341509449 = 77;
pub const GUMBO_TAG_VIDEO: __anonenum_GumboTag_341509449 = 76;
pub const GUMBO_TAG_PARAM: __anonenum_GumboTag_341509449 = 75;
pub const GUMBO_TAG_OBJECT: __anonenum_GumboTag_341509449 = 74;
pub const GUMBO_TAG_EMBED: __anonenum_GumboTag_341509449 = 73;
pub const GUMBO_TAG_IFRAME: __anonenum_GumboTag_341509449 = 72;
pub const GUMBO_TAG_IMG: __anonenum_GumboTag_341509449 = 71;
pub const GUMBO_TAG_IMAGE: __anonenum_GumboTag_341509449 = 70;
pub const GUMBO_TAG_DEL: __anonenum_GumboTag_341509449 = 69;
pub const GUMBO_TAG_INS: __anonenum_GumboTag_341509449 = 68;
pub const GUMBO_TAG_WBR: __anonenum_GumboTag_341509449 = 67;
pub const GUMBO_TAG_BR: __anonenum_GumboTag_341509449 = 66;
pub const GUMBO_TAG_SPAN: __anonenum_GumboTag_341509449 = 65;
pub const GUMBO_TAG_BDO: __anonenum_GumboTag_341509449 = 64;
pub const GUMBO_TAG_BDI: __anonenum_GumboTag_341509449 = 63;
pub const GUMBO_TAG_RP: __anonenum_GumboTag_341509449 = 62;
pub const GUMBO_TAG_RT: __anonenum_GumboTag_341509449 = 61;
pub const GUMBO_TAG_RUBY: __anonenum_GumboTag_341509449 = 60;
pub const GUMBO_TAG_MARK: __anonenum_GumboTag_341509449 = 59;
pub const GUMBO_TAG_U: __anonenum_GumboTag_341509449 = 58;
pub const GUMBO_TAG_B: __anonenum_GumboTag_341509449 = 57;
pub const GUMBO_TAG_I: __anonenum_GumboTag_341509449 = 56;
pub const GUMBO_TAG_SUP: __anonenum_GumboTag_341509449 = 55;
pub const GUMBO_TAG_SUB: __anonenum_GumboTag_341509449 = 54;
pub const GUMBO_TAG_KBD: __anonenum_GumboTag_341509449 = 53;
pub const GUMBO_TAG_SAMP: __anonenum_GumboTag_341509449 = 52;
pub const GUMBO_TAG_VAR: __anonenum_GumboTag_341509449 = 51;
pub const GUMBO_TAG_CODE: __anonenum_GumboTag_341509449 = 50;
pub const GUMBO_TAG_TIME: __anonenum_GumboTag_341509449 = 49;
pub const GUMBO_TAG_DATA: __anonenum_GumboTag_341509449 = 48;
pub const GUMBO_TAG_ABBR: __anonenum_GumboTag_341509449 = 47;
pub const GUMBO_TAG_DFN: __anonenum_GumboTag_341509449 = 46;
pub const GUMBO_TAG_Q: __anonenum_GumboTag_341509449 = 45;
pub const GUMBO_TAG_CITE: __anonenum_GumboTag_341509449 = 44;
pub const GUMBO_TAG_S: __anonenum_GumboTag_341509449 = 43;
pub const GUMBO_TAG_SMALL: __anonenum_GumboTag_341509449 = 42;
pub const GUMBO_TAG_STRONG: __anonenum_GumboTag_341509449 = 41;
pub const GUMBO_TAG_EM: __anonenum_GumboTag_341509449 = 40;
pub const GUMBO_TAG_A: __anonenum_GumboTag_341509449 = 39;
pub const GUMBO_TAG_DIV: __anonenum_GumboTag_341509449 = 38;
pub const GUMBO_TAG_MAIN: __anonenum_GumboTag_341509449 = 37;
pub const GUMBO_TAG_FIGCAPTION: __anonenum_GumboTag_341509449 = 36;
pub const GUMBO_TAG_FIGURE: __anonenum_GumboTag_341509449 = 35;
pub const GUMBO_TAG_DD: __anonenum_GumboTag_341509449 = 34;
pub const GUMBO_TAG_DT: __anonenum_GumboTag_341509449 = 33;
pub const GUMBO_TAG_DL: __anonenum_GumboTag_341509449 = 32;
pub const GUMBO_TAG_LI: __anonenum_GumboTag_341509449 = 31;
pub const GUMBO_TAG_UL: __anonenum_GumboTag_341509449 = 30;
pub const GUMBO_TAG_OL: __anonenum_GumboTag_341509449 = 29;
pub const GUMBO_TAG_BLOCKQUOTE: __anonenum_GumboTag_341509449 = 28;
pub const GUMBO_TAG_PRE: __anonenum_GumboTag_341509449 = 27;
pub const GUMBO_TAG_HR: __anonenum_GumboTag_341509449 = 26;
pub const GUMBO_TAG_P: __anonenum_GumboTag_341509449 = 25;
pub const GUMBO_TAG_ADDRESS: __anonenum_GumboTag_341509449 = 24;
pub const GUMBO_TAG_FOOTER: __anonenum_GumboTag_341509449 = 23;
pub const GUMBO_TAG_HEADER: __anonenum_GumboTag_341509449 = 22;
pub const GUMBO_TAG_HGROUP: __anonenum_GumboTag_341509449 = 21;
pub const GUMBO_TAG_H6: __anonenum_GumboTag_341509449 = 20;
pub const GUMBO_TAG_H5: __anonenum_GumboTag_341509449 = 19;
pub const GUMBO_TAG_H4: __anonenum_GumboTag_341509449 = 18;
pub const GUMBO_TAG_H3: __anonenum_GumboTag_341509449 = 17;
pub const GUMBO_TAG_H2: __anonenum_GumboTag_341509449 = 16;
pub const GUMBO_TAG_H1: __anonenum_GumboTag_341509449 = 15;
pub const GUMBO_TAG_ASIDE: __anonenum_GumboTag_341509449 = 14;
pub const GUMBO_TAG_NAV: __anonenum_GumboTag_341509449 = 13;
pub const GUMBO_TAG_SECTION: __anonenum_GumboTag_341509449 = 12;
pub const GUMBO_TAG_ARTICLE: __anonenum_GumboTag_341509449 = 11;
pub const GUMBO_TAG_BODY: __anonenum_GumboTag_341509449 = 10;
pub const GUMBO_TAG_TEMPLATE: __anonenum_GumboTag_341509449 = 9;
pub const GUMBO_TAG_NOSCRIPT: __anonenum_GumboTag_341509449 = 8;
pub const GUMBO_TAG_SCRIPT: __anonenum_GumboTag_341509449 = 7;
pub const GUMBO_TAG_STYLE: __anonenum_GumboTag_341509449 = 6;
pub const GUMBO_TAG_META: __anonenum_GumboTag_341509449 = 5;
pub const GUMBO_TAG_LINK: __anonenum_GumboTag_341509449 = 4;
pub const GUMBO_TAG_BASE: __anonenum_GumboTag_341509449 = 3;
pub const GUMBO_TAG_TITLE: __anonenum_GumboTag_341509449 = 2;
pub const GUMBO_TAG_HEAD: __anonenum_GumboTag_341509449 = 1;
pub const GUMBO_TAG_HTML: __anonenum_GumboTag_341509449 = 0;
pub type GumboTag = __anonenum_GumboTag_341509449;
pub type __anonenum_GumboNodeType_685978054 = libc::c_uint;
pub const GUMBO_NODE_WHITESPACE: __anonenum_GumboNodeType_685978054 = 5;
pub const GUMBO_NODE_COMMENT: __anonenum_GumboNodeType_685978054 = 4;
pub const GUMBO_NODE_CDATA: __anonenum_GumboNodeType_685978054 = 3;
pub const GUMBO_NODE_TEXT: __anonenum_GumboNodeType_685978054 = 2;
pub const GUMBO_NODE_ELEMENT: __anonenum_GumboNodeType_685978054 = 1;
pub const GUMBO_NODE_DOCUMENT: __anonenum_GumboNodeType_685978054 = 0;
pub type GumboNodeType = __anonenum_GumboNodeType_685978054;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalNode {
    pub type_0: GumboNodeType,
    pub parent: *mut GumboNode,
    pub index_within_parent: size_t,
    pub parse_flags: GumboParseFlags,
    pub v: __anonunion_v_889275138,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_v_889275138 {
    pub document: GumboDocument,
    pub element: GumboElement,
    pub text: GumboText,
}
pub type GumboText = __anonstruct_GumboText_318129021;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboText_318129021 {
    pub text: *const libc::c_char,
    pub original_text: GumboStringPiece,
    pub start_pos: GumboSourcePosition,
}
pub type GumboElement = __anonstruct_GumboElement_456828804;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboElement_456828804 {
    pub children: GumboVector,
    pub tag: GumboTag,
    pub tag_namespace: GumboNamespaceEnum,
    pub original_tag: GumboStringPiece,
    pub original_end_tag: GumboStringPiece,
    pub start_pos: GumboSourcePosition,
    pub end_pos: GumboSourcePosition,
    pub attributes: GumboVector,
}
pub type GumboNamespaceEnum = __anonenum_GumboNamespaceEnum_690435942;
pub type __anonenum_GumboNamespaceEnum_690435942 = libc::c_uint;
pub const GUMBO_NAMESPACE_MATHML: __anonenum_GumboNamespaceEnum_690435942 = 2;
pub const GUMBO_NAMESPACE_SVG: __anonenum_GumboNamespaceEnum_690435942 = 1;
pub const GUMBO_NAMESPACE_HTML: __anonenum_GumboNamespaceEnum_690435942 = 0;
pub type GumboDocument = __anonstruct_GumboDocument_1013988508;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboDocument_1013988508 {
    pub children: GumboVector,
    pub has_doctype: bool,
    pub name: *const libc::c_char,
    pub public_identifier: *const libc::c_char,
    pub system_identifier: *const libc::c_char,
    pub doc_type_quirks_mode: GumboQuirksModeEnum,
}
pub type GumboQuirksModeEnum = __anonenum_GumboQuirksModeEnum_135775851;
pub type __anonenum_GumboQuirksModeEnum_135775851 = libc::c_uint;
pub const GUMBO_DOCTYPE_LIMITED_QUIRKS: __anonenum_GumboQuirksModeEnum_135775851 = 2;
pub const GUMBO_DOCTYPE_QUIRKS: __anonenum_GumboQuirksModeEnum_135775851 = 1;
pub const GUMBO_DOCTYPE_NO_QUIRKS: __anonenum_GumboQuirksModeEnum_135775851 = 0;
pub type GumboParseFlags = __anonenum_GumboParseFlags_984900602;
pub type __anonenum_GumboParseFlags_984900602 = libc::c_uint;
pub const GUMBO_INSERTION_FOSTER_PARENTED: __anonenum_GumboParseFlags_984900602 = 1024;
pub const GUMBO_INSERTION_ADOPTION_AGENCY_MOVED: __anonenum_GumboParseFlags_984900602 = 512;
pub const GUMBO_INSERTION_ADOPTION_AGENCY_CLONED: __anonenum_GumboParseFlags_984900602 = 256;
pub const GUMBO_INSERTION_RECONSTRUCTED_FORMATTING_ELEMENT: __anonenum_GumboParseFlags_984900602 = 128;
pub const GUMBO_INSERTION_FROM_IMAGE: __anonenum_GumboParseFlags_984900602 = 64;
pub const GUMBO_INSERTION_FROM_ISINDEX: __anonenum_GumboParseFlags_984900602 = 32;
pub const GUMBO_INSERTION_CONVERTED_FROM_END_TAG: __anonenum_GumboParseFlags_984900602 = 16;
pub const GUMBO_INSERTION_IMPLIED: __anonenum_GumboParseFlags_984900602 = 8;
pub const GUMBO_INSERTION_IMPLICIT_END_TAG: __anonenum_GumboParseFlags_984900602 = 2;
pub const GUMBO_INSERTION_BY_PARSER: __anonenum_GumboParseFlags_984900602 = 1;
pub const GUMBO_INSERTION_NORMAL: __anonenum_GumboParseFlags_984900602 = 0;
pub type GumboNode = GumboInternalNode;
pub type __gnuc_va_list = __builtin_va_list;
pub type __clock_t = libc::c_long;
pub type va_list___0 = __gnuc_va_list;
pub type clock_t = __clock_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalOptions {
    pub allocator: Option::<
        unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void,
    >,
    pub deallocator: Option::<
        unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> (),
    >,
    pub userdata: *mut libc::c_void,
    pub tab_stop: libc::c_int,
    pub stop_on_first_error: bool,
    pub max_errors: libc::c_int,
}
pub type GumboOptions = GumboInternalOptions;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalOutput {
    pub document: *mut GumboNode,
    pub root: *mut GumboNode,
    pub errors: GumboVector,
}
pub type GumboOutput = GumboInternalOutput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_wiki_package_t_343724373 {
    pub repo: *mut libc::c_char,
    pub href: *mut libc::c_char,
    pub description: *mut libc::c_char,
    pub category: *mut libc::c_char,
}
pub type wiki_package_t = __anonstruct_wiki_package_t_343724373;
pub type off_t = __off_t;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalParser {
    pub _options: *const GumboInternalOptions,
    pub _output: *mut GumboInternalOutput,
    pub _tokenizer_state: *mut GumboInternalTokenizerState,
    pub _parser_state: *mut GumboInternalParserState,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalParserState {
    pub _insertion_mode: GumboInsertionMode,
    pub _original_insertion_mode: GumboInsertionMode,
    pub _open_elements: GumboVector,
    pub _active_formatting_elements: GumboVector,
    pub _template_insertion_modes: GumboVector,
    pub _head_element: *mut GumboNode,
    pub _form_element: *mut GumboNode,
    pub _reprocess_current_token: bool,
    pub _self_closing_flag_acknowledged: bool,
    pub _frameset_ok: bool,
    pub _ignore_next_linefeed: bool,
    pub _foster_parent_insertions: bool,
    pub _text_node: TextNodeBufferState,
    pub _current_token: *mut GumboToken,
    pub _closed_body_tag: bool,
    pub _closed_html_tag: bool,
}
pub type GumboToken = GumboInternalToken;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalToken {
    pub type_0: GumboTokenType,
    pub position: GumboSourcePosition,
    pub original_text: GumboStringPiece,
    pub v: __anonunion_v_147506068,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_v_147506068 {
    pub doc_type: GumboTokenDocType,
    pub start_tag: GumboTokenStartTag,
    pub end_tag: GumboTag,
    pub text: *const libc::c_char,
    pub character: libc::c_int,
}
pub type GumboTokenStartTag = GumboInternalTokenStartTag;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalTokenStartTag {
    pub tag: GumboTag,
    pub attributes: GumboVector,
    pub is_self_closing: bool,
}
pub type GumboTokenDocType = GumboInternalTokenDocType;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalTokenDocType {
    pub name: *const libc::c_char,
    pub public_identifier: *const libc::c_char,
    pub system_identifier: *const libc::c_char,
    pub force_quirks: bool,
    pub has_public_identifier: bool,
    pub has_system_identifier: bool,
}
pub type GumboTokenType = __anonenum_GumboTokenType_789931907;
pub type __anonenum_GumboTokenType_789931907 = libc::c_uint;
pub const GUMBO_TOKEN_EOF: __anonenum_GumboTokenType_789931907 = 7;
pub const GUMBO_TOKEN_NULL: __anonenum_GumboTokenType_789931907 = 6;
pub const GUMBO_TOKEN_CHARACTER: __anonenum_GumboTokenType_789931907 = 5;
pub const GUMBO_TOKEN_WHITESPACE: __anonenum_GumboTokenType_789931907 = 4;
pub const GUMBO_TOKEN_COMMENT: __anonenum_GumboTokenType_789931907 = 3;
pub const GUMBO_TOKEN_END_TAG: __anonenum_GumboTokenType_789931907 = 2;
pub const GUMBO_TOKEN_START_TAG: __anonenum_GumboTokenType_789931907 = 1;
pub const GUMBO_TOKEN_DOCTYPE: __anonenum_GumboTokenType_789931907 = 0;
pub type TextNodeBufferState = _TextNodeBufferState;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _TextNodeBufferState {
    pub _buffer: GumboStringBuffer,
    pub _start_original_text: *const libc::c_char,
    pub _start_position: GumboSourcePosition,
    pub _type: GumboNodeType,
}
pub type GumboStringBuffer = __anonstruct_GumboStringBuffer_483684869;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboStringBuffer_483684869 {
    pub data: *mut libc::c_char,
    pub length: size_t,
    pub capacity: size_t,
}
pub type GumboInsertionMode = __anonenum_GumboInsertionMode_448368103;
pub type __anonenum_GumboInsertionMode_448368103 = libc::c_uint;
pub const GUMBO_INSERTION_MODE_AFTER_AFTER_FRAMESET: __anonenum_GumboInsertionMode_448368103 = 22;
pub const GUMBO_INSERTION_MODE_AFTER_AFTER_BODY: __anonenum_GumboInsertionMode_448368103 = 21;
pub const GUMBO_INSERTION_MODE_AFTER_FRAMESET: __anonenum_GumboInsertionMode_448368103 = 20;
pub const GUMBO_INSERTION_MODE_IN_FRAMESET: __anonenum_GumboInsertionMode_448368103 = 19;
pub const GUMBO_INSERTION_MODE_AFTER_BODY: __anonenum_GumboInsertionMode_448368103 = 18;
pub const GUMBO_INSERTION_MODE_IN_TEMPLATE: __anonenum_GumboInsertionMode_448368103 = 17;
pub const GUMBO_INSERTION_MODE_IN_SELECT_IN_TABLE: __anonenum_GumboInsertionMode_448368103 = 16;
pub const GUMBO_INSERTION_MODE_IN_SELECT: __anonenum_GumboInsertionMode_448368103 = 15;
pub const GUMBO_INSERTION_MODE_IN_CELL: __anonenum_GumboInsertionMode_448368103 = 14;
pub const GUMBO_INSERTION_MODE_IN_ROW: __anonenum_GumboInsertionMode_448368103 = 13;
pub const GUMBO_INSERTION_MODE_IN_TABLE_BODY: __anonenum_GumboInsertionMode_448368103 = 12;
pub const GUMBO_INSERTION_MODE_IN_COLUMN_GROUP: __anonenum_GumboInsertionMode_448368103 = 11;
pub const GUMBO_INSERTION_MODE_IN_CAPTION: __anonenum_GumboInsertionMode_448368103 = 10;
pub const GUMBO_INSERTION_MODE_IN_TABLE_TEXT: __anonenum_GumboInsertionMode_448368103 = 9;
pub const GUMBO_INSERTION_MODE_IN_TABLE: __anonenum_GumboInsertionMode_448368103 = 8;
pub const GUMBO_INSERTION_MODE_TEXT: __anonenum_GumboInsertionMode_448368103 = 7;
pub const GUMBO_INSERTION_MODE_IN_BODY: __anonenum_GumboInsertionMode_448368103 = 6;
pub const GUMBO_INSERTION_MODE_AFTER_HEAD: __anonenum_GumboInsertionMode_448368103 = 5;
pub const GUMBO_INSERTION_MODE_IN_HEAD_NOSCRIPT: __anonenum_GumboInsertionMode_448368103 = 4;
pub const GUMBO_INSERTION_MODE_IN_HEAD: __anonenum_GumboInsertionMode_448368103 = 3;
pub const GUMBO_INSERTION_MODE_BEFORE_HEAD: __anonenum_GumboInsertionMode_448368103 = 2;
pub const GUMBO_INSERTION_MODE_BEFORE_HTML: __anonenum_GumboInsertionMode_448368103 = 1;
pub const GUMBO_INSERTION_MODE_INITIAL: __anonenum_GumboInsertionMode_448368103 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalTokenizerState {
    pub _state: GumboTokenizerEnum,
    pub _reconsume_current_input: bool,
    pub _is_current_node_foreign: bool,
    pub _buffered_emit_char: libc::c_int,
    pub _temporary_buffer: GumboStringBuffer,
    pub _temporary_buffer_emit: *const libc::c_char,
    pub _script_data_buffer: GumboStringBuffer,
    pub _token_start: *const libc::c_char,
    pub _token_start_pos: GumboSourcePosition,
    pub _tag_state: GumboTagState,
    pub _doc_type_state: GumboTokenDocType,
    pub _input: Utf8Iterator,
}
pub type Utf8Iterator = GumboInternalUtf8Iterator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalUtf8Iterator {
    pub _start: *const libc::c_char,
    pub _mark: *const libc::c_char,
    pub _end: *const libc::c_char,
    pub _current: libc::c_int,
    pub _width: libc::c_int,
    pub _pos: GumboSourcePosition,
    pub _mark_pos: GumboSourcePosition,
    pub _parser: *mut GumboInternalParser,
}
pub type GumboTagState = GumboInternalTagState;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalTagState {
    pub _buffer: GumboStringBuffer,
    pub _original_text: *const libc::c_char,
    pub _tag: GumboTag,
    pub _start_pos: GumboSourcePosition,
    pub _attributes: GumboVector,
    pub _drop_next_attr_value: bool,
    pub _attr_value_state: GumboTokenizerEnum,
    pub _last_start_tag: GumboTag,
    pub _is_start_tag: bool,
    pub _is_self_closing: bool,
}
pub type GumboTokenizerEnum = __anonenum_GumboTokenizerEnum_1043861041;
pub type __anonenum_GumboTokenizerEnum_1043861041 = libc::c_uint;
pub const GUMBO_LEX_CDATA: __anonenum_GumboTokenizerEnum_1043861041 = 67;
pub const GUMBO_LEX_BOGUS_DOCTYPE: __anonenum_GumboTokenizerEnum_1043861041 = 66;
pub const GUMBO_LEX_AFTER_DOCTYPE_SYSTEM_ID: __anonenum_GumboTokenizerEnum_1043861041 = 65;
pub const GUMBO_LEX_DOCTYPE_SYSTEM_ID_SINGLE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 64;
pub const GUMBO_LEX_DOCTYPE_SYSTEM_ID_DOUBLE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 63;
pub const GUMBO_LEX_BEFORE_DOCTYPE_SYSTEM_ID: __anonenum_GumboTokenizerEnum_1043861041 = 62;
pub const GUMBO_LEX_AFTER_DOCTYPE_SYSTEM_KEYWORD: __anonenum_GumboTokenizerEnum_1043861041 = 61;
pub const GUMBO_LEX_BETWEEN_DOCTYPE_PUBLIC_SYSTEM_ID: __anonenum_GumboTokenizerEnum_1043861041 = 60;
pub const GUMBO_LEX_AFTER_DOCTYPE_PUBLIC_ID: __anonenum_GumboTokenizerEnum_1043861041 = 59;
pub const GUMBO_LEX_DOCTYPE_PUBLIC_ID_SINGLE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 58;
pub const GUMBO_LEX_DOCTYPE_PUBLIC_ID_DOUBLE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 57;
pub const GUMBO_LEX_BEFORE_DOCTYPE_PUBLIC_ID: __anonenum_GumboTokenizerEnum_1043861041 = 56;
pub const GUMBO_LEX_AFTER_DOCTYPE_PUBLIC_KEYWORD: __anonenum_GumboTokenizerEnum_1043861041 = 55;
pub const GUMBO_LEX_AFTER_DOCTYPE_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 54;
pub const GUMBO_LEX_DOCTYPE_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 53;
pub const GUMBO_LEX_BEFORE_DOCTYPE_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 52;
pub const GUMBO_LEX_DOCTYPE: __anonenum_GumboTokenizerEnum_1043861041 = 51;
pub const GUMBO_LEX_COMMENT_END_BANG: __anonenum_GumboTokenizerEnum_1043861041 = 50;
pub const GUMBO_LEX_COMMENT_END: __anonenum_GumboTokenizerEnum_1043861041 = 49;
pub const GUMBO_LEX_COMMENT_END_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 48;
pub const GUMBO_LEX_COMMENT: __anonenum_GumboTokenizerEnum_1043861041 = 47;
pub const GUMBO_LEX_COMMENT_START_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 46;
pub const GUMBO_LEX_COMMENT_START: __anonenum_GumboTokenizerEnum_1043861041 = 45;
pub const GUMBO_LEX_MARKUP_DECLARATION: __anonenum_GumboTokenizerEnum_1043861041 = 44;
pub const GUMBO_LEX_BOGUS_COMMENT: __anonenum_GumboTokenizerEnum_1043861041 = 43;
pub const GUMBO_LEX_SELF_CLOSING_START_TAG: __anonenum_GumboTokenizerEnum_1043861041 = 42;
pub const GUMBO_LEX_AFTER_ATTR_VALUE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 41;
pub const GUMBO_LEX_CHAR_REF_IN_ATTR_VALUE: __anonenum_GumboTokenizerEnum_1043861041 = 40;
pub const GUMBO_LEX_ATTR_VALUE_UNQUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 39;
pub const GUMBO_LEX_ATTR_VALUE_SINGLE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 38;
pub const GUMBO_LEX_ATTR_VALUE_DOUBLE_QUOTED: __anonenum_GumboTokenizerEnum_1043861041 = 37;
pub const GUMBO_LEX_BEFORE_ATTR_VALUE: __anonenum_GumboTokenizerEnum_1043861041 = 36;
pub const GUMBO_LEX_AFTER_ATTR_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 35;
pub const GUMBO_LEX_ATTR_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 34;
pub const GUMBO_LEX_BEFORE_ATTR_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 33;
pub const GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_END: __anonenum_GumboTokenizerEnum_1043861041 = 32;
pub const GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_LT: __anonenum_GumboTokenizerEnum_1043861041 = 31;
pub const GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_DASH_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 30;
pub const GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 29;
pub const GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED: __anonenum_GumboTokenizerEnum_1043861041 = 28;
pub const GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_START: __anonenum_GumboTokenizerEnum_1043861041 = 27;
pub const GUMBO_LEX_SCRIPT_ESCAPED_END_TAG_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 26;
pub const GUMBO_LEX_SCRIPT_ESCAPED_END_TAG_OPEN: __anonenum_GumboTokenizerEnum_1043861041 = 25;
pub const GUMBO_LEX_SCRIPT_ESCAPED_LT: __anonenum_GumboTokenizerEnum_1043861041 = 24;
pub const GUMBO_LEX_SCRIPT_ESCAPED_DASH_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 23;
pub const GUMBO_LEX_SCRIPT_ESCAPED_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 22;
pub const GUMBO_LEX_SCRIPT_ESCAPED: __anonenum_GumboTokenizerEnum_1043861041 = 21;
pub const GUMBO_LEX_SCRIPT_ESCAPED_START_DASH: __anonenum_GumboTokenizerEnum_1043861041 = 20;
pub const GUMBO_LEX_SCRIPT_ESCAPED_START: __anonenum_GumboTokenizerEnum_1043861041 = 19;
pub const GUMBO_LEX_SCRIPT_END_TAG_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 18;
pub const GUMBO_LEX_SCRIPT_END_TAG_OPEN: __anonenum_GumboTokenizerEnum_1043861041 = 17;
pub const GUMBO_LEX_SCRIPT_LT: __anonenum_GumboTokenizerEnum_1043861041 = 16;
pub const GUMBO_LEX_RAWTEXT_END_TAG_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 15;
pub const GUMBO_LEX_RAWTEXT_END_TAG_OPEN: __anonenum_GumboTokenizerEnum_1043861041 = 14;
pub const GUMBO_LEX_RAWTEXT_LT: __anonenum_GumboTokenizerEnum_1043861041 = 13;
pub const GUMBO_LEX_RCDATA_END_TAG_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 12;
pub const GUMBO_LEX_RCDATA_END_TAG_OPEN: __anonenum_GumboTokenizerEnum_1043861041 = 11;
pub const GUMBO_LEX_RCDATA_LT: __anonenum_GumboTokenizerEnum_1043861041 = 10;
pub const GUMBO_LEX_TAG_NAME: __anonenum_GumboTokenizerEnum_1043861041 = 9;
pub const GUMBO_LEX_END_TAG_OPEN: __anonenum_GumboTokenizerEnum_1043861041 = 8;
pub const GUMBO_LEX_TAG_OPEN: __anonenum_GumboTokenizerEnum_1043861041 = 7;
pub const GUMBO_LEX_PLAINTEXT: __anonenum_GumboTokenizerEnum_1043861041 = 6;
pub const GUMBO_LEX_SCRIPT: __anonenum_GumboTokenizerEnum_1043861041 = 5;
pub const GUMBO_LEX_RAWTEXT: __anonenum_GumboTokenizerEnum_1043861041 = 4;
pub const GUMBO_LEX_CHAR_REF_IN_RCDATA: __anonenum_GumboTokenizerEnum_1043861041 = 3;
pub const GUMBO_LEX_RCDATA: __anonenum_GumboTokenizerEnum_1043861041 = 2;
pub const GUMBO_LEX_CHAR_REF_IN_DATA: __anonenum_GumboTokenizerEnum_1043861041 = 1;
pub const GUMBO_LEX_DATA: __anonenum_GumboTokenizerEnum_1043861041 = 0;
pub type __anonenum_GumboAttributeNamespaceEnum_553922390 = libc::c_uint;
pub const GUMBO_ATTR_NAMESPACE_XMLNS: __anonenum_GumboAttributeNamespaceEnum_553922390 = 3;
pub const GUMBO_ATTR_NAMESPACE_XML: __anonenum_GumboAttributeNamespaceEnum_553922390 = 2;
pub const GUMBO_ATTR_NAMESPACE_XLINK: __anonenum_GumboAttributeNamespaceEnum_553922390 = 1;
pub const GUMBO_ATTR_NAMESPACE_NONE: __anonenum_GumboAttributeNamespaceEnum_553922390 = 0;
pub type GumboAttributeNamespaceEnum = __anonenum_GumboAttributeNamespaceEnum_553922390;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_GumboAttribute_303260898 {
    pub attr_namespace: GumboAttributeNamespaceEnum,
    pub name: *const libc::c_char,
    pub original_name: GumboStringPiece,
    pub value: *const libc::c_char,
    pub original_value: GumboStringPiece,
    pub name_start: GumboSourcePosition,
    pub name_end: GumboSourcePosition,
    pub value_start: GumboSourcePosition,
    pub value_end: GumboSourcePosition,
}
pub type GumboAttribute = __anonstruct_GumboAttribute_303260898;
pub type __uint64_t = libc::c_ulong;
pub type va_list = __builtin_va_list;
pub type uint64_t = __uint64_t;
pub type __anonenum_GumboErrorType_322425127 = libc::c_uint;
pub const GUMBO_ERR_UNACKNOWLEDGED_SELF_CLOSING_TAG: __anonenum_GumboErrorType_322425127 = 41;
pub const GUMBO_ERR_PARSER: __anonenum_GumboErrorType_322425127 = 40;
pub const GUMBO_ERR_DOCTYPE_END: __anonenum_GumboErrorType_322425127 = 39;
pub const GUMBO_ERR_DOCTYPE_SPACE_OR_RIGHT_BRACKET: __anonenum_GumboErrorType_322425127 = 38;
pub const GUMBO_ERR_DOCTYPE_RIGHT_BRACKET: __anonenum_GumboErrorType_322425127 = 37;
pub const GUMBO_ERR_DOCTYPE_SPACE: __anonenum_GumboErrorType_322425127 = 36;
pub const GUMBO_ERR_DOCTYPE_INVALID: __anonenum_GumboErrorType_322425127 = 35;
pub const GUMBO_ERR_DOCTYPE_EOF: __anonenum_GumboErrorType_322425127 = 34;
pub const GUMBO_ERR_COMMENT_END_BANG_EOF: __anonenum_GumboErrorType_322425127 = 33;
pub const GUMBO_ERR_COMMENT_SPACE_AFTER_DOUBLE_DASH: __anonenum_GumboErrorType_322425127 = 32;
pub const GUMBO_ERR_COMMENT_DASH_AFTER_DOUBLE_DASH: __anonenum_GumboErrorType_322425127 = 31;
pub const GUMBO_ERR_COMMENT_BANG_AFTER_DOUBLE_DASH: __anonenum_GumboErrorType_322425127 = 30;
pub const GUMBO_ERR_COMMENT_INVALID: __anonenum_GumboErrorType_322425127 = 29;
pub const GUMBO_ERR_COMMENT_EOF: __anonenum_GumboErrorType_322425127 = 28;
pub const GUMBO_ERR_DASHES_OR_DOCTYPE: __anonenum_GumboErrorType_322425127 = 27;
pub const GUMBO_ERR_SOLIDUS_INVALID: __anonenum_GumboErrorType_322425127 = 26;
pub const GUMBO_ERR_SOLIDUS_EOF: __anonenum_GumboErrorType_322425127 = 25;
pub const GUMBO_ERR_DUPLICATE_ATTR: __anonenum_GumboErrorType_322425127 = 24;
pub const GUMBO_ERR_ATTR_AFTER_INVALID: __anonenum_GumboErrorType_322425127 = 23;
pub const GUMBO_ERR_ATTR_AFTER_EOF: __anonenum_GumboErrorType_322425127 = 22;
pub const GUMBO_ERR_ATTR_UNQUOTED_EQUALS: __anonenum_GumboErrorType_322425127 = 21;
pub const GUMBO_ERR_ATTR_UNQUOTED_RIGHT_BRACKET: __anonenum_GumboErrorType_322425127 = 20;
pub const GUMBO_ERR_ATTR_UNQUOTED_EOF: __anonenum_GumboErrorType_322425127 = 19;
pub const GUMBO_ERR_ATTR_SINGLE_QUOTE_EOF: __anonenum_GumboErrorType_322425127 = 18;
pub const GUMBO_ERR_ATTR_DOUBLE_QUOTE_EOF: __anonenum_GumboErrorType_322425127 = 17;
pub const GUMBO_ERR_ATTR_NAME_INVALID: __anonenum_GumboErrorType_322425127 = 16;
pub const GUMBO_ERR_ATTR_NAME_EOF: __anonenum_GumboErrorType_322425127 = 15;
pub const GUMBO_ERR_SCRIPT_EOF: __anonenum_GumboErrorType_322425127 = 14;
pub const GUMBO_ERR_CLOSE_TAG_INVALID: __anonenum_GumboErrorType_322425127 = 13;
pub const GUMBO_ERR_CLOSE_TAG_EOF: __anonenum_GumboErrorType_322425127 = 12;
pub const GUMBO_ERR_CLOSE_TAG_EMPTY: __anonenum_GumboErrorType_322425127 = 11;
pub const GUMBO_ERR_TAG_INVALID: __anonenum_GumboErrorType_322425127 = 10;
pub const GUMBO_ERR_TAG_EOF: __anonenum_GumboErrorType_322425127 = 9;
pub const GUMBO_ERR_TAG_STARTS_WITH_QUESTION: __anonenum_GumboErrorType_322425127 = 8;
pub const GUMBO_ERR_NAMED_CHAR_REF_INVALID: __anonenum_GumboErrorType_322425127 = 7;
pub const GUMBO_ERR_NAMED_CHAR_REF_WITHOUT_SEMICOLON: __anonenum_GumboErrorType_322425127 = 6;
pub const GUMBO_ERR_NUMERIC_CHAR_REF_INVALID: __anonenum_GumboErrorType_322425127 = 5;
pub const GUMBO_ERR_NUMERIC_CHAR_REF_WITHOUT_SEMICOLON: __anonenum_GumboErrorType_322425127 = 4;
pub const GUMBO_ERR_NUMERIC_CHAR_REF_NO_DIGITS: __anonenum_GumboErrorType_322425127 = 3;
pub const GUMBO_ERR_UTF8_NULL: __anonenum_GumboErrorType_322425127 = 2;
pub const GUMBO_ERR_UTF8_TRUNCATED: __anonenum_GumboErrorType_322425127 = 1;
pub const GUMBO_ERR_UTF8_INVALID: __anonenum_GumboErrorType_322425127 = 0;
pub type GumboErrorType = __anonenum_GumboErrorType_322425127;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalDuplicateAttrError {
    pub name: *const libc::c_char,
    pub original_index: libc::c_uint,
    pub new_index: libc::c_uint,
}
pub type GumboDuplicateAttrError = GumboInternalDuplicateAttrError;
pub type __anonenum_GumboTokenizerErrorState_429635956 = libc::c_uint;
pub const GUMBO_ERR_TOKENIZER_CDATA: __anonenum_GumboTokenizerErrorState_429635956 = 13;
pub const GUMBO_ERR_TOKENIZER_DOCTYPE: __anonenum_GumboTokenizerErrorState_429635956 = 12;
pub const GUMBO_ERR_TOKENIZER_COMMENT: __anonenum_GumboTokenizerErrorState_429635956 = 11;
pub const GUMBO_ERR_TOKENIZER_MARKUP_DECLARATION: __anonenum_GumboTokenizerErrorState_429635956 = 10;
pub const GUMBO_ERR_TOKENIZER_ATTR_VALUE: __anonenum_GumboTokenizerErrorState_429635956 = 9;
pub const GUMBO_ERR_TOKENIZER_ATTR_NAME: __anonenum_GumboTokenizerErrorState_429635956 = 8;
pub const GUMBO_ERR_TOKENIZER_SELF_CLOSING_TAG: __anonenum_GumboTokenizerErrorState_429635956 = 7;
pub const GUMBO_ERR_TOKENIZER_TAG: __anonenum_GumboTokenizerErrorState_429635956 = 6;
pub const GUMBO_ERR_TOKENIZER_SCRIPT: __anonenum_GumboTokenizerErrorState_429635956 = 5;
pub const GUMBO_ERR_TOKENIZER_PLAINTEXT: __anonenum_GumboTokenizerErrorState_429635956 = 4;
pub const GUMBO_ERR_TOKENIZER_RAWTEXT: __anonenum_GumboTokenizerErrorState_429635956 = 3;
pub const GUMBO_ERR_TOKENIZER_RCDATA: __anonenum_GumboTokenizerErrorState_429635956 = 2;
pub const GUMBO_ERR_TOKENIZER_CHAR_REF: __anonenum_GumboTokenizerErrorState_429635956 = 1;
pub const GUMBO_ERR_TOKENIZER_DATA: __anonenum_GumboTokenizerErrorState_429635956 = 0;
pub type GumboTokenizerErrorState = __anonenum_GumboTokenizerErrorState_429635956;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalTokenizerError {
    pub codepoint: libc::c_int,
    pub state: GumboTokenizerErrorState,
}
pub type GumboTokenizerError = GumboInternalTokenizerError;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalParserError {
    pub input_type: GumboTokenType,
    pub input_tag: GumboTag,
    pub parser_state: GumboInsertionMode,
    pub tag_stack: GumboVector,
}
pub type GumboParserError = GumboInternalParserError;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __anonunion_v_15840015 {
    pub codepoint: uint64_t,
    pub tokenizer: GumboTokenizerError,
    pub text: GumboStringPiece,
    pub duplicate_attr: GumboDuplicateAttrError,
    pub parser: GumboInternalParserError,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GumboInternalError {
    pub type_0: GumboErrorType,
    pub position: GumboSourcePosition,
    pub original_text: *const libc::c_char,
    pub v: __anonunion_v_15840015,
}
pub type GumboError = GumboInternalError;
pub type GumboParser = GumboInternalParser;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _ReplacementEntry {
    pub from: GumboStringPiece,
    pub to: GumboStringPiece,
}
pub type ReplacementEntry = _ReplacementEntry;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _NamespacedAttributeReplacement {
    pub from: *const libc::c_char,
    pub local_name: *const libc::c_char,
    pub attr_namespace: GumboAttributeNamespaceEnum,
}
pub type NamespacedAttributeReplacement = _NamespacedAttributeReplacement;
pub type GumboParserState = GumboInternalParserState;
pub type TokenHandler = Option::<
    unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_OneOrTwoCodepoints_773697287 {
    pub first: libc::c_int,
    pub second: libc::c_int,
}
pub type OneOrTwoCodepoints = __anonstruct_OneOrTwoCodepoints_773697287;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_NamedCharRef_549011883 {
    pub name: *const libc::c_char,
    pub length: size_t,
    pub codepoints: OneOrTwoCodepoints,
}
pub type NamedCharRef = __anonstruct_NamedCharRef_549011883;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_CharReplacement_1013988509 {
    pub from_char: libc::c_int,
    pub to_char: libc::c_int,
}
pub type CharReplacement = __anonstruct_CharReplacement_1013988509;
pub type __anonenum_StateResult_162585644 = libc::c_uint;
pub const NEXT_CHAR: __anonenum_StateResult_162585644 = 2;
pub const RETURN_SUCCESS: __anonenum_StateResult_162585644 = 1;
pub const RETURN_ERROR: __anonenum_StateResult_162585644 = 0;
pub type StateResult = __anonenum_StateResult_162585644;
pub type GumboTokenizerState = GumboInternalTokenizerState;
pub type GumboLexerStateFunction = Option::<
    unsafe extern "C" fn(
        *mut GumboParser,
        *mut GumboTokenizerState,
        libc::c_int,
        *mut GumboToken,
    ) -> StateResult,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __anonstruct_text_nodes_t_1013988509 {
    pub nodes: [*const libc::c_char; 1024],
    pub length: size_t,
}
pub type text_nodes_t = __anonstruct_text_nodes_t_1013988509;
static mut package_cache_dir: [libc::c_char; 8192] = [0; 8192];
static mut search_cache: [libc::c_char; 8192] = [0; 8192];
static mut json_cache_dir: [libc::c_char; 8192] = [0; 8192];
static mut meta_cache_dir: [libc::c_char; 8192] = [0; 8192];
static mut expiration: time_t = 0;
unsafe extern "C" fn json_cache_path(
    mut pkg_cache: *mut libc::c_char,
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) {
    sprintf(
        pkg_cache,
        b"%s/%s_%s_%s.json\0" as *const u8 as *const libc::c_char,
        json_cache_dir.as_mut_ptr(),
        author,
        name,
        version,
    );
}
unsafe extern "C" fn package_cache_path(
    mut json_cache: *mut libc::c_char,
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) {
    sprintf(
        json_cache,
        b"%s/%s_%s_%s\0" as *const u8 as *const libc::c_char,
        package_cache_dir.as_mut_ptr(),
        author,
        name,
        version,
    );
}
pub unsafe extern "C" fn clib_cache_dir() -> *const libc::c_char {
    return package_cache_dir.as_mut_ptr() as *const libc::c_char;
}
unsafe extern "C" fn check_dir(mut dir: *mut libc::c_char) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp___0 = fs_exists(dir as *const libc::c_char);
    if 0 as libc::c_int != tmp___0 {
        tmp = mkdirp(dir as *const libc::c_char, 448 as libc::c_int as mode_t);
        return tmp;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn clib_cache_meta_init() -> libc::c_int {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: libc::c_int = 0;
    tmp = getenv(b"HOME\0" as *const u8 as *const libc::c_char);
    sprintf(
        meta_cache_dir.as_mut_ptr(),
        b"%s/.cache/clib/meta\0" as *const u8 as *const libc::c_char,
        tmp,
    );
    tmp___0 = check_dir(meta_cache_dir.as_mut_ptr());
    if 0 as libc::c_int != tmp___0 {
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn clib_cache_meta_dir() -> *const libc::c_char {
    return meta_cache_dir.as_mut_ptr() as *const libc::c_char;
}
pub unsafe extern "C" fn clib_cache_init(mut exp: time_t) -> libc::c_int {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    expiration = exp;
    tmp = getenv(b"HOME\0" as *const u8 as *const libc::c_char);
    sprintf(
        package_cache_dir.as_mut_ptr(),
        b"%s/.cache/clib/packages\0" as *const u8 as *const libc::c_char,
        tmp,
    );
    tmp___0 = getenv(b"HOME\0" as *const u8 as *const libc::c_char);
    sprintf(
        json_cache_dir.as_mut_ptr(),
        b"%s/.cache/clib/json\0" as *const u8 as *const libc::c_char,
        tmp___0,
    );
    tmp___1 = getenv(b"HOME\0" as *const u8 as *const libc::c_char);
    sprintf(
        search_cache.as_mut_ptr(),
        b"%s/.cache/clib/search.html\0" as *const u8 as *const libc::c_char,
        tmp___1,
    );
    tmp___2 = check_dir(package_cache_dir.as_mut_ptr());
    if 0 as libc::c_int != tmp___2 {
        return -(1 as libc::c_int);
    }
    tmp___3 = check_dir(json_cache_dir.as_mut_ptr());
    if 0 as libc::c_int != tmp___3 {
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn is_expired(mut cache: *mut libc::c_char) -> libc::c_int {
    let mut stat___0: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp: *mut fs_stats = 0 as *mut fs_stats;
    let mut modified: time_t = 0;
    let mut now: time_t = 0;
    let mut tmp___0: time_t = 0;
    tmp = fs_stat(cache as *const libc::c_char);
    stat___0 = tmp;
    if stat___0.is_null() {
        return -(1 as libc::c_int);
    }
    modified = (*stat___0).st_mtim.tv_sec;
    tmp___0 = time(0 as *mut libc::c_void as *mut time_t);
    now = tmp___0;
    free(stat___0 as *mut libc::c_void);
    return (now - modified >= expiration) as libc::c_int;
}
pub unsafe extern "C" fn clib_cache_has_json(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) -> libc::c_int {
    let mut json_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    json_cache_path(json_cache.as_mut_ptr(), author, name, version);
    tmp = fs_exists(json_cache.as_mut_ptr() as *const libc::c_char);
    if 0 as libc::c_int == tmp {
        tmp___0 = is_expired(json_cache.as_mut_ptr());
        if tmp___0 != 0 {
            tmp___1 = 0 as libc::c_int;
        } else {
            tmp___1 = 1 as libc::c_int;
        }
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1;
}
pub unsafe extern "C" fn clib_cache_read_json(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) -> *mut libc::c_char {
    let mut json_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    json_cache_path(json_cache.as_mut_ptr(), author, name, version);
    tmp = is_expired(json_cache.as_mut_ptr());
    if tmp != 0 {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = fs_read(json_cache.as_mut_ptr() as *const libc::c_char);
    return tmp___0;
}
pub unsafe extern "C" fn clib_cache_save_json(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
    mut content: *mut libc::c_char,
) -> libc::c_int {
    let mut json_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    json_cache_path(json_cache.as_mut_ptr(), author, name, version);
    tmp = fs_write(
        json_cache.as_mut_ptr() as *const libc::c_char,
        content as *const libc::c_char,
    );
    return tmp;
}
pub unsafe extern "C" fn clib_cache_delete_json(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) -> libc::c_int {
    let mut json_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    json_cache_path(json_cache.as_mut_ptr(), author, name, version);
    tmp = unlink(json_cache.as_mut_ptr() as *const libc::c_char);
    return tmp;
}
pub unsafe extern "C" fn clib_cache_has_search() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    tmp = fs_exists(search_cache.as_mut_ptr() as *const libc::c_char);
    if 0 as libc::c_int == tmp {
        tmp___0 = is_expired(search_cache.as_mut_ptr());
        if tmp___0 != 0 {
            tmp___1 = 0 as libc::c_int;
        } else {
            tmp___1 = 1 as libc::c_int;
        }
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1;
}
pub unsafe extern "C" fn clib_cache_read_search() -> *mut libc::c_char {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = clib_cache_has_search();
    if tmp == 0 {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = fs_read(search_cache.as_mut_ptr() as *const libc::c_char);
    return tmp___0;
}
pub unsafe extern "C" fn clib_cache_save_search(
    mut content: *mut libc::c_char,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = fs_write(
        search_cache.as_mut_ptr() as *const libc::c_char,
        content as *const libc::c_char,
    );
    return tmp;
}
pub unsafe extern "C" fn clib_cache_delete_search() -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = unlink(search_cache.as_mut_ptr() as *const libc::c_char);
    return tmp;
}
pub unsafe extern "C" fn clib_cache_has_package(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) -> libc::c_int {
    let mut pkg_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    package_cache_path(pkg_cache.as_mut_ptr(), author, name, version);
    tmp = fs_exists(pkg_cache.as_mut_ptr() as *const libc::c_char);
    if 0 as libc::c_int == tmp {
        tmp___0 = is_expired(pkg_cache.as_mut_ptr());
        if tmp___0 != 0 {
            tmp___1 = 0 as libc::c_int;
        } else {
            tmp___1 = 1 as libc::c_int;
        }
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1;
}
pub unsafe extern "C" fn clib_cache_is_expired_package(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) -> libc::c_int {
    let mut pkg_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    package_cache_path(pkg_cache.as_mut_ptr(), author, name, version);
    tmp = is_expired(pkg_cache.as_mut_ptr());
    return tmp;
}
pub unsafe extern "C" fn clib_cache_save_package(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
    mut pkg_dir: *mut libc::c_char,
) -> libc::c_int {
    let mut pkg_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    package_cache_path(pkg_cache.as_mut_ptr(), author, name, version);
    tmp = fs_exists(pkg_cache.as_mut_ptr() as *const libc::c_char);
    if 0 as libc::c_int == tmp {
        rimraf(pkg_cache.as_mut_ptr() as *const libc::c_char);
    }
    tmp___0 = copy_dir(pkg_dir, pkg_cache.as_mut_ptr());
    return tmp___0;
}
pub unsafe extern "C" fn clib_cache_load_package(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
    mut target_dir: *mut libc::c_char,
) -> libc::c_int {
    let mut pkg_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    package_cache_path(pkg_cache.as_mut_ptr(), author, name, version);
    tmp = fs_exists(pkg_cache.as_mut_ptr() as *const libc::c_char);
    if -(1 as libc::c_int) == tmp {
        return -(1 as libc::c_int);
    }
    tmp___0 = is_expired(pkg_cache.as_mut_ptr());
    if tmp___0 != 0 {
        rimraf(pkg_cache.as_mut_ptr() as *const libc::c_char);
        return -(2 as libc::c_int);
    }
    tmp___1 = copy_dir(pkg_cache.as_mut_ptr(), target_dir);
    return tmp___1;
}
pub unsafe extern "C" fn clib_cache_delete_package(
    mut author: *mut libc::c_char,
    mut name: *mut libc::c_char,
    mut version: *mut libc::c_char,
) -> libc::c_int {
    let mut pkg_cache: [libc::c_char; 8192] = [0; 8192];
    let mut tmp: libc::c_int = 0;
    package_cache_path(pkg_cache.as_mut_ptr(), author, name, version);
    tmp = rimraf(pkg_cache.as_mut_ptr() as *const libc::c_char);
    return tmp;
}
pub static mut clib_package_curl_share: *mut libc::c_void = 0 as *const libc::c_void
    as *mut libc::c_void;
#[inline]
unsafe extern "C" fn kh_init_ptr() -> *mut kh_ptr_t {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = calloc(
        1 as libc::c_int as size_t,
        ::std::mem::size_of::<kh_ptr_t>() as libc::c_ulong,
    );
    return tmp as *mut kh_ptr_t;
}
#[inline]
unsafe extern "C" fn kh_destroy_ptr(mut h: *mut kh_ptr_t) {
    if !h.is_null() {
        free((*h).keys as *mut libc::c_void);
        free((*h).flags as *mut libc::c_void);
        free((*h).vals as *mut libc::c_void);
        free(h as *mut libc::c_void);
    }
}
static mut visited_packages: *mut hash_t = 0 as *const hash_t as *mut hash_t;
static mut lock: clib_package_lock_t = {
    let mut init = clib_package_lock {
        mutex: __anonunion_pthread_mutex_t_335460617 {
            __data: {
                let mut init = __pthread_mutex_s {
                    __lock: 0 as libc::c_int,
                    __count: 0 as libc::c_uint,
                    __owner: 0 as libc::c_int,
                    __nusers: 0 as libc::c_uint,
                    __kind: 0 as libc::c_int,
                    __spins: 0 as libc::c_int as libc::c_short,
                    __elision: 0 as libc::c_int as libc::c_short,
                    __list: {
                        let mut init = __pthread_internal_list {
                            __prev: 0 as *const __pthread_internal_list
                                as *mut __pthread_internal_list,
                            __next: 0 as *const __pthread_internal_list
                                as *mut __pthread_internal_list,
                        };
                        init
                    },
                };
                init
            },
        },
    };
    init
};
pub static mut _debugger: debug_t = debug_t {
    name: 0 as *const libc::c_char,
    color: 0,
    enabled: 0,
    stream: 0 as *const FILE as *mut FILE,
};
static mut opts___0: clib_package_opts_t = {
    let mut init = __anonstruct_clib_package_opts_t_1001569764 {
        skip_cache: 1 as libc::c_int,
        force: 0 as libc::c_int,
        global: 0 as libc::c_int,
        prefix: 0 as *const libc::c_char as *mut libc::c_char,
        concurrency: 12 as libc::c_int,
        token: 0 as *const libc::c_char as *mut libc::c_char,
    };
    init
};
pub unsafe extern "C" fn clib_package_set_opts(mut o: clib_package_opts_t) {
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut current_block_6: u64;
    if 1 as libc::c_int == opts___0.skip_cache {
        if 0 as libc::c_int == o.skip_cache {
            opts___0.skip_cache = 0 as libc::c_int;
            current_block_6 = 3640593987805443782;
        } else {
            current_block_6 = 17959412131315253233;
        }
    } else {
        current_block_6 = 17959412131315253233;
    }
    match current_block_6 {
        17959412131315253233 => {
            if 0 as libc::c_int == opts___0.skip_cache {
                if 1 as libc::c_int == o.skip_cache {
                    opts___0.skip_cache = 1 as libc::c_int;
                }
            }
        }
        _ => {}
    }
    let mut current_block_14: u64;
    if 1 as libc::c_int == opts___0.global {
        if 0 as libc::c_int == o.global {
            opts___0.global = 0 as libc::c_int;
            current_block_14 = 13242334135786603907;
        } else {
            current_block_14 = 12013948397147766038;
        }
    } else {
        current_block_14 = 12013948397147766038;
    }
    match current_block_14 {
        12013948397147766038 => {
            if 0 as libc::c_int == opts___0.global {
                if 1 as libc::c_int == o.global {
                    opts___0.global = 1 as libc::c_int;
                }
            }
        }
        _ => {}
    }
    let mut current_block_22: u64;
    if 1 as libc::c_int == opts___0.force {
        if 0 as libc::c_int == o.force {
            opts___0.force = 0 as libc::c_int;
            current_block_22 = 1608152415753874203;
        } else {
            current_block_22 = 2626551990001017162;
        }
    } else {
        current_block_22 = 2626551990001017162;
    }
    match current_block_22 {
        2626551990001017162 => {
            if 0 as libc::c_int == opts___0.force {
                if 1 as libc::c_int == o.force {
                    opts___0.force = 1 as libc::c_int;
                }
            }
        }
        _ => {}
    }
    if 0 as *mut libc::c_char as libc::c_ulong != o.prefix as libc::c_ulong {
        tmp = strlen(o.prefix as *const libc::c_char);
        if 0 as libc::c_ulong == tmp {
            opts___0.prefix = 0 as *mut libc::c_char;
        } else {
            opts___0.prefix = o.prefix;
        }
    }
    if 0 as *mut libc::c_char as libc::c_ulong != o.token as libc::c_ulong {
        tmp___0 = strlen(o.token as *const libc::c_char);
        if 0 as libc::c_ulong == tmp___0 {
            opts___0.token = 0 as *mut libc::c_char;
        } else {
            opts___0.token = o.token;
        }
    }
    if o.concurrency != 0 {
        opts___0.concurrency = o.concurrency;
    } else if o.concurrency < 0 as libc::c_int {
        opts___0.concurrency = 0 as libc::c_int;
    }
    if opts___0.concurrency < 0 as libc::c_int {
        opts___0.concurrency = 0 as libc::c_int;
    }
}
#[inline]
unsafe extern "C" fn json_object_get_string_safe(
    mut obj: *mut JSON_Object,
    mut key: *const libc::c_char,
) -> *mut libc::c_char {
    let mut val: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = json_object_get_string(obj as *const JSON_Object, key);
    val = tmp;
    if val.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = strdup(val);
    return tmp___0;
}
#[inline]
unsafe extern "C" fn json_array_get_string_safe(
    mut array: *mut JSON_Array,
    mut index___0: libc::c_int,
) -> *mut libc::c_char {
    let mut val: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = json_array_get_string(array as *const JSON_Array, index___0 as size_t);
    val = tmp;
    if val.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = strdup(val);
    return tmp___0;
}
#[inline]
unsafe extern "C" fn clib_package_file_url(
    mut url: *const libc::c_char,
    mut file: *const libc::c_char,
) -> *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut res: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    if url.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char
    } else {
        if file.is_null() {
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
    }
    tmp = strlen(url);
    tmp___0 = strlen(file);
    size = tmp
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___0)
        .wrapping_add(1 as libc::c_ulong) as libc::c_int;
    tmp___1 = malloc(size as size_t);
    res = tmp___1 as *mut libc::c_char;
    if !res.is_null() {
        memset(res as *mut libc::c_void, 0 as libc::c_int, size as size_t);
        sprintf(res, b"%s/%s\0" as *const u8 as *const libc::c_char, url, file);
    }
    return res;
}
#[inline]
unsafe extern "C" fn clib_package_slug(
    mut author: *const libc::c_char,
    mut name: *const libc::c_char,
    mut version: *const libc::c_char,
) -> *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    let mut slug: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = strlen(author);
    tmp___0 = strlen(name);
    tmp___1 = strlen(version);
    size = tmp
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___0)
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___1)
        .wrapping_add(1 as libc::c_ulong) as libc::c_int;
    tmp___2 = malloc(size as size_t);
    slug = tmp___2 as *mut libc::c_char;
    if !slug.is_null() {
        memset(slug as *mut libc::c_void, '\u{0}' as i32, size as size_t);
        sprintf(
            slug,
            b"%s/%s@%s\0" as *const u8 as *const libc::c_char,
            author,
            name,
            version,
        );
    }
    return slug;
}
pub unsafe extern "C" fn clib_package_load_from_manifest(
    mut manifest: *const libc::c_char,
    mut verbose: libc::c_int,
) -> *mut clib_package_t {
    let mut pkg: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut tmp: libc::c_int = 0;
    let mut json: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    pkg = 0 as *mut libc::c_void as *mut clib_package_t;
    tmp = fs_exists(manifest);
    if -(1 as libc::c_int) == tmp {
        cc_fprintf(
            CC_FG_DARK_RED,
            stderr,
            b"  %10s\0" as *const u8 as *const libc::c_char,
            b"error\0" as *const u8 as *const libc::c_char,
        );
        fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
        cc_fprintf(
            CC_FG_DARK_GRAY,
            stderr,
            b"Missing %s\0" as *const u8 as *const libc::c_char,
            manifest,
        );
        fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        return 0 as *mut libc::c_void as *mut clib_package_t;
    }
    cc_fprintf(
        CC_FG_CYAN,
        stdout,
        b"  %10s\0" as *const u8 as *const libc::c_char,
        b"info\0" as *const u8 as *const libc::c_char,
    );
    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
    cc_fprintf(
        CC_FG_DARK_GRAY,
        stdout,
        b"reading local %s\0" as *const u8 as *const libc::c_char,
        manifest,
    );
    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
    tmp___0 = fs_read(manifest);
    json = tmp___0;
    if !(0 as *mut libc::c_void as libc::c_ulong == json as libc::c_ulong) {
        pkg = clib_package_new(json as *const libc::c_char, verbose);
    }
    free(json as *mut libc::c_void);
    return pkg;
}
pub unsafe extern "C" fn clib_package_load_local_manifest(
    mut verbose: libc::c_int,
) -> *mut clib_package_t {
    let mut pkg: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut i: libc::c_int = 0;
    let mut name: *const libc::c_char = 0 as *const libc::c_char;
    pkg = 0 as *mut libc::c_void as *mut clib_package_t;
    i = 0 as libc::c_int;
    loop {
        name = 0 as *mut libc::c_void as *const libc::c_char;
        name = manifest_names[i as usize];
        pkg = clib_package_load_from_manifest(name, verbose);
        if !(pkg as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong) {
            break;
        }
        i += 1;
        if !(0 as *mut libc::c_void as libc::c_ulong
            != manifest_names[i as usize] as libc::c_ulong)
        {
            break;
        }
    }
    return pkg;
}
#[inline]
unsafe extern "C" fn clib_package_repo(
    mut author: *const libc::c_char,
    mut name: *const libc::c_char,
) -> *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut repo: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = strlen(author);
    tmp___0 = strlen(name);
    size = tmp
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___0)
        .wrapping_add(1 as libc::c_ulong) as libc::c_int;
    tmp___1 = malloc(size as size_t);
    repo = tmp___1 as *mut libc::c_char;
    if !repo.is_null() {
        memset(repo as *mut libc::c_void, '\u{0}' as i32, size as size_t);
        sprintf(repo, b"%s/%s\0" as *const u8 as *const libc::c_char, author, name);
    }
    return repo;
}
#[inline]
unsafe extern "C" fn parse_package_deps(mut obj: *mut JSON_Object) -> *mut list_t {
    let mut list: *mut list_t = 0 as *mut list_t;
    let mut i: libc::c_uint = 0;
    let mut name: *const libc::c_char = 0 as *const libc::c_char;
    let mut version: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut dep: *mut clib_package_dependency_t = 0 as *mut clib_package_dependency_t;
    let mut error___0: libc::c_int = 0;
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___1: size_t = 0;
    list = 0 as *mut libc::c_void as *mut list_t;
    if !obj.is_null() {
        list = list_new();
        if !list.is_null() {
            (*list)
                .free = Some(
                clib_package_dependency_free
                    as unsafe extern "C" fn(*mut libc::c_void) -> (),
            );
            i = 0 as libc::c_uint;
            loop {
                tmp___1 = json_object_get_count(obj as *const JSON_Object);
                if !((i as size_t) < tmp___1) {
                    break;
                }
                name = 0 as *mut libc::c_void as *const libc::c_char;
                version = 0 as *mut libc::c_void as *mut libc::c_char;
                dep = 0 as *mut libc::c_void as *mut clib_package_dependency_t;
                error___0 = 1 as libc::c_int;
                name = json_object_get_name(obj as *const JSON_Object, i as size_t);
                if !name.is_null() {
                    version = json_object_get_string_safe(obj, name);
                    if !version.is_null() {
                        dep = clib_package_dependency_new(
                            name,
                            version as *const libc::c_char,
                        );
                        if !dep.is_null() {
                            tmp = list_node_new(dep as *mut libc::c_void);
                            tmp___0 = list_rpush(list, tmp);
                            if !tmp___0.is_null() {
                                error___0 = 0 as libc::c_int;
                            }
                        }
                    }
                }
                if !version.is_null() {
                    free(version as *mut libc::c_void);
                }
                if error___0 != 0 {
                    list_destroy(list);
                    list = 0 as *mut libc::c_void as *mut list_t;
                    break;
                } else {
                    i = i.wrapping_add(1);
                }
            }
        }
    }
    return list;
}
#[inline]
unsafe extern "C" fn install_packages(
    mut list: *mut list_t,
    mut dir: *const libc::c_char,
    mut verbose: libc::c_int,
) -> libc::c_int {
    let mut current_block: u64;
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut iterator: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut rc: libc::c_int = 0;
    let mut freelist: *mut list_t = 0 as *mut list_t;
    let mut dep: *mut clib_package_dependency_t = 0 as *mut clib_package_dependency_t;
    let mut slug: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut pkg: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut error___0: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut list_node_t = 0 as *mut list_node_t;
    let mut pkg___0: *mut clib_package_t = 0 as *mut clib_package_t;
    node = 0 as *mut libc::c_void as *mut list_node_t;
    iterator = 0 as *mut libc::c_void as *mut list_iterator_t;
    rc = -(1 as libc::c_int);
    freelist = 0 as *mut libc::c_void as *mut list_t;
    if !list.is_null() {
        if !dir.is_null() {
            iterator = list_iterator_new(list, LIST_HEAD);
            if !(0 as *mut libc::c_void as libc::c_ulong == iterator as libc::c_ulong) {
                freelist = list_new();
                loop {
                    node = list_iterator_next(iterator);
                    if node.is_null() {
                        current_block = 1538046216550696469;
                        break;
                    }
                    dep = 0 as *mut libc::c_void as *mut clib_package_dependency_t;
                    slug = 0 as *mut libc::c_void as *mut libc::c_char;
                    pkg = 0 as *mut libc::c_void as *mut clib_package_t;
                    error___0 = 1 as libc::c_int;
                    dep = (*node).val as *mut clib_package_dependency_t;
                    slug = clib_package_slug(
                        (*dep).author as *const libc::c_char,
                        (*dep).name as *const libc::c_char,
                        (*dep).version as *const libc::c_char,
                    );
                    if !(0 as *mut libc::c_void as libc::c_ulong
                        == slug as libc::c_ulong)
                    {
                        pkg = clib_package_new_from_slug(
                            slug as *const libc::c_char,
                            verbose,
                        );
                        if !(0 as *mut libc::c_void as libc::c_ulong
                            == pkg as libc::c_ulong)
                        {
                            tmp = clib_package_install(pkg, dir, verbose);
                            if !(-(1 as libc::c_int) == tmp) {
                                tmp___0 = list_node_new(pkg as *mut libc::c_void);
                                list_rpush(freelist, tmp___0);
                                error___0 = 0 as libc::c_int;
                            }
                        }
                    }
                    if !slug.is_null() {
                        free(slug as *mut libc::c_void);
                    }
                    if !(error___0 != 0) {
                        continue;
                    }
                    list_iterator_destroy(iterator);
                    iterator = 0 as *mut libc::c_void as *mut list_iterator_t;
                    rc = -(1 as libc::c_int);
                    current_block = 5829937152407475377;
                    break;
                }
                match current_block {
                    5829937152407475377 => {}
                    _ => {
                        rc = 0 as libc::c_int;
                    }
                }
            }
        }
    }
    if !iterator.is_null() {
        list_iterator_destroy(iterator);
    }
    if !freelist.is_null() {
        iterator = list_iterator_new(freelist, LIST_HEAD);
        loop {
            node = list_iterator_next(iterator);
            if node.is_null() {
                break;
            }
            pkg___0 = (*node).val as *mut clib_package_t;
            if !pkg___0.is_null() {
                clib_package_free(pkg___0);
            }
        }
        list_iterator_destroy(iterator);
        list_destroy(freelist);
    }
    return rc;
}
unsafe extern "C" fn curl_lock_callback(
    mut handle: *mut libc::c_void,
    mut data: curl_lock_data,
    mut access___0: curl_lock_access,
    mut userptr: *mut libc::c_void,
) {
    pthread_mutex_lock(&mut lock.mutex);
}
unsafe extern "C" fn curl_unlock_callback(
    mut handle: *mut libc::c_void,
    mut data: curl_lock_data,
    mut access___0: curl_lock_access,
    mut userptr: *mut libc::c_void,
) {
    pthread_mutex_unlock(&mut lock.mutex);
}
unsafe extern "C" fn init_curl_share() {
    if 0 as *mut libc::c_void as libc::c_ulong
        == clib_package_curl_share as libc::c_ulong
    {
        pthread_mutex_lock(&mut lock.mutex);
        clib_package_curl_share = curl_share_init();
        curl_share_setopt(clib_package_curl_share, CURLSHOPT_SHARE, 5 as libc::c_int);
        curl_share_setopt(
            clib_package_curl_share,
            CURLSHOPT_LOCKFUNC,
            Some(
                curl_lock_callback
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        curl_lock_data,
                        curl_lock_access,
                        *mut libc::c_void,
                    ) -> (),
            ),
        );
        curl_share_setopt(
            clib_package_curl_share,
            CURLSHOPT_UNLOCKFUNC,
            Some(
                curl_unlock_callback
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        curl_lock_data,
                        curl_lock_access,
                        *mut libc::c_void,
                    ) -> (),
            ),
        );
        curl_share_setopt(clib_package_curl_share, 51 as CURLSHoption, 1 as libc::c_int);
        pthread_mutex_unlock(&mut lock.mutex);
    }
}
pub unsafe extern "C" fn clib_package_new(
    mut json: *const libc::c_char,
    mut verbose: libc::c_int,
) -> *mut clib_package_t {
    let mut current_block: u64;
    let mut pkg: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut root: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut json_object___0: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut src: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut deps: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut devs: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut error___0: libc::c_int = 0;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut flags: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut tmp___0: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut i: libc::c_uint = 0;
    let mut flag: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: size_t = 0;
    let mut tmp___4: *mut list_t = 0 as *mut list_t;
    let mut i___0: libc::c_uint = 0;
    let mut file: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___6: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___7: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___8: size_t = 0;
    let mut tmp___9: *mut list_t = 0 as *mut list_t;
    let mut tmp___10: *mut list_t = 0 as *mut list_t;
    pkg = 0 as *mut libc::c_void as *mut clib_package_t;
    root = 0 as *mut libc::c_void as *mut JSON_Value;
    json_object___0 = 0 as *mut libc::c_void as *mut JSON_Object;
    src = 0 as *mut libc::c_void as *mut JSON_Array;
    deps = 0 as *mut libc::c_void as *mut JSON_Object;
    devs = 0 as *mut libc::c_void as *mut JSON_Object;
    error___0 = 1 as libc::c_int;
    if json.is_null() {
        if verbose != 0 {
            cc_fprintf(
                CC_FG_DARK_RED,
                stderr,
                b"  %10s\0" as *const u8 as *const libc::c_char,
                b"error\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
            cc_fprintf(
                CC_FG_DARK_GRAY,
                stderr,
                b"missing JSON to parse\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        }
    } else {
        root = json_parse_string(json);
        if root.is_null() {
            if verbose != 0 {
                cc_fprintf(
                    CC_FG_DARK_RED,
                    stderr,
                    b"  %10s\0" as *const u8 as *const libc::c_char,
                    b"error\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
                cc_fprintf(
                    CC_FG_DARK_GRAY,
                    stderr,
                    b"unable to parse JSON\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
            }
        } else {
            json_object___0 = json_value_get_object(root as *const JSON_Value);
            if json_object___0.is_null() {
                if verbose != 0 {
                    cc_fprintf(
                        CC_FG_DARK_RED,
                        stderr,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"error\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stderr,
                        b"invalid clib.json or package.json file\0" as *const u8
                            as *const libc::c_char,
                    );
                    fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
                }
            } else {
                tmp = malloc(::std::mem::size_of::<clib_package_t>() as libc::c_ulong);
                pkg = tmp as *mut clib_package_t;
                if !pkg.is_null() {
                    memset(
                        pkg as *mut libc::c_void,
                        0 as libc::c_int,
                        ::std::mem::size_of::<clib_package_t>() as libc::c_ulong,
                    );
                    (*pkg).json = strdup(json);
                    (*pkg)
                        .name = json_object_get_string_safe(
                        json_object___0,
                        b"name\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .repo = json_object_get_string_safe(
                        json_object___0,
                        b"repo\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .version = json_object_get_string_safe(
                        json_object___0,
                        b"version\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .license = json_object_get_string_safe(
                        json_object___0,
                        b"license\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .description = json_object_get_string_safe(
                        json_object___0,
                        b"description\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .configure = json_object_get_string_safe(
                        json_object___0,
                        b"configure\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .install = json_object_get_string_safe(
                        json_object___0,
                        b"install\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .makefile = json_object_get_string_safe(
                        json_object___0,
                        b"makefile\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .prefix = json_object_get_string_safe(
                        json_object___0,
                        b"prefix\0" as *const u8 as *const libc::c_char,
                    );
                    (*pkg)
                        .flags = json_object_get_string_safe(
                        json_object___0,
                        b"flags\0" as *const u8 as *const libc::c_char,
                    );
                    if ((*pkg).flags).is_null() {
                        (*pkg)
                            .flags = json_object_get_string_safe(
                            json_object___0,
                            b"cflags\0" as *const u8 as *const libc::c_char,
                        );
                    }
                    if ((*pkg).flags).is_null() {
                        tmp___0 = json_object_get_array(
                            json_object___0 as *const JSON_Object,
                            b"flags\0" as *const u8 as *const libc::c_char,
                        );
                        flags = tmp___0;
                        if flags.is_null() {
                            flags = json_object_get_array(
                                json_object___0 as *const JSON_Object,
                                b"cflags\0" as *const u8 as *const libc::c_char,
                            );
                        }
                        if !flags.is_null() {
                            i = 0 as libc::c_uint;
                            loop {
                                tmp___3 = json_array_get_count(flags as *const JSON_Array);
                                if !((i as size_t) < tmp___3) {
                                    current_block = 12930649117290160518;
                                    break;
                                }
                                tmp___1 = json_array_get_string_safe(
                                    flags,
                                    i as libc::c_int,
                                );
                                flag = tmp___1;
                                if !flag.is_null() {
                                    if ((*pkg).flags).is_null() {
                                        (*pkg)
                                            .flags = b"\0" as *const u8 as *const libc::c_char
                                            as *mut libc::c_char;
                                    }
                                    tmp___2 = asprintf(
                                        &mut (*pkg).flags as *mut *mut libc::c_char,
                                        b"%s %s\0" as *const u8 as *const libc::c_char,
                                        (*pkg).flags,
                                        flag,
                                    );
                                    if -(1 as libc::c_int) == tmp___2 {
                                        current_block = 5964035273719100936;
                                        break;
                                    }
                                    free(flag as *mut libc::c_void);
                                }
                                i = i.wrapping_add(1);
                            }
                        } else {
                            current_block = 12930649117290160518;
                        }
                    } else {
                        current_block = 12930649117290160518;
                    }
                    match current_block {
                        5964035273719100936 => {}
                        _ => {
                            if ((*pkg).repo).is_null() {
                                if !((*pkg).author).is_null() {
                                    if !((*pkg).name).is_null() {
                                        asprintf(
                                            &mut (*pkg).repo as *mut *mut libc::c_char,
                                            b"%s/%s\0" as *const u8 as *const libc::c_char,
                                            (*pkg).author,
                                            (*pkg).name,
                                        );
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"creating package: %s\0" as *const u8
                                                as *const libc::c_char,
                                            (*pkg).repo,
                                        );
                                    }
                                }
                            }
                            if ((*pkg).author).is_null() {
                                if (_debugger.name).is_null() {
                                    debug_init(
                                        &mut _debugger,
                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                    );
                                }
                                debug(
                                    &mut _debugger as *mut debug_t,
                                    b"unable to determine package author for: %s\0" as *const u8
                                        as *const libc::c_char,
                                    (*pkg).name,
                                );
                            }
                            if !((*pkg).repo).is_null() {
                                (*pkg)
                                    .author = parse_repo_owner(
                                    (*pkg).repo as *const libc::c_char,
                                    b"clibs\0" as *const u8 as *const libc::c_char,
                                );
                                (*pkg)
                                    .repo_name = parse_repo_name(
                                    (*pkg).repo as *const libc::c_char,
                                );
                            } else {
                                if verbose != 0 {
                                    cc_fprintf(
                                        CC_FG_DARK_YELLOW,
                                        stdout,
                                        b"  %10s\0" as *const u8 as *const libc::c_char,
                                        b"warning\0" as *const u8 as *const libc::c_char,
                                    );
                                    fprintf(
                                        stdout,
                                        b" : \0" as *const u8 as *const libc::c_char,
                                    );
                                    cc_fprintf(
                                        CC_FG_DARK_GRAY,
                                        stdout,
                                        b"missing repo in clib.json or package.json file for %s\0"
                                            as *const u8 as *const libc::c_char,
                                        (*pkg).name,
                                    );
                                    fprintf(
                                        stdout,
                                        b"\n\0" as *const u8 as *const libc::c_char,
                                    );
                                }
                                (*pkg).author = 0 as *mut libc::c_void as *mut libc::c_char;
                                (*pkg)
                                    .repo_name = 0 as *mut libc::c_void as *mut libc::c_char;
                            }
                            src = json_object_get_array(
                                json_object___0 as *const JSON_Object,
                                b"src\0" as *const u8 as *const libc::c_char,
                            );
                            if src.is_null() {
                                src = json_object_get_array(
                                    json_object___0 as *const JSON_Object,
                                    b"files\0" as *const u8 as *const libc::c_char,
                                );
                            }
                            if !src.is_null() {
                                tmp___4 = list_new();
                                (*pkg).src = tmp___4;
                                if tmp___4.is_null() {
                                    current_block = 5964035273719100936;
                                } else {
                                    (*(*pkg).src)
                                        .free = Some(
                                        free as unsafe extern "C" fn(*mut libc::c_void) -> (),
                                    );
                                    i___0 = 0 as libc::c_uint;
                                    loop {
                                        tmp___8 = json_array_get_count(src as *const JSON_Array);
                                        if !((i___0 as size_t) < tmp___8) {
                                            current_block = 11674240781755647963;
                                            break;
                                        }
                                        tmp___5 = json_array_get_string_safe(
                                            src,
                                            i___0 as libc::c_int,
                                        );
                                        file = tmp___5;
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"file: %s\0" as *const u8 as *const libc::c_char,
                                            file,
                                        );
                                        if file.is_null() {
                                            current_block = 5964035273719100936;
                                            break;
                                        }
                                        tmp___6 = list_node_new(file as *mut libc::c_void);
                                        tmp___7 = list_rpush((*pkg).src, tmp___6);
                                        if tmp___7.is_null() {
                                            current_block = 5964035273719100936;
                                            break;
                                        }
                                        i___0 = i___0.wrapping_add(1);
                                    }
                                }
                            } else {
                                if (_debugger.name).is_null() {
                                    debug_init(
                                        &mut _debugger,
                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                    );
                                }
                                debug(
                                    &mut _debugger as *mut debug_t,
                                    b"no src files listed in clib.json or package.json file\0"
                                        as *const u8 as *const libc::c_char,
                                );
                                (*pkg).src = 0 as *mut libc::c_void as *mut list_t;
                                current_block = 11674240781755647963;
                            }
                            match current_block {
                                5964035273719100936 => {}
                                _ => {
                                    deps = json_object_get_object(
                                        json_object___0 as *const JSON_Object,
                                        b"dependencies\0" as *const u8 as *const libc::c_char,
                                    );
                                    if !deps.is_null() {
                                        tmp___9 = parse_package_deps(deps);
                                        (*pkg).dependencies = tmp___9;
                                        if tmp___9.is_null() {
                                            current_block = 5964035273719100936;
                                        } else {
                                            current_block = 16667286137552459707;
                                        }
                                    } else {
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"no dependencies listed in clib.json or package.json file\0"
                                                as *const u8 as *const libc::c_char,
                                        );
                                        (*pkg).dependencies = 0 as *mut libc::c_void as *mut list_t;
                                        current_block = 16667286137552459707;
                                    }
                                    match current_block {
                                        5964035273719100936 => {}
                                        _ => {
                                            devs = json_object_get_object(
                                                json_object___0 as *const JSON_Object,
                                                b"development\0" as *const u8 as *const libc::c_char,
                                            );
                                            if !devs.is_null() {
                                                tmp___10 = parse_package_deps(devs);
                                                (*pkg).development = tmp___10;
                                                if tmp___10.is_null() {
                                                    current_block = 5964035273719100936;
                                                } else {
                                                    current_block = 13932507243822716336;
                                                }
                                            } else {
                                                if (_debugger.name).is_null() {
                                                    debug_init(
                                                        &mut _debugger,
                                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                                    );
                                                }
                                                debug(
                                                    &mut _debugger as *mut debug_t,
                                                    b"no development dependencies listed in clib.json or package.json file\0"
                                                        as *const u8 as *const libc::c_char,
                                                );
                                                (*pkg).development = 0 as *mut libc::c_void as *mut list_t;
                                                current_block = 13932507243822716336;
                                            }
                                            match current_block {
                                                5964035273719100936 => {}
                                                _ => {
                                                    error___0 = 0 as libc::c_int;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if !root.is_null() {
        json_value_free(root);
    }
    if error___0 != 0 {
        if !pkg.is_null() {
            clib_package_free(pkg);
            pkg = 0 as *mut libc::c_void as *mut clib_package_t;
        }
    }
    return pkg;
}
unsafe extern "C" fn clib_package_new_from_slug_with_package_name(
    mut slug: *const libc::c_char,
    mut verbose: libc::c_int,
    mut file: *const libc::c_char,
) -> *mut clib_package_t {
    let mut current_block: u64;
    let mut author: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut version: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut url: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut json_url: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut repo: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut json: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut log: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut res: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut pkg: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut retries: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    author = 0 as *mut libc::c_void as *mut libc::c_char;
    name = 0 as *mut libc::c_void as *mut libc::c_char;
    version = 0 as *mut libc::c_void as *mut libc::c_char;
    url = 0 as *mut libc::c_void as *mut libc::c_char;
    json_url = 0 as *mut libc::c_void as *mut libc::c_char;
    repo = 0 as *mut libc::c_void as *mut libc::c_char;
    json = 0 as *mut libc::c_void as *mut libc::c_char;
    log = 0 as *mut libc::c_void as *mut libc::c_char;
    res = 0 as *mut libc::c_void as *mut http_get_response_t;
    pkg = 0 as *mut libc::c_void as *mut clib_package_t;
    retries = 3 as libc::c_int;
    if !slug.is_null() {
        if (_debugger.name).is_null() {
            debug_init(
                &mut _debugger,
                b"clib-package\0" as *const u8 as *const libc::c_char,
            );
        }
        debug(
            &mut _debugger as *mut debug_t,
            b"creating package: %s\0" as *const u8 as *const libc::c_char,
            slug,
        );
        author = parse_repo_owner(slug, b"clibs\0" as *const u8 as *const libc::c_char);
        if !author.is_null() {
            name = parse_repo_name(slug);
            if !name.is_null() {
                version = parse_repo_version(
                    slug,
                    b"master\0" as *const u8 as *const libc::c_char,
                );
                if !version.is_null() {
                    url = clib_package_url(
                        author as *const libc::c_char,
                        name as *const libc::c_char,
                        version as *const libc::c_char,
                    );
                    if !url.is_null() {
                        json_url = clib_package_file_url(
                            url as *const libc::c_char,
                            file,
                        );
                        if !json_url.is_null() {
                            if (_debugger.name).is_null() {
                                debug_init(
                                    &mut _debugger,
                                    b"clib-package\0" as *const u8 as *const libc::c_char,
                                );
                            }
                            debug(
                                &mut _debugger as *mut debug_t,
                                b"author: %s\0" as *const u8 as *const libc::c_char,
                                author,
                            );
                            if (_debugger.name).is_null() {
                                debug_init(
                                    &mut _debugger,
                                    b"clib-package\0" as *const u8 as *const libc::c_char,
                                );
                            }
                            debug(
                                &mut _debugger as *mut debug_t,
                                b"name: %s\0" as *const u8 as *const libc::c_char,
                                name,
                            );
                            if (_debugger.name).is_null() {
                                debug_init(
                                    &mut _debugger,
                                    b"clib-package\0" as *const u8 as *const libc::c_char,
                                );
                            }
                            debug(
                                &mut _debugger as *mut debug_t,
                                b"version: %s\0" as *const u8 as *const libc::c_char,
                                version,
                            );
                            pthread_mutex_lock(&mut lock.mutex);
                            tmp___0 = clib_cache_has_json(author, name, version);
                            if tmp___0 != 0 {
                                if opts___0.skip_cache != 0 {
                                    clib_cache_delete_json(author, name, version);
                                    current_block = 7029338548980779672;
                                } else {
                                    json = clib_cache_read_json(author, name, version);
                                    if json.is_null() {
                                        current_block = 7029338548980779672;
                                    } else {
                                        log = b"cache\0" as *const u8 as *const libc::c_char
                                            as *mut libc::c_char;
                                        pthread_mutex_unlock(&mut lock.mutex);
                                        current_block = 9925100494328262799;
                                    }
                                }
                            } else {
                                current_block = 7029338548980779672;
                            }
                            loop {
                                match current_block {
                                    7029338548980779672 => {
                                        pthread_mutex_unlock(&mut lock.mutex);
                                        tmp = retries;
                                        retries -= 1;
                                        if tmp <= 0 as libc::c_int {
                                            current_block = 13655780721917586500;
                                            break;
                                        }
                                        init_curl_share();
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"GET %s\0" as *const u8 as *const libc::c_char,
                                            json_url,
                                        );
                                        http_get_free(res);
                                        res = http_get_shared(
                                            json_url as *const libc::c_char,
                                            clib_package_curl_share,
                                        );
                                        json = (*res).data;
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"status: %d\0" as *const u8 as *const libc::c_char,
                                            (*res).status,
                                        );
                                        if res.is_null() {
                                            current_block = 7029338548980779672;
                                            continue;
                                        }
                                        if (*res).ok == 0 {
                                            current_block = 7029338548980779672;
                                            continue;
                                        }
                                        log = b"fetch\0" as *const u8 as *const libc::c_char
                                            as *mut libc::c_char;
                                        current_block = 9925100494328262799;
                                    }
                                    _ => {
                                        if verbose != 0 {
                                            cc_fprintf(
                                                CC_FG_CYAN,
                                                stdout,
                                                b"  %10s\0" as *const u8 as *const libc::c_char,
                                                log,
                                            );
                                            fprintf(
                                                stdout,
                                                b" : \0" as *const u8 as *const libc::c_char,
                                            );
                                            cc_fprintf(
                                                CC_FG_DARK_GRAY,
                                                stdout,
                                                b"%s/%s:%s\0" as *const u8 as *const libc::c_char,
                                                author,
                                                name,
                                                file,
                                            );
                                            fprintf(
                                                stdout,
                                                b"\n\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        free(json_url as *mut libc::c_void);
                                        json_url = 0 as *mut libc::c_void as *mut libc::c_char;
                                        free(name as *mut libc::c_void);
                                        name = 0 as *mut libc::c_void as *mut libc::c_char;
                                        if !json.is_null() {
                                            pkg = clib_package_new(
                                                json as *const libc::c_char,
                                                verbose,
                                            );
                                        }
                                        if pkg.is_null() {
                                            current_block = 13655780721917586500;
                                            break;
                                        } else {
                                            current_block = 777662472977924419;
                                            break;
                                        }
                                    }
                                }
                            }
                            match current_block {
                                13655780721917586500 => {}
                                _ => {
                                    if !((*pkg).version).is_null() {
                                        if !version.is_null() {
                                            tmp___1 = strcmp(
                                                version as *const libc::c_char,
                                                b"master\0" as *const u8 as *const libc::c_char,
                                            );
                                            if 0 as libc::c_int != tmp___1 {
                                                if (_debugger.name).is_null() {
                                                    debug_init(
                                                        &mut _debugger,
                                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                                    );
                                                }
                                                debug(
                                                    &mut _debugger as *mut debug_t,
                                                    b"forcing version number: %s (%s)\0" as *const u8
                                                        as *const libc::c_char,
                                                    version,
                                                    (*pkg).version,
                                                );
                                                free((*pkg).version as *mut libc::c_void);
                                                (*pkg).version = version;
                                            } else {
                                                free(version as *mut libc::c_void);
                                            }
                                        }
                                    } else {
                                        (*pkg).version = version;
                                    }
                                    if !author.is_null() {
                                        if !((*pkg).author).is_null() {
                                            tmp___2 = strcmp(
                                                author as *const libc::c_char,
                                                (*pkg).author as *const libc::c_char,
                                            );
                                            if 0 as libc::c_int != tmp___2 {
                                                free((*pkg).author as *mut libc::c_void);
                                                (*pkg).author = author;
                                            } else {
                                                free(author as *mut libc::c_void);
                                            }
                                        } else {
                                            (*pkg).author = strdup(author as *const libc::c_char);
                                        }
                                    } else {
                                        (*pkg).author = strdup(author as *const libc::c_char);
                                    }
                                    repo = clib_package_repo(
                                        (*pkg).author as *const libc::c_char,
                                        (*pkg).name as *const libc::c_char,
                                    );
                                    if !repo.is_null() {
                                        if !((*pkg).repo).is_null() {
                                            tmp___3 = strcmp(
                                                repo as *const libc::c_char,
                                                (*pkg).repo as *const libc::c_char,
                                            );
                                            if 0 as libc::c_int != tmp___3 {
                                                free(url as *mut libc::c_void);
                                                url = clib_package_url_from_repo(
                                                    (*pkg).repo as *const libc::c_char,
                                                    (*pkg).version as *const libc::c_char,
                                                );
                                                if url.is_null() {
                                                    current_block = 13655780721917586500;
                                                } else {
                                                    current_block = 9521147444787763968;
                                                }
                                            } else {
                                                current_block = 9521147444787763968;
                                            }
                                            match current_block {
                                                13655780721917586500 => {}
                                                _ => {
                                                    free(repo as *mut libc::c_void);
                                                    repo = 0 as *mut libc::c_void as *mut libc::c_char;
                                                    current_block = 5409161009579131794;
                                                }
                                            }
                                        } else {
                                            (*pkg).repo = repo;
                                            current_block = 5409161009579131794;
                                        }
                                        match current_block {
                                            13655780721917586500 => {}
                                            _ => {
                                                (*pkg).url = url;
                                                pthread_mutex_lock(&mut lock.mutex);
                                                if !pkg.is_null() {
                                                    if !((*pkg).author).is_null() {
                                                        if !((*pkg).name).is_null() {
                                                            if !((*pkg).version).is_null() {
                                                                tmp___4 = clib_cache_save_json(
                                                                    (*pkg).author,
                                                                    (*pkg).name,
                                                                    (*pkg).version,
                                                                    json,
                                                                );
                                                                if -(1 as libc::c_int) == tmp___4 {
                                                                    if (_debugger.name).is_null() {
                                                                        debug_init(
                                                                            &mut _debugger,
                                                                            b"clib-package\0" as *const u8 as *const libc::c_char,
                                                                        );
                                                                    }
                                                                    debug(
                                                                        &mut _debugger as *mut debug_t,
                                                                        b"failed to cache JSON for: %s/%s@%s\0" as *const u8
                                                                            as *const libc::c_char,
                                                                        (*pkg).author,
                                                                        (*pkg).name,
                                                                        (*pkg).version,
                                                                    );
                                                                } else {
                                                                    if (_debugger.name).is_null() {
                                                                        debug_init(
                                                                            &mut _debugger,
                                                                            b"clib-package\0" as *const u8 as *const libc::c_char,
                                                                        );
                                                                    }
                                                                    debug(
                                                                        &mut _debugger as *mut debug_t,
                                                                        b"cached: %s/%s@%s\0" as *const u8 as *const libc::c_char,
                                                                        (*pkg).author,
                                                                        (*pkg).name,
                                                                        (*pkg).version,
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                pthread_mutex_unlock(&mut lock.mutex);
                                                if !res.is_null() {
                                                    http_get_free(res);
                                                    json = 0 as *mut libc::c_void as *mut libc::c_char;
                                                    res = 0 as *mut libc::c_void as *mut http_get_response_t;
                                                } else {
                                                    free(json as *mut libc::c_void);
                                                    json = 0 as *mut libc::c_void as *mut libc::c_char;
                                                }
                                                return pkg;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if 0 as libc::c_int == retries {
        if verbose != 0 {
            if !author.is_null() {
                if !name.is_null() {
                    if !file.is_null() {
                        cc_fprintf(
                            CC_FG_DARK_YELLOW,
                            stdout,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"warning\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(
                            CC_FG_DARK_GRAY,
                            stdout,
                            b"unable to fetch %s/%s:%s\0" as *const u8
                                as *const libc::c_char,
                            author,
                            name,
                            file,
                        );
                        fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                    }
                }
            }
        }
    }
    free(author as *mut libc::c_void);
    free(name as *mut libc::c_void);
    free(version as *mut libc::c_void);
    free(url as *mut libc::c_void);
    free(json_url as *mut libc::c_void);
    free(repo as *mut libc::c_void);
    if res.is_null() {
        if !json.is_null() {
            free(json as *mut libc::c_void);
        }
    }
    if !res.is_null() {
        http_get_free(res);
    }
    if !pkg.is_null() {
        clib_package_free(pkg);
    }
    return 0 as *mut libc::c_void as *mut clib_package_t;
}
pub unsafe extern "C" fn clib_package_new_from_slug(
    mut slug: *const libc::c_char,
    mut verbose: libc::c_int,
) -> *mut clib_package_t {
    let mut package: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut name: *const libc::c_char = 0 as *const libc::c_char;
    let mut i: libc::c_uint = 0;
    package = 0 as *mut libc::c_void as *mut clib_package_t;
    name = 0 as *mut libc::c_void as *const libc::c_char;
    i = 0 as libc::c_uint;
    loop {
        name = manifest_names[i as usize];
        package = clib_package_new_from_slug_with_package_name(slug, verbose, name);
        if 0 as *mut libc::c_void as libc::c_ulong != package as libc::c_ulong {
            (*package).filename = name as *mut libc::c_char;
        }
        i = i.wrapping_add(1);
        if !(0 as *mut libc::c_void as libc::c_ulong
            != manifest_names[i as usize] as libc::c_ulong)
        {
            break;
        }
        if !(0 as *mut libc::c_void as libc::c_ulong == package as libc::c_ulong) {
            break;
        }
    }
    return package;
}
pub unsafe extern "C" fn clib_package_url(
    mut author: *const libc::c_char,
    mut name: *const libc::c_char,
    mut version: *const libc::c_char,
) -> *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: size_t = 0;
    let mut tmp___3: size_t = 0;
    let mut slug: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *mut libc::c_void = 0 as *mut libc::c_void;
    if author.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char
    } else {
        if name.is_null() {
            return 0 as *mut libc::c_void as *mut libc::c_char
        } else {
            if version.is_null() {
                return 0 as *mut libc::c_void as *mut libc::c_char;
            }
        }
    }
    tmp = strlen(
        b"https://raw.githubusercontent.com/\0" as *const u8 as *const libc::c_char,
    );
    tmp___0 = strlen(author);
    tmp___1 = strlen(name);
    tmp___2 = strlen(version);
    size = tmp
        .wrapping_add(tmp___0)
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___1)
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___2)
        .wrapping_add(1 as libc::c_ulong) as libc::c_int;
    if 0 as *mut libc::c_char as libc::c_ulong != opts___0.token as libc::c_ulong {
        tmp___3 = strlen(opts___0.token as *const libc::c_char);
        size = (size as size_t).wrapping_add(tmp___3) as libc::c_int;
        size += 1;
    }
    tmp___4 = malloc(size as size_t);
    slug = tmp___4 as *mut libc::c_char;
    if !slug.is_null() {
        memset(slug as *mut libc::c_void, '\u{0}' as i32, size as size_t);
        if 0 as *mut libc::c_char as libc::c_ulong != opts___0.token as libc::c_ulong {
            sprintf(
                slug,
                b"https://%s@raw.githubusercontent.com/%s/%s/%s\0" as *const u8
                    as *const libc::c_char,
                opts___0.token,
                author,
                name,
                version,
            );
        } else {
            sprintf(
                slug,
                b"https://raw.githubusercontent.com/%s/%s/%s\0" as *const u8
                    as *const libc::c_char,
                author,
                name,
                version,
            );
        }
    }
    return slug;
}
pub unsafe extern "C" fn clib_package_url_from_repo(
    mut repo: *const libc::c_char,
    mut version: *const libc::c_char,
) -> *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: size_t = 0;
    let mut slug: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_void = 0 as *mut libc::c_void;
    if repo.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char
    } else {
        if version.is_null() {
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
    }
    tmp = strlen(
        b"https://raw.githubusercontent.com/\0" as *const u8 as *const libc::c_char,
    );
    tmp___0 = strlen(repo);
    tmp___1 = strlen(version);
    size = tmp
        .wrapping_add(tmp___0)
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_add(tmp___1)
        .wrapping_add(1 as libc::c_ulong) as libc::c_int;
    if 0 as *mut libc::c_char as libc::c_ulong != opts___0.token as libc::c_ulong {
        tmp___2 = strlen(opts___0.token as *const libc::c_char);
        size = (size as size_t).wrapping_add(tmp___2) as libc::c_int;
        size += 1;
    }
    tmp___3 = malloc(size as size_t);
    slug = tmp___3 as *mut libc::c_char;
    if !slug.is_null() {
        memset(slug as *mut libc::c_void, '\u{0}' as i32, size as size_t);
        if 0 as *mut libc::c_char as libc::c_ulong != opts___0.token as libc::c_ulong {
            sprintf(
                slug,
                b"https://%s@raw.githubusercontent.com/%s/%s\0" as *const u8
                    as *const libc::c_char,
                opts___0.token,
                repo,
                version,
            );
        } else {
            sprintf(
                slug,
                b"https://raw.githubusercontent.com/%s/%s\0" as *const u8
                    as *const libc::c_char,
                repo,
                version,
            );
        }
    }
    return slug;
}
pub unsafe extern "C" fn clib_package_parse_author(
    mut slug: *const libc::c_char,
) -> *mut libc::c_char {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = parse_repo_owner(slug, b"clibs\0" as *const u8 as *const libc::c_char);
    return tmp;
}
pub unsafe extern "C" fn clib_package_parse_version(
    mut slug: *const libc::c_char,
) -> *mut libc::c_char {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = parse_repo_version(slug, b"master\0" as *const u8 as *const libc::c_char);
    return tmp;
}
pub unsafe extern "C" fn clib_package_parse_name(
    mut slug: *const libc::c_char,
) -> *mut libc::c_char {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = parse_repo_name(slug);
    return tmp;
}
pub unsafe extern "C" fn clib_package_dependency_new(
    mut repo: *const libc::c_char,
    mut version: *const libc::c_char,
) -> *mut clib_package_dependency_t {
    let mut dep: *mut clib_package_dependency_t = 0 as *mut clib_package_dependency_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: libc::c_int = 0;
    if repo.is_null() {
        return 0 as *mut libc::c_void as *mut clib_package_dependency_t
    } else {
        if version.is_null() {
            return 0 as *mut libc::c_void as *mut clib_package_dependency_t;
        }
    }
    tmp = malloc(::std::mem::size_of::<clib_package_dependency_t>() as libc::c_ulong);
    dep = tmp as *mut clib_package_dependency_t;
    if dep.is_null() {
        return 0 as *mut libc::c_void as *mut clib_package_dependency_t;
    }
    tmp___3 = strcmp(b"*\0" as *const u8 as *const libc::c_char, version);
    if 0 as libc::c_int == tmp___3 {
        tmp___1 = strdup(b"master\0" as *const u8 as *const libc::c_char);
        (*dep).version = tmp___1;
    } else {
        tmp___2 = strdup(version);
        (*dep).version = tmp___2;
    }
    (*dep).name = clib_package_parse_name(repo);
    (*dep).author = clib_package_parse_author(repo);
    if (_debugger.name).is_null() {
        debug_init(
            &mut _debugger,
            b"clib-package\0" as *const u8 as *const libc::c_char,
        );
    }
    debug(
        &mut _debugger as *mut debug_t,
        b"dependency: %s/%s@%s\0" as *const u8 as *const libc::c_char,
        (*dep).author,
        (*dep).name,
        (*dep).version,
    );
    return dep;
}
unsafe extern "C" fn fetch_package_file_work(
    mut pkg: *mut clib_package_t,
    mut dir: *const libc::c_char,
    mut file: *mut libc::c_char,
    mut verbose: libc::c_int,
) -> libc::c_int {
    let mut current_block: u64;
    let mut url: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut path: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut saved: libc::c_int = 0;
    let mut rc: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: libc::c_int = 0;
    url = 0 as *mut libc::c_void as *mut libc::c_char;
    path = 0 as *mut libc::c_void as *mut libc::c_char;
    saved = 0 as libc::c_int;
    rc = 0 as libc::c_int;
    if (_debugger.name).is_null() {
        debug_init(
            &mut _debugger,
            b"clib-package\0" as *const u8 as *const libc::c_char,
        );
    }
    debug(
        &mut _debugger as *mut debug_t,
        b"fetch file: %s/%s\0" as *const u8 as *const libc::c_char,
        (*pkg).repo,
        file,
    );
    if 0 as *mut libc::c_void as libc::c_ulong == pkg as libc::c_ulong {
        return 1 as libc::c_int;
    }
    if 0 as *mut libc::c_void as libc::c_ulong == (*pkg).url as libc::c_ulong {
        return 1 as libc::c_int;
    }
    tmp = strncmp(
        file as *const libc::c_char,
        b"http\0" as *const u8 as *const libc::c_char,
        4 as libc::c_int as size_t,
    );
    if 0 as libc::c_int == tmp {
        url = strdup(file as *const libc::c_char);
    } else {
        url = clib_package_file_url(
            (*pkg).url as *const libc::c_char,
            file as *const libc::c_char,
        );
        if url.is_null() {
            return 1 as libc::c_int;
        }
    }
    if (_debugger.name).is_null() {
        debug_init(
            &mut _debugger,
            b"clib-package\0" as *const u8 as *const libc::c_char,
        );
    }
    debug(
        &mut _debugger as *mut debug_t,
        b"file URL: %s\0" as *const u8 as *const libc::c_char,
        url,
    );
    tmp___0 = __xpg_basename(file);
    path = path_join(dir, tmp___0 as *const libc::c_char);
    if path.is_null() {
        rc = 1 as libc::c_int;
    } else {
        pthread_mutex_lock(&mut lock.mutex);
        let mut current_block_43: u64;
        if 1 as libc::c_int == opts___0.force {
            current_block_43 = 1126075343238716826;
        } else {
            tmp___1 = fs_exists(path as *const libc::c_char);
            if -(1 as libc::c_int) == tmp___1 {
                current_block_43 = 1126075343238716826;
            } else {
                pthread_mutex_unlock(&mut lock.mutex);
                current_block_43 = 5529461102203738653;
            }
        }
        match current_block_43 {
            1126075343238716826 => {
                if verbose != 0 {
                    cc_fprintf(
                        CC_FG_CYAN,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"fetch\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"%s:%s\0" as *const u8 as *const libc::c_char,
                        (*pkg).repo,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                    fflush(stdout);
                }
                pthread_mutex_unlock(&mut lock.mutex);
                rc = http_get_file_shared(
                    url as *const libc::c_char,
                    path as *const libc::c_char,
                    clib_package_curl_share,
                );
                saved = 1 as libc::c_int;
            }
            _ => {}
        }
        if -(1 as libc::c_int) == rc {
            if verbose != 0 {
                pthread_mutex_lock(&mut lock.mutex);
                cc_fprintf(
                    CC_FG_DARK_RED,
                    stderr,
                    b"  %10s\0" as *const u8 as *const libc::c_char,
                    b"error\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
                cc_fprintf(
                    CC_FG_DARK_GRAY,
                    stderr,
                    b"unable to fetch %s:%s\0" as *const u8 as *const libc::c_char,
                    (*pkg).repo,
                    file,
                );
                fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
                fflush(stderr);
                rc = 1 as libc::c_int;
                pthread_mutex_unlock(&mut lock.mutex);
                current_block = 13735506213770503348;
            } else {
                current_block = 2122094917359643297;
            }
        } else {
            current_block = 2122094917359643297;
        }
        match current_block {
            13735506213770503348 => {}
            _ => {
                if saved != 0 {
                    if verbose != 0 {
                        pthread_mutex_lock(&mut lock.mutex);
                        cc_fprintf(
                            CC_FG_CYAN,
                            stdout,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"save\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(CC_FG_DARK_GRAY, stdout, path as *const libc::c_char);
                        fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                        fflush(stdout);
                        pthread_mutex_unlock(&mut lock.mutex);
                    }
                }
            }
        }
    }
    free(url as *mut libc::c_void);
    free(path as *mut libc::c_void);
    return rc;
}
unsafe extern "C" fn fetch_package_file_thread(
    mut arg: *mut libc::c_void,
) -> *mut libc::c_void {
    let mut data: *mut fetch_package_file_thread_data_t = 0
        as *mut fetch_package_file_thread_data_t;
    let mut status: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut rc: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    data = arg as *mut fetch_package_file_thread_data_t;
    tmp = malloc(::std::mem::size_of::<libc::c_int>() as libc::c_ulong);
    status = tmp as *mut libc::c_int;
    tmp___0 = fetch_package_file_work(
        (*data).pkg,
        (*data).dir,
        (*data).file,
        (*data).verbose,
    );
    rc = tmp___0;
    *status = rc;
    (*(*data).pkg).refs = ((*(*data).pkg).refs).wrapping_sub(1);
    pthread_exit(status as *mut libc::c_void);
}
unsafe extern "C" fn fetch_package_file(
    mut pkg: *mut clib_package_t,
    mut dir: *const libc::c_char,
    mut file: *mut libc::c_char,
    mut verbose: libc::c_int,
    mut data: *mut *mut libc::c_void,
) -> libc::c_int {
    let mut fetch: *mut fetch_package_file_thread_data_t = 0
        as *mut fetch_package_file_thread_data_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut rc: libc::c_int = 0;
    tmp = malloc(
        ::std::mem::size_of::<fetch_package_file_thread_data_t>() as libc::c_ulong,
    );
    fetch = tmp as *mut fetch_package_file_thread_data_t;
    rc = 0 as libc::c_int;
    if 0 as *mut fetch_package_file_thread_data_t as libc::c_ulong
        == fetch as libc::c_ulong
    {
        return -(1 as libc::c_int);
    }
    *data = 0 as *mut libc::c_void;
    memset(
        fetch as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<fetch_package_file_thread_data_t>() as libc::c_ulong,
    );
    (*fetch).pkg = pkg;
    (*fetch).dir = dir;
    (*fetch).file = file;
    (*fetch).verbose = verbose;
    rc = pthread_attr_init(&mut (*fetch).attr);
    if 0 as libc::c_int != rc {
        free(fetch as *mut libc::c_void);
        return rc;
    }
    (*pkg).refs = ((*pkg).refs).wrapping_add(1);
    rc = pthread_create(
        &mut (*fetch).thread as *mut pthread_t,
        0 as *mut libc::c_void as *const pthread_attr_t,
        Some(
            fetch_package_file_thread
                as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
        ),
        fetch as *mut libc::c_void,
    );
    if 0 as libc::c_int != rc {
        pthread_attr_destroy(&mut (*fetch).attr);
        free(fetch as *mut libc::c_void);
        return rc;
    }
    rc = pthread_attr_destroy(&mut (*fetch).attr);
    if 0 as libc::c_int != rc {
        pthread_cancel((*fetch).thread);
        free(fetch as *mut libc::c_void);
        return rc;
    }
    *data = fetch as *mut libc::c_void;
    return rc;
}
unsafe extern "C" fn set_prefix(
    mut pkg: *mut clib_package_t,
    mut path_max: libc::c_long,
) {
    let mut current_block_12: u64;
    if 0 as *mut libc::c_void as libc::c_ulong != opts___0.prefix as libc::c_ulong {
        current_block_12 = 14155750587950065367;
    } else if 0 as *mut libc::c_void as libc::c_ulong != (*pkg).prefix as libc::c_ulong {
        current_block_12 = 14155750587950065367;
    } else {
        current_block_12 = 11050875288958768710;
    }
    match current_block_12 {
        14155750587950065367 => {
            let vla = path_max as usize;
            let mut path: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla);
            memset(
                path.as_mut_ptr() as *mut libc::c_void,
                0 as libc::c_int,
                path_max as size_t,
            );
            if !(opts___0.prefix).is_null() {
                realpath(opts___0.prefix as *const libc::c_char, path.as_mut_ptr());
            } else {
                realpath((*pkg).prefix as *const libc::c_char, path.as_mut_ptr());
            }
            if (_debugger.name).is_null() {
                debug_init(
                    &mut _debugger,
                    b"clib-package\0" as *const u8 as *const libc::c_char,
                );
            }
            debug(
                &mut _debugger as *mut debug_t,
                b"env: PREFIX: %s\0" as *const u8 as *const libc::c_char,
                path.as_mut_ptr(),
            );
            setenv(
                b"PREFIX\0" as *const u8 as *const libc::c_char,
                path.as_mut_ptr() as *const libc::c_char,
                1 as libc::c_int,
            );
            mkdirp(
                path.as_mut_ptr() as *const libc::c_char,
                511 as libc::c_int as mode_t,
            );
        }
        _ => {}
    };
}
pub unsafe extern "C" fn clib_package_install_executable(
    mut pkg: *mut clib_package_t,
    mut dir: *const libc::c_char,
    mut verbose: libc::c_int,
) -> libc::c_int {
    let mut current_block: u64;
    let mut path_max: libc::c_long = 0;
    let mut rc: libc::c_int = 0;
    let mut url: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut file: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tarball: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut command: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut unpack_dir: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut deps: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut reponame: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut configure: *const libc::c_char = 0 as *const libc::c_char;
    let mut version: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut flags: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut cflags: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    path_max = 4096 as libc::c_long;
    url = 0 as *mut libc::c_void as *mut libc::c_char;
    file = 0 as *mut libc::c_void as *mut libc::c_char;
    tarball = 0 as *mut libc::c_void as *mut libc::c_char;
    command = 0 as *mut libc::c_void as *mut libc::c_char;
    unpack_dir = 0 as *mut libc::c_void as *mut libc::c_char;
    deps = 0 as *mut libc::c_void as *mut libc::c_char;
    tmp = 0 as *mut libc::c_void as *mut libc::c_char;
    reponame = 0 as *mut libc::c_void as *mut libc::c_char;
    let vla = path_max as usize;
    let mut dir_path: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla);
    if (_debugger.name).is_null() {
        debug_init(
            &mut _debugger,
            b"clib-package\0" as *const u8 as *const libc::c_char,
        );
    }
    debug(
        &mut _debugger as *mut debug_t,
        b"install executable %s\0" as *const u8 as *const libc::c_char,
        (*pkg).repo,
    );
    tmp = gettempdir();
    if 0 as *mut libc::c_void as libc::c_ulong == tmp as libc::c_ulong {
        if verbose != 0 {
            cc_fprintf(
                CC_FG_DARK_RED,
                stderr,
                b"  %10s\0" as *const u8 as *const libc::c_char,
                b"error\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
            cc_fprintf(
                CC_FG_DARK_GRAY,
                stderr,
                b"gettempdir() out of memory\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        }
        return -(1 as libc::c_int);
    }
    if ((*pkg).repo).is_null() {
        if verbose != 0 {
            cc_fprintf(
                CC_FG_DARK_RED,
                stderr,
                b"  %10s\0" as *const u8 as *const libc::c_char,
                b"error\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
            cc_fprintf(
                CC_FG_DARK_GRAY,
                stderr,
                b"repo field required to install executable\0" as *const u8
                    as *const libc::c_char,
            );
            fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        }
        return -(1 as libc::c_int);
    }
    reponame = strrchr((*pkg).repo as *const libc::c_char, '/' as i32);
    's_195: {
        if !reponame.is_null() {
            if *reponame as libc::c_int != 0 as libc::c_int {
                reponame = reponame.offset(1);
                break 's_195;
            }
        }
        if verbose != 0 {
            cc_fprintf(
                CC_FG_DARK_RED,
                stderr,
                b"  %10s\0" as *const u8 as *const libc::c_char,
                b"error\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
            cc_fprintf(
                CC_FG_DARK_GRAY,
                stderr,
                b"malformed repo field, must be in the form user/pkg\0" as *const u8
                    as *const libc::c_char,
            );
            fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        }
        return -(1 as libc::c_int);
    }
    rc = asprintf(
        &mut url as *mut *mut libc::c_char,
        b"https://github.com/%s/archive/%s.tar.gz\0" as *const u8 as *const libc::c_char,
        (*pkg).repo,
        (*pkg).version,
    );
    if !(-(1 as libc::c_int) == rc) {
        rc = asprintf(
            &mut file as *mut *mut libc::c_char,
            b"%s-%s.tar.gz\0" as *const u8 as *const libc::c_char,
            reponame,
            (*pkg).version,
        );
        if !(-(1 as libc::c_int) == rc) {
            rc = asprintf(
                &mut tarball as *mut *mut libc::c_char,
                b"%s/%s\0" as *const u8 as *const libc::c_char,
                tmp,
                file,
            );
            if !(-(1 as libc::c_int) == rc) {
                rc = http_get_file_shared(
                    url as *const libc::c_char,
                    tarball as *const libc::c_char,
                    clib_package_curl_share,
                );
                if 0 as libc::c_int != rc {
                    if verbose != 0 {
                        cc_fprintf(
                            CC_FG_DARK_RED,
                            stderr,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"error\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(
                            CC_FG_DARK_GRAY,
                            stderr,
                            b"download failed for '%s@%s' - HTTP GET '%s'\0" as *const u8
                                as *const libc::c_char,
                            (*pkg).repo,
                            (*pkg).version,
                            url,
                        );
                        fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
                    }
                } else {
                    rc = asprintf(
                        &mut command as *mut *mut libc::c_char,
                        b"cd %s && gzip -dc %s | tar x\0" as *const u8
                            as *const libc::c_char,
                        tmp,
                        file,
                    );
                    if !(-(1 as libc::c_int) == rc) {
                        if (_debugger.name).is_null() {
                            debug_init(
                                &mut _debugger,
                                b"clib-package\0" as *const u8 as *const libc::c_char,
                            );
                        }
                        debug(
                            &mut _debugger as *mut debug_t,
                            b"download url: %s\0" as *const u8 as *const libc::c_char,
                            url,
                        );
                        if (_debugger.name).is_null() {
                            debug_init(
                                &mut _debugger,
                                b"clib-package\0" as *const u8 as *const libc::c_char,
                            );
                        }
                        debug(
                            &mut _debugger as *mut debug_t,
                            b"file: %s\0" as *const u8 as *const libc::c_char,
                            file,
                        );
                        if (_debugger.name).is_null() {
                            debug_init(
                                &mut _debugger,
                                b"clib-package\0" as *const u8 as *const libc::c_char,
                            );
                        }
                        debug(
                            &mut _debugger as *mut debug_t,
                            b"tarball: %s\0" as *const u8 as *const libc::c_char,
                            tarball,
                        );
                        if (_debugger.name).is_null() {
                            debug_init(
                                &mut _debugger,
                                b"clib-package\0" as *const u8 as *const libc::c_char,
                            );
                        }
                        debug(
                            &mut _debugger as *mut debug_t,
                            b"command(extract): %s\0" as *const u8
                                as *const libc::c_char,
                            command,
                        );
                        rc = system(command as *const libc::c_char);
                        if !(0 as libc::c_int != rc) {
                            free(command as *mut libc::c_void);
                            command = 0 as *mut libc::c_void as *mut libc::c_char;
                            set_prefix(pkg, path_max);
                            configure = (*pkg).configure as *const libc::c_char;
                            if 0 as *const libc::c_char as libc::c_ulong
                                == configure as libc::c_ulong
                            {
                                configure = b":\0" as *const u8 as *const libc::c_char;
                            }
                            memset(
                                dir_path.as_mut_ptr() as *mut libc::c_void,
                                0 as libc::c_int,
                                path_max as size_t,
                            );
                            realpath(dir, dir_path.as_mut_ptr());
                            version = (*pkg).version;
                            if 118 as libc::c_int
                                == *version.offset(0 as libc::c_int as isize) as libc::c_int
                            {
                                version = version.offset(1);
                            }
                            rc = asprintf(
                                &mut unpack_dir as *mut *mut libc::c_char,
                                b"%s/%s-%s\0" as *const u8 as *const libc::c_char,
                                tmp,
                                reponame,
                                version,
                            );
                            if !(-(1 as libc::c_int) == rc) {
                                if (_debugger.name).is_null() {
                                    debug_init(
                                        &mut _debugger,
                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                    );
                                }
                                debug(
                                    &mut _debugger as *mut debug_t,
                                    b"dir: %s\0" as *const u8 as *const libc::c_char,
                                    unpack_dir,
                                );
                                if !((*pkg).dependencies).is_null() {
                                    rc = asprintf(
                                        &mut deps as *mut *mut libc::c_char,
                                        b"%s/deps\0" as *const u8 as *const libc::c_char,
                                        unpack_dir,
                                    );
                                    if -(1 as libc::c_int) == rc {
                                        current_block = 5056731719900272239;
                                    } else {
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"deps: %s\0" as *const u8 as *const libc::c_char,
                                            deps,
                                        );
                                        rc = clib_package_install_dependencies(
                                            pkg,
                                            deps as *const libc::c_char,
                                            verbose,
                                        );
                                        if -(1 as libc::c_int) == rc {
                                            current_block = 5056731719900272239;
                                        } else {
                                            current_block = 10769842751669019566;
                                        }
                                    }
                                } else {
                                    current_block = 10769842751669019566;
                                }
                                match current_block {
                                    5056731719900272239 => {}
                                    _ => {
                                        if opts___0.global == 0 {
                                            if !((*pkg).makefile).is_null() {
                                                tmp___0 = __xpg_basename((*pkg).makefile);
                                                rc = asprintf(
                                                    &mut command as *mut *mut libc::c_char,
                                                    b"cp -fr %s/%s/%s %s\0" as *const u8 as *const libc::c_char,
                                                    dir_path.as_mut_ptr(),
                                                    (*pkg).name,
                                                    tmp___0,
                                                    unpack_dir,
                                                );
                                                if -(1 as libc::c_int) == rc {
                                                    current_block = 5056731719900272239;
                                                } else {
                                                    rc = system(command as *const libc::c_char);
                                                    if 0 as libc::c_int != rc {
                                                        current_block = 5056731719900272239;
                                                    } else {
                                                        free(command as *mut libc::c_void);
                                                        current_block = 8937240710477387595;
                                                    }
                                                }
                                            } else {
                                                current_block = 8937240710477387595;
                                            }
                                        } else {
                                            current_block = 8937240710477387595;
                                        }
                                        match current_block {
                                            5056731719900272239 => {}
                                            _ => {
                                                if !((*pkg).flags).is_null() {
                                                    flags = 0 as *mut libc::c_void as *mut libc::c_char;
                                                    tmp___1 = getenv(
                                                        b"CFLAGS\0" as *const u8 as *const libc::c_char,
                                                    );
                                                    cflags = tmp___1;
                                                    if !cflags.is_null() {
                                                        asprintf(
                                                            &mut flags as *mut *mut libc::c_char,
                                                            b"%s %s\0" as *const u8 as *const libc::c_char,
                                                            cflags,
                                                            (*pkg).flags,
                                                        );
                                                    } else {
                                                        asprintf(
                                                            &mut flags as *mut *mut libc::c_char,
                                                            b"%s\0" as *const u8 as *const libc::c_char,
                                                            (*pkg).flags,
                                                        );
                                                    }
                                                    setenv(
                                                        b"CFLAGS\0" as *const u8 as *const libc::c_char,
                                                        cflags as *const libc::c_char,
                                                        1 as libc::c_int,
                                                    );
                                                }
                                                rc = asprintf(
                                                    &mut command as *mut *mut libc::c_char,
                                                    b"cd %s && %s\0" as *const u8 as *const libc::c_char,
                                                    unpack_dir,
                                                    (*pkg).install,
                                                );
                                                if !(-(1 as libc::c_int) == rc) {
                                                    if (_debugger.name).is_null() {
                                                        debug_init(
                                                            &mut _debugger,
                                                            b"clib-package\0" as *const u8 as *const libc::c_char,
                                                        );
                                                    }
                                                    debug(
                                                        &mut _debugger as *mut debug_t,
                                                        b"command(install): %s\0" as *const u8
                                                            as *const libc::c_char,
                                                        command,
                                                    );
                                                    rc = system(command as *const libc::c_char);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    free(tmp as *mut libc::c_void);
    free(command as *mut libc::c_void);
    free(tarball as *mut libc::c_void);
    free(file as *mut libc::c_void);
    free(url as *mut libc::c_void);
    return rc;
}
pub unsafe extern "C" fn clib_package_install(
    mut pkg: *mut clib_package_t,
    mut dir: *const libc::c_char,
    mut verbose: libc::c_int,
) -> libc::c_int {
    let mut current_block: u64;
    let mut iterator: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut package_json: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut pkg_dir: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut command: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut pending: libc::c_int = 0;
    let mut rc: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut path_max: libc::c_long = 0;
    let mut max: libc::c_int = 0;
    let mut prefix: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: libc::c_int = 0;
    let mut fetchs: *mut *mut fetch_package_file_thread_data_t = 0
        as *mut *mut fetch_package_file_thread_data_t;
    let mut tmp___2: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___6: libc::c_int = 0;
    let mut fetch: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut data: *mut fetch_package_file_thread_data_t = 0
        as *mut fetch_package_file_thread_data_t;
    let mut status: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: libc::c_int = 0;
    let mut source: *mut list_node_t = 0 as *mut list_node_t;
    let mut fetch___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut j: libc::c_int = 0;
    let mut data___0: *mut fetch_package_file_thread_data_t = 0
        as *mut fetch_package_file_thread_data_t;
    let mut status___0: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut j___0: libc::c_int = 0;
    let mut data___1: *mut fetch_package_file_thread_data_t = 0
        as *mut fetch_package_file_thread_data_t;
    let mut status___1: *mut libc::c_int = 0 as *mut libc::c_int;
    iterator = 0 as *mut libc::c_void as *mut list_iterator_t;
    package_json = 0 as *mut libc::c_void as *mut libc::c_char;
    pkg_dir = 0 as *mut libc::c_void as *mut libc::c_char;
    command = 0 as *mut libc::c_void as *mut libc::c_char;
    pending = 0 as libc::c_int;
    rc = 0 as libc::c_int;
    i = 0 as libc::c_int;
    path_max = 4096 as libc::c_long;
    max = opts___0.concurrency;
    if 0 as *mut libc::c_char as libc::c_ulong == opts___0.prefix as libc::c_ulong {
        pthread_mutex_lock(&mut lock.mutex);
        tmp = getenv(b"PREFIX\0" as *const u8 as *const libc::c_char);
        prefix = tmp;
        if !prefix.is_null() {
            opts___0.prefix = prefix;
        }
        pthread_mutex_unlock(&mut lock.mutex);
    }
    if 0 as *mut hash_t as libc::c_ulong == visited_packages as libc::c_ulong {
        pthread_mutex_lock(&mut lock.mutex);
        visited_packages = kh_init_ptr();
        tmp___0 = strdup(b"\0" as *const u8 as *const libc::c_char);
        hash_set(
            visited_packages,
            tmp___0,
            b"\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
        );
        pthread_mutex_unlock(&mut lock.mutex);
    }
    if 0 as libc::c_int == opts___0.force {
        if !pkg.is_null() {
            if !((*pkg).name).is_null() {
                pthread_mutex_lock(&mut lock.mutex);
                tmp___1 = hash_has(visited_packages, (*pkg).name);
                if tmp___1 != 0 {
                    pthread_mutex_unlock(&mut lock.mutex);
                    return 0 as libc::c_int;
                }
                pthread_mutex_unlock(&mut lock.mutex);
            }
        }
    }
    fetchs = 0 as *mut *mut fetch_package_file_thread_data_t;
    if 0 as *mut libc::c_void as libc::c_ulong != pkg as libc::c_ulong {
        if 0 as *mut libc::c_void as libc::c_ulong != (*pkg).src as libc::c_ulong {
            if (*(*pkg).src).len > 0 as libc::c_uint {
                tmp___2 = malloc(
                    ((*(*pkg).src).len as libc::c_ulong)
                        .wrapping_mul(
                            ::std::mem::size_of::<fetch_package_file_thread_data_t>()
                                as libc::c_ulong,
                        ),
                );
                fetchs = tmp___2 as *mut *mut fetch_package_file_thread_data_t;
            }
        }
    }
    if !fetchs.is_null() {
        memset(
            fetchs as *mut libc::c_void,
            0 as libc::c_int,
            ((*(*pkg).src).len as libc::c_ulong)
                .wrapping_mul(
                    ::std::mem::size_of::<fetch_package_file_thread_data_t>()
                        as libc::c_ulong,
                ),
        );
    }
    if pkg.is_null() {
        rc = -(1 as libc::c_int);
    } else if dir.is_null() {
        rc = -(1 as libc::c_int);
    } else {
        set_prefix(pkg, path_max);
        pkg_dir = path_join(dir, (*pkg).name as *const libc::c_char);
        if pkg_dir.is_null() {
            rc = -(1 as libc::c_int);
        } else {
            if opts___0.global == 0 {
                if (_debugger.name).is_null() {
                    debug_init(
                        &mut _debugger,
                        b"clib-package\0" as *const u8 as *const libc::c_char,
                    );
                }
                debug(
                    &mut _debugger as *mut debug_t,
                    b"mkdir -p %s\0" as *const u8 as *const libc::c_char,
                    pkg_dir,
                );
                tmp___3 = mkdirp(
                    pkg_dir as *const libc::c_char,
                    511 as libc::c_int as mode_t,
                );
                if -(1 as libc::c_int) == tmp___3 {
                    rc = -(1 as libc::c_int);
                    current_block = 8498429849164230495;
                } else {
                    current_block = 14001958660280927786;
                }
            } else {
                current_block = 14001958660280927786;
            }
            match current_block {
                8498429849164230495 => {}
                _ => {
                    if 0 as *mut libc::c_void as libc::c_ulong
                        == (*pkg).url as libc::c_ulong
                    {
                        (*pkg)
                            .url = clib_package_url(
                            (*pkg).author as *const libc::c_char,
                            (*pkg).repo_name as *const libc::c_char,
                            (*pkg).version as *const libc::c_char,
                        );
                        if 0 as *mut libc::c_void as libc::c_ulong
                            == (*pkg).url as libc::c_ulong
                        {
                            rc = -(1 as libc::c_int);
                            current_block = 8498429849164230495;
                        } else {
                            current_block = 2631791190359682872;
                        }
                    } else {
                        current_block = 2631791190359682872;
                    }
                    match current_block {
                        8498429849164230495 => {}
                        _ => {
                            package_json = path_join(
                                pkg_dir as *const libc::c_char,
                                (*pkg).filename as *const libc::c_char,
                            );
                            if package_json.is_null() {
                                rc = -(1 as libc::c_int);
                            } else {
                                if opts___0.global == 0 {
                                    if 0 as *mut libc::c_void as libc::c_ulong
                                        != (*pkg).src as libc::c_ulong
                                    {
                                        if (_debugger.name).is_null() {
                                            debug_init(
                                                &mut _debugger,
                                                b"clib-package\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        debug(
                                            &mut _debugger as *mut debug_t,
                                            b"write: %s\0" as *const u8 as *const libc::c_char,
                                            package_json,
                                        );
                                        tmp___4 = fs_write(
                                            package_json as *const libc::c_char,
                                            (*pkg).json as *const libc::c_char,
                                        );
                                        if -(1 as libc::c_int) == tmp___4 {
                                            if verbose != 0 {
                                                cc_fprintf(
                                                    CC_FG_DARK_RED,
                                                    stderr,
                                                    b"  %10s\0" as *const u8 as *const libc::c_char,
                                                    b"error\0" as *const u8 as *const libc::c_char,
                                                );
                                                fprintf(
                                                    stderr,
                                                    b" : \0" as *const u8 as *const libc::c_char,
                                                );
                                                cc_fprintf(
                                                    CC_FG_DARK_GRAY,
                                                    stderr,
                                                    b"Failed to write %s\0" as *const u8 as *const libc::c_char,
                                                    package_json,
                                                );
                                                fprintf(
                                                    stderr,
                                                    b"\n\0" as *const u8 as *const libc::c_char,
                                                );
                                            }
                                            rc = -(1 as libc::c_int);
                                            current_block = 8498429849164230495;
                                        } else {
                                            current_block = 54079586644752974;
                                        }
                                    } else {
                                        current_block = 54079586644752974;
                                    }
                                } else {
                                    current_block = 54079586644752974;
                                }
                                match current_block {
                                    8498429849164230495 => {}
                                    _ => {
                                        if !((*pkg).name).is_null() {
                                            pthread_mutex_lock(&mut lock.mutex);
                                            tmp___6 = hash_has(visited_packages, (*pkg).name);
                                            if tmp___6 == 0 {
                                                tmp___5 = strdup((*pkg).name as *const libc::c_char);
                                                hash_set(
                                                    visited_packages,
                                                    tmp___5,
                                                    b"t\0" as *const u8 as *const libc::c_char
                                                        as *mut libc::c_void,
                                                );
                                            }
                                            pthread_mutex_unlock(&mut lock.mutex);
                                        }
                                        if opts___0.global == 0 {
                                            if !((*pkg).makefile).is_null() {
                                                if (_debugger.name).is_null() {
                                                    debug_init(
                                                        &mut _debugger,
                                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                                    );
                                                }
                                                debug(
                                                    &mut _debugger as *mut debug_t,
                                                    b"fetch: %s/%s\0" as *const u8 as *const libc::c_char,
                                                    (*pkg).repo,
                                                    (*pkg).makefile,
                                                );
                                                fetch = 0 as *mut libc::c_void;
                                                rc = fetch_package_file(
                                                    pkg,
                                                    pkg_dir as *const libc::c_char,
                                                    (*pkg).makefile,
                                                    verbose,
                                                    &mut fetch,
                                                );
                                                if 0 as libc::c_int != rc {
                                                    current_block = 8498429849164230495;
                                                } else {
                                                    if 0 as *mut libc::c_void as libc::c_ulong
                                                        != fetch as libc::c_ulong
                                                    {
                                                        data = fetch as *mut fetch_package_file_thread_data_t;
                                                        pthread_join(
                                                            (*data).thread,
                                                            &mut status as *mut *mut libc::c_int
                                                                as *mut *mut libc::c_void,
                                                        );
                                                        if 0 as *mut libc::c_void as libc::c_ulong
                                                            != status as libc::c_ulong
                                                        {
                                                            rc = *status;
                                                            free(status as *mut libc::c_void);
                                                            status = 0 as *mut libc::c_int;
                                                            if 0 as libc::c_int != rc {
                                                                rc = 0 as libc::c_int;
                                                                cc_fprintf(
                                                                    CC_FG_DARK_YELLOW,
                                                                    stdout,
                                                                    b"  %10s\0" as *const u8 as *const libc::c_char,
                                                                    b"warning\0" as *const u8 as *const libc::c_char,
                                                                );
                                                                fprintf(
                                                                    stdout,
                                                                    b" : \0" as *const u8 as *const libc::c_char,
                                                                );
                                                                cc_fprintf(
                                                                    CC_FG_DARK_GRAY,
                                                                    stdout,
                                                                    b"unable to fetch Makefile (%s) for '%s'\0" as *const u8
                                                                        as *const libc::c_char,
                                                                    (*pkg).makefile,
                                                                    (*pkg).name,
                                                                );
                                                                fprintf(
                                                                    stdout,
                                                                    b"\n\0" as *const u8 as *const libc::c_char,
                                                                );
                                                            }
                                                        }
                                                    }
                                                    current_block = 4751196792806374320;
                                                }
                                            } else {
                                                current_block = 4751196792806374320;
                                            }
                                        } else {
                                            current_block = 4751196792806374320;
                                        }
                                        match current_block {
                                            8498429849164230495 => {}
                                            _ => {
                                                if opts___0.global != 0 {
                                                    current_block = 4442517277415410554;
                                                } else if 0 as *mut libc::c_void as libc::c_ulong
                                                        == (*pkg).src as libc::c_ulong
                                                    {
                                                    current_block = 4442517277415410554;
                                                } else {
                                                    pthread_mutex_lock(&mut lock.mutex);
                                                    tmp___8 = clib_cache_has_package(
                                                        (*pkg).author,
                                                        (*pkg).name,
                                                        (*pkg).version,
                                                    );
                                                    if tmp___8 != 0 {
                                                        if opts___0.skip_cache != 0 {
                                                            clib_cache_delete_package(
                                                                (*pkg).author,
                                                                (*pkg).name,
                                                                (*pkg).version,
                                                            );
                                                            pthread_mutex_unlock(&mut lock.mutex);
                                                            current_block = 10717220961742955937;
                                                        } else {
                                                            tmp___7 = clib_cache_load_package(
                                                                (*pkg).author,
                                                                (*pkg).name,
                                                                (*pkg).version,
                                                                pkg_dir,
                                                            );
                                                            if 0 as libc::c_int != tmp___7 {
                                                                pthread_mutex_unlock(&mut lock.mutex);
                                                                current_block = 10717220961742955937;
                                                            } else {
                                                                if verbose != 0 {
                                                                    cc_fprintf(
                                                                        CC_FG_CYAN,
                                                                        stdout,
                                                                        b"  %10s\0" as *const u8 as *const libc::c_char,
                                                                        b"cache\0" as *const u8 as *const libc::c_char,
                                                                    );
                                                                    fprintf(
                                                                        stdout,
                                                                        b" : \0" as *const u8 as *const libc::c_char,
                                                                    );
                                                                    cc_fprintf(
                                                                        CC_FG_DARK_GRAY,
                                                                        stdout,
                                                                        (*pkg).repo as *const libc::c_char,
                                                                    );
                                                                    fprintf(
                                                                        stdout,
                                                                        b"\n\0" as *const u8 as *const libc::c_char,
                                                                    );
                                                                }
                                                                pthread_mutex_unlock(&mut lock.mutex);
                                                                current_block = 4442517277415410554;
                                                            }
                                                        }
                                                    } else {
                                                        pthread_mutex_unlock(&mut lock.mutex);
                                                        current_block = 10717220961742955937;
                                                    }
                                                    match current_block {
                                                        4442517277415410554 => {}
                                                        _ => {
                                                            iterator = list_iterator_new((*pkg).src, LIST_HEAD);
                                                            's_636: loop {
                                                                source = list_iterator_next(iterator);
                                                                if source.is_null() {
                                                                    current_block = 11735322225073324345;
                                                                    break;
                                                                }
                                                                fetch___0 = 0 as *mut libc::c_void;
                                                                rc = fetch_package_file(
                                                                    pkg,
                                                                    pkg_dir as *const libc::c_char,
                                                                    (*source).val as *mut libc::c_char,
                                                                    verbose,
                                                                    &mut fetch___0,
                                                                );
                                                                if 0 as libc::c_int != rc {
                                                                    list_iterator_destroy(iterator);
                                                                    iterator = 0 as *mut libc::c_void as *mut list_iterator_t;
                                                                    rc = -(1 as libc::c_int);
                                                                    current_block = 8498429849164230495;
                                                                    break;
                                                                } else {
                                                                    if i < 0 as libc::c_int {
                                                                        i = 0 as libc::c_int;
                                                                    }
                                                                    let ref mut fresh0 = *fetchs.offset(i as isize);
                                                                    *fresh0 = fetch___0
                                                                        as *mut fetch_package_file_thread_data_t;
                                                                    pending += 1;
                                                                    if i < max - 1 as libc::c_int {
                                                                        i += 1;
                                                                    } else {
                                                                        j = 0 as libc::c_int;
                                                                        while j <= i {
                                                                            data___0 = *fetchs.offset(j as isize);
                                                                            pthread_join(
                                                                                (*data___0).thread,
                                                                                &mut status___0 as *mut *mut libc::c_int
                                                                                    as *mut *mut libc::c_void,
                                                                            );
                                                                            free(data___0 as *mut libc::c_void);
                                                                            let ref mut fresh1 = *fetchs.offset(j as isize);
                                                                            *fresh1 = 0 as *mut libc::c_void
                                                                                as *mut fetch_package_file_thread_data_t;
                                                                            pending -= 1;
                                                                            if 0 as *mut libc::c_void as libc::c_ulong
                                                                                != status___0 as libc::c_ulong
                                                                            {
                                                                                rc = *status___0;
                                                                                free(status___0 as *mut libc::c_void);
                                                                                status___0 = 0 as *mut libc::c_int;
                                                                            }
                                                                            if 0 as libc::c_int != rc {
                                                                                rc = -(1 as libc::c_int);
                                                                                current_block = 8498429849164230495;
                                                                                break 's_636;
                                                                            } else {
                                                                                j += 1;
                                                                            }
                                                                        }
                                                                        i = 0 as libc::c_int;
                                                                    }
                                                                }
                                                            }
                                                            match current_block {
                                                                8498429849164230495 => {}
                                                                _ => {
                                                                    j___0 = 0 as libc::c_int;
                                                                    loop {
                                                                        if !(j___0 < i) {
                                                                            current_block = 11508203296038873488;
                                                                            break;
                                                                        }
                                                                        data___1 = *fetchs.offset(j___0 as isize);
                                                                        pthread_join(
                                                                            (*data___1).thread,
                                                                            &mut status___1 as *mut *mut libc::c_int
                                                                                as *mut *mut libc::c_void,
                                                                        );
                                                                        pending -= 1;
                                                                        free(data___1 as *mut libc::c_void);
                                                                        let ref mut fresh2 = *fetchs.offset(j___0 as isize);
                                                                        *fresh2 = 0 as *mut libc::c_void
                                                                            as *mut fetch_package_file_thread_data_t;
                                                                        if 0 as *mut libc::c_void as libc::c_ulong
                                                                            != status___1 as libc::c_ulong
                                                                        {
                                                                            rc = *status___1;
                                                                            free(status___1 as *mut libc::c_void);
                                                                            status___1 = 0 as *mut libc::c_int;
                                                                        }
                                                                        if 0 as libc::c_int != rc {
                                                                            rc = -(1 as libc::c_int);
                                                                            current_block = 8498429849164230495;
                                                                            break;
                                                                        } else {
                                                                            j___0 += 1;
                                                                        }
                                                                    }
                                                                    match current_block {
                                                                        8498429849164230495 => {}
                                                                        _ => {
                                                                            pthread_mutex_lock(&mut lock.mutex);
                                                                            clib_cache_save_package(
                                                                                (*pkg).author,
                                                                                (*pkg).name,
                                                                                (*pkg).version,
                                                                                pkg_dir,
                                                                            );
                                                                            pthread_mutex_unlock(&mut lock.mutex);
                                                                            current_block = 4442517277415410554;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                match current_block {
                                                    8498429849164230495 => {}
                                                    _ => {
                                                        if !((*pkg).configure).is_null() {
                                                            rc = asprintf(
                                                                &mut command as *mut *mut libc::c_char,
                                                                b"cd %s/%s && %s\0" as *const u8 as *const libc::c_char,
                                                                dir,
                                                                (*pkg).name,
                                                                (*pkg).configure,
                                                            );
                                                            if -(1 as libc::c_int) == rc {
                                                                current_block = 8498429849164230495;
                                                            } else {
                                                                if (_debugger.name).is_null() {
                                                                    debug_init(
                                                                        &mut _debugger,
                                                                        b"clib-package\0" as *const u8 as *const libc::c_char,
                                                                    );
                                                                }
                                                                debug(
                                                                    &mut _debugger as *mut debug_t,
                                                                    b"command(configure): %s\0" as *const u8
                                                                        as *const libc::c_char,
                                                                    command,
                                                                );
                                                                rc = system(command as *const libc::c_char);
                                                                if 0 as libc::c_int != rc {
                                                                    current_block = 8498429849164230495;
                                                                } else {
                                                                    current_block = 654039154479240366;
                                                                }
                                                            }
                                                        } else {
                                                            current_block = 654039154479240366;
                                                        }
                                                        match current_block {
                                                            8498429849164230495 => {}
                                                            _ => {
                                                                if 0 as libc::c_int == rc {
                                                                    if !((*pkg).install).is_null() {
                                                                        rc = clib_package_install_executable(pkg, dir, verbose);
                                                                    }
                                                                }
                                                                if 0 as libc::c_int == rc {
                                                                    rc = clib_package_install_dependencies(pkg, dir, verbose);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if !pkg_dir.is_null() {
        free(pkg_dir as *mut libc::c_void);
    }
    if !package_json.is_null() {
        free(package_json as *mut libc::c_void);
    }
    if !iterator.is_null() {
        list_iterator_destroy(iterator);
    }
    if !command.is_null() {
        free(command as *mut libc::c_void);
    }
    if 0 as *mut libc::c_void as libc::c_ulong != pkg as libc::c_ulong {
        if 0 as *mut libc::c_void as libc::c_ulong != (*pkg).src as libc::c_ulong {
            if (*(*pkg).src).len > 0 as libc::c_uint {
                if !fetchs.is_null() {
                    free(fetchs as *mut libc::c_void);
                }
            }
        }
    }
    fetchs = 0 as *mut libc::c_void as *mut *mut fetch_package_file_thread_data_t;
    return rc;
}
pub unsafe extern "C" fn clib_package_install_dependencies(
    mut pkg: *mut clib_package_t,
    mut dir: *const libc::c_char,
    mut verbose: libc::c_int,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    if pkg.is_null() {
        return -(1 as libc::c_int)
    } else {
        if dir.is_null() {
            return -(1 as libc::c_int);
        }
    }
    if 0 as *mut libc::c_void as libc::c_ulong == (*pkg).dependencies as libc::c_ulong {
        return 0 as libc::c_int;
    }
    tmp = install_packages((*pkg).dependencies, dir, verbose);
    return tmp;
}
pub unsafe extern "C" fn clib_package_install_development(
    mut pkg: *mut clib_package_t,
    mut dir: *const libc::c_char,
    mut verbose: libc::c_int,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    if pkg.is_null() {
        return -(1 as libc::c_int)
    } else {
        if dir.is_null() {
            return -(1 as libc::c_int);
        }
    }
    if 0 as *mut libc::c_void as libc::c_ulong == (*pkg).development as libc::c_ulong {
        return 0 as libc::c_int;
    }
    tmp = install_packages((*pkg).development, dir, verbose);
    return tmp;
}
pub unsafe extern "C" fn clib_package_free(mut pkg: *mut clib_package_t) {
    if 0 as *mut libc::c_void as libc::c_ulong == pkg as libc::c_ulong {
        return;
    }
    if 0 as libc::c_uint != (*pkg).refs {
        return;
    }
    if !((*pkg).author).is_null() {
        free((*pkg).author as *mut libc::c_void);
        (*pkg).author = 0 as *mut libc::c_char;
    }
    if !((*pkg).description).is_null() {
        free((*pkg).description as *mut libc::c_void);
        (*pkg).description = 0 as *mut libc::c_char;
    }
    if !((*pkg).install).is_null() {
        free((*pkg).install as *mut libc::c_void);
        (*pkg).install = 0 as *mut libc::c_char;
    }
    if !((*pkg).json).is_null() {
        free((*pkg).json as *mut libc::c_void);
        (*pkg).json = 0 as *mut libc::c_char;
    }
    if !((*pkg).license).is_null() {
        free((*pkg).license as *mut libc::c_void);
        (*pkg).license = 0 as *mut libc::c_char;
    }
    if !((*pkg).name).is_null() {
        free((*pkg).name as *mut libc::c_void);
        (*pkg).name = 0 as *mut libc::c_char;
    }
    if !((*pkg).makefile).is_null() {
        free((*pkg).makefile as *mut libc::c_void);
        (*pkg).makefile = 0 as *mut libc::c_char;
    }
    if !((*pkg).configure).is_null() {
        free((*pkg).configure as *mut libc::c_void);
        (*pkg).configure = 0 as *mut libc::c_char;
    }
    if !((*pkg).repo).is_null() {
        free((*pkg).repo as *mut libc::c_void);
        (*pkg).repo = 0 as *mut libc::c_char;
    }
    if !((*pkg).repo_name).is_null() {
        free((*pkg).repo_name as *mut libc::c_void);
        (*pkg).repo_name = 0 as *mut libc::c_char;
    }
    if !((*pkg).url).is_null() {
        free((*pkg).url as *mut libc::c_void);
        (*pkg).url = 0 as *mut libc::c_char;
    }
    if !((*pkg).version).is_null() {
        free((*pkg).version as *mut libc::c_void);
        (*pkg).version = 0 as *mut libc::c_char;
    }
    if !((*pkg).flags).is_null() {
        free((*pkg).flags as *mut libc::c_void);
        (*pkg).flags = 0 as *mut libc::c_char;
    }
    if !((*pkg).src).is_null() {
        list_destroy((*pkg).src);
    }
    (*pkg).src = 0 as *mut list_t;
    if !((*pkg).dependencies).is_null() {
        list_destroy((*pkg).dependencies);
    }
    (*pkg).dependencies = 0 as *mut list_t;
    if !((*pkg).development).is_null() {
        list_destroy((*pkg).development);
    }
    (*pkg).development = 0 as *mut list_t;
    free(pkg as *mut libc::c_void);
    pkg = 0 as *mut clib_package_t;
}
pub unsafe extern "C" fn clib_package_dependency_free(mut _dep: *mut libc::c_void) {
    let mut dep: *mut clib_package_dependency_t = 0 as *mut clib_package_dependency_t;
    dep = _dep as *mut clib_package_dependency_t;
    free((*dep).name as *mut libc::c_void);
    free((*dep).author as *mut libc::c_void);
    free((*dep).version as *mut libc::c_void);
    free(dep as *mut libc::c_void);
}
pub unsafe extern "C" fn clib_package_cleanup() {
    let mut key: *const libc::c_char = 0 as *const libc::c_char;
    let mut val: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut k: khiter_t = 0;
    if 0 as *mut hash_t as libc::c_ulong != visited_packages as libc::c_ulong {
        k = 0 as libc::c_int as khint_t;
        while k < (*visited_packages).n_buckets {
            if !(*((*visited_packages).flags).offset((k >> 4 as libc::c_int) as isize)
                >> ((k & 15 as libc::c_uint) << 1 as libc::c_int) & 3 as libc::c_uint
                != 0)
            {
                key = *((*visited_packages).keys).offset(k as isize);
                val = *((*visited_packages).vals).offset(k as isize);
                free(key as *mut libc::c_void);
            }
            k = k.wrapping_add(1);
        }
        kh_destroy_ptr(visited_packages);
        visited_packages = 0 as *mut hash_t;
    }
    curl_share_cleanup(clib_package_curl_share);
}
static mut debugger___0: debug_t = debug_t {
    name: 0 as *const libc::c_char,
    color: 0,
    enabled: 0,
    stream: 0 as *const FILE as *mut FILE,
};
pub unsafe extern "C" fn clib_release_get_latest_tag() -> *const libc::c_char {
    let mut res: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut tmp: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut root_json: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut json_object___0: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tag_name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    debug_init(
        &mut debugger___0,
        b"clib-release-info\0" as *const u8 as *const libc::c_char,
    );
    tmp = http_get(
        b"https://api.github.com/repos/clibs/clib/releases/latest\0" as *const u8
            as *const libc::c_char,
    );
    res = tmp;
    root_json = 0 as *mut libc::c_void as *mut JSON_Value;
    json_object___0 = 0 as *mut libc::c_void as *mut JSON_Object;
    tag_name = 0 as *mut libc::c_void as *mut libc::c_char;
    if (*res).ok == 0 {
        debug(
            &mut debugger___0 as *mut debug_t,
            b"Couldn't lookup latest release\0" as *const u8 as *const libc::c_char,
        );
    } else {
        root_json = json_parse_string((*res).data as *const libc::c_char);
        if root_json.is_null() {
            debug(
                &mut debugger___0 as *mut debug_t,
                b"Unable to parse release JSON response\0" as *const u8
                    as *const libc::c_char,
            );
        } else {
            json_object___0 = json_value_get_object(root_json as *const JSON_Value);
            if json_object___0.is_null() {
                debug(
                    &mut debugger___0 as *mut debug_t,
                    b"Unable to parse release JSON response object\0" as *const u8
                        as *const libc::c_char,
                );
            } else {
                tmp___0 = json_object_get_string(
                    json_object___0 as *const JSON_Object,
                    b"tag_name\0" as *const u8 as *const libc::c_char,
                );
                tag_name = strdup(tmp___0);
                if tag_name.is_null() {
                    debug(
                        &mut debugger___0 as *mut debug_t,
                        b"strudp(tag_name) failed\0" as *const u8 as *const libc::c_char,
                    );
                }
            }
        }
    }
    if !root_json.is_null() {
        json_value_free(root_json);
    }
    http_get_free(res);
    return tag_name as *const libc::c_char;
}
pub unsafe extern "C" fn clib_validate(mut file: *const libc::c_char) -> libc::c_int {
    let mut repo: *const libc::c_char = 0 as *const libc::c_char;
    let mut repo_owner: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut repo_name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut rc: libc::c_int = 0;
    let mut root: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut obj: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut src: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: libc::c_int = 0;
    let mut __name: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    let mut __version: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___1: *const libc::c_char = 0 as *const libc::c_char;
    let mut __description: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___2: *const libc::c_char = 0 as *const libc::c_char;
    let mut __license: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___3: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___4: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut tmp___5: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___6: JSON_Value_Type = 0;
    repo = 0 as *mut libc::c_void as *const libc::c_char;
    repo_owner = 0 as *mut libc::c_void as *mut libc::c_char;
    repo_name = 0 as *mut libc::c_void as *mut libc::c_char;
    rc = 0 as libc::c_int;
    root = 0 as *mut libc::c_void as *mut JSON_Value;
    obj = 0 as *mut libc::c_void as *mut JSON_Object;
    src = 0 as *mut libc::c_void as *mut JSON_Value;
    tmp = fs_exists(file);
    if -(1 as libc::c_int) == tmp {
        rc = 1 as libc::c_int;
        cc_fprintf(
            CC_FG_DARK_RED,
            stderr,
            b"  %10s\0" as *const u8 as *const libc::c_char,
            b"error\0" as *const u8 as *const libc::c_char,
        );
        fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
        cc_fprintf(
            CC_FG_DARK_GRAY,
            stderr,
            b"no such file: %s\0" as *const u8 as *const libc::c_char,
            file,
        );
        fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
    } else {
        root = json_parse_file(file);
        if root.is_null() {
            rc = 1 as libc::c_int;
            cc_fprintf(
                CC_FG_DARK_RED,
                stderr,
                b"  %10s\0" as *const u8 as *const libc::c_char,
                b"error\0" as *const u8 as *const libc::c_char,
            );
            fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
            cc_fprintf(
                CC_FG_DARK_GRAY,
                stderr,
                b"malformed file: %s\0" as *const u8 as *const libc::c_char,
                file,
            );
            fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        } else {
            obj = json_value_get_object(root as *const JSON_Value);
            if obj.is_null() {
                rc = 1 as libc::c_int;
                cc_fprintf(
                    CC_FG_DARK_RED,
                    stderr,
                    b"  %10s\0" as *const u8 as *const libc::c_char,
                    b"error\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
                cc_fprintf(
                    CC_FG_DARK_GRAY,
                    stderr,
                    b"malformed file: %s\0" as *const u8 as *const libc::c_char,
                    file,
                );
                fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
            } else {
                tmp___0 = json_object_get_string(
                    obj as *const JSON_Object,
                    b"name\0" as *const u8 as *const libc::c_char,
                );
                __name = tmp___0;
                if __name.is_null() {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"warning\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"missing \"name\" in  %s\0" as *const u8 as *const libc::c_char,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                }
                tmp___1 = json_object_get_string(
                    obj as *const JSON_Object,
                    b"version\0" as *const u8 as *const libc::c_char,
                );
                __version = tmp___1;
                if __version.is_null() {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"warning\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"missing \"version\" in  %s\0" as *const u8
                            as *const libc::c_char,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                }
                repo = json_object_get_string(
                    obj as *const JSON_Object,
                    b"repo\0" as *const u8 as *const libc::c_char,
                );
                if repo.is_null() {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"warning\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"missing \"repo\" in  %s\0" as *const u8 as *const libc::c_char,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                } else {
                    repo_name = parse_repo_name(repo);
                    if repo_name.is_null() {
                        cc_fprintf(
                            CC_FG_DARK_YELLOW,
                            stdout,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"warning\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(
                            CC_FG_DARK_GRAY,
                            stdout,
                            b"invalid repo\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                    }
                    repo_owner = parse_repo_owner(
                        repo,
                        0 as *mut libc::c_void as *const libc::c_char,
                    );
                    if repo_owner.is_null() {
                        cc_fprintf(
                            CC_FG_DARK_YELLOW,
                            stdout,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"warning\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(
                            CC_FG_DARK_GRAY,
                            stdout,
                            b"invalid repo\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                    }
                }
                tmp___2 = json_object_get_string(
                    obj as *const JSON_Object,
                    b"description\0" as *const u8 as *const libc::c_char,
                );
                __description = tmp___2;
                if __description.is_null() {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"warning\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"missing \"description\" in  %s\0" as *const u8
                            as *const libc::c_char,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                }
                tmp___3 = json_object_get_string(
                    obj as *const JSON_Object,
                    b"license\0" as *const u8 as *const libc::c_char,
                );
                __license = tmp___3;
                if __license.is_null() {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"warning\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"missing \"license\" in  %s\0" as *const u8
                            as *const libc::c_char,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                }
                tmp___4 = json_object_get_array(
                    obj as *const JSON_Object,
                    b"keywords\0" as *const u8 as *const libc::c_char,
                );
                if tmp___4.is_null() {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"warning\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"missing \"keywords\" in  %s\0" as *const u8
                            as *const libc::c_char,
                        file,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                }
                src = json_object_get_value(
                    obj as *const JSON_Object,
                    b"src\0" as *const u8 as *const libc::c_char,
                );
                if src.is_null() {
                    tmp___5 = json_object_get_string(
                        obj as *const JSON_Object,
                        b"install\0" as *const u8 as *const libc::c_char,
                    );
                    if tmp___5.is_null() {
                        rc = 1 as libc::c_int;
                        cc_fprintf(
                            CC_FG_DARK_RED,
                            stderr,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"error\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(
                            CC_FG_DARK_GRAY,
                            stderr,
                            b"Must have either src or install defined in %s\0"
                                as *const u8 as *const libc::c_char,
                            file,
                        );
                        fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
                    }
                } else {
                    tmp___6 = json_value_get_type(src as *const JSON_Value);
                    if tmp___6 != 5 as libc::c_int {
                        cc_fprintf(
                            CC_FG_DARK_YELLOW,
                            stdout,
                            b"  %10s\0" as *const u8 as *const libc::c_char,
                            b"warning\0" as *const u8 as *const libc::c_char,
                        );
                        fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                        cc_fprintf(
                            CC_FG_DARK_GRAY,
                            stdout,
                            b"src should be an array\0" as *const u8
                                as *const libc::c_char,
                        );
                        fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                    }
                }
            }
        }
    }
    if !root.is_null() {
        json_value_free(root);
    }
    return rc;
}
pub static mut manifest_names: [*const libc::c_char; 3] = [
    b"clib.json\0" as *const u8 as *const libc::c_char,
    b"package.json\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
pub static mut package_opts: clib_package_opts_t = {
    let mut init = __anonstruct_clib_package_opts_t_1001569764 {
        skip_cache: 0 as libc::c_int,
        force: 0 as libc::c_int,
        global: 0 as libc::c_int,
        prefix: 0 as *const libc::c_char as *mut libc::c_char,
        concurrency: 0 as libc::c_int,
        token: 0 as *const libc::c_char as *mut libc::c_char,
    };
    init
};
pub static mut root_package: *mut clib_package_t = 0 as *const clib_package_t
    as *mut clib_package_t;
pub static mut program: command_t = {
    let mut init = command {
        data: 0 as *const libc::c_void as *mut libc::c_void,
        usage: 0 as *const libc::c_char,
        arg: 0 as *const libc::c_char,
        name: 0 as *const libc::c_char,
        version: 0 as *const libc::c_char,
        option_count: 0 as libc::c_int,
        options: [
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
            {
                let mut init = __anonstruct_command_option_t_246293268 {
                    optional_arg: 0 as libc::c_int,
                    required_arg: 0 as libc::c_int,
                    argname: 0 as *const libc::c_char as *mut libc::c_char,
                    large: 0 as *const libc::c_char as *mut libc::c_char,
                    small: 0 as *const libc::c_char,
                    large_with_arg: 0 as *const libc::c_char,
                    description: 0 as *const libc::c_char,
                    cb: None,
                };
                init
            },
        ],
        argc: 0 as libc::c_int,
        argv: [
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
            0 as *const libc::c_char as *mut libc::c_char,
        ],
        nargv: 0 as *const *mut libc::c_char as *mut *mut libc::c_char,
    };
    init
};
pub static mut debugger: debug_t = {
    let mut init = __anonstruct_debug_t_712518223 {
        name: 0 as *const libc::c_char,
        color: 0 as libc::c_int,
        enabled: 0 as libc::c_int,
        stream: 0 as *const FILE as *mut FILE,
    };
    init
};
pub static mut built: *mut hash_t = 0 as *const hash_t as *mut hash_t;
pub static mut rest_argv: *mut *mut libc::c_char = 0 as *const *mut libc::c_char
    as *mut *mut libc::c_char;
pub static mut rest_offset: libc::c_int = 0 as libc::c_int;
pub static mut rest_argc: libc::c_int = 0 as libc::c_int;
pub static mut opts: options_t = {
    let mut init = options {
        dir: b"./deps\0" as *const u8 as *const libc::c_char,
        prefix: 0 as *const libc::c_char as *mut libc::c_char,
        force: 0 as libc::c_int,
        verbose: 1 as libc::c_int,
        dev: 0 as libc::c_int,
        skip_cache: 0 as libc::c_int,
        global: 0 as libc::c_int,
        clean: 0 as *const libc::c_char as *mut libc::c_char,
        test: 0 as *const libc::c_char as *mut libc::c_char,
        concurrency: 12 as libc::c_uint,
    };
    init
};
pub static mut mutex: pthread_mutex_t = __anonunion_pthread_mutex_t_335460617 {
    __data: {
        let mut init = __pthread_mutex_s {
            __lock: 0 as libc::c_int,
            __count: 0 as libc::c_uint,
            __owner: 0 as libc::c_int,
            __nusers: 0 as libc::c_uint,
            __kind: 0 as libc::c_int,
            __spins: 0 as libc::c_int as libc::c_short,
            __elision: 0 as libc::c_int as libc::c_short,
            __list: {
                let mut init = __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list
                        as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list
                        as *mut __pthread_internal_list,
                };
                init
            },
        };
        init
    },
};
pub unsafe extern "C" fn build_package_with_manifest_name_thread(
    mut arg: *mut libc::c_void,
) -> *mut libc::c_void {
    let mut wrap: *mut clib_package_thread_t = 0 as *mut clib_package_thread_t;
    let mut dir: *const libc::c_char = 0 as *const libc::c_char;
    wrap = arg as *mut clib_package_thread_t;
    dir = (*wrap).dir;
    build_package(dir);
    return 0 as *mut libc::c_void;
}
pub unsafe extern "C" fn build_package_with_manifest_name(
    mut dir: *const libc::c_char,
    mut file: *const libc::c_char,
) -> libc::c_int {
    let mut current_block: u64;
    let mut package: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut json: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut ok: libc::c_int = 0;
    let mut rc: libc::c_int = 0;
    let mut path_max: libc::c_long = 0;
    let mut path: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut name: *const libc::c_char = 0 as *const libc::c_char;
    let mut json___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut i: libc::c_uint = 0;
    let mut size: libc::c_ulong = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut makefile: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut command: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut args: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___6: *const libc::c_char = 0 as *const libc::c_char;
    let mut clean: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut flags: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut cflags: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___7: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size___0: libc::c_ulong = 0;
    let mut tmp___8: size_t = 0;
    let mut tmp___9: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut clean___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut make: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___10: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___11: *const libc::c_char = 0 as *const libc::c_char;
    let mut iterator: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut i___0: libc::c_uint = 0;
    let mut dep: *mut clib_package_dependency_t = 0 as *mut clib_package_dependency_t;
    let mut slug: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut dep_dir: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut dependency: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut tmp___12: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut wrap: *mut clib_package_thread_t = 0 as *mut clib_package_thread_t;
    let mut thread: *mut pthread_t = 0 as *mut pthread_t;
    let mut j: libc::c_int = 0;
    let mut j___0: libc::c_int = 0;
    let mut iterator___0: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut node___0: *mut list_node_t = 0 as *mut list_node_t;
    let mut i___1: libc::c_uint = 0;
    let mut dep___0: *mut clib_package_dependency_t = 0
        as *mut clib_package_dependency_t;
    let mut slug___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut dependency___0: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut tmp___13: *mut clib_package_t = 0 as *mut clib_package_t;
    let mut dep_dir___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___14: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut wrap___0: *mut clib_package_thread_t = 0 as *mut clib_package_thread_t;
    let mut thread___0: *mut pthread_t = 0 as *mut pthread_t;
    let mut j___1: libc::c_int = 0;
    let mut j___2: libc::c_int = 0;
    package = 0 as *mut clib_package_t;
    json = 0 as *mut libc::c_char;
    ok = 0 as libc::c_int;
    rc = 0 as libc::c_int;
    path_max = 4096 as libc::c_long;
    tmp = path_join(dir, file);
    path = tmp;
    if 0 as *mut libc::c_char as libc::c_ulong == path as libc::c_ulong {
        return -(12 as libc::c_int);
    }
    pthread_mutex_lock(&mut mutex);
    if root_package.is_null() {
        name = 0 as *mut libc::c_void as *const libc::c_char;
        json___0 = 0 as *mut libc::c_void as *mut libc::c_char;
        i = 0 as libc::c_uint;
        loop {
            name = manifest_names[i as usize];
            json___0 = fs_read(name);
            i = i.wrapping_add(1);
            if !(0 as *mut libc::c_void as libc::c_ulong
                != manifest_names[i as usize] as libc::c_ulong)
            {
                break;
            }
            if !json___0.is_null() {
                break;
            }
        }
        if !json___0.is_null() {
            root_package = clib_package_new(
                json___0 as *const libc::c_char,
                opts.verbose,
            );
        }
        if !root_package.is_null() {
            if !((*root_package).prefix).is_null() {
                let vla = path_max as usize;
                let mut prefix: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla);
                memset(
                    prefix.as_mut_ptr() as *mut libc::c_void,
                    0 as libc::c_int,
                    path_max as size_t,
                );
                realpath(
                    (*root_package).prefix as *const libc::c_char,
                    prefix.as_mut_ptr(),
                );
                tmp___0 = strlen(prefix.as_mut_ptr() as *const libc::c_char);
                size = tmp___0.wrapping_add(1 as libc::c_ulong);
                free((*root_package).prefix as *mut libc::c_void);
                tmp___1 = malloc(size);
                (*root_package).prefix = tmp___1 as *mut libc::c_char;
                memset(
                    (*root_package).prefix as *mut libc::c_void,
                    0 as libc::c_int,
                    size,
                );
                memcpy(
                    (*root_package).prefix as *mut libc::c_void,
                    prefix.as_mut_ptr() as *const libc::c_void,
                    size,
                );
            }
        }
    }
    tmp___2 = hash_has(built, path);
    if tmp___2 != 0 {
        pthread_mutex_unlock(&mut mutex);
    } else {
        pthread_mutex_unlock(&mut mutex);
        tmp___3 = fs_exists(path as *const libc::c_char);
        if 0 as libc::c_int == tmp___3 {
            debug(
                &mut debugger as *mut debug_t,
                b"read %s\0" as *const u8 as *const libc::c_char,
                path,
            );
            json = fs_read(path as *const libc::c_char);
        }
        if 0 as *mut libc::c_char as libc::c_ulong != json as libc::c_ulong {
            package = clib_package_new(json as *const libc::c_char, 0 as libc::c_int);
        } else {
            package = clib_package_new_from_slug(dir, 0 as libc::c_int);
        }
        if 0 as *mut clib_package_t as libc::c_ulong == package as libc::c_ulong {
            rc = -(12 as libc::c_int);
        } else {
            if 0 as *mut libc::c_char as libc::c_ulong
                != (*package).makefile as libc::c_ulong
            {
                tmp___4 = path_join(dir, (*package).makefile as *const libc::c_char);
                makefile = tmp___4;
                command = 0 as *mut libc::c_char;
                if rest_argc > 0 as libc::c_int {
                    tmp___5 = str_flatten(
                        rest_argv as *mut *const libc::c_char,
                        0 as libc::c_int,
                        rest_argc,
                    );
                    tmp___6 = tmp___5 as *const libc::c_char;
                } else {
                    tmp___6 = b"\0" as *const u8 as *const libc::c_char;
                }
                args = tmp___6 as *mut libc::c_char;
                clean = 0 as *mut libc::c_char;
                flags = 0 as *mut libc::c_char;
                tmp___7 = getenv(b"CFLAGS\0" as *const u8 as *const libc::c_char);
                cflags = tmp___7;
                if !cflags.is_null() {
                    asprintf(
                        &mut flags as *mut *mut libc::c_char,
                        b"%s -I %s\0" as *const u8 as *const libc::c_char,
                        cflags,
                        opts.dir,
                    );
                } else {
                    asprintf(
                        &mut flags as *mut *mut libc::c_char,
                        b"-I %s\0" as *const u8 as *const libc::c_char,
                        opts.dir,
                    );
                }
                let mut current_block_87: u64;
                if !root_package.is_null() {
                    if !((*root_package).prefix).is_null() {
                        package_opts.prefix = (*root_package).prefix;
                        clib_package_set_opts(package_opts);
                        setenv(
                            b"PREFIX\0" as *const u8 as *const libc::c_char,
                            package_opts.prefix as *const libc::c_char,
                            1 as libc::c_int,
                        );
                        current_block_87 = 18425699056680496821;
                    } else {
                        current_block_87 = 5895273506226149527;
                    }
                } else {
                    current_block_87 = 5895273506226149527;
                }
                match current_block_87 {
                    5895273506226149527 => {
                        if !(opts.prefix).is_null() {
                            setenv(
                                b"PREFIX\0" as *const u8 as *const libc::c_char,
                                opts.prefix as *const libc::c_char,
                                1 as libc::c_int,
                            );
                        } else if !((*package).prefix).is_null() {
                            let vla_0 = path_max as usize;
                            let mut prefix___0: Vec::<libc::c_char> = ::std::vec::from_elem(
                                0,
                                vla_0,
                            );
                            memset(
                                prefix___0.as_mut_ptr() as *mut libc::c_void,
                                0 as libc::c_int,
                                path_max as size_t,
                            );
                            realpath(
                                (*package).prefix as *const libc::c_char,
                                prefix___0.as_mut_ptr(),
                            );
                            tmp___8 = strlen(
                                prefix___0.as_mut_ptr() as *const libc::c_char,
                            );
                            size___0 = tmp___8.wrapping_add(1 as libc::c_ulong);
                            free((*package).prefix as *mut libc::c_void);
                            tmp___9 = malloc(size___0);
                            (*package).prefix = tmp___9 as *mut libc::c_char;
                            memset(
                                (*package).prefix as *mut libc::c_void,
                                0 as libc::c_int,
                                size___0,
                            );
                            memcpy(
                                (*package).prefix as *mut libc::c_void,
                                prefix___0.as_mut_ptr() as *const libc::c_void,
                                size___0,
                            );
                            setenv(
                                b"PREFIX\0" as *const u8 as *const libc::c_char,
                                (*package).prefix as *const libc::c_char,
                                1 as libc::c_int,
                            );
                        }
                    }
                    _ => {}
                }
                setenv(
                    b"CFLAGS\0" as *const u8 as *const libc::c_char,
                    flags as *const libc::c_char,
                    1 as libc::c_int,
                );
                if !(opts.clean).is_null() {
                    clean___0 = 0 as *mut libc::c_char;
                    asprintf(
                        &mut clean___0 as *mut *mut libc::c_char,
                        b"make -C %s -f %s %s\0" as *const u8 as *const libc::c_char,
                        dir,
                        makefile,
                        opts.clean,
                    );
                }
                make = 0 as *mut libc::c_char;
                if !(opts.test).is_null() {
                    asprintf(
                        &mut make as *mut *mut libc::c_char,
                        b"make -n -C %s -f %s %s >/dev/null 2>&1 && make -C %s -f %s %s\0"
                            as *const u8 as *const libc::c_char,
                        dir,
                        makefile,
                        opts.test,
                        dir,
                        makefile,
                        opts.test,
                    );
                } else {
                    asprintf(
                        &mut make as *mut *mut libc::c_char,
                        b"make -n -C %s -f %s >/dev/null 2>&1 && make -C %s -f %s\0"
                            as *const u8 as *const libc::c_char,
                        dir,
                        makefile,
                        dir,
                        makefile,
                    );
                }
                if opts.force != 0 {
                    tmp___10 = b"-B\0" as *const u8 as *const libc::c_char;
                } else {
                    tmp___10 = b"\0" as *const u8 as *const libc::c_char;
                }
                if !clean.is_null() {
                    tmp___11 = clean as *const libc::c_char;
                } else {
                    tmp___11 = b":\0" as *const u8 as *const libc::c_char;
                }
                asprintf(
                    &mut command as *mut *mut libc::c_char,
                    b"%s && %s %s %s\0" as *const u8 as *const libc::c_char,
                    tmp___11,
                    make,
                    tmp___10,
                    args,
                );
                if 0 as libc::c_int != opts.verbose {
                    cc_fprintf(
                        CC_FG_DARK_YELLOW,
                        stdout,
                        b"  %10s\0" as *const u8 as *const libc::c_char,
                        b"build\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                    cc_fprintf(
                        CC_FG_DARK_GRAY,
                        stdout,
                        b"%s: %s\0" as *const u8 as *const libc::c_char,
                        (*package).name,
                        (*package).makefile,
                    );
                    fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
                }
                debug(
                    &mut debugger as *mut debug_t,
                    b"system: %s\0" as *const u8 as *const libc::c_char,
                    command,
                );
                rc = system(command as *const libc::c_char);
                free(command as *mut libc::c_void);
                if !clean.is_null() {
                    free(clean as *mut libc::c_void);
                }
                free(makefile as *mut libc::c_void);
                free(make as *mut libc::c_void);
                free(flags as *mut libc::c_void);
                if rest_argc > 0 as libc::c_int {
                    free(args as *mut libc::c_void);
                }
                command = 0 as *mut libc::c_char;
                rc = pthread_mutex_lock(&mut mutex);
                hash_set(
                    built,
                    path,
                    b"t\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
                );
                ok = 1 as libc::c_int;
            } else {
                rc = pthread_mutex_lock(&mut mutex);
                hash_set(
                    built,
                    path,
                    b"f\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
                );
                ok = 1 as libc::c_int;
            }
            if !(0 as libc::c_int != rc) {
                pthread_mutex_unlock(&mut mutex);
                if 0 as *mut list_t as libc::c_ulong
                    != (*package).dependencies as libc::c_ulong
                {
                    iterator = 0 as *mut list_iterator_t;
                    node = 0 as *mut list_node_t;
                    let vla_1 = opts.concurrency as usize;
                    let mut wraps: Vec::<clib_package_thread_t> = ::std::vec::from_elem(
                        clib_package_thread_t {
                            dir: 0 as *const libc::c_char,
                        },
                        vla_1,
                    );
                    let vla_2 = opts.concurrency as usize;
                    let mut threads: Vec::<pthread_t> = ::std::vec::from_elem(0, vla_2);
                    i___0 = 0 as libc::c_uint;
                    iterator = list_iterator_new((*package).dependencies, LIST_HEAD);
                    loop {
                        node = list_iterator_next(iterator);
                        if node.is_null() {
                            current_block = 8953117030348968745;
                            break;
                        }
                        dep = (*node).val as *mut clib_package_dependency_t;
                        slug = 0 as *mut libc::c_char;
                        dep_dir = 0 as *mut libc::c_char;
                        asprintf(
                            &mut slug as *mut *mut libc::c_char,
                            b"%s/%s@%s\0" as *const u8 as *const libc::c_char,
                            (*dep).author,
                            (*dep).name,
                            (*dep).version,
                        );
                        tmp___12 = clib_package_new_from_slug(
                            slug as *const libc::c_char,
                            0 as libc::c_int,
                        );
                        dependency = tmp___12;
                        if !(opts.dir).is_null() {
                            if !dependency.is_null() {
                                if !((*dependency).name).is_null() {
                                    dep_dir = path_join(
                                        opts.dir,
                                        (*dependency).name as *const libc::c_char,
                                    );
                                }
                            }
                        }
                        free(slug as *mut libc::c_void);
                        clib_package_free(dependency);
                        if 0 as *mut libc::c_char as libc::c_ulong
                            == dep_dir as libc::c_ulong
                        {
                            rc = -(12 as libc::c_int);
                            current_block = 1745880274448691838;
                            break;
                        } else {
                            wrap = &mut *wraps.as_mut_ptr().offset(i___0 as isize)
                                as *mut clib_package_thread_t;
                            thread = &mut *threads.as_mut_ptr().offset(i___0 as isize)
                                as *mut pthread_t;
                            (*wrap).dir = dep_dir as *const libc::c_char;
                            rc = pthread_create(
                                thread,
                                0 as *const pthread_attr_t,
                                Some(
                                    build_package_with_manifest_name_thread
                                        as unsafe extern "C" fn(
                                            *mut libc::c_void,
                                        ) -> *mut libc::c_void,
                                ),
                                wrap as *mut libc::c_void,
                            );
                            i___0 = i___0.wrapping_add(1);
                            if i___0 >= opts.concurrency {
                                j = 0 as libc::c_int;
                                while (j as libc::c_uint) < i___0 {
                                    pthread_join(
                                        *threads.as_mut_ptr().offset(j as isize),
                                        0 as *mut *mut libc::c_void,
                                    );
                                    free(
                                        (*wraps.as_mut_ptr().offset(j as isize)).dir
                                            as *mut libc::c_void,
                                    );
                                    j += 1;
                                }
                                i___0 = 0 as libc::c_uint;
                            }
                            usleep(10240 as libc::c_int as __useconds_t);
                        }
                    }
                    match current_block {
                        1745880274448691838 => {}
                        _ => {
                            j___0 = 0 as libc::c_int;
                            while (j___0 as libc::c_uint) < i___0 {
                                pthread_join(
                                    *threads.as_mut_ptr().offset(j___0 as isize),
                                    0 as *mut *mut libc::c_void,
                                );
                                free(
                                    (*wraps.as_mut_ptr().offset(j___0 as isize)).dir
                                        as *mut libc::c_void,
                                );
                                j___0 += 1;
                            }
                            if 0 as *mut list_iterator_t as libc::c_ulong
                                != iterator as libc::c_ulong
                            {
                                list_iterator_destroy(iterator);
                            }
                            current_block = 10517665100358322178;
                        }
                    }
                } else {
                    current_block = 10517665100358322178;
                }
                match current_block {
                    1745880274448691838 => {}
                    _ => {
                        if opts.dev != 0 {
                            if 0 as *mut list_t as libc::c_ulong
                                != (*package).development as libc::c_ulong
                            {
                                iterator___0 = 0 as *mut list_iterator_t;
                                node___0 = 0 as *mut list_node_t;
                                let vla_3 = opts.concurrency as usize;
                                let mut wraps___0: Vec::<clib_package_thread_t> = ::std::vec::from_elem(
                                    clib_package_thread_t {
                                        dir: 0 as *const libc::c_char,
                                    },
                                    vla_3,
                                );
                                let vla_4 = opts.concurrency as usize;
                                let mut threads___0: Vec::<pthread_t> = ::std::vec::from_elem(
                                    0,
                                    vla_4,
                                );
                                i___1 = 0 as libc::c_uint;
                                iterator___0 = list_iterator_new(
                                    (*package).development,
                                    LIST_HEAD,
                                );
                                loop {
                                    node___0 = list_iterator_next(iterator___0);
                                    if node___0.is_null() {
                                        break;
                                    }
                                    dep___0 = (*node___0).val as *mut clib_package_dependency_t;
                                    slug___0 = 0 as *mut libc::c_char;
                                    asprintf(
                                        &mut slug___0 as *mut *mut libc::c_char,
                                        b"%s/%s@%s\0" as *const u8 as *const libc::c_char,
                                        (*dep___0).author,
                                        (*dep___0).name,
                                        (*dep___0).version,
                                    );
                                    tmp___13 = clib_package_new_from_slug(
                                        slug___0 as *const libc::c_char,
                                        0 as libc::c_int,
                                    );
                                    dependency___0 = tmp___13;
                                    tmp___14 = path_join(
                                        opts.dir,
                                        (*dependency___0).name as *const libc::c_char,
                                    );
                                    dep_dir___0 = tmp___14;
                                    free(slug___0 as *mut libc::c_void);
                                    clib_package_free(dependency___0);
                                    wrap___0 = &mut *wraps___0
                                        .as_mut_ptr()
                                        .offset(i___1 as isize) as *mut clib_package_thread_t;
                                    thread___0 = &mut *threads___0
                                        .as_mut_ptr()
                                        .offset(i___1 as isize) as *mut pthread_t;
                                    (*wrap___0).dir = dep_dir___0 as *const libc::c_char;
                                    rc = pthread_create(
                                        thread___0,
                                        0 as *const pthread_attr_t,
                                        Some(
                                            build_package_with_manifest_name_thread
                                                as unsafe extern "C" fn(
                                                    *mut libc::c_void,
                                                ) -> *mut libc::c_void,
                                        ),
                                        wrap___0 as *mut libc::c_void,
                                    );
                                    i___1 = i___1.wrapping_add(1);
                                    if i___1 >= opts.concurrency {
                                        j___1 = 0 as libc::c_int;
                                        while (j___1 as libc::c_uint) < i___1 {
                                            pthread_join(
                                                *threads___0.as_mut_ptr().offset(j___1 as isize),
                                                0 as *mut *mut libc::c_void,
                                            );
                                            free(
                                                (*wraps___0.as_mut_ptr().offset(j___1 as isize)).dir
                                                    as *mut libc::c_void,
                                            );
                                            j___1 += 1;
                                        }
                                        i___1 = 0 as libc::c_uint;
                                    }
                                    usleep(10240 as libc::c_int as __useconds_t);
                                }
                                j___2 = 0 as libc::c_int;
                                while (j___2 as libc::c_uint) < i___1 {
                                    pthread_join(
                                        *threads___0.as_mut_ptr().offset(j___2 as isize),
                                        0 as *mut *mut libc::c_void,
                                    );
                                    free(
                                        (*wraps___0.as_mut_ptr().offset(j___2 as isize)).dir
                                            as *mut libc::c_void,
                                    );
                                    j___2 += 1;
                                }
                                if 0 as *mut list_iterator_t as libc::c_ulong
                                    != iterator___0 as libc::c_ulong
                                {
                                    list_iterator_destroy(iterator___0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if 0 as *mut clib_package_t as libc::c_ulong != package as libc::c_ulong {
        clib_package_free(package);
    }
    if 0 as *mut libc::c_char as libc::c_ulong != json as libc::c_ulong {
        free(json as *mut libc::c_void);
    }
    if 0 as libc::c_int == ok {
        if 0 as *mut libc::c_char as libc::c_ulong != path as libc::c_ulong {
            free(path as *mut libc::c_void);
        }
    }
    return rc;
}
pub unsafe extern "C" fn build_package(mut dir: *const libc::c_char) -> libc::c_int {
    let mut name: *const libc::c_char = 0 as *const libc::c_char;
    let mut i: libc::c_uint = 0;
    let mut rc: libc::c_int = 0;
    name = 0 as *mut libc::c_void as *const libc::c_char;
    i = 0 as libc::c_uint;
    rc = 0 as libc::c_int;
    loop {
        name = manifest_names[i as usize];
        rc = build_package_with_manifest_name(dir, name);
        i = i.wrapping_add(1);
        if !(0 as *mut libc::c_void as libc::c_ulong
            != manifest_names[i as usize] as libc::c_ulong)
        {
            break;
        }
        if !(0 as libc::c_int != rc) {
            break;
        }
    }
    return rc;
}
unsafe extern "C" fn setopt_skip_cache(mut self_0: *mut command_t) {
    opts.skip_cache = 1 as libc::c_int;
    debug(
        &mut debugger as *mut debug_t,
        b"set skip cache flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_dev(mut self_0: *mut command_t) {
    opts.dev = 1 as libc::c_int;
    debug(
        &mut debugger as *mut debug_t,
        b"set dev flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_force(mut self_0: *mut command_t) {
    opts.force = 1 as libc::c_int;
    debug(
        &mut debugger as *mut debug_t,
        b"set force flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_global(mut self_0: *mut command_t) {
    opts.global = 1 as libc::c_int;
    debug(
        &mut debugger as *mut debug_t,
        b"set global flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_clean(mut self_0: *mut command_t) {
    if !((*self_0).arg).is_null() {
        if 45 as libc::c_int
            != *((*self_0).arg).offset(0 as libc::c_int as isize) as libc::c_int
        {
            opts.clean = (*self_0).arg as *mut libc::c_char;
        } else {
            opts
                .clean = b"clean\0" as *const u8 as *const libc::c_char
                as *mut libc::c_char;
        }
    } else {
        opts.clean = b"clean\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    }
    debug(
        &mut debugger as *mut debug_t,
        b"set clean flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_test(mut self_0: *mut command_t) {
    if !((*self_0).arg).is_null() {
        if 45 as libc::c_int
            != *((*self_0).arg).offset(0 as libc::c_int as isize) as libc::c_int
        {
            opts.test = (*self_0).arg as *mut libc::c_char;
        } else {
            opts
                .test = b"test\0" as *const u8 as *const libc::c_char
                as *mut libc::c_char;
        }
    } else {
        opts.test = b"test\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    }
    debug(
        &mut debugger as *mut debug_t,
        b"set test flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_prefix(mut self_0: *mut command_t) {
    if !((*self_0).arg).is_null() {
        if 45 as libc::c_int
            != *((*self_0).arg).offset(0 as libc::c_int as isize) as libc::c_int
        {
            opts.prefix = (*self_0).arg as *mut libc::c_char;
        }
    }
    debug(
        &mut debugger as *mut debug_t,
        b"set prefix: %s\0" as *const u8 as *const libc::c_char,
        opts.prefix,
    );
}
unsafe extern "C" fn setopt_dir(mut self_0: *mut command_t) {
    opts.dir = (*self_0).arg as *mut libc::c_char as *const libc::c_char;
    debug(
        &mut debugger as *mut debug_t,
        b"set dir: %s\0" as *const u8 as *const libc::c_char,
        opts.dir,
    );
}
unsafe extern "C" fn setopt_quiet(mut self_0: *mut command_t) {
    opts.verbose = 0 as libc::c_int;
    debug(
        &mut debugger as *mut debug_t,
        b"set quiet flag\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn setopt_concurrency(mut self_0: *mut command_t) {
    let mut tmp: libc::c_long = 0;
    if !((*self_0).arg).is_null() {
        tmp = atol((*self_0).arg);
        opts.concurrency = tmp as libc::c_uint;
        debug(
            &mut debugger as *mut debug_t,
            b"set concurrency: %lu\0" as *const u8 as *const libc::c_char,
            opts.concurrency,
        );
    }
}
unsafe fn main_0(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut current_block: u64;
    let mut rc: libc::c_int = 0;
    let mut path_max: libc::c_long = 0;
    let mut tmp: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_ulong = 0;
    let mut tmp___2: size_t = 0;
    let mut tmp___3: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut size___0: libc::c_ulong = 0;
    let mut tmp___4: size_t = 0;
    let mut tmp___5: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut rest: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut arg: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___6: size_t = 0;
    let mut tmp___7: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut j: libc::c_int = 0;
    let mut i___0: libc::c_int = 0;
    let mut tmp___8: libc::c_int = 0;
    let mut tmp___9: libc::c_int = 0;
    let mut tmp___10: CURLcode = CURLE_OK;
    let mut i___1: libc::c_int = 0;
    let mut dep: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut stats: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp___11: *mut fs_stats = 0 as *mut fs_stats;
    let mut stats___0: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp___12: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp___13: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___14: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut total_built: libc::c_int = 0;
    let mut key: *const libc::c_char = 0 as *const libc::c_char;
    let mut val: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut k: khiter_t = 0;
    let mut tmp___15: libc::c_int = 0;
    let mut context: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___16: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___17: *const libc::c_char = 0 as *const libc::c_char;
    rc = 0 as libc::c_int;
    path_max = 4096 as libc::c_long;
    let vla = path_max as usize;
    let mut CWD: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla);
    memset(CWD.as_mut_ptr() as *mut libc::c_void, 0 as libc::c_int, path_max as size_t);
    tmp___0 = getcwd(CWD.as_mut_ptr(), path_max as size_t);
    if 0 as *mut libc::c_char as libc::c_ulong == tmp___0 as libc::c_ulong {
        tmp = __errno_location();
        return -*tmp;
    }
    built = kh_init_ptr();
    tmp___1 = strdup(b"__clib-build__\0" as *const u8 as *const libc::c_char);
    hash_set(
        built,
        tmp___1,
        b"2.8.0\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
    );
    command_init(
        &mut program,
        b"clib-build\0" as *const u8 as *const libc::c_char,
        b"2.8.0\0" as *const u8 as *const libc::c_char,
    );
    debug_init(&mut debugger, b"clib-build\0" as *const u8 as *const libc::c_char);
    program.usage = b"[options] [name ...]\0" as *const u8 as *const libc::c_char;
    command_option(
        &mut program,
        b"-o\0" as *const u8 as *const libc::c_char,
        b"--out <dir>\0" as *const u8 as *const libc::c_char,
        b"change the output directory [deps]\0" as *const u8 as *const libc::c_char,
        Some(setopt_dir as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-P\0" as *const u8 as *const libc::c_char,
        b"--prefix <dir>\0" as *const u8 as *const libc::c_char,
        b"change the prefix directory (usually '/usr/local')\0" as *const u8
            as *const libc::c_char,
        Some(setopt_prefix as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-q\0" as *const u8 as *const libc::c_char,
        b"--quiet\0" as *const u8 as *const libc::c_char,
        b"disable verbose output\0" as *const u8 as *const libc::c_char,
        Some(setopt_quiet as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-g\0" as *const u8 as *const libc::c_char,
        b"--global\0" as *const u8 as *const libc::c_char,
        b"use global target\0" as *const u8 as *const libc::c_char,
        Some(setopt_global as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-C\0" as *const u8 as *const libc::c_char,
        b"--clean [clean_target]\0" as *const u8 as *const libc::c_char,
        b"clean target before building (default: clean)\0" as *const u8
            as *const libc::c_char,
        Some(setopt_clean as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-T\0" as *const u8 as *const libc::c_char,
        b"--test [test_target]\0" as *const u8 as *const libc::c_char,
        b"test target instead of building (default: test)\0" as *const u8
            as *const libc::c_char,
        Some(setopt_test as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-d\0" as *const u8 as *const libc::c_char,
        b"--dev\0" as *const u8 as *const libc::c_char,
        b"build development dependencies\0" as *const u8 as *const libc::c_char,
        Some(setopt_dev as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-f\0" as *const u8 as *const libc::c_char,
        b"--force\0" as *const u8 as *const libc::c_char,
        b"force the action of something, like overwriting a file\0" as *const u8
            as *const libc::c_char,
        Some(setopt_force as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-c\0" as *const u8 as *const libc::c_char,
        b"--skip-cache\0" as *const u8 as *const libc::c_char,
        b"skip cache when configuring\0" as *const u8 as *const libc::c_char,
        Some(setopt_skip_cache as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        &mut program,
        b"-C\0" as *const u8 as *const libc::c_char,
        b"--concurrency <number>\0" as *const u8 as *const libc::c_char,
        b"Set concurrency (default: 12)\0" as *const u8 as *const libc::c_char,
        Some(setopt_concurrency as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_parse(&mut program, argc, argv);
    if !(opts.dir).is_null() {
        let vla_0 = path_max as usize;
        let mut dir: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla_0);
        memset(
            dir.as_mut_ptr() as *mut libc::c_void,
            0 as libc::c_int,
            path_max as size_t,
        );
        realpath(opts.dir, dir.as_mut_ptr());
        tmp___2 = strlen(dir.as_mut_ptr() as *const libc::c_char);
        size = tmp___2.wrapping_add(1 as libc::c_ulong);
        tmp___3 = malloc(size);
        opts.dir = tmp___3 as *const libc::c_char;
        memset(opts.dir as *mut libc::c_void, 0 as libc::c_int, size);
        memcpy(
            opts.dir as *mut libc::c_void,
            dir.as_mut_ptr() as *const libc::c_void,
            size,
        );
    }
    if !(opts.prefix).is_null() {
        let vla_1 = path_max as usize;
        let mut prefix: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla_1);
        memset(
            prefix.as_mut_ptr() as *mut libc::c_void,
            0 as libc::c_int,
            path_max as size_t,
        );
        realpath(opts.prefix as *const libc::c_char, prefix.as_mut_ptr());
        tmp___4 = strlen(prefix.as_mut_ptr() as *const libc::c_char);
        size___0 = tmp___4.wrapping_add(1 as libc::c_ulong);
        tmp___5 = malloc(size___0);
        opts.prefix = tmp___5 as *mut libc::c_char;
        memset(opts.prefix as *mut libc::c_void, 0 as libc::c_int, size___0);
        memcpy(
            opts.prefix as *mut libc::c_void,
            prefix.as_mut_ptr() as *const libc::c_void,
            size___0,
        );
    }
    rest_offset = program.argc;
    if argc > 0 as libc::c_int {
        rest = 0 as libc::c_int;
        i = 0 as libc::c_int;
        loop {
            arg = *(program.nargv).offset(i as isize);
            if !arg.is_null() {
                if 45 as libc::c_int
                    == *arg.offset(0 as libc::c_int as isize) as libc::c_int
                {
                    if 45 as libc::c_int
                        == *arg.offset(1 as libc::c_int as isize) as libc::c_int
                    {
                        tmp___6 = strlen(arg as *const libc::c_char);
                        if 2 as libc::c_ulong == tmp___6 {
                            rest = 1 as libc::c_int;
                            rest_offset = i + 1 as libc::c_int;
                            current_block = 15594603006322722090;
                        } else {
                            current_block = 2492757397582406315;
                        }
                    } else {
                        current_block = 2492757397582406315;
                    }
                } else {
                    current_block = 2492757397582406315;
                }
            } else {
                current_block = 2492757397582406315;
            }
            match current_block {
                2492757397582406315 => {
                    if !arg.is_null() {
                        if rest != 0 {
                            rest_argc += 1;
                        }
                    }
                }
                _ => {}
            }
            i += 1;
            if (*(program.nargv).offset(i as isize)).is_null() {
                break;
            }
        }
    }
    if rest_argc > 0 as libc::c_int {
        tmp___7 = malloc(
            (rest_argc as libc::c_ulong)
                .wrapping_mul(
                    ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
                ),
        );
        rest_argv = tmp___7 as *mut *mut libc::c_char;
        memset(
            rest_argv as *mut libc::c_void,
            0 as libc::c_int,
            (rest_argc as libc::c_ulong)
                .wrapping_mul(
                    ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
                ),
        );
        j = 0 as libc::c_int;
        i___0 = rest_offset;
        loop {
            tmp___8 = j;
            j += 1;
            tmp___9 = i___0;
            i___0 += 1;
            let ref mut fresh3 = *rest_argv.offset(tmp___8 as isize);
            *fresh3 = *(program.nargv).offset(tmp___9 as isize);
            if (*(program.nargv).offset(i___0 as isize)).is_null() {
                break;
            }
        }
    }
    tmp___10 = curl_global_init(
        (1 as libc::c_int | (1 as libc::c_int) << 1 as libc::c_int) as libc::c_long,
    );
    if 0 as libc::c_uint != tmp___10 as libc::c_uint {
        cc_fprintf(
            CC_FG_DARK_RED,
            stderr,
            b"  %10s\0" as *const u8 as *const libc::c_char,
            b"error\0" as *const u8 as *const libc::c_char,
        );
        fprintf(stderr, b" : \0" as *const u8 as *const libc::c_char);
        cc_fprintf(
            CC_FG_DARK_GRAY,
            stderr,
            b"Failed to initialize cURL\0" as *const u8 as *const libc::c_char,
        );
        fprintf(stderr, b"\n\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int;
    }
    clib_cache_init(2592000 as libc::c_int as time_t);
    package_opts.skip_cache = opts.skip_cache;
    package_opts.prefix = opts.prefix;
    package_opts.global = opts.global;
    package_opts.force = opts.force;
    clib_package_set_opts(package_opts);
    if 0 as libc::c_int == program.argc {
        rc = build_package(CWD.as_mut_ptr() as *const libc::c_char);
    } else if argc == rest_offset + rest_argc {
        rc = build_package(CWD.as_mut_ptr() as *const libc::c_char);
    } else {
        i___1 = 1 as libc::c_int;
        while i___1 <= rest_offset {
            dep = *(program.nargv).offset(i___1 as isize);
            if 46 as libc::c_int == *dep.offset(0 as libc::c_int as isize) as libc::c_int
            {
                let vla_2 = path_max as usize;
                let mut dir___0: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla_2);
                memset(
                    dir___0.as_mut_ptr() as *mut libc::c_void,
                    0 as libc::c_int,
                    path_max as size_t,
                );
                dep = realpath(dep as *const libc::c_char, dir___0.as_mut_ptr());
            } else {
                tmp___11 = fs_stat(dep as *const libc::c_char);
                stats = tmp___11;
                if stats.is_null() {
                    dep = path_join(opts.dir, dep as *const libc::c_char);
                } else {
                    free(stats as *mut libc::c_void);
                }
            }
            tmp___12 = fs_stat(dep as *const libc::c_char);
            stats___0 = tmp___12;
            let mut current_block_119: u64;
            if !stats___0.is_null() {
                if 32768 as libc::c_uint == (*stats___0).st_mode & 61440 as libc::c_uint
                {
                    dep = __xpg_basename(dep);
                    tmp___13 = __xpg_basename(dep);
                    tmp___14 = dirname(dep);
                    rc = build_package_with_manifest_name(
                        tmp___14 as *const libc::c_char,
                        tmp___13 as *const libc::c_char,
                    );
                    current_block_119 = 1013506999122146761;
                } else if 40960 as libc::c_uint
                        == (*stats___0).st_mode & 61440 as libc::c_uint
                    {
                    dep = __xpg_basename(dep);
                    tmp___13 = __xpg_basename(dep);
                    tmp___14 = dirname(dep);
                    rc = build_package_with_manifest_name(
                        tmp___14 as *const libc::c_char,
                        tmp___13 as *const libc::c_char,
                    );
                    current_block_119 = 1013506999122146761;
                } else {
                    current_block_119 = 8714463042636110858;
                }
            } else {
                current_block_119 = 8714463042636110858;
            }
            match current_block_119 {
                8714463042636110858 => {
                    rc = build_package(dep as *const libc::c_char);
                    if 0 as libc::c_int != rc {
                        rc = build_package(
                            *(program.nargv).offset(i___1 as isize)
                                as *const libc::c_char,
                        );
                    }
                }
                _ => {}
            }
            if !stats___0.is_null() {
                free(stats___0 as *mut libc::c_void);
                stats___0 = 0 as *mut fs_stats;
            }
            i___1 += 1;
        }
    }
    total_built = 0 as libc::c_int;
    k = 0 as libc::c_int as khint_t;
    while k < (*built).n_buckets {
        if !(*((*built).flags).offset((k >> 4 as libc::c_int) as isize)
            >> ((k & 15 as libc::c_uint) << 1 as libc::c_int) & 3 as libc::c_uint != 0)
        {
            key = *((*built).keys).offset(k as isize);
            val = *((*built).vals).offset(k as isize);
            tmp___15 = strncmp(
                b"t\0" as *const u8 as *const libc::c_char,
                val as *const libc::c_char,
                1 as libc::c_int as size_t,
            );
            if 0 as libc::c_int == tmp___15 {
                total_built += 1;
            }
            if 0 as *const libc::c_char as libc::c_ulong != key as libc::c_ulong {
                free(key as *mut libc::c_void);
            }
        }
        k = k.wrapping_add(1);
    }
    kh_destroy_ptr(built);
    command_free(&mut program);
    curl_global_cleanup();
    clib_package_cleanup();
    if !(opts.dir).is_null() {
        free(opts.dir as *mut libc::c_void);
    }
    if !(opts.prefix).is_null() {
        free(opts.prefix as *mut libc::c_void);
    }
    if rest_argc > 0 as libc::c_int {
        free(rest_argv as *mut libc::c_void);
        rest_offset = 0 as libc::c_int;
        rest_argc = 0 as libc::c_int;
        rest_argv = 0 as *mut *mut libc::c_char;
    }
    if 0 as libc::c_int == rc {
        if total_built > 0 as libc::c_int {
            printf(b"\n\0" as *const u8 as *const libc::c_char);
        }
        if opts.verbose != 0 {
            context = b"\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
            let mut current_block_175: u64;
            if !(opts.clean).is_null() {
                current_block_175 = 4149687282939801579;
            } else if !(opts.test).is_null() {
                current_block_175 = 4149687282939801579;
            } else {
                current_block_175 = 2942604368452602584;
            }
            match current_block_175 {
                4149687282939801579 => {
                    context = 0 as *mut libc::c_char;
                    let mut current_block_173: u64;
                    if !(opts.clean).is_null() {
                        if !(opts.test).is_null() {
                            tmp___17 = b"clean test\0" as *const u8
                                as *const libc::c_char;
                            current_block_173 = 4183419379601546972;
                        } else {
                            current_block_173 = 7248223184929880020;
                        }
                    } else {
                        current_block_173 = 7248223184929880020;
                    }
                    match current_block_173 {
                        7248223184929880020 => {
                            if !(opts.clean).is_null() {
                                tmp___16 = b"clean\0" as *const u8 as *const libc::c_char;
                            } else {
                                tmp___16 = b"test\0" as *const u8 as *const libc::c_char;
                            }
                            tmp___17 = tmp___16;
                        }
                        _ => {}
                    }
                    asprintf(
                        &mut context as *mut *mut libc::c_char,
                        b" (%s) \0" as *const u8 as *const libc::c_char,
                        tmp___17,
                    );
                }
                _ => {}
            }
            if total_built > 1 as libc::c_int {
                cc_fprintf(
                    CC_FG_CYAN,
                    stdout,
                    b"  %10s\0" as *const u8 as *const libc::c_char,
                    b"info\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                cc_fprintf(
                    CC_FG_DARK_GRAY,
                    stdout,
                    b"built %d packages%s\0" as *const u8 as *const libc::c_char,
                    total_built,
                    context,
                );
                fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
            } else if 1 as libc::c_int == total_built {
                cc_fprintf(
                    CC_FG_CYAN,
                    stdout,
                    b"  %10s\0" as *const u8 as *const libc::c_char,
                    b"info\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                cc_fprintf(
                    CC_FG_DARK_GRAY,
                    stdout,
                    b"built 1 package%s\0" as *const u8 as *const libc::c_char,
                    context,
                );
                fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
            } else {
                cc_fprintf(
                    CC_FG_CYAN,
                    stdout,
                    b"  %10s\0" as *const u8 as *const libc::c_char,
                    b"info\0" as *const u8 as *const libc::c_char,
                );
                fprintf(stdout, b" : \0" as *const u8 as *const libc::c_char);
                cc_fprintf(
                    CC_FG_DARK_GRAY,
                    stdout,
                    b"built 0 packages%s\0" as *const u8 as *const libc::c_char,
                    context,
                );
                fprintf(stdout, b"\n\0" as *const u8 as *const libc::c_char);
            }
            if !(opts.clean).is_null() {
                free(context as *mut libc::c_void);
            } else if !(opts.test).is_null() {
                free(context as *mut libc::c_void);
            }
        }
    }
    return rc;
}
pub unsafe extern "C" fn str_replace(
    mut str: *const libc::c_char,
    mut sub: *const libc::c_char,
    mut replace: *const libc::c_char,
) -> *mut libc::c_char {
    let mut pos: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut count: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: size_t = 0;
    let mut tmp___3: size_t = 0;
    let mut result: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut current: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut len: libc::c_int = 0;
    let mut tmp___5: size_t = 0;
    let mut tmp___6: size_t = 0;
    let mut tmp___7: size_t = 0;
    pos = str as *mut libc::c_char;
    tmp = occurrences(sub, str);
    count = tmp as libc::c_int;
    if 0 as libc::c_int >= count {
        tmp___0 = strdup(str);
        return tmp___0;
    }
    tmp___1 = strlen(str);
    tmp___2 = strlen(sub);
    tmp___3 = strlen(replace);
    size = tmp___1
        .wrapping_sub(tmp___2.wrapping_mul(count as size_t))
        .wrapping_add(tmp___3.wrapping_mul(count as size_t))
        .wrapping_add(1 as libc::c_ulong) as libc::c_int;
    tmp___4 = malloc(size as size_t);
    result = tmp___4 as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == result as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    memset(result as *mut libc::c_void, '\u{0}' as i32, size as size_t);
    loop {
        current = strstr(pos as *const libc::c_char, sub);
        if current.is_null() {
            break;
        }
        len = current.offset_from(pos) as libc::c_long as libc::c_int;
        strncat(result, pos as *const libc::c_char, len as size_t);
        tmp___5 = strlen(replace);
        strncat(result, replace, tmp___5);
        tmp___6 = strlen(sub);
        pos = current.offset(tmp___6 as isize);
    }
    tmp___7 = strlen(str);
    if pos as libc::c_ulong != str.offset(tmp___7 as isize) as libc::c_ulong {
        strncat(
            result,
            pos as *const libc::c_char,
            str.offset_from(pos as *const libc::c_char) as libc::c_long as size_t,
        );
    }
    return result;
}
pub unsafe extern "C" fn substr(
    mut str: *const libc::c_char,
    mut start: libc::c_int,
    mut end: libc::c_int,
) -> *mut libc::c_char {
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut diff: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut res: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    if 0 as libc::c_int > start {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = strlen(str);
    len = tmp as libc::c_int;
    if -(1 as libc::c_int) == end {
        end = len;
    }
    if end <= start {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    diff = end - start;
    if len == diff {
        tmp___0 = strdup(str);
        return tmp___0;
    }
    if len < start {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    if (len + 1 as libc::c_int) < end {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___1 = malloc(
        (::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_mul(diff as libc::c_ulong)
            .wrapping_add(1 as libc::c_ulong),
    );
    res = tmp___1 as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == res as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    memset(
        res as *mut libc::c_void,
        '\u{0}' as i32,
        (diff + 1 as libc::c_int) as size_t,
    );
    strncpy(res, str.offset(start as isize), diff as size_t);
    return res;
}
pub unsafe extern "C" fn list_new() -> *mut list_t {
    let mut self_0: *mut list_t = 0 as *mut list_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(::std::mem::size_of::<list_t>() as libc::c_ulong);
    self_0 = tmp as *mut list_t;
    if self_0.is_null() {
        return 0 as *mut libc::c_void as *mut list_t;
    }
    (*self_0).head = 0 as *mut libc::c_void as *mut list_node_t;
    (*self_0).tail = 0 as *mut libc::c_void as *mut list_node_t;
    (*self_0)
        .free = ::std::mem::transmute::<
        *mut libc::c_void,
        Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    >(0 as *mut libc::c_void);
    (*self_0)
        .match_0 = ::std::mem::transmute::<
        *mut libc::c_void,
        Option::<
            unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> libc::c_int,
        >,
    >(0 as *mut libc::c_void);
    (*self_0).len = 0 as libc::c_uint;
    return self_0;
}
pub unsafe extern "C" fn list_destroy(mut self_0: *mut list_t) {
    let mut len: libc::c_uint = 0;
    let mut next: *mut list_node_t = 0 as *mut list_node_t;
    let mut curr: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp: libc::c_uint = 0;
    len = (*self_0).len;
    curr = (*self_0).head;
    loop {
        tmp = len;
        len = len.wrapping_sub(1);
        if tmp == 0 {
            break;
        }
        next = (*curr).next;
        if ((*self_0).free).is_some() {
            (Some(((*self_0).free).expect("non-null function pointer")))
                .expect("non-null function pointer")((*curr).val);
        }
        free(curr as *mut libc::c_void);
        curr = next;
    }
    free(self_0 as *mut libc::c_void);
}
pub unsafe extern "C" fn list_rpush(
    mut self_0: *mut list_t,
    mut node: *mut list_node_t,
) -> *mut list_node_t {
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_node = 0 as *mut list_node;
    if node.is_null() {
        return 0 as *mut libc::c_void as *mut list_node_t;
    }
    if (*self_0).len != 0 {
        (*node).prev = (*self_0).tail;
        (*node).next = 0 as *mut libc::c_void as *mut list_node;
        (*(*self_0).tail).next = node;
        (*self_0).tail = node;
    } else {
        tmp = node;
        (*self_0).tail = tmp;
        (*self_0).head = tmp;
        tmp___0 = 0 as *mut libc::c_void as *mut list_node;
        (*node).next = tmp___0;
        (*node).prev = tmp___0;
    }
    (*self_0).len = ((*self_0).len).wrapping_add(1);
    return node;
}
pub unsafe extern "C" fn list_rpop(mut self_0: *mut list_t) -> *mut list_node_t {
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___1: *mut list_node = 0 as *mut list_node;
    if (*self_0).len == 0 {
        return 0 as *mut libc::c_void as *mut list_node_t;
    }
    node = (*self_0).tail;
    (*self_0).len = ((*self_0).len).wrapping_sub(1);
    if (*self_0).len != 0 {
        tmp = (*node).prev;
        (*self_0).tail = tmp;
        (*tmp).next = 0 as *mut libc::c_void as *mut list_node;
    } else {
        tmp___0 = 0 as *mut libc::c_void as *mut list_node_t;
        (*self_0).head = tmp___0;
        (*self_0).tail = tmp___0;
    }
    tmp___1 = 0 as *mut libc::c_void as *mut list_node;
    (*node).prev = tmp___1;
    (*node).next = tmp___1;
    return node;
}
pub unsafe extern "C" fn list_lpop(mut self_0: *mut list_t) -> *mut list_node_t {
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___1: *mut list_node = 0 as *mut list_node;
    if (*self_0).len == 0 {
        return 0 as *mut libc::c_void as *mut list_node_t;
    }
    node = (*self_0).head;
    (*self_0).len = ((*self_0).len).wrapping_sub(1);
    if (*self_0).len != 0 {
        tmp = (*node).next;
        (*self_0).head = tmp;
        (*tmp).prev = 0 as *mut libc::c_void as *mut list_node;
    } else {
        tmp___0 = 0 as *mut libc::c_void as *mut list_node_t;
        (*self_0).tail = tmp___0;
        (*self_0).head = tmp___0;
    }
    tmp___1 = 0 as *mut libc::c_void as *mut list_node;
    (*node).prev = tmp___1;
    (*node).next = tmp___1;
    return node;
}
pub unsafe extern "C" fn list_lpush(
    mut self_0: *mut list_t,
    mut node: *mut list_node_t,
) -> *mut list_node_t {
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_node = 0 as *mut list_node;
    if node.is_null() {
        return 0 as *mut libc::c_void as *mut list_node_t;
    }
    if (*self_0).len != 0 {
        (*node).next = (*self_0).head;
        (*node).prev = 0 as *mut libc::c_void as *mut list_node;
        (*(*self_0).head).prev = node;
        (*self_0).head = node;
    } else {
        tmp = node;
        (*self_0).tail = tmp;
        (*self_0).head = tmp;
        tmp___0 = 0 as *mut libc::c_void as *mut list_node;
        (*node).next = tmp___0;
        (*node).prev = tmp___0;
    }
    (*self_0).len = ((*self_0).len).wrapping_add(1);
    return node;
}
pub unsafe extern "C" fn list_find(
    mut self_0: *mut list_t,
    mut val: *mut libc::c_void,
) -> *mut list_node_t {
    let mut it: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut tmp: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: libc::c_int = 0;
    tmp = list_iterator_new(self_0, LIST_HEAD);
    it = tmp;
    loop {
        node = list_iterator_next(it);
        if node.is_null() {
            break;
        }
        if ((*self_0).match_0).is_some() {
            tmp___0 = (Some(((*self_0).match_0).expect("non-null function pointer")))
                .expect("non-null function pointer")(val, (*node).val);
            if tmp___0 != 0 {
                list_iterator_destroy(it);
                return node;
            }
        } else if val as libc::c_ulong == (*node).val as libc::c_ulong {
            list_iterator_destroy(it);
            return node;
        }
    }
    list_iterator_destroy(it);
    return 0 as *mut libc::c_void as *mut list_node_t;
}
pub unsafe extern "C" fn list_at(
    mut self_0: *mut list_t,
    mut index: libc::c_int,
) -> *mut list_node_t {
    let mut direction: list_direction_t = LIST_HEAD;
    let mut it: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut tmp: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___1: libc::c_int = 0;
    direction = LIST_HEAD;
    if index < 0 as libc::c_int {
        direction = LIST_TAIL;
        index = !index;
    }
    if (index as libc::c_uint) < (*self_0).len {
        tmp = list_iterator_new(self_0, direction);
        it = tmp;
        tmp___0 = list_iterator_next(it);
        node = tmp___0;
        loop {
            tmp___1 = index;
            index -= 1;
            if tmp___1 == 0 {
                break;
            }
            node = list_iterator_next(it);
        }
        list_iterator_destroy(it);
        return node;
    }
    return 0 as *mut libc::c_void as *mut list_node_t;
}
pub unsafe extern "C" fn list_remove(
    mut self_0: *mut list_t,
    mut node: *mut list_node_t,
) {
    if !((*node).prev).is_null() {
        (*(*node).prev).next = (*node).next;
    } else {
        (*self_0).head = (*node).next;
    }
    if !((*node).next).is_null() {
        (*(*node).next).prev = (*node).prev;
    } else {
        (*self_0).tail = (*node).prev;
    }
    if ((*self_0).free).is_some() {
        (Some(((*self_0).free).expect("non-null function pointer")))
            .expect("non-null function pointer")((*node).val);
    }
    free(node as *mut libc::c_void);
    (*self_0).len = ((*self_0).len).wrapping_sub(1);
}
pub unsafe extern "C" fn list_node_new(mut val: *mut libc::c_void) -> *mut list_node_t {
    let mut self_0: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(::std::mem::size_of::<list_node_t>() as libc::c_ulong);
    self_0 = tmp as *mut list_node_t;
    if self_0.is_null() {
        return 0 as *mut libc::c_void as *mut list_node_t;
    }
    (*self_0).prev = 0 as *mut libc::c_void as *mut list_node;
    (*self_0).next = 0 as *mut libc::c_void as *mut list_node;
    (*self_0).val = val;
    return self_0;
}
pub unsafe extern "C" fn list_iterator_new(
    mut list: *mut list_t,
    mut direction: list_direction_t,
) -> *mut list_iterator_t {
    let mut node: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut tmp___0: *mut list_iterator_t = 0 as *mut list_iterator_t;
    if direction as libc::c_uint == 0 as libc::c_uint {
        tmp = (*list).head;
    } else {
        tmp = (*list).tail;
    }
    node = tmp;
    tmp___0 = list_iterator_new_from_node(node, direction);
    return tmp___0;
}
pub unsafe extern "C" fn list_iterator_new_from_node(
    mut node: *mut list_node_t,
    mut direction: list_direction_t,
) -> *mut list_iterator_t {
    let mut self_0: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(::std::mem::size_of::<list_iterator_t>() as libc::c_ulong);
    self_0 = tmp as *mut list_iterator_t;
    if self_0.is_null() {
        return 0 as *mut libc::c_void as *mut list_iterator_t;
    }
    (*self_0).next = node;
    (*self_0).direction = direction;
    return self_0;
}
pub unsafe extern "C" fn list_iterator_next(
    mut self_0: *mut list_iterator_t,
) -> *mut list_node_t {
    let mut curr: *mut list_node_t = 0 as *mut list_node_t;
    curr = (*self_0).next;
    if !curr.is_null() {
        if (*self_0).direction as libc::c_uint == 0 as libc::c_uint {
            (*self_0).next = (*curr).next;
        } else {
            (*self_0).next = (*curr).prev;
        }
    }
    return curr;
}
pub unsafe extern "C" fn list_iterator_destroy(mut self_0: *mut list_iterator_t) {
    free(self_0 as *mut libc::c_void);
    self_0 = 0 as *mut libc::c_void as *mut list_iterator_t;
}
#[inline]
unsafe extern "C" fn tinydir_open(
    mut dir: *mut tinydir_dir,
    mut path: *const libc::c_char,
) -> libc::c_int {
    let mut pathp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___2: size_t = 0;
    let mut tmp___3: size_t = 0;
    if dir as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp = __errno_location();
        *tmp = 22 as libc::c_int;
        return -(1 as libc::c_int);
    } else {
        if path as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            tmp = __errno_location();
            *tmp = 22 as libc::c_int;
            return -(1 as libc::c_int);
        } else {
            tmp___0 = strlen(path);
            if tmp___0 == 0 as libc::c_ulong {
                tmp = __errno_location();
                *tmp = 22 as libc::c_int;
                return -(1 as libc::c_int);
            }
        }
    }
    tmp___2 = strlen(path);
    if tmp___2 >= 4096 as libc::c_ulong {
        tmp___1 = __errno_location();
        *tmp___1 = 36 as libc::c_int;
        return -(1 as libc::c_int);
    }
    (*dir)._files = 0 as *mut libc::c_void as *mut tinydir_file;
    (*dir)._d = 0 as *mut libc::c_void as *mut DIR;
    tinydir_close(dir);
    strcpy(((*dir).path).as_mut_ptr(), path);
    tmp___3 = strlen(((*dir).path).as_mut_ptr() as *const libc::c_char);
    pathp = &mut *((*dir).path)
        .as_mut_ptr()
        .offset(tmp___3.wrapping_sub(1 as libc::c_ulong) as isize) as *mut libc::c_char;
    while pathp as libc::c_ulong != ((*dir).path).as_mut_ptr() as libc::c_ulong {
        if !(*pathp as libc::c_int == 92 as libc::c_int) {
            if !(*pathp as libc::c_int == 47 as libc::c_int) {
                break;
            }
        }
        *pathp = '\u{0}' as i32 as libc::c_char;
        pathp = pathp.offset(1);
    }
    (*dir)._d = opendir(path);
    if (*dir)._d as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tinydir_close(dir);
        return -(1 as libc::c_int);
    } else {
        (*dir).has_next = 1 as libc::c_int;
        (*dir)._e = readdir((*dir)._d);
        if (*dir)._e as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            (*dir).has_next = 0 as libc::c_int;
        }
        return 0 as libc::c_int;
    };
}
#[inline]
unsafe extern "C" fn tinydir_close(mut dir: *mut tinydir_dir) {
    if dir as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return;
    }
    memset(
        ((*dir).path).as_mut_ptr() as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
    );
    (*dir).has_next = 0 as libc::c_int;
    (*dir).n_files = 0 as libc::c_int as size_t;
    free((*dir)._files as *mut libc::c_void);
    (*dir)._files = 0 as *mut libc::c_void as *mut tinydir_file;
    if !((*dir)._d).is_null() {
        closedir((*dir)._d);
    }
    (*dir)._d = 0 as *mut libc::c_void as *mut DIR;
    (*dir)._e = 0 as *mut libc::c_void as *mut dirent;
}
#[inline]
unsafe extern "C" fn tinydir_next(mut dir: *mut tinydir_dir) -> libc::c_int {
    let mut tmp: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___0: *mut libc::c_int = 0 as *mut libc::c_int;
    if dir as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp = __errno_location();
        *tmp = 22 as libc::c_int;
        return -(1 as libc::c_int);
    }
    if (*dir).has_next == 0 {
        tmp___0 = __errno_location();
        *tmp___0 = 2 as libc::c_int;
        return -(1 as libc::c_int);
    }
    (*dir)._e = readdir((*dir)._d);
    if (*dir)._e as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        (*dir).has_next = 0 as libc::c_int;
    }
    return 0 as libc::c_int;
}
#[inline]
unsafe extern "C" fn tinydir_readfile(
    mut dir: *const tinydir_dir,
    mut file: *mut tinydir_file,
) -> libc::c_int {
    let mut filename: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___0: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___1: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___2: size_t = 0;
    let mut tmp___3: size_t = 0;
    let mut tmp___4: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut tmp___5: size_t = 0;
    let mut tmp___6: libc::c_int = 0;
    let mut tmp___7: libc::c_int = 0;
    if dir as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp = __errno_location();
        *tmp = 22 as libc::c_int;
        return -(1 as libc::c_int);
    } else {
        if file as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            tmp = __errno_location();
            *tmp = 22 as libc::c_int;
            return -(1 as libc::c_int);
        }
    }
    if (*dir)._e as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = __errno_location();
        *tmp___0 = 2 as libc::c_int;
        return -(1 as libc::c_int);
    }
    filename = ((*(*dir)._e).d_name).as_mut_ptr() as *const libc::c_char;
    tmp___2 = strlen(((*dir).path).as_ptr());
    tmp___3 = strlen(filename);
    if tmp___2.wrapping_add(tmp___3).wrapping_add(1 as libc::c_ulong)
        >= 4096 as libc::c_ulong
    {
        tmp___1 = __errno_location();
        *tmp___1 = 36 as libc::c_int;
        return -(1 as libc::c_int);
    }
    tmp___5 = strlen(filename);
    if tmp___5 >= 256 as libc::c_ulong {
        tmp___4 = __errno_location();
        *tmp___4 = 36 as libc::c_int;
        return -(1 as libc::c_int);
    }
    strcpy(((*file).path).as_mut_ptr(), ((*dir).path).as_ptr());
    tmp___6 = strcmp(((*dir).path).as_ptr(), b"/\0" as *const u8 as *const libc::c_char);
    if tmp___6 != 0 as libc::c_int {
        strcat(((*file).path).as_mut_ptr(), b"/\0" as *const u8 as *const libc::c_char);
    }
    strcpy(((*file).name).as_mut_ptr(), filename);
    strcat(((*file).path).as_mut_ptr(), filename);
    tmp___7 = lstat(
        ((*file).path).as_mut_ptr() as *const libc::c_char,
        &mut (*file)._s as *mut stat,
    );
    if tmp___7 == -(1 as libc::c_int) {
        return -(1 as libc::c_int);
    }
    _tinydir_get_ext(file);
    (*file)
        .is_dir = ((*file)._s.st_mode & 61440 as libc::c_uint == 16384 as libc::c_uint)
        as libc::c_int;
    (*file)
        .is_reg = ((*file)._s.st_mode & 61440 as libc::c_uint == 32768 as libc::c_uint)
        as libc::c_int;
    return 0 as libc::c_int;
}
#[inline]
unsafe extern "C" fn _tinydir_get_ext(mut file: *mut tinydir_file) {
    let mut period: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: size_t = 0;
    tmp = strrchr(((*file).name).as_mut_ptr() as *const libc::c_char, '.' as i32);
    period = tmp;
    if period as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = strlen(((*file).name).as_mut_ptr() as *const libc::c_char);
        (*file)
            .extension = &mut *((*file).name).as_mut_ptr().offset(tmp___0 as isize)
            as *mut libc::c_char;
    } else {
        (*file).extension = period.offset(1 as libc::c_int as isize);
    };
}
pub unsafe extern "C" fn copy_file(
    mut from: *mut libc::c_char,
    mut to: *mut libc::c_char,
) -> libc::c_int {
    let mut content: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = fs_read(from as *const libc::c_char);
    content = tmp;
    if content.is_null() {
        return -(1 as libc::c_int);
    }
    fs_write(to as *const libc::c_char, content as *const libc::c_char);
    free(content as *mut libc::c_void);
    return 0 as libc::c_int;
}
unsafe extern "C" fn check_dir___0(mut dir: *mut libc::c_char) {
    let mut tmp: libc::c_int = 0;
    tmp = fs_exists(dir as *const libc::c_char);
    if 0 as libc::c_int != tmp {
        fs_mkdir(dir as *const libc::c_char, 448 as libc::c_int);
    }
}
unsafe extern "C" fn copy(
    mut file: tinydir_file,
    mut target_dir: *mut libc::c_char,
) -> libc::c_int {
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    tmp = strlen(target_dir as *const libc::c_char);
    tmp___0 = strlen((file.name).as_mut_ptr() as *const libc::c_char);
    let vla = tmp.wrapping_add(tmp___0).wrapping_add(2 as libc::c_ulong) as usize;
    let mut target_path: Vec::<libc::c_char> = ::std::vec::from_elem(0, vla);
    sprintf(
        target_path.as_mut_ptr(),
        b"%s/%s\0" as *const u8 as *const libc::c_char,
        target_dir,
        (file.name).as_mut_ptr(),
    );
    if file.is_dir != 0 {
        tmp___5 = copy_dir((file.path).as_mut_ptr(), target_path.as_mut_ptr());
        return tmp___5;
    }
    tmp___6 = copy_file((file.path).as_mut_ptr(), target_path.as_mut_ptr());
    return tmp___6;
}
pub unsafe extern "C" fn copy_dir(
    mut dir_path: *mut libc::c_char,
    mut target_dir: *mut libc::c_char,
) -> libc::c_int {
    let mut err: libc::c_int = 0;
    let mut dir: tinydir_dir = tinydir_dir {
        path: [0; 4096],
        has_next: 0,
        n_files: 0,
        _files: 0 as *mut tinydir_file,
        _d: 0 as *mut DIR,
        _e: 0 as *mut dirent,
    };
    let mut file: tinydir_file = tinydir_file {
        path: [0; 4096],
        name: [0; 256],
        extension: 0 as *mut libc::c_char,
        is_dir: 0,
        is_reg: 0,
        _s: stat {
            st_dev: 0,
            st_ino: 0,
            st_nlink: 0,
            st_mode: 0,
            st_uid: 0,
            st_gid: 0,
            __pad0: 0,
            st_rdev: 0,
            st_size: 0,
            st_blksize: 0,
            st_blocks: 0,
            st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
            st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
            st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
            __glibc_reserved: [0; 3],
        },
    };
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    err = 0 as libc::c_int;
    tinydir_open(&mut dir, dir_path as *const libc::c_char);
    check_dir___0(target_dir);
    while dir.has_next != 0 {
        err = tinydir_readfile(
            &mut dir as *mut tinydir_dir as *const tinydir_dir,
            &mut file,
        );
        if 0 as libc::c_int != err {
            break;
        }
        tmp = strcmp(
            b".\0" as *const u8 as *const libc::c_char,
            (file.name).as_mut_ptr() as *const libc::c_char,
        );
        if !(0 as libc::c_int == tmp) {
            tmp___0 = strcmp(
                b"..\0" as *const u8 as *const libc::c_char,
                (file.name).as_mut_ptr() as *const libc::c_char,
            );
            if !(0 as libc::c_int == tmp___0) {
                err = copy(file, target_dir);
                if 0 as libc::c_int != err {
                    break;
                }
            }
        }
        err = tinydir_next(&mut dir);
        if 0 as libc::c_int != err {
            break;
        }
    }
    tinydir_close(&mut dir);
    return err;
}
static mut parson_malloc: Option::<unsafe extern "C" fn(size_t) -> *mut libc::c_void> = Some(
    malloc as unsafe extern "C" fn(libc::c_ulong) -> *mut libc::c_void,
);
static mut parson_free: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()> = Some(
    free as unsafe extern "C" fn(*mut libc::c_void) -> (),
);
unsafe extern "C" fn parson_strndup(
    mut string: *const libc::c_char,
    mut n: size_t,
) -> *mut libc::c_char {
    let mut output_string: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect("non-null function pointer")(n.wrapping_add(1 as libc::c_ulong));
    output_string = tmp as *mut libc::c_char;
    if output_string.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    *output_string.offset(n as isize) = '\u{0}' as i32 as libc::c_char;
    strncpy(output_string, string, n);
    return output_string;
}
unsafe extern "C" fn parson_strdup(
    mut string: *const libc::c_char,
) -> *mut libc::c_char {
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = strlen(string);
    tmp___0 = parson_strndup(string, tmp);
    return tmp___0;
}
unsafe extern "C" fn is_utf16_hex(mut s: *const libc::c_uchar) -> libc::c_int {
    let mut tmp: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___1: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___2: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___3: libc::c_int = 0;
    tmp = __ctype_b_loc();
    if *(*tmp).offset(*s.offset(0 as libc::c_int as isize) as libc::c_int as isize)
        as libc::c_int & 4096 as libc::c_int != 0
    {
        tmp___0 = __ctype_b_loc();
        if *(*tmp___0)
            .offset(*s.offset(1 as libc::c_int as isize) as libc::c_int as isize)
            as libc::c_int & 4096 as libc::c_int != 0
        {
            tmp___1 = __ctype_b_loc();
            if *(*tmp___1)
                .offset(*s.offset(2 as libc::c_int as isize) as libc::c_int as isize)
                as libc::c_int & 4096 as libc::c_int != 0
            {
                tmp___2 = __ctype_b_loc();
                if *(*tmp___2)
                    .offset(*s.offset(3 as libc::c_int as isize) as libc::c_int as isize)
                    as libc::c_int & 4096 as libc::c_int != 0
                {
                    tmp___3 = 1 as libc::c_int;
                } else {
                    tmp___3 = 0 as libc::c_int;
                }
            } else {
                tmp___3 = 0 as libc::c_int;
            }
        } else {
            tmp___3 = 0 as libc::c_int;
        }
    } else {
        tmp___3 = 0 as libc::c_int;
    }
    return tmp___3;
}
unsafe extern "C" fn num_bytes_in_utf8_sequence(mut c: libc::c_uchar) -> libc::c_int {
    if c as libc::c_int == 192 as libc::c_int {
        return 0 as libc::c_int
    } else {
        if c as libc::c_int == 193 as libc::c_int {
            return 0 as libc::c_int
        } else {
            if c as libc::c_int > 244 as libc::c_int {
                return 0 as libc::c_int
            } else {
                if c as libc::c_int & 192 as libc::c_int == 128 as libc::c_int {
                    return 0 as libc::c_int
                } else {
                    if c as libc::c_int & 128 as libc::c_int == 0 as libc::c_int {
                        return 1 as libc::c_int
                    } else {
                        if c as libc::c_int & 224 as libc::c_int == 192 as libc::c_int {
                            return 2 as libc::c_int
                        } else {
                            if c as libc::c_int & 240 as libc::c_int
                                == 224 as libc::c_int
                            {
                                return 3 as libc::c_int
                            } else {
                                if c as libc::c_int & 248 as libc::c_int
                                    == 240 as libc::c_int
                                {
                                    return 4 as libc::c_int;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn verify_utf8_sequence(
    mut string: *const libc::c_uchar,
    mut len: *mut libc::c_int,
) -> libc::c_int {
    let mut current_block: u64;
    let mut cp: libc::c_uint = 0;
    cp = 0 as libc::c_uint;
    *len = num_bytes_in_utf8_sequence(*string.offset(0 as libc::c_int as isize));
    if *len == 1 as libc::c_int {
        cp = *string.offset(0 as libc::c_int as isize) as libc::c_uint;
    } else {
        if *len == 2 as libc::c_int {
            if *string.offset(1 as libc::c_int as isize) as libc::c_int
                & 192 as libc::c_int == 128 as libc::c_int
            {
                cp = (*string.offset(0 as libc::c_int as isize) as libc::c_int
                    & 31 as libc::c_int) as libc::c_uint;
                cp = cp << 6 as libc::c_int
                    | (*string.offset(1 as libc::c_int as isize) as libc::c_int
                        & 63 as libc::c_int) as libc::c_uint;
                current_block = 3275366147856559585;
            } else {
                current_block = 8498245855277070648;
            }
        } else {
            current_block = 8498245855277070648;
        }
        match current_block {
            3275366147856559585 => {}
            _ => {
                if *len == 3 as libc::c_int {
                    if *string.offset(1 as libc::c_int as isize) as libc::c_int
                        & 192 as libc::c_int == 128 as libc::c_int
                    {
                        if *string.offset(2 as libc::c_int as isize) as libc::c_int
                            & 192 as libc::c_int == 128 as libc::c_int
                        {
                            cp = (*string.offset(0 as libc::c_int as isize)
                                as libc::c_int & 15 as libc::c_int) as libc::c_uint;
                            cp = cp << 6 as libc::c_int
                                | (*string.offset(1 as libc::c_int as isize) as libc::c_int
                                    & 63 as libc::c_int) as libc::c_uint;
                            cp = cp << 6 as libc::c_int
                                | (*string.offset(2 as libc::c_int as isize) as libc::c_int
                                    & 63 as libc::c_int) as libc::c_uint;
                            current_block = 3275366147856559585;
                        } else {
                            current_block = 12182599830723329670;
                        }
                    } else {
                        current_block = 12182599830723329670;
                    }
                } else {
                    current_block = 12182599830723329670;
                }
                match current_block {
                    3275366147856559585 => {}
                    _ => {
                        if *len == 4 as libc::c_int {
                            if *string.offset(1 as libc::c_int as isize) as libc::c_int
                                & 192 as libc::c_int == 128 as libc::c_int
                            {
                                if *string.offset(2 as libc::c_int as isize) as libc::c_int
                                    & 192 as libc::c_int == 128 as libc::c_int
                                {
                                    if *string.offset(3 as libc::c_int as isize) as libc::c_int
                                        & 192 as libc::c_int == 128 as libc::c_int
                                    {
                                        cp = (*string.offset(0 as libc::c_int as isize)
                                            as libc::c_int & 7 as libc::c_int) as libc::c_uint;
                                        cp = cp << 6 as libc::c_int
                                            | (*string.offset(1 as libc::c_int as isize) as libc::c_int
                                                & 63 as libc::c_int) as libc::c_uint;
                                        cp = cp << 6 as libc::c_int
                                            | (*string.offset(2 as libc::c_int as isize) as libc::c_int
                                                & 63 as libc::c_int) as libc::c_uint;
                                        cp = cp << 6 as libc::c_int
                                            | (*string.offset(3 as libc::c_int as isize) as libc::c_int
                                                & 63 as libc::c_int) as libc::c_uint;
                                    } else {
                                        return 0 as libc::c_int
                                    }
                                } else {
                                    return 0 as libc::c_int
                                }
                            } else {
                                return 0 as libc::c_int
                            }
                        } else {
                            return 0 as libc::c_int
                        }
                    }
                }
            }
        }
    }
    if cp < 128 as libc::c_uint {
        if *len > 1 as libc::c_int {
            return 0 as libc::c_int;
        }
    }
    if cp < 2048 as libc::c_uint {
        if *len > 2 as libc::c_int {
            return 0 as libc::c_int;
        }
    }
    if cp < 65536 as libc::c_uint {
        if *len > 3 as libc::c_int {
            return 0 as libc::c_int;
        }
    }
    if cp > 1114111 as libc::c_uint {
        return 0 as libc::c_int;
    }
    if cp >= 55296 as libc::c_uint {
        if cp <= 57343 as libc::c_uint {
            return 0 as libc::c_int;
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn is_valid_utf8(
    mut string: *const libc::c_char,
    mut string_len: size_t,
) -> libc::c_int {
    let mut len: libc::c_int = 0;
    let mut string_end: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: libc::c_int = 0;
    len = 0 as libc::c_int;
    string_end = string.offset(string_len as isize);
    while (string as libc::c_ulong) < string_end as libc::c_ulong {
        tmp = verify_utf8_sequence(string as *const libc::c_uchar, &mut len);
        if tmp == 0 {
            return 0 as libc::c_int;
        }
        string = string.offset(len as isize);
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn is_decimal(
    mut string: *const libc::c_char,
    mut length: size_t,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: size_t = 0;
    if length > 1 as libc::c_ulong {
        if *string.offset(0 as libc::c_int as isize) as libc::c_int == 48 as libc::c_int
        {
            if *string.offset(1 as libc::c_int as isize) as libc::c_int
                != 46 as libc::c_int
            {
                return 0 as libc::c_int;
            }
        }
    }
    if length > 2 as libc::c_ulong {
        tmp = strncmp(
            string,
            b"-0\0" as *const u8 as *const libc::c_char,
            2 as libc::c_int as size_t,
        );
        if tmp == 0 {
            if *string.offset(2 as libc::c_int as isize) as libc::c_int
                != 46 as libc::c_int
            {
                return 0 as libc::c_int;
            }
        }
    }
    loop {
        tmp___1 = length;
        length = length.wrapping_sub(1);
        if tmp___1 == 0 {
            break;
        }
        tmp___0 = strchr(
            b"xX\0" as *const u8 as *const libc::c_char,
            *string.offset(length as isize) as libc::c_int,
        );
        if !tmp___0.is_null() {
            return 0 as libc::c_int;
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn read_file(mut filename: *const libc::c_char) -> *mut libc::c_char {
    let mut fp: *mut FILE = 0 as *mut FILE;
    let mut tmp: *mut FILE = 0 as *mut FILE;
    let mut file_size: size_t = 0;
    let mut pos: libc::c_long = 0;
    let mut file_contents: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: size_t = 0;
    tmp = fopen(filename, b"r\0" as *const u8 as *const libc::c_char);
    fp = tmp;
    if fp.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    fseek(fp, 0 as libc::c_long, 2 as libc::c_int);
    pos = ftell(fp);
    if pos < 0 as libc::c_long {
        fclose(fp);
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    file_size = pos as size_t;
    rewind(fp);
    tmp___0 = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(
        (::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_mul(file_size.wrapping_add(1 as libc::c_ulong)),
    );
    file_contents = tmp___0 as *mut libc::c_char;
    if file_contents.is_null() {
        fclose(fp);
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___2 = fread(
        file_contents as *mut libc::c_void,
        file_size,
        1 as libc::c_int as size_t,
        fp,
    );
    if tmp___2 < 1 as libc::c_ulong {
        tmp___1 = ferror(fp);
        if tmp___1 != 0 {
            fclose(fp);
            (Some(parson_free.expect("non-null function pointer")))
                .expect("non-null function pointer")(file_contents as *mut libc::c_void);
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
    }
    fclose(fp);
    *file_contents.offset(file_size as isize) = '\u{0}' as i32 as libc::c_char;
    return file_contents;
}
unsafe extern "C" fn remove_comments(
    mut string: *mut libc::c_char,
    mut start_token: *const libc::c_char,
    mut end_token: *const libc::c_char,
) {
    let mut in_string: libc::c_int = 0;
    let mut escaped: libc::c_int = 0;
    let mut i: size_t = 0;
    let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut current_char: libc::c_char = 0;
    let mut start_token_len: size_t = 0;
    let mut tmp: size_t = 0;
    let mut end_token_len: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: libc::c_int = 0;
    in_string = 0 as libc::c_int;
    escaped = 0 as libc::c_int;
    ptr = 0 as *mut libc::c_void as *mut libc::c_char;
    tmp = strlen(start_token);
    start_token_len = tmp;
    tmp___0 = strlen(end_token);
    end_token_len = tmp___0;
    if start_token_len == 0 as libc::c_ulong {
        return
    } else {
        if end_token_len == 0 as libc::c_ulong {
            return;
        }
    }
    loop {
        current_char = *string;
        if !(current_char as libc::c_int != 0 as libc::c_int) {
            break;
        }
        if current_char as libc::c_int == 92 as libc::c_int {
            if escaped == 0 {
                escaped = 1 as libc::c_int;
                string = string.offset(1);
                continue;
            }
        }
        let mut current_block_38: u64;
        if current_char as libc::c_int == 34 as libc::c_int {
            if escaped == 0 {
                in_string = (in_string == 0) as libc::c_int;
                current_block_38 = 6450597802325118133;
            } else {
                current_block_38 = 16162018424715227099;
            }
        } else {
            current_block_38 = 16162018424715227099;
        }
        match current_block_38 {
            16162018424715227099 => {
                if in_string == 0 {
                    tmp___1 = strncmp(
                        string as *const libc::c_char,
                        start_token,
                        start_token_len,
                    );
                    if tmp___1 == 0 as libc::c_int {
                        i = 0 as libc::c_int as size_t;
                        while i < start_token_len {
                            *string.offset(i as isize) = ' ' as i32 as libc::c_char;
                            i = i.wrapping_add(1);
                        }
                        string = string.offset(start_token_len as isize);
                        ptr = strstr(string as *const libc::c_char, end_token);
                        if ptr.is_null() {
                            return;
                        }
                        i = 0 as libc::c_int as size_t;
                        while i
                            < (ptr.offset_from(string) as libc::c_long as size_t)
                                .wrapping_add(end_token_len)
                        {
                            *string.offset(i as isize) = ' ' as i32 as libc::c_char;
                            i = i.wrapping_add(1);
                        }
                        string = ptr
                            .offset(end_token_len as isize)
                            .offset(-(1 as libc::c_int as isize));
                    }
                }
            }
            _ => {}
        }
        escaped = 0 as libc::c_int;
        string = string.offset(1);
    };
}
unsafe extern "C" fn json_object_init() -> *mut JSON_Object {
    let mut new_obj: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Object>() as libc::c_ulong);
    new_obj = tmp as *mut JSON_Object;
    if new_obj.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Object;
    }
    (*new_obj).names = 0 as *mut libc::c_void as *mut *mut libc::c_char;
    (*new_obj).values = 0 as *mut libc::c_void as *mut *mut JSON_Value;
    (*new_obj).capacity = 0 as libc::c_int as size_t;
    (*new_obj).count = 0 as libc::c_int as size_t;
    return new_obj;
}
unsafe extern "C" fn json_object_add(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut value: *mut JSON_Value,
) -> JSON_Status {
    let mut index___0: size_t = 0;
    let mut new_capacity: size_t = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: JSON_Status = 0;
    let mut tmp___1: *mut JSON_Value = 0 as *mut JSON_Value;
    index___0 = 0 as libc::c_int as size_t;
    if object as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int)
        } else {
            if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                return -(1 as libc::c_int);
            }
        }
    }
    if (*object).count >= (*object).capacity {
        if ((*object).capacity).wrapping_mul(2 as libc::c_ulong) > 15 as libc::c_ulong {
            tmp = ((*object).capacity).wrapping_mul(2 as libc::c_ulong);
        } else {
            tmp = 15 as libc::c_int as size_t;
        }
        new_capacity = tmp;
        if new_capacity > 960 as libc::c_ulong {
            return -(1 as libc::c_int);
        }
        tmp___0 = json_object_resize(object, new_capacity);
        if tmp___0 == -(1 as libc::c_int) {
            return -(1 as libc::c_int);
        }
    }
    tmp___1 = json_object_get_value(object as *const JSON_Object, name);
    if tmp___1 as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    index___0 = (*object).count;
    let ref mut fresh4 = *((*object).names).offset(index___0 as isize);
    *fresh4 = parson_strdup(name);
    if *((*object).names).offset(index___0 as isize) as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong
    {
        return -(1 as libc::c_int);
    }
    let ref mut fresh5 = *((*object).values).offset(index___0 as isize);
    *fresh5 = value;
    (*object).count = ((*object).count).wrapping_add(1);
    return 0 as libc::c_int;
}
unsafe extern "C" fn json_object_resize(
    mut object: *mut JSON_Object,
    mut new_capacity: size_t,
) -> JSON_Status {
    let mut temp_names: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    let mut temp_values: *mut *mut JSON_Value = 0 as *mut *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    temp_names = 0 as *mut libc::c_void as *mut *mut libc::c_char;
    temp_values = 0 as *mut libc::c_void as *mut *mut JSON_Value;
    if (*object).names as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        if (*object).values as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int);
        }
    }
    if (*object).names as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        if (*object).values as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int);
        }
    }
    if new_capacity == 0 as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(
        new_capacity
            .wrapping_mul(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong),
    );
    temp_names = tmp as *mut *mut libc::c_char;
    if temp_names as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(
        new_capacity
            .wrapping_mul(::std::mem::size_of::<*mut JSON_Value>() as libc::c_ulong),
    );
    temp_values = tmp___0 as *mut *mut JSON_Value;
    if temp_names as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(temp_names as *mut libc::c_void);
        return -(1 as libc::c_int);
    }
    if (*object).names as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        if (*object).values as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            if (*object).count > 0 as libc::c_ulong {
                memcpy(
                    temp_names as *mut libc::c_void,
                    (*object).names as *const libc::c_void,
                    ((*object).count)
                        .wrapping_mul(
                            ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
                        ),
                );
                memcpy(
                    temp_values as *mut libc::c_void,
                    (*object).values as *const libc::c_void,
                    ((*object).count)
                        .wrapping_mul(
                            ::std::mem::size_of::<*mut JSON_Value>() as libc::c_ulong,
                        ),
                );
            }
        }
    }
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")((*object).names as *mut libc::c_void);
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")((*object).values as *mut libc::c_void);
    (*object).names = temp_names;
    (*object).values = temp_values;
    (*object).capacity = new_capacity;
    return 0 as libc::c_int;
}
unsafe extern "C" fn json_object_nget_value(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
    mut n: size_t,
) -> *mut JSON_Value {
    let mut i: size_t = 0;
    let mut name_length: size_t = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: size_t = 0;
    i = 0 as libc::c_int as size_t;
    loop {
        tmp___0 = json_object_get_count(object);
        if !(i < tmp___0) {
            break;
        }
        name_length = strlen(
            *((*object).names).offset(i as isize) as *const libc::c_char,
        );
        if !(name_length != n) {
            tmp = strncmp(
                *((*object).names).offset(i as isize) as *const libc::c_char,
                name,
                n,
            );
            if tmp == 0 as libc::c_int {
                return *((*object).values).offset(i as isize);
            }
        }
        i = i.wrapping_add(1);
    }
    return 0 as *mut libc::c_void as *mut JSON_Value;
}
unsafe extern "C" fn json_object_free(mut object: *mut JSON_Object) {
    let mut tmp: size_t = 0;
    loop {
        tmp = (*object).count;
        (*object).count = ((*object).count).wrapping_sub(1);
        if tmp == 0 {
            break;
        }
        (Some(parson_free.expect("non-null function pointer")))
            .expect(
                "non-null function pointer",
            )(*((*object).names).offset((*object).count as isize) as *mut libc::c_void);
        json_value_free(*((*object).values).offset((*object).count as isize));
    }
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")((*object).names as *mut libc::c_void);
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")((*object).values as *mut libc::c_void);
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(object as *mut libc::c_void);
}
unsafe extern "C" fn json_array_init() -> *mut JSON_Array {
    let mut new_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Array>() as libc::c_ulong);
    new_array = tmp as *mut JSON_Array;
    if new_array.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Array;
    }
    (*new_array).items = 0 as *mut libc::c_void as *mut *mut JSON_Value;
    (*new_array).capacity = 0 as libc::c_int as size_t;
    (*new_array).count = 0 as libc::c_int as size_t;
    return new_array;
}
unsafe extern "C" fn json_array_add(
    mut array: *mut JSON_Array,
    mut value: *mut JSON_Value,
) -> JSON_Status {
    let mut new_capacity: size_t = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: JSON_Status = 0;
    if (*array).count >= (*array).capacity {
        if ((*array).capacity).wrapping_mul(2 as libc::c_ulong) > 15 as libc::c_ulong {
            tmp = ((*array).capacity).wrapping_mul(2 as libc::c_ulong);
        } else {
            tmp = 15 as libc::c_int as size_t;
        }
        new_capacity = tmp;
        if new_capacity > 122880 as libc::c_ulong {
            return -(1 as libc::c_int);
        }
        tmp___0 = json_array_resize(array, new_capacity);
        if tmp___0 == -(1 as libc::c_int) {
            return -(1 as libc::c_int);
        }
    }
    let ref mut fresh6 = *((*array).items).offset((*array).count as isize);
    *fresh6 = value;
    (*array).count = ((*array).count).wrapping_add(1);
    return 0 as libc::c_int;
}
unsafe extern "C" fn json_array_resize(
    mut array: *mut JSON_Array,
    mut new_capacity: size_t,
) -> JSON_Status {
    let mut new_items: *mut *mut JSON_Value = 0 as *mut *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    new_items = 0 as *mut libc::c_void as *mut *mut JSON_Value;
    if new_capacity == 0 as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(
        new_capacity
            .wrapping_mul(::std::mem::size_of::<*mut JSON_Value>() as libc::c_ulong),
    );
    new_items = tmp as *mut *mut JSON_Value;
    if new_items as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    if (*array).items as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        if (*array).count > 0 as libc::c_ulong {
            memcpy(
                new_items as *mut libc::c_void,
                (*array).items as *const libc::c_void,
                ((*array).count)
                    .wrapping_mul(
                        ::std::mem::size_of::<*mut JSON_Value>() as libc::c_ulong,
                    ),
            );
        }
    }
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")((*array).items as *mut libc::c_void);
    (*array).items = new_items;
    (*array).capacity = new_capacity;
    return 0 as libc::c_int;
}
unsafe extern "C" fn json_array_free(mut array: *mut JSON_Array) {
    let mut tmp: size_t = 0;
    loop {
        tmp = (*array).count;
        (*array).count = ((*array).count).wrapping_sub(1);
        if tmp == 0 {
            break;
        }
        json_value_free(*((*array).items).offset((*array).count as isize));
    }
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")((*array).items as *mut libc::c_void);
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(array as *mut libc::c_void);
}
unsafe extern "C" fn json_value_init_string_no_copy(
    mut string: *mut libc::c_char,
) -> *mut JSON_Value {
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Value>() as libc::c_ulong);
    new_value = tmp as *mut JSON_Value;
    if new_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    (*new_value).type_0 = 2 as libc::c_int;
    (*new_value).value.string = string;
    return new_value;
}
unsafe extern "C" fn skip_quotes(mut string: *mut *const libc::c_char) {
    *string = (*string).offset(1);
    while **string as libc::c_int != 34 as libc::c_int {
        if **string as libc::c_int == 0 as libc::c_int {
            return;
        }
        if **string as libc::c_int == 92 as libc::c_int {
            *string = (*string).offset(1);
            if **string as libc::c_int == 0 as libc::c_int {
                return;
            }
        }
        *string = (*string).offset(1);
    }
    *string = (*string).offset(1);
}
unsafe extern "C" fn parse_utf_16(
    mut unprocessed: *mut *const libc::c_char,
    mut processed: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut cp: libc::c_uint = 0;
    let mut lead: libc::c_uint = 0;
    let mut trail: libc::c_uint = 0;
    let mut processed_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut unprocessed_ptr: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___5: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___6: libc::c_int = 0;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___9: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___10: *mut libc::c_char = 0 as *mut libc::c_char;
    processed_ptr = *processed;
    unprocessed_ptr = *unprocessed;
    unprocessed_ptr = unprocessed_ptr.offset(1);
    tmp = is_utf16_hex(unprocessed_ptr as *const libc::c_uchar);
    if tmp != 0 {
        tmp___0 = sscanf(
            unprocessed_ptr,
            b"%4x\0" as *const u8 as *const libc::c_char,
            &mut cp as *mut libc::c_uint,
        );
        if tmp___0 == -(1 as libc::c_int) {
            return -(1 as libc::c_int);
        }
    } else {
        return -(1 as libc::c_int)
    }
    if cp < 128 as libc::c_uint {
        *processed_ptr = cp as libc::c_char;
    } else if cp < 2048 as libc::c_uint {
        tmp___1 = processed_ptr;
        processed_ptr = processed_ptr.offset(1);
        *tmp___1 = (cp >> 6 as libc::c_int & 31 as libc::c_uint | 192 as libc::c_uint)
            as libc::c_char;
        *processed_ptr = (cp & 63 as libc::c_uint | 128 as libc::c_uint) as libc::c_char;
    } else {
        let mut current_block_73: u64;
        if cp < 55296 as libc::c_uint {
            current_block_73 = 10120133683029531417;
        } else if cp > 57343 as libc::c_uint {
            current_block_73 = 10120133683029531417;
        } else {
            if cp >= 55296 as libc::c_uint {
                if cp <= 56319 as libc::c_uint {
                    lead = cp;
                    unprocessed_ptr = unprocessed_ptr.offset(4 as libc::c_int as isize);
                    tmp___4 = unprocessed_ptr;
                    unprocessed_ptr = unprocessed_ptr.offset(1);
                    if *tmp___4 as libc::c_int != 92 as libc::c_int {
                        return -(1 as libc::c_int)
                    } else {
                        tmp___5 = unprocessed_ptr;
                        unprocessed_ptr = unprocessed_ptr.offset(1);
                        if *tmp___5 as libc::c_int != 117 as libc::c_int {
                            return -(1 as libc::c_int)
                        } else {
                            tmp___6 = is_utf16_hex(
                                unprocessed_ptr as *const libc::c_uchar,
                            );
                            if tmp___6 != 0 {
                                tmp___7 = sscanf(
                                    unprocessed_ptr,
                                    b"%4x\0" as *const u8 as *const libc::c_char,
                                    &mut trail as *mut libc::c_uint,
                                );
                                if tmp___7 == -(1 as libc::c_int) {
                                    return -(1 as libc::c_int)
                                } else {
                                    if trail < 56320 as libc::c_uint {
                                        return -(1 as libc::c_int)
                                    } else {
                                        if trail > 57343 as libc::c_uint {
                                            return -(1 as libc::c_int);
                                        }
                                    }
                                }
                            } else {
                                return -(1 as libc::c_int)
                            }
                        }
                    }
                    cp = ((lead.wrapping_sub(55296 as libc::c_uint)
                        & 1023 as libc::c_uint) << 10 as libc::c_int
                        | trail.wrapping_sub(56320 as libc::c_uint)
                            & 1023 as libc::c_uint)
                        .wrapping_add(65536 as libc::c_uint);
                    tmp___8 = processed_ptr;
                    processed_ptr = processed_ptr.offset(1);
                    *tmp___8 = (cp >> 18 as libc::c_int & 7 as libc::c_uint
                        | 240 as libc::c_uint) as libc::c_char;
                    tmp___9 = processed_ptr;
                    processed_ptr = processed_ptr.offset(1);
                    *tmp___9 = (cp >> 12 as libc::c_int & 63 as libc::c_uint
                        | 128 as libc::c_uint) as libc::c_char;
                    tmp___10 = processed_ptr;
                    processed_ptr = processed_ptr.offset(1);
                    *tmp___10 = (cp >> 6 as libc::c_int & 63 as libc::c_uint
                        | 128 as libc::c_uint) as libc::c_char;
                    *processed_ptr = (cp & 63 as libc::c_uint | 128 as libc::c_uint)
                        as libc::c_char;
                } else {
                    return -(1 as libc::c_int)
                }
            } else {
                return -(1 as libc::c_int)
            }
            current_block_73 = 7252614138838059896;
        }
        match current_block_73 {
            10120133683029531417 => {
                tmp___2 = processed_ptr;
                processed_ptr = processed_ptr.offset(1);
                *tmp___2 = (cp >> 12 as libc::c_int & 15 as libc::c_uint
                    | 224 as libc::c_uint) as libc::c_char;
                tmp___3 = processed_ptr;
                processed_ptr = processed_ptr.offset(1);
                *tmp___3 = (cp >> 6 as libc::c_int & 63 as libc::c_uint
                    | 128 as libc::c_uint) as libc::c_char;
                *processed_ptr = (cp & 63 as libc::c_uint | 128 as libc::c_uint)
                    as libc::c_char;
            }
            _ => {}
        }
    }
    unprocessed_ptr = unprocessed_ptr.offset(3 as libc::c_int as isize);
    *processed = processed_ptr;
    *unprocessed = unprocessed_ptr;
    return 0 as libc::c_int;
}
unsafe extern "C" fn process_string(
    mut input: *const libc::c_char,
    mut len: size_t,
) -> *mut libc::c_char {
    let mut current_block: u64;
    let mut input_ptr: *const libc::c_char = 0 as *const libc::c_char;
    let mut initial_size: size_t = 0;
    let mut final_size: size_t = 0;
    let mut output: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut output_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut resized_output: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    input_ptr = input;
    initial_size = len
        .wrapping_add(1 as libc::c_ulong)
        .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong);
    final_size = 0 as libc::c_int as size_t;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect("non-null function pointer")(initial_size);
    output = tmp as *mut libc::c_char;
    output_ptr = output;
    resized_output = 0 as *mut libc::c_void as *mut libc::c_char;
    loop {
        if !(*input_ptr as libc::c_int != 0 as libc::c_int) {
            current_block = 7333393191927787629;
            break;
        }
        if !((input_ptr.offset_from(input) as libc::c_long as size_t) < len) {
            current_block = 7333393191927787629;
            break;
        }
        if *input_ptr as libc::c_int == 92 as libc::c_int {
            input_ptr = input_ptr.offset(1);
            match *input_ptr as libc::c_int {
                34 => {
                    *output_ptr = '"' as i32 as libc::c_char;
                }
                92 => {
                    *output_ptr = '\\' as i32 as libc::c_char;
                }
                47 => {
                    *output_ptr = '/' as i32 as libc::c_char;
                }
                98 => {
                    *output_ptr = '\u{8}' as i32 as libc::c_char;
                }
                102 => {
                    *output_ptr = '\u{c}' as i32 as libc::c_char;
                }
                110 => {
                    *output_ptr = '\n' as i32 as libc::c_char;
                }
                114 => {
                    *output_ptr = '\r' as i32 as libc::c_char;
                }
                116 => {
                    *output_ptr = '\t' as i32 as libc::c_char;
                }
                117 => {
                    tmp___0 = parse_utf_16(&mut input_ptr, &mut output_ptr);
                    if tmp___0 == -(1 as libc::c_int) {
                        current_block = 3296839299193927160;
                        break;
                    }
                }
                _ => {
                    current_block = 3296839299193927160;
                    break;
                }
            }
        } else {
            if (*input_ptr as libc::c_uchar as libc::c_int) < 32 as libc::c_int {
                current_block = 3296839299193927160;
                break;
            }
            *output_ptr = *input_ptr;
        }
        output_ptr = output_ptr.offset(1);
        input_ptr = input_ptr.offset(1);
    }
    match current_block {
        7333393191927787629 => {
            *output_ptr = '\u{0}' as i32 as libc::c_char;
            final_size = (output_ptr.offset_from(output) as libc::c_long as size_t)
                .wrapping_add(1 as libc::c_ulong);
            tmp___1 = (Some(parson_malloc.expect("non-null function pointer")))
                .expect("non-null function pointer")(final_size);
            resized_output = tmp___1 as *mut libc::c_char;
            if !(resized_output as libc::c_ulong
                == 0 as *mut libc::c_void as libc::c_ulong)
            {
                memcpy(
                    resized_output as *mut libc::c_void,
                    output as *const libc::c_void,
                    final_size,
                );
                (Some(parson_free.expect("non-null function pointer")))
                    .expect("non-null function pointer")(output as *mut libc::c_void);
                return resized_output;
            }
        }
        _ => {}
    }
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(output as *mut libc::c_void);
    return 0 as *mut libc::c_void as *mut libc::c_char;
}
unsafe extern "C" fn get_quoted_string(
    mut string: *mut *const libc::c_char,
) -> *mut libc::c_char {
    let mut string_start: *const libc::c_char = 0 as *const libc::c_char;
    let mut string_len: size_t = 0;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    string_start = *string;
    string_len = 0 as libc::c_int as size_t;
    skip_quotes(string);
    if **string as libc::c_int == 0 as libc::c_int {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    string_len = ((*string).offset_from(string_start) as libc::c_long
        - 2 as libc::c_long) as size_t;
    tmp = process_string(string_start.offset(1 as libc::c_int as isize), string_len);
    return tmp;
}
unsafe extern "C" fn parse_value(
    mut string: *mut *const libc::c_char,
    mut nesting: size_t,
) -> *mut JSON_Value {
    let mut tmp: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___1: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___2: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___3: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___4: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___5: *mut JSON_Value = 0 as *mut JSON_Value;
    if nesting > 19 as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    loop {
        tmp = __ctype_b_loc();
        if *(*tmp).offset(**string as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        *string = (*string).offset(1);
    }
    match **string as libc::c_int {
        123 => {
            tmp___0 = parse_object_value(
                string,
                nesting.wrapping_add(1 as libc::c_ulong),
            );
            return tmp___0;
        }
        91 => {
            tmp___1 = parse_array_value(
                string,
                nesting.wrapping_add(1 as libc::c_ulong),
            );
            return tmp___1;
        }
        34 => {
            tmp___2 = parse_string_value(string);
            return tmp___2;
        }
        116 | 102 => {
            tmp___3 = parse_boolean_value(string);
            return tmp___3;
        }
        57 | 56 | 55 | 54 | 53 | 52 | 51 | 50 | 49 | 48 | 45 => {
            tmp___4 = parse_number_value(string);
            return tmp___4;
        }
        110 => {
            tmp___5 = parse_null_value(string);
            return tmp___5;
        }
        _ => return 0 as *mut libc::c_void as *mut JSON_Value,
    };
}
unsafe extern "C" fn parse_object_value(
    mut string: *mut *const libc::c_char,
    mut nesting: size_t,
) -> *mut JSON_Value {
    let mut output_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut output_object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tmp___0: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut new_key: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___2: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___3: JSON_Status = 0;
    let mut tmp___4: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___5: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___6: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___7: size_t = 0;
    let mut tmp___8: JSON_Status = 0;
    tmp = json_value_init_object();
    output_value = tmp;
    new_value = 0 as *mut libc::c_void as *mut JSON_Value;
    tmp___0 = json_value_get_object(output_value as *const JSON_Value);
    output_object = tmp___0;
    new_key = 0 as *mut libc::c_void as *mut libc::c_char;
    if output_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    *string = (*string).offset(1);
    loop {
        tmp___1 = __ctype_b_loc();
        if *(*tmp___1).offset(**string as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        *string = (*string).offset(1);
    }
    if **string as libc::c_int == 125 as libc::c_int {
        *string = (*string).offset(1);
        return output_value;
    }
    while **string as libc::c_int != 0 as libc::c_int {
        new_key = get_quoted_string(string);
        loop {
            tmp___2 = __ctype_b_loc();
            if *(*tmp___2).offset(**string as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int == 0
            {
                break;
            }
            *string = (*string).offset(1);
        }
        if new_key as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        } else {
            if **string as libc::c_int != 58 as libc::c_int {
                json_value_free(output_value);
                return 0 as *mut libc::c_void as *mut JSON_Value;
            }
        }
        *string = (*string).offset(1);
        new_value = parse_value(string, nesting);
        if new_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            (Some(parson_free.expect("non-null function pointer")))
                .expect("non-null function pointer")(new_key as *mut libc::c_void);
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
        tmp___3 = json_object_add(
            output_object,
            new_key as *const libc::c_char,
            new_value,
        );
        if tmp___3 == -(1 as libc::c_int) {
            (Some(parson_free.expect("non-null function pointer")))
                .expect("non-null function pointer")(new_key as *mut libc::c_void);
            (Some(parson_free.expect("non-null function pointer")))
                .expect("non-null function pointer")(new_value as *mut libc::c_void);
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(new_key as *mut libc::c_void);
        loop {
            tmp___4 = __ctype_b_loc();
            if *(*tmp___4).offset(**string as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int == 0
            {
                break;
            }
            *string = (*string).offset(1);
        }
        if **string as libc::c_int != 44 as libc::c_int {
            break;
        }
        *string = (*string).offset(1);
        loop {
            tmp___5 = __ctype_b_loc();
            if *(*tmp___5).offset(**string as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int == 0
            {
                break;
            }
            *string = (*string).offset(1);
        }
    }
    loop {
        tmp___6 = __ctype_b_loc();
        if *(*tmp___6).offset(**string as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        *string = (*string).offset(1);
    }
    if **string as libc::c_int != 125 as libc::c_int {
        json_value_free(output_value);
        return 0 as *mut libc::c_void as *mut JSON_Value;
    } else {
        tmp___7 = json_object_get_count(output_object as *const JSON_Object);
        tmp___8 = json_object_resize(output_object, tmp___7);
        if tmp___8 == -(1 as libc::c_int) {
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
    }
    *string = (*string).offset(1);
    return output_value;
}
unsafe extern "C" fn parse_array_value(
    mut string: *mut *const libc::c_char,
    mut nesting: size_t,
) -> *mut JSON_Value {
    let mut output_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut new_array_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut output_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut tmp___0: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut tmp___1: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___2: JSON_Status = 0;
    let mut tmp___3: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___4: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___5: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___6: size_t = 0;
    let mut tmp___7: JSON_Status = 0;
    tmp = json_value_init_array();
    output_value = tmp;
    new_array_value = 0 as *mut libc::c_void as *mut JSON_Value;
    tmp___0 = json_value_get_array(output_value as *const JSON_Value);
    output_array = tmp___0;
    if output_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    *string = (*string).offset(1);
    loop {
        tmp___1 = __ctype_b_loc();
        if *(*tmp___1).offset(**string as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        *string = (*string).offset(1);
    }
    if **string as libc::c_int == 93 as libc::c_int {
        *string = (*string).offset(1);
        return output_value;
    }
    while **string as libc::c_int != 0 as libc::c_int {
        new_array_value = parse_value(string, nesting);
        if new_array_value.is_null() {
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
        tmp___2 = json_array_add(output_array, new_array_value);
        if tmp___2 == -(1 as libc::c_int) {
            (Some(parson_free.expect("non-null function pointer")))
                .expect(
                    "non-null function pointer",
                )(new_array_value as *mut libc::c_void);
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
        loop {
            tmp___3 = __ctype_b_loc();
            if *(*tmp___3).offset(**string as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int == 0
            {
                break;
            }
            *string = (*string).offset(1);
        }
        if **string as libc::c_int != 44 as libc::c_int {
            break;
        }
        *string = (*string).offset(1);
        loop {
            tmp___4 = __ctype_b_loc();
            if *(*tmp___4).offset(**string as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int == 0
            {
                break;
            }
            *string = (*string).offset(1);
        }
    }
    loop {
        tmp___5 = __ctype_b_loc();
        if *(*tmp___5).offset(**string as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        *string = (*string).offset(1);
    }
    if **string as libc::c_int != 93 as libc::c_int {
        json_value_free(output_value);
        return 0 as *mut libc::c_void as *mut JSON_Value;
    } else {
        tmp___6 = json_array_get_count(output_array as *const JSON_Array);
        tmp___7 = json_array_resize(output_array, tmp___6);
        if tmp___7 == -(1 as libc::c_int) {
            json_value_free(output_value);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
    }
    *string = (*string).offset(1);
    return output_value;
}
unsafe extern "C" fn parse_string_value(
    mut string: *mut *const libc::c_char,
) -> *mut JSON_Value {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut new_string: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    value = 0 as *mut libc::c_void as *mut JSON_Value;
    tmp = get_quoted_string(string);
    new_string = tmp;
    if new_string as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    value = json_value_init_string_no_copy(new_string);
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(new_string as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    return value;
}
unsafe extern "C" fn parse_boolean_value(
    mut string: *mut *const libc::c_char,
) -> *mut JSON_Value {
    let mut true_token_size: size_t = 0;
    let mut false_token_size: size_t = 0;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    true_token_size = (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    false_token_size = (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    tmp___2 = strncmp(
        b"true\0" as *const u8 as *const libc::c_char,
        *string,
        true_token_size,
    );
    if tmp___2 == 0 as libc::c_int {
        *string = (*string).offset(true_token_size as isize);
        tmp = json_value_init_boolean(1 as libc::c_int);
        return tmp;
    } else {
        tmp___1 = strncmp(
            b"false\0" as *const u8 as *const libc::c_char,
            *string,
            false_token_size,
        );
        if tmp___1 == 0 as libc::c_int {
            *string = (*string).offset(false_token_size as isize);
            tmp___0 = json_value_init_boolean(0 as libc::c_int);
            return tmp___0;
        }
    }
    return 0 as *mut libc::c_void as *mut JSON_Value;
}
unsafe extern "C" fn parse_number_value(
    mut string: *mut *const libc::c_char,
) -> *mut JSON_Value {
    let mut end: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut number: libc::c_double = 0.;
    let mut tmp: libc::c_double = 0.;
    let mut output_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_int = 0;
    tmp = strtod(*string, &mut end as *mut *mut libc::c_char);
    number = tmp;
    tmp___0 = is_decimal(
        *string,
        end.offset_from(*string as *mut libc::c_char) as libc::c_long as size_t,
    );
    if tmp___0 != 0 {
        *string = end as *const libc::c_char;
        output_value = json_value_init_number(number);
    } else {
        output_value = 0 as *mut libc::c_void as *mut JSON_Value;
    }
    return output_value;
}
unsafe extern "C" fn parse_null_value(
    mut string: *mut *const libc::c_char,
) -> *mut JSON_Value {
    let mut token_size: size_t = 0;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_int = 0;
    token_size = (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
        .wrapping_sub(1 as libc::c_ulong);
    tmp___0 = strncmp(
        b"null\0" as *const u8 as *const libc::c_char,
        *string,
        token_size,
    );
    if tmp___0 == 0 as libc::c_int {
        *string = (*string).offset(token_size as isize);
        tmp = json_value_init_null();
        return tmp;
    }
    return 0 as *mut libc::c_void as *mut JSON_Value;
}
unsafe extern "C" fn json_serialize_to_buffer_r(
    mut value: *const JSON_Value,
    mut buf: *mut libc::c_char,
    mut level: libc::c_int,
    mut is_pretty: libc::c_int,
    mut num_buf: *mut libc::c_char,
) -> libc::c_int {
    let mut key: *const libc::c_char = 0 as *const libc::c_char;
    let mut string: *const libc::c_char = 0 as *const libc::c_char;
    let mut temp_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut i: size_t = 0;
    let mut count: size_t = 0;
    let mut num: libc::c_double = 0.;
    let mut written: libc::c_int = 0;
    let mut written_total: libc::c_int = 0;
    let mut tmp: JSON_Value_Type = 0;
    let mut tmp___0: libc::c_int = 0;
    key = 0 as *mut libc::c_void as *const libc::c_char;
    string = 0 as *mut libc::c_void as *const libc::c_char;
    temp_value = 0 as *mut libc::c_void as *mut JSON_Value;
    array = 0 as *mut libc::c_void as *mut JSON_Array;
    object = 0 as *mut libc::c_void as *mut JSON_Object;
    i = 0 as libc::c_int as size_t;
    count = 0 as libc::c_int as size_t;
    num = 0.0f64;
    written = -(1 as libc::c_int);
    written_total = 0 as libc::c_int;
    tmp = json_value_get_type(value);
    match tmp {
        5 => {
            array = json_value_get_array(value);
            count = json_array_get_count(array as *const JSON_Array);
            written = append_string(buf, b"[\0" as *const u8 as *const libc::c_char);
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            if count > 0 as libc::c_ulong {
                if is_pretty != 0 {
                    written = append_string(
                        buf,
                        b"\n\0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
            }
            i = 0 as libc::c_int as size_t;
            while i < count {
                if is_pretty != 0 {
                    written = append_indent(buf, level + 1 as libc::c_int);
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                temp_value = json_array_get_value(array as *const JSON_Array, i);
                written = json_serialize_to_buffer_r(
                    temp_value as *const JSON_Value,
                    buf,
                    level + 1 as libc::c_int,
                    is_pretty,
                    num_buf,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
                if i < count.wrapping_sub(1 as libc::c_ulong) {
                    written = append_string(
                        buf,
                        b",\0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                if is_pretty != 0 {
                    written = append_string(
                        buf,
                        b"\n\0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                i = i.wrapping_add(1);
            }
            if count > 0 as libc::c_ulong {
                if is_pretty != 0 {
                    written = append_indent(buf, level);
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
            }
            written = append_string(buf, b"]\0" as *const u8 as *const libc::c_char);
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            return written_total;
        }
        4 => {
            object = json_value_get_object(value);
            count = json_object_get_count(object as *const JSON_Object);
            written = append_string(buf, b"{\0" as *const u8 as *const libc::c_char);
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            if count > 0 as libc::c_ulong {
                if is_pretty != 0 {
                    written = append_string(
                        buf,
                        b"\n\0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
            }
            i = 0 as libc::c_int as size_t;
            while i < count {
                key = json_object_get_name(object as *const JSON_Object, i);
                if is_pretty != 0 {
                    written = append_indent(buf, level + 1 as libc::c_int);
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                written = json_serialize_string(key, buf);
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
                written = append_string(buf, b":\0" as *const u8 as *const libc::c_char);
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
                if is_pretty != 0 {
                    written = append_string(
                        buf,
                        b" \0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                temp_value = json_object_get_value(object as *const JSON_Object, key);
                written = json_serialize_to_buffer_r(
                    temp_value as *const JSON_Value,
                    buf,
                    level + 1 as libc::c_int,
                    is_pretty,
                    num_buf,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
                if i < count.wrapping_sub(1 as libc::c_ulong) {
                    written = append_string(
                        buf,
                        b",\0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                if is_pretty != 0 {
                    written = append_string(
                        buf,
                        b"\n\0" as *const u8 as *const libc::c_char,
                    );
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
                i = i.wrapping_add(1);
            }
            if count > 0 as libc::c_ulong {
                if is_pretty != 0 {
                    written = append_indent(buf, level);
                    if written < 0 as libc::c_int {
                        return -(1 as libc::c_int);
                    }
                    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                        buf = buf.offset(written as isize);
                    }
                    written_total += written;
                }
            }
            written = append_string(buf, b"}\0" as *const u8 as *const libc::c_char);
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            return written_total;
        }
        2 => {
            string = json_value_get_string(value);
            written = json_serialize_string(string, buf);
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            return written_total;
        }
        6 => {
            tmp___0 = json_value_get_boolean(value);
            if tmp___0 != 0 {
                written = append_string(
                    buf,
                    b"true\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            } else {
                written = append_string(
                    buf,
                    b"false\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            return written_total;
        }
        3 => {
            num = json_value_get_number(value);
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                num_buf = buf;
            }
            if num == num as libc::c_int as libc::c_double {
                written = sprintf(
                    num_buf,
                    b"%d\0" as *const u8 as *const libc::c_char,
                    num as libc::c_int,
                );
            } else {
                written = sprintf(
                    num_buf,
                    b"%f\0" as *const u8 as *const libc::c_char,
                    num,
                );
            }
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            return written_total;
        }
        1 => {
            written = append_string(buf, b"null\0" as *const u8 as *const libc::c_char);
            if written < 0 as libc::c_int {
                return -(1 as libc::c_int);
            }
            if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                buf = buf.offset(written as isize);
            }
            written_total += written;
            return written_total;
        }
        -1 => return -(1 as libc::c_int),
        _ => return -(1 as libc::c_int),
    };
}
unsafe extern "C" fn json_serialize_string(
    mut string: *const libc::c_char,
    mut buf: *mut libc::c_char,
) -> libc::c_int {
    let mut i: size_t = 0;
    let mut len: size_t = 0;
    let mut tmp: size_t = 0;
    let mut c: libc::c_char = 0;
    let mut written: libc::c_int = 0;
    let mut written_total: libc::c_int = 0;
    i = 0 as libc::c_int as size_t;
    tmp = strlen(string);
    len = tmp;
    c = '\u{0}' as i32 as libc::c_char;
    written = -(1 as libc::c_int);
    written_total = 0 as libc::c_int;
    written = append_string(buf, b"\"\0" as *const u8 as *const libc::c_char);
    if written < 0 as libc::c_int {
        return -(1 as libc::c_int);
    }
    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        buf = buf.offset(written as isize);
    }
    written_total += written;
    i = 0 as libc::c_int as size_t;
    while i < len {
        c = *string.offset(i as isize);
        match c as libc::c_int {
            34 => {
                written = append_string(
                    buf,
                    b"\\\"\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            92 => {
                written = append_string(
                    buf,
                    b"\\\\\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            8 => {
                written = append_string(
                    buf,
                    b"\\b\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            12 => {
                written = append_string(
                    buf,
                    b"\\f\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            10 => {
                written = append_string(
                    buf,
                    b"\\n\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            13 => {
                written = append_string(
                    buf,
                    b"\\r\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            9 => {
                written = append_string(
                    buf,
                    b"\\t\0" as *const u8 as *const libc::c_char,
                );
                if written < 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    buf = buf.offset(written as isize);
                }
                written_total += written;
            }
            _ => {
                if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
                    *buf.offset(0 as libc::c_int as isize) = c;
                    buf = buf.offset(1);
                }
                written_total += 1;
            }
        }
        i = i.wrapping_add(1);
    }
    written = append_string(buf, b"\"\0" as *const u8 as *const libc::c_char);
    if written < 0 as libc::c_int {
        return -(1 as libc::c_int);
    }
    if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        buf = buf.offset(written as isize);
    }
    written_total += written;
    return written_total;
}
unsafe extern "C" fn append_indent(
    mut buf: *mut libc::c_char,
    mut level: libc::c_int,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut written: libc::c_int = 0;
    let mut written_total: libc::c_int = 0;
    written = -(1 as libc::c_int);
    written_total = 0 as libc::c_int;
    i = 0 as libc::c_int;
    while i < level {
        written = append_string(buf, b"  \0" as *const u8 as *const libc::c_char);
        if written < 0 as libc::c_int {
            return -(1 as libc::c_int);
        }
        if buf as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
            buf = buf.offset(written as isize);
        }
        written_total += written;
        i += 1;
    }
    return written_total;
}
unsafe extern "C" fn append_string(
    mut buf: *mut libc::c_char,
    mut string: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: size_t = 0;
    let mut tmp___0: libc::c_int = 0;
    if buf as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp = strlen(string);
        return tmp as libc::c_int;
    }
    tmp___0 = sprintf(buf, b"%s\0" as *const u8 as *const libc::c_char, string);
    return tmp___0;
}
pub unsafe extern "C" fn json_parse_file(
    mut filename: *const libc::c_char,
) -> *mut JSON_Value {
    let mut file_contents: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut output_value: *mut JSON_Value = 0 as *mut JSON_Value;
    tmp = read_file(filename);
    file_contents = tmp;
    output_value = 0 as *mut libc::c_void as *mut JSON_Value;
    if file_contents as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    output_value = json_parse_string(file_contents as *const libc::c_char);
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(file_contents as *mut libc::c_void);
    return output_value;
}
pub unsafe extern "C" fn json_parse_file_with_comments(
    mut filename: *const libc::c_char,
) -> *mut JSON_Value {
    let mut file_contents: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut output_value: *mut JSON_Value = 0 as *mut JSON_Value;
    tmp = read_file(filename);
    file_contents = tmp;
    output_value = 0 as *mut libc::c_void as *mut JSON_Value;
    if file_contents as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    output_value = json_parse_string_with_comments(file_contents as *const libc::c_char);
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(file_contents as *mut libc::c_void);
    return output_value;
}
pub unsafe extern "C" fn json_parse_string(
    mut string: *const libc::c_char,
) -> *mut JSON_Value {
    let mut tmp: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    if string as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    loop {
        tmp = __ctype_b_loc();
        if *(*tmp).offset(*string as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        string = string.offset(1);
    }
    if *string as libc::c_int != 123 as libc::c_int {
        if *string as libc::c_int != 91 as libc::c_int {
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
    }
    tmp___0 = parse_value(&mut string, 0 as libc::c_int as size_t);
    return tmp___0;
}
pub unsafe extern "C" fn json_parse_string_with_comments(
    mut string: *const libc::c_char,
) -> *mut JSON_Value {
    let mut result: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut string_mutable_copy: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut string_mutable_copy_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    result = 0 as *mut libc::c_void as *mut JSON_Value;
    string_mutable_copy = 0 as *mut libc::c_void as *mut libc::c_char;
    string_mutable_copy_ptr = 0 as *mut libc::c_void as *mut libc::c_char;
    string_mutable_copy = parson_strdup(string);
    if string_mutable_copy as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    remove_comments(
        string_mutable_copy,
        b"/*\0" as *const u8 as *const libc::c_char,
        b"*/\0" as *const u8 as *const libc::c_char,
    );
    remove_comments(
        string_mutable_copy,
        b"//\0" as *const u8 as *const libc::c_char,
        b"\n\0" as *const u8 as *const libc::c_char,
    );
    string_mutable_copy_ptr = string_mutable_copy;
    loop {
        tmp = __ctype_b_loc();
        if *(*tmp).offset(*string_mutable_copy_ptr as libc::c_int as isize)
            as libc::c_int & 8192 as libc::c_int == 0
        {
            break;
        }
        string_mutable_copy_ptr = string_mutable_copy_ptr.offset(1);
    }
    if *string_mutable_copy_ptr as libc::c_int != 123 as libc::c_int {
        if *string_mutable_copy_ptr as libc::c_int != 91 as libc::c_int {
            (Some(parson_free.expect("non-null function pointer")))
                .expect(
                    "non-null function pointer",
                )(string_mutable_copy as *mut libc::c_void);
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
    }
    result = parse_value(
        &mut string_mutable_copy_ptr as *mut *mut libc::c_char
            as *mut *const libc::c_char,
        0 as libc::c_int as size_t,
    );
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(string_mutable_copy as *mut libc::c_void);
    return result;
}
pub unsafe extern "C" fn json_object_get_value(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *mut JSON_Value {
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    if object as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value
    } else {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return 0 as *mut libc::c_void as *mut JSON_Value;
        }
    }
    tmp = strlen(name);
    tmp___0 = json_object_nget_value(object, name, tmp);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_get_string(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *const libc::c_char {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = json_object_get_value(object, name);
    tmp___0 = json_value_get_string(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_get_number(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> libc::c_double {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_double = 0.;
    tmp = json_object_get_value(object, name);
    tmp___0 = json_value_get_number(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_get_object(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *mut JSON_Object {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Object = 0 as *mut JSON_Object;
    tmp = json_object_get_value(object, name);
    tmp___0 = json_value_get_object(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_get_array(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *mut JSON_Array {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Array = 0 as *mut JSON_Array;
    tmp = json_object_get_value(object, name);
    tmp___0 = json_value_get_array(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_get_boolean(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_int = 0;
    tmp = json_object_get_value(object, name);
    tmp___0 = json_value_get_boolean(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_dotget_value(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *mut JSON_Value {
    let mut dot_position: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___1: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___2: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tmp___3: *mut JSON_Value = 0 as *mut JSON_Value;
    tmp = strchr(name, '.' as i32);
    dot_position = tmp as *const libc::c_char;
    if dot_position.is_null() {
        tmp___0 = json_object_get_value(object, name);
        return tmp___0;
    }
    tmp___1 = json_object_nget_value(
        object,
        name,
        dot_position.offset_from(name) as libc::c_long as size_t,
    );
    tmp___2 = json_value_get_object(tmp___1 as *const JSON_Value);
    object = tmp___2 as *const JSON_Object;
    tmp___3 = json_object_dotget_value(
        object,
        dot_position.offset(1 as libc::c_int as isize),
    );
    return tmp___3;
}
pub unsafe extern "C" fn json_object_dotget_string(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *const libc::c_char {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = json_object_dotget_value(object, name);
    tmp___0 = json_value_get_string(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_dotget_number(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> libc::c_double {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_double = 0.;
    tmp = json_object_dotget_value(object, name);
    tmp___0 = json_value_get_number(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_dotget_object(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *mut JSON_Object {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Object = 0 as *mut JSON_Object;
    tmp = json_object_dotget_value(object, name);
    tmp___0 = json_value_get_object(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_dotget_array(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> *mut JSON_Array {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Array = 0 as *mut JSON_Array;
    tmp = json_object_dotget_value(object, name);
    tmp___0 = json_value_get_array(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_dotget_boolean(
    mut object: *const JSON_Object,
    mut name: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_int = 0;
    tmp = json_object_dotget_value(object, name);
    tmp___0 = json_value_get_boolean(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_get_count(
    mut object: *const JSON_Object,
) -> size_t {
    let mut tmp: size_t = 0;
    if !object.is_null() {
        tmp = (*object).count;
    } else {
        tmp = 0 as libc::c_int as size_t;
    }
    return tmp;
}
pub unsafe extern "C" fn json_object_get_name(
    mut object: *const JSON_Object,
    mut index___0: size_t,
) -> *const libc::c_char {
    let mut tmp: size_t = 0;
    tmp = json_object_get_count(object);
    if index___0 >= tmp {
        return 0 as *mut libc::c_void as *const libc::c_char;
    }
    return *((*object).names).offset(index___0 as isize) as *const libc::c_char;
}
pub unsafe extern "C" fn json_array_get_value(
    mut array: *const JSON_Array,
    mut index___0: size_t,
) -> *mut JSON_Value {
    let mut tmp: size_t = 0;
    tmp = json_array_get_count(array);
    if index___0 >= tmp {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    return *((*array).items).offset(index___0 as isize);
}
pub unsafe extern "C" fn json_array_get_string(
    mut array: *const JSON_Array,
    mut index___0: size_t,
) -> *const libc::c_char {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = json_array_get_value(array, index___0);
    tmp___0 = json_value_get_string(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_array_get_number(
    mut array: *const JSON_Array,
    mut index___0: size_t,
) -> libc::c_double {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_double = 0.;
    tmp = json_array_get_value(array, index___0);
    tmp___0 = json_value_get_number(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_array_get_object(
    mut array: *const JSON_Array,
    mut index___0: size_t,
) -> *mut JSON_Object {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Object = 0 as *mut JSON_Object;
    tmp = json_array_get_value(array, index___0);
    tmp___0 = json_value_get_object(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_array_get_array(
    mut array: *const JSON_Array,
    mut index___0: size_t,
) -> *mut JSON_Array {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Array = 0 as *mut JSON_Array;
    tmp = json_array_get_value(array, index___0);
    tmp___0 = json_value_get_array(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_array_get_boolean(
    mut array: *const JSON_Array,
    mut index___0: size_t,
) -> libc::c_int {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: libc::c_int = 0;
    tmp = json_array_get_value(array, index___0);
    tmp___0 = json_value_get_boolean(tmp as *const JSON_Value);
    return tmp___0;
}
pub unsafe extern "C" fn json_array_get_count(mut array: *const JSON_Array) -> size_t {
    let mut tmp: size_t = 0;
    if !array.is_null() {
        tmp = (*array).count;
    } else {
        tmp = 0 as libc::c_int as size_t;
    }
    return tmp;
}
pub unsafe extern "C" fn json_value_get_type(
    mut value: *const JSON_Value,
) -> JSON_Value_Type {
    let mut tmp: JSON_Value_Type = 0;
    if !value.is_null() {
        tmp = (*value).type_0;
    } else {
        tmp = -(1 as libc::c_int);
    }
    return tmp;
}
pub unsafe extern "C" fn json_value_get_object(
    mut value: *const JSON_Value,
) -> *mut JSON_Object {
    let mut tmp___0: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tmp___1: JSON_Value_Type = 0;
    tmp___1 = json_value_get_type(value);
    if tmp___1 == 4 as libc::c_int {
        tmp___0 = (*value).value.object;
    } else {
        tmp___0 = 0 as *mut libc::c_void as *mut JSON_Object;
    }
    return tmp___0;
}
pub unsafe extern "C" fn json_value_get_array(
    mut value: *const JSON_Value,
) -> *mut JSON_Array {
    let mut tmp___0: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut tmp___1: JSON_Value_Type = 0;
    tmp___1 = json_value_get_type(value);
    if tmp___1 == 5 as libc::c_int {
        tmp___0 = (*value).value.array;
    } else {
        tmp___0 = 0 as *mut libc::c_void as *mut JSON_Array;
    }
    return tmp___0;
}
pub unsafe extern "C" fn json_value_get_string(
    mut value: *const JSON_Value,
) -> *const libc::c_char {
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: JSON_Value_Type = 0;
    tmp___1 = json_value_get_type(value);
    if tmp___1 == 2 as libc::c_int {
        tmp___0 = (*value).value.string;
    } else {
        tmp___0 = 0 as *mut libc::c_void as *mut libc::c_char;
    }
    return tmp___0 as *const libc::c_char;
}
pub unsafe extern "C" fn json_value_get_number(
    mut value: *const JSON_Value,
) -> libc::c_double {
    let mut tmp___0: libc::c_double = 0.;
    let mut tmp___1: JSON_Value_Type = 0;
    tmp___1 = json_value_get_type(value);
    if tmp___1 == 3 as libc::c_int {
        tmp___0 = (*value).value.number;
    } else {
        tmp___0 = 0 as libc::c_int as libc::c_double;
    }
    return tmp___0;
}
pub unsafe extern "C" fn json_value_get_boolean(
    mut value: *const JSON_Value,
) -> libc::c_int {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: JSON_Value_Type = 0;
    tmp___1 = json_value_get_type(value);
    if tmp___1 == 6 as libc::c_int {
        tmp___0 = (*value).value.boolean;
    } else {
        tmp___0 = -(1 as libc::c_int);
    }
    return tmp___0;
}
pub unsafe extern "C" fn json_value_free(mut value: *mut JSON_Value) {
    let mut tmp: JSON_Value_Type = 0;
    tmp = json_value_get_type(value as *const JSON_Value);
    match tmp {
        4 => {
            json_object_free((*value).value.object);
        }
        2 => {
            if !((*value).value.string).is_null() {
                (Some(parson_free.expect("non-null function pointer")))
                    .expect(
                        "non-null function pointer",
                    )((*value).value.string as *mut libc::c_void);
            }
        }
        5 => {
            json_array_free((*value).value.array);
        }
        _ => {}
    }
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(value as *mut libc::c_void);
}
pub unsafe extern "C" fn json_value_init_object() -> *mut JSON_Value {
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Value>() as libc::c_ulong);
    new_value = tmp as *mut JSON_Value;
    if new_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    (*new_value).type_0 = 4 as libc::c_int;
    (*new_value).value.object = json_object_init();
    if ((*new_value).value.object).is_null() {
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(new_value as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    return new_value;
}
pub unsafe extern "C" fn json_value_init_array() -> *mut JSON_Value {
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Value>() as libc::c_ulong);
    new_value = tmp as *mut JSON_Value;
    if new_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    (*new_value).type_0 = 5 as libc::c_int;
    (*new_value).value.array = json_array_init();
    if ((*new_value).value.array).is_null() {
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(new_value as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    return new_value;
}
pub unsafe extern "C" fn json_value_init_string(
    mut string: *const libc::c_char,
) -> *mut JSON_Value {
    let mut copy___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut string_len: size_t = 0;
    let mut tmp: libc::c_int = 0;
    copy___0 = 0 as *mut libc::c_void as *mut libc::c_char;
    string_len = 0 as libc::c_int as size_t;
    if string as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    string_len = strlen(string);
    tmp = is_valid_utf8(string, string_len);
    if tmp == 0 {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    copy___0 = parson_strndup(string, string_len);
    if copy___0 as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    value = json_value_init_string_no_copy(copy___0);
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(copy___0 as *mut libc::c_void);
    }
    return value;
}
pub unsafe extern "C" fn json_value_init_number(
    mut number: libc::c_double,
) -> *mut JSON_Value {
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Value>() as libc::c_ulong);
    new_value = tmp as *mut JSON_Value;
    if new_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    (*new_value).type_0 = 3 as libc::c_int;
    (*new_value).value.number = number;
    return new_value;
}
pub unsafe extern "C" fn json_value_init_boolean(
    mut boolean: libc::c_int,
) -> *mut JSON_Value {
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Value>() as libc::c_ulong);
    new_value = tmp as *mut JSON_Value;
    if new_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    (*new_value).type_0 = 6 as libc::c_int;
    if boolean != 0 {
        (*new_value).value.boolean = 1 as libc::c_int;
    } else {
        (*new_value).value.boolean = 0 as libc::c_int;
    }
    return new_value;
}
pub unsafe extern "C" fn json_value_init_null() -> *mut JSON_Value {
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(parson_malloc.expect("non-null function pointer")))
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<JSON_Value>() as libc::c_ulong);
    new_value = tmp as *mut JSON_Value;
    if new_value.is_null() {
        return 0 as *mut libc::c_void as *mut JSON_Value;
    }
    (*new_value).type_0 = 1 as libc::c_int;
    return new_value;
}
pub unsafe extern "C" fn json_value_deep_copy(
    mut value: *const JSON_Value,
) -> *mut JSON_Value {
    let mut i: size_t = 0;
    let mut return_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut temp_value_copy: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut temp_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut temp_string: *const libc::c_char = 0 as *const libc::c_char;
    let mut temp_key: *const libc::c_char = 0 as *const libc::c_char;
    let mut temp_string_copy: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut temp_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut temp_array_copy: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut temp_object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut temp_object_copy: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tmp: JSON_Value_Type = 0;
    let mut tmp___0: JSON_Status = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: JSON_Status = 0;
    let mut tmp___3: size_t = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___6: libc::c_double = 0.;
    let mut tmp___7: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___8: *mut JSON_Value = 0 as *mut JSON_Value;
    i = 0 as libc::c_int as size_t;
    return_value = 0 as *mut libc::c_void as *mut JSON_Value;
    temp_value_copy = 0 as *mut libc::c_void as *mut JSON_Value;
    temp_value = 0 as *mut libc::c_void as *mut JSON_Value;
    temp_string = 0 as *mut libc::c_void as *const libc::c_char;
    temp_key = 0 as *mut libc::c_void as *const libc::c_char;
    temp_string_copy = 0 as *mut libc::c_void as *mut libc::c_char;
    temp_array = 0 as *mut libc::c_void as *mut JSON_Array;
    temp_array_copy = 0 as *mut libc::c_void as *mut JSON_Array;
    temp_object = 0 as *mut libc::c_void as *mut JSON_Object;
    temp_object_copy = 0 as *mut libc::c_void as *mut JSON_Object;
    tmp = json_value_get_type(value);
    match tmp {
        5 => {
            temp_array = json_value_get_array(value);
            return_value = json_value_init_array();
            if return_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                return 0 as *mut libc::c_void as *mut JSON_Value;
            }
            temp_array_copy = json_value_get_array(return_value as *const JSON_Value);
            i = 0 as libc::c_int as size_t;
            loop {
                tmp___1 = json_array_get_count(temp_array as *const JSON_Array);
                if !(i < tmp___1) {
                    break;
                }
                temp_value = json_array_get_value(temp_array as *const JSON_Array, i);
                temp_value_copy = json_value_deep_copy(temp_value as *const JSON_Value);
                if temp_value_copy as libc::c_ulong
                    == 0 as *mut libc::c_void as libc::c_ulong
                {
                    json_value_free(return_value);
                    return 0 as *mut libc::c_void as *mut JSON_Value;
                }
                tmp___0 = json_array_add(temp_array_copy, temp_value_copy);
                if tmp___0 == -(1 as libc::c_int) {
                    json_value_free(return_value);
                    json_value_free(temp_value_copy);
                    return 0 as *mut libc::c_void as *mut JSON_Value;
                }
                i = i.wrapping_add(1);
            }
            return return_value;
        }
        4 => {
            temp_object = json_value_get_object(value);
            return_value = json_value_init_object();
            if return_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                return 0 as *mut libc::c_void as *mut JSON_Value;
            }
            temp_object_copy = json_value_get_object(return_value as *const JSON_Value);
            i = 0 as libc::c_int as size_t;
            loop {
                tmp___3 = json_object_get_count(temp_object as *const JSON_Object);
                if !(i < tmp___3) {
                    break;
                }
                temp_key = json_object_get_name(temp_object as *const JSON_Object, i);
                temp_value = json_object_get_value(
                    temp_object as *const JSON_Object,
                    temp_key,
                );
                temp_value_copy = json_value_deep_copy(temp_value as *const JSON_Value);
                if temp_value_copy as libc::c_ulong
                    == 0 as *mut libc::c_void as libc::c_ulong
                {
                    json_value_free(return_value);
                    return 0 as *mut libc::c_void as *mut JSON_Value;
                }
                tmp___2 = json_object_add(temp_object_copy, temp_key, temp_value_copy);
                if tmp___2 == -(1 as libc::c_int) {
                    json_value_free(return_value);
                    json_value_free(temp_value_copy);
                    return 0 as *mut libc::c_void as *mut JSON_Value;
                }
                i = i.wrapping_add(1);
            }
            return return_value;
        }
        6 => {
            tmp___4 = json_value_get_boolean(value);
            tmp___5 = json_value_init_boolean(tmp___4);
            return tmp___5;
        }
        3 => {
            tmp___6 = json_value_get_number(value);
            tmp___7 = json_value_init_number(tmp___6);
            return tmp___7;
        }
        2 => {
            temp_string = json_value_get_string(value);
            temp_string_copy = parson_strdup(temp_string);
            if temp_string_copy as libc::c_ulong
                == 0 as *mut libc::c_void as libc::c_ulong
            {
                return 0 as *mut libc::c_void as *mut JSON_Value;
            }
            return_value = json_value_init_string_no_copy(temp_string_copy);
            if return_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                (Some(parson_free.expect("non-null function pointer")))
                    .expect(
                        "non-null function pointer",
                    )(temp_string_copy as *mut libc::c_void);
            }
            return return_value;
        }
        1 => {
            tmp___8 = json_value_init_null();
            return tmp___8;
        }
        -1 => return 0 as *mut libc::c_void as *mut JSON_Value,
        _ => return 0 as *mut libc::c_void as *mut JSON_Value,
    };
}
pub unsafe extern "C" fn json_serialization_size(
    mut value: *const JSON_Value,
) -> size_t {
    let mut num_buf: [libc::c_char; 1100] = [0; 1100];
    let mut res: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: size_t = 0;
    tmp = json_serialize_to_buffer_r(
        value,
        0 as *mut libc::c_void as *mut libc::c_char,
        0 as libc::c_int,
        0 as libc::c_int,
        num_buf.as_mut_ptr(),
    );
    res = tmp;
    if res < 0 as libc::c_int {
        tmp___0 = 0 as libc::c_int as size_t;
    } else {
        tmp___0 = (res + 1 as libc::c_int) as size_t;
    }
    return tmp___0;
}
pub unsafe extern "C" fn json_serialize_to_buffer(
    mut value: *const JSON_Value,
    mut buf: *mut libc::c_char,
    mut buf_size_in_bytes: size_t,
) -> JSON_Status {
    let mut written: libc::c_int = 0;
    let mut needed_size_in_bytes: size_t = 0;
    let mut tmp: size_t = 0;
    written = -(1 as libc::c_int);
    tmp = json_serialization_size(value);
    needed_size_in_bytes = tmp;
    if needed_size_in_bytes == 0 as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if buf_size_in_bytes < needed_size_in_bytes {
            return -(1 as libc::c_int);
        }
    }
    written = json_serialize_to_buffer_r(
        value,
        buf,
        0 as libc::c_int,
        0 as libc::c_int,
        0 as *mut libc::c_void as *mut libc::c_char,
    );
    if written < 0 as libc::c_int {
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_serialize_to_file(
    mut value: *const JSON_Value,
    mut filename: *const libc::c_char,
) -> JSON_Status {
    let mut return_code: JSON_Status = 0;
    let mut fp: *mut FILE = 0 as *mut FILE;
    let mut serialized_string: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    return_code = 0 as libc::c_int;
    fp = 0 as *mut libc::c_void as *mut FILE;
    tmp = json_serialize_to_string(value);
    serialized_string = tmp;
    if serialized_string as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    fp = fopen(filename, b"w\0" as *const u8 as *const libc::c_char);
    if fp as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = fputs(serialized_string as *const libc::c_char, fp);
        if tmp___0 == -(1 as libc::c_int) {
            return_code = -(1 as libc::c_int);
        }
        tmp___1 = fclose(fp);
        if tmp___1 == -(1 as libc::c_int) {
            return_code = -(1 as libc::c_int);
        }
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}
pub unsafe extern "C" fn json_serialize_to_string(
    mut value: *const JSON_Value,
) -> *mut libc::c_char {
    let mut serialization_result: JSON_Status = 0;
    let mut buf_size_bytes: size_t = 0;
    let mut tmp: size_t = 0;
    let mut buf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    serialization_result = -(1 as libc::c_int);
    tmp = json_serialization_size(value);
    buf_size_bytes = tmp;
    buf = 0 as *mut libc::c_void as *mut libc::c_char;
    if buf_size_bytes == 0 as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = (Some(parson_malloc.expect("non-null function pointer")))
        .expect("non-null function pointer")(buf_size_bytes);
    buf = tmp___0 as *mut libc::c_char;
    if buf as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
    if serialization_result == -(1 as libc::c_int) {
        json_free_serialized_string(buf);
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    return buf;
}
pub unsafe extern "C" fn json_serialization_size_pretty(
    mut value: *const JSON_Value,
) -> size_t {
    let mut num_buf: [libc::c_char; 1100] = [0; 1100];
    let mut res: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: size_t = 0;
    tmp = json_serialize_to_buffer_r(
        value,
        0 as *mut libc::c_void as *mut libc::c_char,
        0 as libc::c_int,
        1 as libc::c_int,
        num_buf.as_mut_ptr(),
    );
    res = tmp;
    if res < 0 as libc::c_int {
        tmp___0 = 0 as libc::c_int as size_t;
    } else {
        tmp___0 = (res + 1 as libc::c_int) as size_t;
    }
    return tmp___0;
}
pub unsafe extern "C" fn json_serialize_to_buffer_pretty(
    mut value: *const JSON_Value,
    mut buf: *mut libc::c_char,
    mut buf_size_in_bytes: size_t,
) -> JSON_Status {
    let mut written: libc::c_int = 0;
    let mut needed_size_in_bytes: size_t = 0;
    let mut tmp: size_t = 0;
    written = -(1 as libc::c_int);
    tmp = json_serialization_size_pretty(value);
    needed_size_in_bytes = tmp;
    if needed_size_in_bytes == 0 as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if buf_size_in_bytes < needed_size_in_bytes {
            return -(1 as libc::c_int);
        }
    }
    written = json_serialize_to_buffer_r(
        value,
        buf,
        0 as libc::c_int,
        1 as libc::c_int,
        0 as *mut libc::c_void as *mut libc::c_char,
    );
    if written < 0 as libc::c_int {
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_serialize_to_file_pretty(
    mut value: *const JSON_Value,
    mut filename: *const libc::c_char,
) -> JSON_Status {
    let mut return_code: JSON_Status = 0;
    let mut fp: *mut FILE = 0 as *mut FILE;
    let mut serialized_string: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    return_code = 0 as libc::c_int;
    fp = 0 as *mut libc::c_void as *mut FILE;
    tmp = json_serialize_to_string_pretty(value);
    serialized_string = tmp;
    if serialized_string as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    fp = fopen(filename, b"w\0" as *const u8 as *const libc::c_char);
    if fp as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = fputs(serialized_string as *const libc::c_char, fp);
        if tmp___0 == -(1 as libc::c_int) {
            return_code = -(1 as libc::c_int);
        }
        tmp___1 = fclose(fp);
        if tmp___1 == -(1 as libc::c_int) {
            return_code = -(1 as libc::c_int);
        }
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}
pub unsafe extern "C" fn json_serialize_to_string_pretty(
    mut value: *const JSON_Value,
) -> *mut libc::c_char {
    let mut serialization_result: JSON_Status = 0;
    let mut buf_size_bytes: size_t = 0;
    let mut tmp: size_t = 0;
    let mut buf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    serialization_result = -(1 as libc::c_int);
    tmp = json_serialization_size_pretty(value);
    buf_size_bytes = tmp;
    buf = 0 as *mut libc::c_void as *mut libc::c_char;
    if buf_size_bytes == 0 as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = (Some(parson_malloc.expect("non-null function pointer")))
        .expect("non-null function pointer")(buf_size_bytes);
    buf = tmp___0 as *mut libc::c_char;
    if buf as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
    if serialization_result == -(1 as libc::c_int) {
        json_free_serialized_string(buf);
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    return buf;
}
pub unsafe extern "C" fn json_free_serialized_string(mut string: *mut libc::c_char) {
    (Some(parson_free.expect("non-null function pointer")))
        .expect("non-null function pointer")(string as *mut libc::c_void);
}
pub unsafe extern "C" fn json_array_remove(
    mut array: *mut JSON_Array,
    mut ix: size_t,
) -> JSON_Status {
    let mut last_element_ix: size_t = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: *mut JSON_Value = 0 as *mut JSON_Value;
    last_element_ix = 0 as libc::c_int as size_t;
    if array as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        tmp = json_array_get_count(array as *const JSON_Array);
        if ix >= tmp {
            return -(1 as libc::c_int);
        }
    }
    tmp___0 = json_array_get_count(array as *const JSON_Array);
    last_element_ix = tmp___0.wrapping_sub(1 as libc::c_ulong);
    tmp___1 = json_array_get_value(array as *const JSON_Array, ix);
    json_value_free(tmp___1);
    (*array).count = ((*array).count).wrapping_sub(1);
    if ix != last_element_ix {
        let ref mut fresh7 = *((*array).items).offset(ix as isize);
        *fresh7 = json_array_get_value(array as *const JSON_Array, last_element_ix);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_replace_value(
    mut array: *mut JSON_Array,
    mut ix: size_t,
    mut value: *mut JSON_Value,
) -> JSON_Status {
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    if array as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int)
        } else {
            tmp = json_array_get_count(array as *const JSON_Array);
            if ix >= tmp {
                return -(1 as libc::c_int);
            }
        }
    }
    tmp___0 = json_array_get_value(array as *const JSON_Array, ix);
    json_value_free(tmp___0);
    let ref mut fresh8 = *((*array).items).offset(ix as isize);
    *fresh8 = value;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_replace_string(
    mut array: *mut JSON_Array,
    mut i: size_t,
    mut string: *const libc::c_char,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_string(string);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_replace_value(array, i, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_replace_number(
    mut array: *mut JSON_Array,
    mut i: size_t,
    mut number: libc::c_double,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_number(number);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_replace_value(array, i, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_replace_boolean(
    mut array: *mut JSON_Array,
    mut i: size_t,
    mut boolean: libc::c_int,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_boolean(boolean);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_replace_value(array, i, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_replace_null(
    mut array: *mut JSON_Array,
    mut i: size_t,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_null();
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_replace_value(array, i, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_clear(mut array: *mut JSON_Array) -> JSON_Status {
    let mut i: size_t = 0;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: size_t = 0;
    i = 0 as libc::c_int as size_t;
    if array as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    i = 0 as libc::c_int as size_t;
    loop {
        tmp___0 = json_array_get_count(array as *const JSON_Array);
        if !(i < tmp___0) {
            break;
        }
        tmp = json_array_get_value(array as *const JSON_Array, i);
        json_value_free(tmp);
        i = i.wrapping_add(1);
    }
    (*array).count = 0 as libc::c_int as size_t;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_append_value(
    mut array: *mut JSON_Array,
    mut value: *mut JSON_Value,
) -> JSON_Status {
    let mut tmp: JSON_Status = 0;
    if array as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int);
        }
    }
    tmp = json_array_add(array, value);
    return tmp;
}
pub unsafe extern "C" fn json_array_append_string(
    mut array: *mut JSON_Array,
    mut string: *const libc::c_char,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_string(string);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_append_value(array, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_append_number(
    mut array: *mut JSON_Array,
    mut number: libc::c_double,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_number(number);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_append_value(array, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_append_boolean(
    mut array: *mut JSON_Array,
    mut boolean: libc::c_int,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_boolean(boolean);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_append_value(array, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_array_append_null(
    mut array: *mut JSON_Array,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_null();
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_array_append_value(array, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_object_set_value(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut value: *mut JSON_Value,
) -> JSON_Status {
    let mut i: size_t = 0;
    let mut old_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: JSON_Status = 0;
    i = 0 as libc::c_int as size_t;
    if object as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int)
        } else {
            if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                return -(1 as libc::c_int);
            }
        }
    }
    old_value = json_object_get_value(object as *const JSON_Object, name);
    if old_value as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong {
        json_value_free(old_value);
        i = 0 as libc::c_int as size_t;
        loop {
            tmp___0 = json_object_get_count(object as *const JSON_Object);
            if !(i < tmp___0) {
                break;
            }
            tmp = strcmp(
                *((*object).names).offset(i as isize) as *const libc::c_char,
                name,
            );
            if tmp == 0 as libc::c_int {
                let ref mut fresh9 = *((*object).values).offset(i as isize);
                *fresh9 = value;
                return 0 as libc::c_int;
            }
            i = i.wrapping_add(1);
        }
    }
    tmp___1 = json_object_add(object, name, value);
    return tmp___1;
}
pub unsafe extern "C" fn json_object_set_string(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut string: *const libc::c_char,
) -> JSON_Status {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_string(string);
    tmp___0 = json_object_set_value(object, name, tmp);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_set_number(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut number: libc::c_double,
) -> JSON_Status {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_number(number);
    tmp___0 = json_object_set_value(object, name, tmp);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_set_boolean(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut boolean: libc::c_int,
) -> JSON_Status {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_boolean(boolean);
    tmp___0 = json_object_set_value(object, name, tmp);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_set_null(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
) -> JSON_Status {
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_null();
    tmp___0 = json_object_set_value(object, name, tmp);
    return tmp___0;
}
pub unsafe extern "C" fn json_object_dotset_value(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut value: *mut JSON_Value,
) -> JSON_Status {
    let mut dot_pos: *const libc::c_char = 0 as *const libc::c_char;
    let mut current_name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut temp_obj: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut new_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: JSON_Status = 0;
    let mut tmp___1: JSON_Status = 0;
    let mut tmp___2: JSON_Status = 0;
    dot_pos = 0 as *mut libc::c_void as *const libc::c_char;
    current_name = 0 as *mut libc::c_void as *mut libc::c_char;
    temp_obj = 0 as *mut libc::c_void as *mut JSON_Object;
    new_value = 0 as *mut libc::c_void as *mut JSON_Value;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int)
        } else {
            if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                return -(1 as libc::c_int);
            }
        }
    }
    tmp = strchr(name, '.' as i32);
    dot_pos = tmp as *const libc::c_char;
    if dot_pos as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = json_object_set_value(object, name, value);
        return tmp___0;
    } else {
        current_name = parson_strndup(
            name,
            dot_pos.offset_from(name) as libc::c_long as size_t,
        );
        temp_obj = json_object_get_object(
            object as *const JSON_Object,
            current_name as *const libc::c_char,
        );
        if temp_obj as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            new_value = json_value_init_object();
            if new_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
                (Some(parson_free.expect("non-null function pointer")))
                    .expect(
                        "non-null function pointer",
                    )(current_name as *mut libc::c_void);
                return -(1 as libc::c_int);
            }
            tmp___1 = json_object_add(
                object,
                current_name as *const libc::c_char,
                new_value,
            );
            if tmp___1 == -(1 as libc::c_int) {
                json_value_free(new_value);
                (Some(parson_free.expect("non-null function pointer")))
                    .expect(
                        "non-null function pointer",
                    )(current_name as *mut libc::c_void);
                return -(1 as libc::c_int);
            }
            temp_obj = json_object_get_object(
                object as *const JSON_Object,
                current_name as *const libc::c_char,
            );
        }
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(current_name as *mut libc::c_void);
        tmp___2 = json_object_dotset_value(
            temp_obj,
            dot_pos.offset(1 as libc::c_int as isize),
            value,
        );
        return tmp___2;
    };
}
pub unsafe extern "C" fn json_object_dotset_string(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut string: *const libc::c_char,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_string(string);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_object_dotset_value(object, name, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_object_dotset_number(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut number: libc::c_double,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_number(number);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_object_dotset_value(object, name, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_object_dotset_boolean(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
    mut boolean: libc::c_int,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_boolean(boolean);
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_object_dotset_value(object, name, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_object_dotset_null(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
) -> JSON_Status {
    let mut value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: JSON_Status = 0;
    tmp = json_value_init_null();
    value = tmp;
    if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = json_object_dotset_value(object, name, value);
    if tmp___0 == -(1 as libc::c_int) {
        json_value_free(value);
        return -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_object_remove(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
) -> JSON_Status {
    let mut i: size_t = 0;
    let mut last_item_index: size_t = 0;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: size_t = 0;
    i = 0 as libc::c_int as size_t;
    last_item_index = 0 as libc::c_int as size_t;
    if object as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        tmp = json_object_get_value(object as *const JSON_Object, name);
        if tmp as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int);
        }
    }
    tmp___0 = json_object_get_count(object as *const JSON_Object);
    last_item_index = tmp___0.wrapping_sub(1 as libc::c_ulong);
    i = 0 as libc::c_int as size_t;
    loop {
        tmp___2 = json_object_get_count(object as *const JSON_Object);
        if !(i < tmp___2) {
            break;
        }
        tmp___1 = strcmp(
            *((*object).names).offset(i as isize) as *const libc::c_char,
            name,
        );
        if tmp___1 == 0 as libc::c_int {
            (Some(parson_free.expect("non-null function pointer")))
                .expect(
                    "non-null function pointer",
                )(*((*object).names).offset(i as isize) as *mut libc::c_void);
            json_value_free(*((*object).values).offset(i as isize));
            if i != last_item_index {
                let ref mut fresh10 = *((*object).names).offset(i as isize);
                *fresh10 = *((*object).names).offset(last_item_index as isize);
                let ref mut fresh11 = *((*object).values).offset(i as isize);
                *fresh11 = *((*object).values).offset(last_item_index as isize);
            }
            (*object).count = ((*object).count).wrapping_sub(1);
            return 0 as libc::c_int;
        }
        i = i.wrapping_add(1);
    }
    return -(1 as libc::c_int);
}
pub unsafe extern "C" fn json_object_dotremove(
    mut object: *mut JSON_Object,
    mut name: *const libc::c_char,
) -> JSON_Status {
    let mut dot_pos: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut current_name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut temp_obj: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut tmp___0: JSON_Status = 0;
    let mut tmp___1: JSON_Status = 0;
    tmp = strchr(name, '.' as i32);
    dot_pos = tmp as *const libc::c_char;
    current_name = 0 as *mut libc::c_void as *mut libc::c_char;
    temp_obj = 0 as *mut libc::c_void as *mut JSON_Object;
    if dot_pos as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp___0 = json_object_remove(object, name);
        return tmp___0;
    } else {
        current_name = parson_strndup(
            name,
            dot_pos.offset_from(name) as libc::c_long as size_t,
        );
        temp_obj = json_object_get_object(
            object as *const JSON_Object,
            current_name as *const libc::c_char,
        );
        if temp_obj as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            (Some(parson_free.expect("non-null function pointer")))
                .expect("non-null function pointer")(current_name as *mut libc::c_void);
            return -(1 as libc::c_int);
        }
        (Some(parson_free.expect("non-null function pointer")))
            .expect("non-null function pointer")(current_name as *mut libc::c_void);
        tmp___1 = json_object_dotremove(
            temp_obj,
            dot_pos.offset(1 as libc::c_int as isize),
        );
        return tmp___1;
    };
}
pub unsafe extern "C" fn json_object_clear(mut object: *mut JSON_Object) -> JSON_Status {
    let mut i: size_t = 0;
    let mut tmp: size_t = 0;
    i = 0 as libc::c_int as size_t;
    if object as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    i = 0 as libc::c_int as size_t;
    loop {
        tmp = json_object_get_count(object as *const JSON_Object);
        if !(i < tmp) {
            break;
        }
        (Some(parson_free.expect("non-null function pointer")))
            .expect(
                "non-null function pointer",
            )(*((*object).names).offset(i as isize) as *mut libc::c_void);
        json_value_free(*((*object).values).offset(i as isize));
        i = i.wrapping_add(1);
    }
    (*object).count = 0 as libc::c_int as size_t;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn json_validate(
    mut schema: *const JSON_Value,
    mut value: *const JSON_Value,
) -> JSON_Status {
    let mut temp_schema_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut temp_value: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut schema_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut value_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut schema_object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut value_object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut schema_type: JSON_Value_Type = 0;
    let mut value_type: JSON_Value_Type = 0;
    let mut key: *const libc::c_char = 0 as *const libc::c_char;
    let mut i: size_t = 0;
    let mut count: size_t = 0;
    let mut tmp: JSON_Status = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: JSON_Status = 0;
    temp_schema_value = 0 as *mut libc::c_void as *mut JSON_Value;
    temp_value = 0 as *mut libc::c_void as *mut JSON_Value;
    schema_array = 0 as *mut libc::c_void as *mut JSON_Array;
    value_array = 0 as *mut libc::c_void as *mut JSON_Array;
    schema_object = 0 as *mut libc::c_void as *mut JSON_Object;
    value_object = 0 as *mut libc::c_void as *mut JSON_Object;
    schema_type = -(1 as libc::c_int);
    value_type = -(1 as libc::c_int);
    key = 0 as *mut libc::c_void as *const libc::c_char;
    i = 0 as libc::c_int as size_t;
    count = 0 as libc::c_int as size_t;
    if schema as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return -(1 as libc::c_int)
    } else {
        if value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
            return -(1 as libc::c_int);
        }
    }
    schema_type = json_value_get_type(schema);
    value_type = json_value_get_type(value);
    if schema_type != value_type {
        if schema_type != 1 as libc::c_int {
            return -(1 as libc::c_int);
        }
    }
    match schema_type {
        5 => {
            schema_array = json_value_get_array(schema);
            value_array = json_value_get_array(value);
            count = json_array_get_count(schema_array as *const JSON_Array);
            if count == 0 as libc::c_ulong {
                return 0 as libc::c_int;
            }
            temp_schema_value = json_array_get_value(
                schema_array as *const JSON_Array,
                0 as libc::c_int as size_t,
            );
            i = 0 as libc::c_int as size_t;
            loop {
                tmp___0 = json_array_get_count(value_array as *const JSON_Array);
                if !(i < tmp___0) {
                    break;
                }
                temp_value = json_array_get_value(value_array as *const JSON_Array, i);
                tmp = json_validate(
                    temp_schema_value as *const JSON_Value,
                    temp_value as *const JSON_Value,
                );
                if tmp == 0 as libc::c_int {
                    return -(1 as libc::c_int);
                }
                i = i.wrapping_add(1);
            }
            return 0 as libc::c_int;
        }
        4 => {
            schema_object = json_value_get_object(schema);
            value_object = json_value_get_object(value);
            count = json_object_get_count(schema_object as *const JSON_Object);
            if count == 0 as libc::c_ulong {
                return 0 as libc::c_int
            } else {
                tmp___1 = json_object_get_count(value_object as *const JSON_Object);
                if tmp___1 < count {
                    return -(1 as libc::c_int);
                }
            }
            i = 0 as libc::c_int as size_t;
            while i < count {
                key = json_object_get_name(schema_object as *const JSON_Object, i);
                temp_schema_value = json_object_get_value(
                    schema_object as *const JSON_Object,
                    key,
                );
                temp_value = json_object_get_value(
                    value_object as *const JSON_Object,
                    key,
                );
                if temp_value as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong
                {
                    return -(1 as libc::c_int);
                }
                tmp___2 = json_validate(
                    temp_schema_value as *const JSON_Value,
                    temp_value as *const JSON_Value,
                );
                if tmp___2 == -(1 as libc::c_int) {
                    return -(1 as libc::c_int);
                }
                i = i.wrapping_add(1);
            }
            return 0 as libc::c_int;
        }
        1 | 6 | 3 | 2 => return 0 as libc::c_int,
        _ => return -(1 as libc::c_int),
    };
}
pub unsafe extern "C" fn json_value_equals(
    mut a: *const JSON_Value,
    mut b: *const JSON_Value,
) -> libc::c_int {
    let mut a_object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut b_object: *mut JSON_Object = 0 as *mut JSON_Object;
    let mut a_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut b_array: *mut JSON_Array = 0 as *mut JSON_Array;
    let mut a_string: *const libc::c_char = 0 as *const libc::c_char;
    let mut b_string: *const libc::c_char = 0 as *const libc::c_char;
    let mut key: *const libc::c_char = 0 as *const libc::c_char;
    let mut a_count: size_t = 0;
    let mut b_count: size_t = 0;
    let mut i: size_t = 0;
    let mut a_type: JSON_Value_Type = 0;
    let mut b_type: JSON_Value_Type = 0;
    let mut tmp: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___0: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___3: *mut JSON_Value = 0 as *mut JSON_Value;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    let mut tmp___7: libc::c_int = 0;
    let mut tmp___8: libc::c_double = 0.;
    let mut tmp___9: libc::c_double = 0.;
    let mut tmp___10: libc::c_double = 0.;
    a_object = 0 as *mut libc::c_void as *mut JSON_Object;
    b_object = 0 as *mut libc::c_void as *mut JSON_Object;
    a_array = 0 as *mut libc::c_void as *mut JSON_Array;
    b_array = 0 as *mut libc::c_void as *mut JSON_Array;
    a_string = 0 as *mut libc::c_void as *const libc::c_char;
    b_string = 0 as *mut libc::c_void as *const libc::c_char;
    key = 0 as *mut libc::c_void as *const libc::c_char;
    a_count = 0 as libc::c_int as size_t;
    b_count = 0 as libc::c_int as size_t;
    i = 0 as libc::c_int as size_t;
    a_type = json_value_get_type(a);
    b_type = json_value_get_type(b);
    if a_type != b_type {
        return 0 as libc::c_int;
    }
    match a_type {
        5 => {
            a_array = json_value_get_array(a);
            b_array = json_value_get_array(b);
            a_count = json_array_get_count(a_array as *const JSON_Array);
            b_count = json_array_get_count(b_array as *const JSON_Array);
            if a_count != b_count {
                return 0 as libc::c_int;
            }
            i = 0 as libc::c_int as size_t;
            while i < a_count {
                tmp = json_array_get_value(b_array as *const JSON_Array, i);
                tmp___0 = json_array_get_value(a_array as *const JSON_Array, i);
                tmp___1 = json_value_equals(
                    tmp___0 as *const JSON_Value,
                    tmp as *const JSON_Value,
                );
                if tmp___1 == 0 {
                    return 0 as libc::c_int;
                }
                i = i.wrapping_add(1);
            }
            return 1 as libc::c_int;
        }
        4 => {
            a_object = json_value_get_object(a);
            b_object = json_value_get_object(b);
            a_count = json_object_get_count(a_object as *const JSON_Object);
            b_count = json_object_get_count(b_object as *const JSON_Object);
            if a_count != b_count {
                return 0 as libc::c_int;
            }
            i = 0 as libc::c_int as size_t;
            while i < a_count {
                key = json_object_get_name(a_object as *const JSON_Object, i);
                tmp___2 = json_object_get_value(b_object as *const JSON_Object, key);
                tmp___3 = json_object_get_value(a_object as *const JSON_Object, key);
                tmp___4 = json_value_equals(
                    tmp___3 as *const JSON_Value,
                    tmp___2 as *const JSON_Value,
                );
                if tmp___4 == 0 {
                    return 0 as libc::c_int;
                }
                i = i.wrapping_add(1);
            }
            return 1 as libc::c_int;
        }
        2 => {
            a_string = json_value_get_string(a);
            b_string = json_value_get_string(b);
            tmp___5 = strcmp(a_string, b_string);
            return (tmp___5 == 0 as libc::c_int) as libc::c_int;
        }
        6 => {
            tmp___6 = json_value_get_boolean(a);
            tmp___7 = json_value_get_boolean(b);
            return (tmp___6 == tmp___7) as libc::c_int;
        }
        3 => {
            tmp___8 = json_value_get_number(a);
            tmp___9 = json_value_get_number(b);
            tmp___10 = fabs(tmp___8 - tmp___9);
            return (tmp___10 < 0.000001f64) as libc::c_int;
        }
        -1 => return 1 as libc::c_int,
        1 => return 1 as libc::c_int,
        _ => return 1 as libc::c_int,
    };
}
pub unsafe extern "C" fn json_type(mut value: *const JSON_Value) -> JSON_Value_Type {
    let mut tmp: JSON_Value_Type = 0;
    tmp = json_value_get_type(value);
    return tmp;
}
pub unsafe extern "C" fn json_object(mut value: *const JSON_Value) -> *mut JSON_Object {
    let mut tmp: *mut JSON_Object = 0 as *mut JSON_Object;
    tmp = json_value_get_object(value);
    return tmp;
}
pub unsafe extern "C" fn json_array(mut value: *const JSON_Value) -> *mut JSON_Array {
    let mut tmp: *mut JSON_Array = 0 as *mut JSON_Array;
    tmp = json_value_get_array(value);
    return tmp;
}
pub unsafe extern "C" fn json_string(
    mut value: *const JSON_Value,
) -> *const libc::c_char {
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    tmp = json_value_get_string(value);
    return tmp;
}
pub unsafe extern "C" fn json_number(mut value: *const JSON_Value) -> libc::c_double {
    let mut tmp: libc::c_double = 0.;
    tmp = json_value_get_number(value);
    return tmp;
}
pub unsafe extern "C" fn json_boolean(mut value: *const JSON_Value) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = json_value_get_boolean(value);
    return tmp;
}
pub unsafe extern "C" fn json_set_allocation_functions(
    mut malloc_fun: Option::<unsafe extern "C" fn(size_t) -> *mut libc::c_void>,
    mut free_fun: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
) {
    parson_malloc = malloc_fun;
    parson_free = free_fun;
}
pub unsafe extern "C" fn path_join(
    mut dir: *const libc::c_char,
    mut file: *const libc::c_char,
) -> *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut buf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___2: bool = false;
    let mut filecopy: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: bool = false;
    tmp = strlen(dir);
    tmp___0 = strlen(file);
    size = tmp.wrapping_add(tmp___0).wrapping_add(2 as libc::c_ulong) as libc::c_int;
    tmp___1 = malloc(
        (size as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<libc::c_char>() as libc::c_ulong),
    );
    buf = tmp___1 as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == buf as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    strcpy(buf, dir);
    tmp___2 = str_ends_with(dir, b"/\0" as *const u8 as *const libc::c_char);
    if !tmp___2 {
        strcat(buf, b"/\0" as *const u8 as *const libc::c_char);
    }
    tmp___4 = str_starts_with(file, b"/\0" as *const u8 as *const libc::c_char);
    if tmp___4 {
        tmp___3 = strdup(file);
        filecopy = tmp___3;
        if 0 as *mut libc::c_void as libc::c_ulong == filecopy as libc::c_ulong {
            free(buf as *mut libc::c_void);
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
        filecopy = filecopy.offset(1);
        strcat(buf, filecopy as *const libc::c_char);
        filecopy = filecopy.offset(-1);
        free(filecopy as *mut libc::c_void);
    } else {
        strcat(buf, file);
    }
    return buf;
}
unsafe extern "C" fn http_get_cb(
    mut contents: *mut libc::c_void,
    mut size: size_t,
    mut nmemb: size_t,
    mut userp: *mut libc::c_void,
) -> size_t {
    let mut realsize: size_t = 0;
    let mut res: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    realsize = size.wrapping_mul(nmemb);
    res = userp as *mut http_get_response_t;
    if 0 as *mut libc::c_char as libc::c_ulong == (*res).data as libc::c_ulong {
        tmp = malloc(realsize.wrapping_add(1 as libc::c_ulong));
        (*res).data = tmp as *mut libc::c_char;
    } else {
        tmp___0 = realloc(
            (*res).data as *mut libc::c_void,
            ((*res).size).wrapping_add(realsize).wrapping_add(1 as libc::c_ulong),
        );
        ptr = tmp___0;
        if 0 as *mut libc::c_void as libc::c_ulong == ptr as libc::c_ulong {
            fprintf(stderr, b"not enough memory!\0" as *const u8 as *const libc::c_char);
            return 0 as libc::c_int as size_t;
        }
        (*res).data = ptr as *mut libc::c_char;
    }
    memset(
        ((*res).data).offset((*res).size as isize) as *mut libc::c_void,
        0 as libc::c_int,
        realsize,
    );
    memcpy(
        ((*res).data).offset((*res).size as isize) as *mut libc::c_void,
        contents as *const libc::c_void,
        realsize,
    );
    (*res)
        .size = ((*res).size as libc::c_ulong).wrapping_add(realsize) as size_t
        as size_t;
    *((*res).data).offset((*res).size as isize) = 0 as libc::c_int as libc::c_char;
    return realsize;
}
pub unsafe extern "C" fn http_get_shared(
    mut url: *const libc::c_char,
    mut share: *mut libc::c_void,
) -> *mut http_get_response_t {
    let mut req: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut res: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut c: libc::c_int = 0;
    let mut tmp___1: CURLcode = CURLE_OK;
    tmp = curl_easy_init();
    req = tmp;
    tmp___0 = malloc(::std::mem::size_of::<http_get_response_t>() as libc::c_ulong);
    res = tmp___0 as *mut http_get_response_t;
    memset(
        res as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<http_get_response_t>() as libc::c_ulong,
    );
    if !share.is_null() {
        curl_easy_setopt(req, CURLOPT_SHARE, share);
    }
    curl_easy_setopt(req, CURLOPT_URL, url);
    curl_easy_setopt(req, CURLOPT_HTTPGET, 1 as libc::c_int);
    curl_easy_setopt(req, CURLOPT_FOLLOWLOCATION, 1 as libc::c_int);
    curl_easy_setopt(
        req,
        CURLOPT_WRITEFUNCTION,
        Some(
            http_get_cb
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    size_t,
                    size_t,
                    *mut libc::c_void,
                ) -> size_t,
        ),
    );
    curl_easy_setopt(req, CURLOPT_WRITEDATA, res as *mut libc::c_void);
    curl_easy_setopt(
        req,
        CURLOPT_USERAGENT,
        b"http-get.c/0.4.0\0" as *const u8 as *const libc::c_char,
    );
    tmp___1 = curl_easy_perform(req);
    c = tmp___1 as libc::c_int;
    curl_easy_getinfo(
        req,
        CURLINFO_RESPONSE_CODE,
        &mut (*res).status as *mut libc::c_long,
    );
    if 200 as libc::c_long == (*res).status {
        if 42 as libc::c_int != c {
            (*res).ok = 1 as libc::c_int;
        } else {
            (*res).ok = 0 as libc::c_int;
        }
    } else {
        (*res).ok = 0 as libc::c_int;
    }
    curl_easy_cleanup(req);
    return res;
}
pub unsafe extern "C" fn http_get(
    mut url: *const libc::c_char,
) -> *mut http_get_response_t {
    let mut tmp: *mut http_get_response_t = 0 as *mut http_get_response_t;
    tmp = http_get_shared(url, 0 as *mut libc::c_void);
    return tmp;
}
unsafe extern "C" fn http_get_file_cb(
    mut ptr: *mut libc::c_void,
    mut size: size_t,
    mut nmemb: size_t,
    mut stream: *mut libc::c_void,
) -> size_t {
    let mut n: size_t = 0;
    let mut tmp: size_t = 0;
    fflush(stream as *mut FILE);
    tmp = fwrite(ptr as *const libc::c_void, size, nmemb, stream as *mut FILE);
    n = tmp;
    return n;
}
pub unsafe extern "C" fn http_get_file_shared(
    mut url: *const libc::c_char,
    mut file: *const libc::c_char,
    mut share: *mut libc::c_void,
) -> libc::c_int {
    let mut req: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut fp: *mut FILE = 0 as *mut FILE;
    let mut tmp___0: *mut FILE = 0 as *mut FILE;
    let mut res: libc::c_int = 0;
    let mut tmp___1: CURLcode = CURLE_OK;
    let mut status: libc::c_long = 0;
    let mut tmp___2: libc::c_int = 0;
    tmp = curl_easy_init();
    req = tmp;
    if req.is_null() {
        return -(1 as libc::c_int);
    }
    tmp___0 = fopen(file, b"wb\0" as *const u8 as *const libc::c_char);
    fp = tmp___0;
    if fp.is_null() {
        return -(1 as libc::c_int);
    }
    if !share.is_null() {
        curl_easy_setopt(req, CURLOPT_SHARE, share);
    }
    curl_easy_setopt(req, CURLOPT_URL, url);
    curl_easy_setopt(req, CURLOPT_HTTPGET, 1 as libc::c_int);
    curl_easy_setopt(req, CURLOPT_FOLLOWLOCATION, 1 as libc::c_int);
    curl_easy_setopt(
        req,
        CURLOPT_WRITEFUNCTION,
        Some(
            http_get_file_cb
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    size_t,
                    size_t,
                    *mut libc::c_void,
                ) -> size_t,
        ),
    );
    curl_easy_setopt(req, CURLOPT_WRITEDATA, fp);
    tmp___1 = curl_easy_perform(req);
    res = tmp___1 as libc::c_int;
    curl_easy_getinfo(req, CURLINFO_RESPONSE_CODE, &mut status as *mut libc::c_long);
    curl_easy_cleanup(req);
    fclose(fp);
    if 200 as libc::c_long == status {
        if 42 as libc::c_int != res {
            tmp___2 = 0 as libc::c_int;
        } else {
            tmp___2 = -(1 as libc::c_int);
        }
    } else {
        tmp___2 = -(1 as libc::c_int);
    }
    return tmp___2;
}
pub unsafe extern "C" fn http_get_file(
    mut url: *const libc::c_char,
    mut file: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = http_get_file_shared(url, file, 0 as *mut libc::c_void);
    return tmp;
}
pub unsafe extern "C" fn http_get_free(mut res: *mut http_get_response_t) {
    if 0 as *mut libc::c_void as libc::c_ulong == res as libc::c_ulong {
        return;
    }
    if 0 as *mut libc::c_void as libc::c_ulong != (*res).data as libc::c_ulong {
        free((*res).data as *mut libc::c_void);
    }
    (*res).data = 0 as *mut libc::c_void as *mut libc::c_char;
    (*res).size = 0 as libc::c_int as size_t;
    free(res as *mut libc::c_void);
}
pub unsafe extern "C" fn str_flatten(
    mut array: *mut *const libc::c_char,
    mut start: libc::c_int,
    mut end: libc::c_int,
) -> *mut libc::c_char {
    let mut count: libc::c_int = 0;
    let mut size: size_t = 0;
    let mut pos: size_t = 0;
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut str: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut i___0: libc::c_int = 0;
    let mut j___0: libc::c_int = 0;
    count = end - start;
    let vla = count as usize;
    let mut lengths: Vec::<size_t> = ::std::vec::from_elem(0, vla);
    size = 0 as libc::c_int as size_t;
    pos = 0 as libc::c_int as size_t;
    i = start;
    j = 0 as libc::c_int;
    while i < end {
        *lengths.as_mut_ptr().offset(j as isize) = strlen(*array.offset(i as isize));
        size = (size as libc::c_ulong)
            .wrapping_add(*lengths.as_mut_ptr().offset(j as isize)) as size_t as size_t;
        i += 1;
        j += 1;
    }
    tmp = malloc(size.wrapping_add(count as size_t));
    str = tmp as *mut libc::c_char;
    *str
        .offset(
            size.wrapping_add(count as size_t).wrapping_sub(1 as libc::c_ulong) as isize,
        ) = '\u{0}' as i32 as libc::c_char;
    i___0 = start;
    j___0 = 0 as libc::c_int;
    while i___0 < end - 1 as libc::c_int {
        memcpy(
            str.offset(pos as isize).offset(j___0 as isize) as *mut libc::c_void,
            *array.offset(i___0 as isize) as *const libc::c_void,
            *lengths.as_mut_ptr().offset(j___0 as isize),
        );
        *str
            .offset(
                pos
                    .wrapping_add(*lengths.as_mut_ptr().offset(j___0 as isize))
                    .wrapping_add(j___0 as size_t) as isize,
            ) = ' ' as i32 as libc::c_char;
        pos = (pos as libc::c_ulong)
            .wrapping_add(*lengths.as_mut_ptr().offset(j___0 as isize)) as size_t
            as size_t;
        i___0 += 1;
        j___0 += 1;
    }
    memcpy(
        str
            .offset(pos as isize)
            .offset(count as isize)
            .offset(-(1 as libc::c_int as isize)) as *mut libc::c_void,
        *array.offset((end - 1 as libc::c_int) as isize) as *const libc::c_void,
        *lengths.as_mut_ptr().offset((count - 1 as libc::c_int) as isize),
    );
    return str;
}
unsafe extern "C" fn crawl(
    mut tag: GumboTag,
    mut elements: *mut list_t,
    mut node: *mut GumboNode,
) {
    let mut tmp: *mut list_node_t = 0 as *mut list_node_t;
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_uint = 0;
    if 0 as libc::c_uint != (*node).type_0 as libc::c_uint {
        if 1 as libc::c_uint != (*node).type_0 as libc::c_uint {
            return;
        }
    }
    if tag as libc::c_uint == (*node).v.element.tag as libc::c_uint {
        tmp = list_node_new(node as *mut libc::c_void);
        list_rpush(elements, tmp);
    }
    children = &mut (*node).v.element.children;
    i = 0 as libc::c_uint;
    while i < (*children).length {
        crawl(tag, elements, *((*children).data).offset(i as isize) as *mut GumboNode);
        i = i.wrapping_add(1);
    }
}
pub unsafe extern "C" fn gumbo_get_elements_by_tag_name(
    mut tag_name: *const libc::c_char,
    mut root: *mut GumboNode,
) -> *mut list_t {
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut elements: *mut list_t = 0 as *mut list_t;
    elements = 0 as *mut libc::c_void as *mut list_t;
    if tag_name.is_null() {
        return 0 as *mut libc::c_void as *mut list_t
    } else {
        tag = gumbo_tag_enum(tag_name);
        if 149 as libc::c_uint == tag as libc::c_uint {
            return 0 as *mut libc::c_void as *mut list_t;
        }
    }
    elements = list_new();
    if elements.is_null() {
        return 0 as *mut libc::c_void as *mut list_t;
    }
    crawl(tag, elements, root);
    return elements;
}
pub unsafe extern "C" fn wildcardcmp(
    mut pattern: *const libc::c_char,
    mut string: *const libc::c_char,
) -> libc::c_int {
    let mut w: *const libc::c_char = 0 as *const libc::c_char;
    let mut s: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    w = 0 as *mut libc::c_void as *const libc::c_char;
    s = 0 as *mut libc::c_void as *const libc::c_char;
    if pattern.is_null() {
        return 0 as libc::c_int
    } else {
        if string.is_null() {
            return 0 as libc::c_int;
        }
    }
    loop {
        if *string == 0 {
            if *pattern == 0 {
                return 1 as libc::c_int;
            }
            if 42 as libc::c_int == *pattern as libc::c_int {
                pattern = pattern.offset(1);
            } else {
                if *s == 0 {
                    return 0 as libc::c_int;
                }
                tmp = s;
                s = s.offset(1);
                string = tmp;
                pattern = w;
            }
        } else if *pattern as libc::c_int != *string as libc::c_int {
            if 42 as libc::c_int == *pattern as libc::c_int {
                pattern = pattern.offset(1);
                w = pattern;
                s = string;
                if *pattern != 0 {
                    continue;
                }
                return 1 as libc::c_int;
            } else if !w.is_null() {
                string = string.offset(1);
            } else {
                return 0 as libc::c_int
            }
        } else {
            string = string.offset(1);
            pattern = pattern.offset(1);
        }
    };
}
unsafe extern "C" fn error(mut msg: *mut libc::c_char) {
    fprintf(stderr, b"%s\n\0" as *const u8 as *const libc::c_char, msg);
    exit(1 as libc::c_int);
}
unsafe extern "C" fn command_version(mut self_0: *mut command_t) {
    printf(b"%s\n\0" as *const u8 as *const libc::c_char, (*self_0).version);
    command_free(self_0);
    exit(0 as libc::c_int);
}
pub unsafe extern "C" fn command_help(mut self_0: *mut command_t) {
    let mut i: libc::c_int = 0;
    let mut option: *mut command_option_t = 0 as *mut command_option_t;
    printf(b"\n\0" as *const u8 as *const libc::c_char);
    printf(
        b"  Usage: %s %s\n\0" as *const u8 as *const libc::c_char,
        (*self_0).name,
        (*self_0).usage,
    );
    printf(b"\n\0" as *const u8 as *const libc::c_char);
    printf(b"  Options:\n\0" as *const u8 as *const libc::c_char);
    printf(b"\n\0" as *const u8 as *const libc::c_char);
    i = 0 as libc::c_int;
    while i < (*self_0).option_count {
        option = &mut *((*self_0).options).as_mut_ptr().offset(i as isize)
            as *mut command_option_t;
        printf(
            b"    %s, %-25s %s\n\0" as *const u8 as *const libc::c_char,
            (*option).small,
            (*option).large_with_arg,
            (*option).description,
        );
        i += 1;
    }
    printf(b"\n\0" as *const u8 as *const libc::c_char);
    command_free(self_0);
    exit(0 as libc::c_int);
}
pub unsafe extern "C" fn command_init(
    mut self_0: *mut command_t,
    mut name: *const libc::c_char,
    mut version: *const libc::c_char,
) {
    let mut tmp: libc::c_int = 0;
    (*self_0).arg = 0 as *mut libc::c_void as *const libc::c_char;
    (*self_0).name = name;
    (*self_0).version = version;
    tmp = 0 as libc::c_int;
    (*self_0).argc = tmp;
    (*self_0).option_count = tmp;
    (*self_0).usage = b"[options]\0" as *const u8 as *const libc::c_char;
    (*self_0).nargv = 0 as *mut libc::c_void as *mut *mut libc::c_char;
    command_option(
        self_0,
        b"-V\0" as *const u8 as *const libc::c_char,
        b"--version\0" as *const u8 as *const libc::c_char,
        b"output program version\0" as *const u8 as *const libc::c_char,
        Some(command_version as unsafe extern "C" fn(*mut command_t) -> ()),
    );
    command_option(
        self_0,
        b"-h\0" as *const u8 as *const libc::c_char,
        b"--help\0" as *const u8 as *const libc::c_char,
        b"output help information\0" as *const u8 as *const libc::c_char,
        Some(command_help as unsafe extern "C" fn(*mut command_t) -> ()),
    );
}
pub unsafe extern "C" fn command_free(mut self_0: *mut command_t) {
    let mut i: libc::c_int = 0;
    let mut option: *mut command_option_t = 0 as *mut command_option_t;
    i = 0 as libc::c_int;
    while i < (*self_0).option_count {
        option = &mut *((*self_0).options).as_mut_ptr().offset(i as isize)
            as *mut command_option_t;
        free((*option).argname as *mut libc::c_void);
        free((*option).large as *mut libc::c_void);
        i += 1;
    }
    if !((*self_0).nargv).is_null() {
        i = 0 as libc::c_int;
        while !(*((*self_0).nargv).offset(i as isize)).is_null() {
            free(*((*self_0).nargv).offset(i as isize) as *mut libc::c_void);
            i += 1;
        }
        free((*self_0).nargv as *mut libc::c_void);
    }
}
unsafe extern "C" fn parse_argname(
    mut str: *const libc::c_char,
    mut flag: *mut libc::c_char,
    mut arg: *mut libc::c_char,
) {
    let mut buffer: libc::c_int = 0;
    let mut flagpos: size_t = 0;
    let mut argpos: size_t = 0;
    let mut len: size_t = 0;
    let mut tmp: size_t = 0;
    let mut i: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: size_t = 0;
    buffer = 0 as libc::c_int;
    flagpos = 0 as libc::c_int as size_t;
    argpos = 0 as libc::c_int as size_t;
    tmp = strlen(str);
    len = tmp;
    i = 0 as libc::c_int as size_t;
    while i < len {
        if buffer != 0 {
            buffer = 1 as libc::c_int;
            tmp___0 = argpos;
            argpos = argpos.wrapping_add(1);
            *arg.offset(tmp___0 as isize) = *str.offset(i as isize);
        } else if 91 as libc::c_int == *str.offset(i as isize) as libc::c_int {
            buffer = 1 as libc::c_int;
            tmp___0 = argpos;
            argpos = argpos.wrapping_add(1);
            *arg.offset(tmp___0 as isize) = *str.offset(i as isize);
        } else if 60 as libc::c_int == *str.offset(i as isize) as libc::c_int {
            buffer = 1 as libc::c_int;
            tmp___0 = argpos;
            argpos = argpos.wrapping_add(1);
            *arg.offset(tmp___0 as isize) = *str.offset(i as isize);
        } else if !(32 as libc::c_int == *str.offset(i as isize) as libc::c_int) {
            tmp___1 = flagpos;
            flagpos = flagpos.wrapping_add(1);
            *flag.offset(tmp___1 as isize) = *str.offset(i as isize);
        }
        i = i.wrapping_add(1);
    }
    *arg.offset(argpos as isize) = '\u{0}' as i32 as libc::c_char;
    *flag.offset(flagpos as isize) = '\u{0}' as i32 as libc::c_char;
}
unsafe extern "C" fn normalize_args(
    mut argc: *mut libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> *mut *mut libc::c_char {
    let mut size: libc::c_int = 0;
    let mut alloc: libc::c_int = 0;
    let mut nargv: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut i: libc::c_int = 0;
    let mut arg: *const libc::c_char = 0 as *const libc::c_char;
    let mut len: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut j: size_t = 0;
    let mut tmp___2: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *mut libc::c_void = 0 as *mut libc::c_void;
    size = 0 as libc::c_int;
    alloc = *argc + 1 as libc::c_int;
    tmp = malloc(
        (alloc as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong),
    );
    nargv = tmp as *mut *mut libc::c_char;
    i = 0 as libc::c_int;
    while !(*argv.offset(i as isize)).is_null() {
        let mut current_block_24: u64;
        arg = *argv.offset(i as isize) as *const libc::c_char;
        tmp___0 = strlen(arg);
        len = tmp___0;
        if len > 2 as libc::c_ulong {
            if 45 as libc::c_int == *arg.offset(0 as libc::c_int as isize) as libc::c_int
            {
                tmp___3 = strchr(arg.offset(1 as libc::c_int as isize), '-' as i32);
                if tmp___3.is_null() {
                    alloc = (alloc as size_t)
                        .wrapping_add(len.wrapping_sub(2 as libc::c_ulong))
                        as libc::c_int;
                    tmp___1 = realloc(
                        nargv as *mut libc::c_void,
                        (alloc as libc::c_ulong)
                            .wrapping_mul(
                                ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
                            ),
                    );
                    nargv = tmp___1 as *mut *mut libc::c_char;
                    j = 1 as libc::c_int as size_t;
                    while j < len {
                        tmp___2 = malloc(3 as libc::c_int as size_t);
                        let ref mut fresh12 = *nargv.offset(size as isize);
                        *fresh12 = tmp___2 as *mut libc::c_char;
                        sprintf(
                            *nargv.offset(size as isize),
                            b"-%c\0" as *const u8 as *const libc::c_char,
                            *arg.offset(j as isize) as libc::c_int,
                        );
                        size += 1;
                        j = j.wrapping_add(1);
                    }
                    current_block_24 = 6743112986467969988;
                } else {
                    current_block_24 = 14401909646449704462;
                }
            } else {
                current_block_24 = 14401909646449704462;
            }
        } else {
            current_block_24 = 14401909646449704462;
        }
        match current_block_24 {
            14401909646449704462 => {
                tmp___4 = malloc(len.wrapping_add(1 as libc::c_ulong));
                let ref mut fresh13 = *nargv.offset(size as isize);
                *fresh13 = tmp___4 as *mut libc::c_char;
                strcpy(*nargv.offset(size as isize), arg);
                size += 1;
            }
            _ => {}
        }
        i += 1;
    }
    let ref mut fresh14 = *nargv.offset(size as isize);
    *fresh14 = 0 as *mut libc::c_void as *mut libc::c_char;
    *argc = size;
    return nargv;
}
pub unsafe extern "C" fn command_option(
    mut self_0: *mut command_t,
    mut small: *const libc::c_char,
    mut large: *const libc::c_char,
    mut desc: *const libc::c_char,
    mut cb: Option::<unsafe extern "C" fn(*mut command) -> ()>,
) {
    let mut n: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut option: *mut command_option_t = 0 as *mut command_option_t;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___4: size_t = 0;
    let mut tmp___5: *mut libc::c_void = 0 as *mut libc::c_void;
    if (*self_0).option_count == 32 as libc::c_int {
        command_free(self_0);
        error(
            b"Maximum option definitions exceeded\0" as *const u8 as *const libc::c_char
                as *mut libc::c_char,
        );
    }
    tmp = (*self_0).option_count;
    (*self_0).option_count += 1;
    n = tmp;
    option = &mut *((*self_0).options).as_mut_ptr().offset(n as isize)
        as *mut command_option_t;
    (*option).cb = cb;
    (*option).small = small;
    (*option).description = desc;
    tmp___0 = 0 as libc::c_int;
    (*option).optional_arg = tmp___0;
    (*option).required_arg = tmp___0;
    (*option).large_with_arg = large;
    tmp___1 = strlen(large);
    tmp___2 = malloc(tmp___1.wrapping_add(1 as libc::c_ulong));
    (*option).argname = tmp___2 as *mut libc::c_char;
    if ((*option).argname).is_null() {
        __assert_fail(
            b"option->argname\0" as *const u8 as *const libc::c_char,
            b"deps/commander/commander.c\0" as *const u8 as *const libc::c_char,
            185 as libc::c_uint,
            b"command_option\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___4 = strlen(large);
    tmp___5 = malloc(tmp___4.wrapping_add(1 as libc::c_ulong));
    (*option).large = tmp___5 as *mut libc::c_char;
    if ((*option).large).is_null() {
        __assert_fail(
            b"option->large\0" as *const u8 as *const libc::c_char,
            b"deps/commander/commander.c\0" as *const u8 as *const libc::c_char,
            187 as libc::c_uint,
            b"command_option\0" as *const u8 as *const libc::c_char,
        );
    }
    parse_argname(large, (*option).large, (*option).argname);
    if 91 as libc::c_int
        == *((*option).argname).offset(0 as libc::c_int as isize) as libc::c_int
    {
        (*option).optional_arg = 1 as libc::c_int;
    }
    if 60 as libc::c_int
        == *((*option).argname).offset(0 as libc::c_int as isize) as libc::c_int
    {
        (*option).required_arg = 1 as libc::c_int;
    }
}
unsafe extern "C" fn command_parse_args(
    mut self_0: *mut command_t,
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) {
    let mut current_block: u64;
    let mut literal: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut arg: *const libc::c_char = 0 as *const libc::c_char;
    let mut option: *mut command_option_t = 0 as *mut command_option_t;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut n: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    literal = 0 as libc::c_int;
    i = 1 as libc::c_int;
    while i < argc {
        arg = *argv.offset(i as isize) as *const libc::c_char;
        j = 0 as libc::c_int;
        loop {
            if !(j < (*self_0).option_count) {
                current_block = 1538046216550696469;
                break;
            }
            option = &mut *((*self_0).options).as_mut_ptr().offset(j as isize)
                as *mut command_option_t;
            tmp = strcmp(arg, (*option).small);
            if tmp != 0 {
                tmp___0 = strcmp(arg, (*option).large as *const libc::c_char);
                if !(tmp___0 == 0) {
                    j += 1;
                    continue;
                }
            }
            (*self_0).arg = 0 as *mut libc::c_void as *const libc::c_char;
            if (*option).required_arg != 0 {
                i += 1;
                arg = *argv.offset(i as isize) as *const libc::c_char;
                if arg.is_null() {
                    fprintf(
                        stderr,
                        b"%s %s argument required\n\0" as *const u8
                            as *const libc::c_char,
                        (*option).large,
                        (*option).argname,
                    );
                    command_free(self_0);
                    exit(1 as libc::c_int);
                } else {
                    if 45 as libc::c_int
                        == *arg.offset(0 as libc::c_int as isize) as libc::c_int
                    {
                        fprintf(
                            stderr,
                            b"%s %s argument required\n\0" as *const u8
                                as *const libc::c_char,
                            (*option).large,
                            (*option).argname,
                        );
                        command_free(self_0);
                        exit(1 as libc::c_int);
                    }
                }
                (*self_0).arg = arg;
            }
            if (*option).optional_arg != 0 {
                if !(*argv.offset((i + 1 as libc::c_int) as isize)).is_null() {
                    if 45 as libc::c_int
                        != *(*argv.offset((i + 1 as libc::c_int) as isize))
                            .offset(0 as libc::c_int as isize) as libc::c_int
                    {
                        i += 1;
                        (*self_0).arg = *argv.offset(i as isize) as *const libc::c_char;
                    }
                }
            }
            (Some(((*option).cb).expect("non-null function pointer")))
                .expect("non-null function pointer")(self_0);
            current_block = 16094351510296756103;
            break;
        }
        match current_block {
            1538046216550696469 => {
                if 45 as libc::c_int
                    == *arg.offset(0 as libc::c_int as isize) as libc::c_int
                {
                    if 45 as libc::c_int
                        == *arg.offset(1 as libc::c_int as isize) as libc::c_int
                    {
                        if 0 as libc::c_int
                            == *arg.offset(2 as libc::c_int as isize) as libc::c_int
                        {
                            literal = 1 as libc::c_int;
                            current_block = 16094351510296756103;
                        } else {
                            current_block = 15597372965620363352;
                        }
                    } else {
                        current_block = 15597372965620363352;
                    }
                } else {
                    current_block = 15597372965620363352;
                }
                match current_block {
                    16094351510296756103 => {}
                    _ => {
                        if 45 as libc::c_int
                            == *arg.offset(0 as libc::c_int as isize) as libc::c_int
                        {
                            if literal == 0 {
                                fprintf(
                                    stderr,
                                    b"unrecognized flag %s\n\0" as *const u8
                                        as *const libc::c_char,
                                    arg,
                                );
                                command_free(self_0);
                                exit(1 as libc::c_int);
                            }
                        }
                        tmp___1 = (*self_0).argc;
                        (*self_0).argc += 1;
                        n = tmp___1;
                        if n == 32 as libc::c_int {
                            command_free(self_0);
                            error(
                                b"Maximum number of arguments exceeded\0" as *const u8
                                    as *const libc::c_char as *mut libc::c_char,
                            );
                        }
                        (*self_0).argv[n as usize] = arg as *mut libc::c_char;
                    }
                }
            }
            _ => {}
        }
        i += 1;
    }
}
pub unsafe extern "C" fn command_parse(
    mut self_0: *mut command_t,
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) {
    (*self_0).nargv = normalize_args(&mut argc, argv);
    command_parse_args(self_0, argc, (*self_0).nargv);
    (*self_0)
        .argv[(*self_0).argc as usize] = 0 as *mut libc::c_void as *mut libc::c_char;
}
static mut __ac_prime_list: [uint32_t; 32] = [
    0 as libc::c_ulong as uint32_t,
    3 as libc::c_ulong as uint32_t,
    11 as libc::c_ulong as uint32_t,
    23 as libc::c_ulong as uint32_t,
    53 as libc::c_ulong as uint32_t,
    97 as libc::c_ulong as uint32_t,
    193 as libc::c_ulong as uint32_t,
    389 as libc::c_ulong as uint32_t,
    769 as libc::c_ulong as uint32_t,
    1543 as libc::c_ulong as uint32_t,
    3079 as libc::c_ulong as uint32_t,
    6151 as libc::c_ulong as uint32_t,
    12289 as libc::c_ulong as uint32_t,
    24593 as libc::c_ulong as uint32_t,
    49157 as libc::c_ulong as uint32_t,
    98317 as libc::c_ulong as uint32_t,
    196613 as libc::c_ulong as uint32_t,
    393241 as libc::c_ulong as uint32_t,
    786433 as libc::c_ulong as uint32_t,
    1572869 as libc::c_ulong as uint32_t,
    3145739 as libc::c_ulong as uint32_t,
    6291469 as libc::c_ulong as uint32_t,
    12582917 as libc::c_ulong as uint32_t,
    25165843 as libc::c_ulong as uint32_t,
    50331653 as libc::c_ulong as uint32_t,
    100663319 as libc::c_ulong as uint32_t,
    201326611 as libc::c_ulong as uint32_t,
    402653189 as libc::c_ulong as uint32_t,
    805306457 as libc::c_ulong as uint32_t,
    1610612741 as libc::c_ulong as uint32_t,
    3221225473 as libc::c_ulong as uint32_t,
    4294967291 as libc::c_ulong as uint32_t,
];
static mut __ac_HASH_UPPER: libc::c_double = 0.77f64;
#[inline]
unsafe extern "C" fn __ac_X31_hash_string(mut s: *const libc::c_char) -> khint_t {
    let mut h: khint_t = 0;
    h = *s as khint_t;
    if h != 0 {
        s = s.offset(1);
        while *s != 0 {
            h = (h << 5 as libc::c_int).wrapping_sub(h).wrapping_add(*s as khint_t);
            s = s.offset(1);
        }
    }
    return h;
}
#[inline]
unsafe extern "C" fn kh_get_ptr(mut h: *mut kh_ptr_t, mut key: kh_cstr_t) -> khint_t {
    let mut inc: khint_t = 0;
    let mut k: khint_t = 0;
    let mut i: khint_t = 0;
    let mut last: khint_t = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: khint_t = 0;
    if (*h).n_buckets != 0 {
        k = __ac_X31_hash_string(key);
        i = k.wrapping_rem((*h).n_buckets);
        inc = (1 as libc::c_uint)
            .wrapping_add(
                k.wrapping_rem(((*h).n_buckets).wrapping_sub(1 as libc::c_uint)),
            );
        last = i;
        while *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
            >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 2 as libc::c_uint == 0
        {
            if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
                >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 1 as libc::c_uint
                == 0
            {
                tmp = strcmp(*((*h).keys).offset(i as isize), key);
                if tmp == 0 as libc::c_int {
                    break;
                }
            }
            if i.wrapping_add(inc) >= (*h).n_buckets {
                i = i.wrapping_add(inc).wrapping_sub((*h).n_buckets);
            } else {
                i = (i as libc::c_uint).wrapping_add(inc) as khint_t as khint_t;
            }
            if i == last {
                return (*h).n_buckets;
            }
        }
        if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
            >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 3 as libc::c_uint != 0
        {
            tmp___0 = (*h).n_buckets;
        } else {
            tmp___0 = i;
        }
        return tmp___0;
    } else {
        return 0 as libc::c_int as khint_t
    };
}
#[inline]
unsafe extern "C" fn kh_resize_ptr(mut h: *mut kh_ptr_t, mut new_n_buckets: khint_t) {
    let mut new_flags: *mut uint32_t = 0 as *mut uint32_t;
    let mut j: khint_t = 0;
    let mut t: khint_t = 0;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut key: kh_cstr_t = 0 as *const libc::c_char;
    let mut val: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut inc: khint_t = 0;
    let mut k: khint_t = 0;
    let mut i: khint_t = 0;
    let mut tmp___2: kh_cstr_t = 0 as *const libc::c_char;
    let mut tmp___3: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___4: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___5: *mut libc::c_void = 0 as *mut libc::c_void;
    new_flags = 0 as *mut uint32_t;
    j = 1 as libc::c_int as khint_t;
    t = 31 as libc::c_int as khint_t;
    while __ac_prime_list[t as usize] > new_n_buckets {
        t = t.wrapping_sub(1);
    }
    new_n_buckets = __ac_prime_list[t.wrapping_add(1 as libc::c_uint) as usize];
    if (*h).size
        >= (new_n_buckets as libc::c_double * __ac_HASH_UPPER + 0.5f64) as khint_t
    {
        j = 0 as libc::c_int as khint_t;
    } else {
        tmp = malloc(
            ((new_n_buckets >> 4 as libc::c_int).wrapping_add(1 as libc::c_uint)
                as libc::c_ulong)
                .wrapping_mul(::std::mem::size_of::<uint32_t>() as libc::c_ulong),
        );
        new_flags = tmp as *mut uint32_t;
        memset(
            new_flags as *mut libc::c_void,
            170 as libc::c_int,
            ((new_n_buckets >> 4 as libc::c_int).wrapping_add(1 as libc::c_uint)
                as libc::c_ulong)
                .wrapping_mul(::std::mem::size_of::<uint32_t>() as libc::c_ulong),
        );
        if (*h).n_buckets < new_n_buckets {
            tmp___0 = realloc(
                (*h).keys as *mut libc::c_void,
                (new_n_buckets as libc::c_ulong)
                    .wrapping_mul(::std::mem::size_of::<kh_cstr_t>() as libc::c_ulong),
            );
            (*h).keys = tmp___0 as *mut kh_cstr_t;
            tmp___1 = realloc(
                (*h).vals as *mut libc::c_void,
                (new_n_buckets as libc::c_ulong)
                    .wrapping_mul(
                        ::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong,
                    ),
            );
            (*h).vals = tmp___1 as *mut *mut libc::c_void;
        }
    }
    if j != 0 {
        j = 0 as libc::c_int as khint_t;
        while j != (*h).n_buckets {
            if *((*h).flags).offset((j >> 4 as libc::c_int) as isize)
                >> ((j & 15 as libc::c_uint) << 1 as libc::c_int) & 3 as libc::c_uint
                == 0 as libc::c_uint
            {
                key = *((*h).keys).offset(j as isize);
                val = *((*h).vals).offset(j as isize);
                *((*h).flags)
                    .offset(
                        (j >> 4 as libc::c_int) as isize,
                    ) = (*((*h).flags).offset((j >> 4 as libc::c_int) as isize)
                    as libc::c_ulong
                    | (1 as libc::c_ulong)
                        << ((j & 15 as libc::c_uint) << 1 as libc::c_int)) as uint32_t;
                loop {
                    k = __ac_X31_hash_string(key);
                    i = k.wrapping_rem(new_n_buckets);
                    inc = (1 as libc::c_uint)
                        .wrapping_add(
                            k.wrapping_rem(new_n_buckets.wrapping_sub(1 as libc::c_uint)),
                        );
                    while *new_flags.offset((i >> 4 as libc::c_int) as isize)
                        >> ((i & 15 as libc::c_uint) << 1 as libc::c_int)
                        & 2 as libc::c_uint == 0
                    {
                        if i.wrapping_add(inc) >= new_n_buckets {
                            i = i.wrapping_add(inc).wrapping_sub(new_n_buckets);
                        } else {
                            i = (i as libc::c_uint).wrapping_add(inc) as khint_t
                                as khint_t;
                        }
                    }
                    *new_flags
                        .offset(
                            (i >> 4 as libc::c_int) as isize,
                        ) = (*new_flags.offset((i >> 4 as libc::c_int) as isize)
                        as libc::c_ulong
                        & !((2 as libc::c_ulong)
                            << ((i & 15 as libc::c_uint) << 1 as libc::c_int)))
                        as uint32_t;
                    if i < (*h).n_buckets {
                        if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
                            >> ((i & 15 as libc::c_uint) << 1 as libc::c_int)
                            & 3 as libc::c_uint == 0 as libc::c_uint
                        {
                            tmp___2 = *((*h).keys).offset(i as isize);
                            let ref mut fresh15 = *((*h).keys).offset(i as isize);
                            *fresh15 = key;
                            key = tmp___2;
                            tmp___3 = *((*h).vals).offset(i as isize);
                            let ref mut fresh16 = *((*h).vals).offset(i as isize);
                            *fresh16 = val;
                            val = tmp___3;
                            *((*h).flags)
                                .offset(
                                    (i >> 4 as libc::c_int) as isize,
                                ) = (*((*h).flags).offset((i >> 4 as libc::c_int) as isize)
                                as libc::c_ulong
                                | (1 as libc::c_ulong)
                                    << ((i & 15 as libc::c_uint) << 1 as libc::c_int))
                                as uint32_t;
                        } else {
                            let ref mut fresh17 = *((*h).keys).offset(i as isize);
                            *fresh17 = key;
                            let ref mut fresh18 = *((*h).vals).offset(i as isize);
                            *fresh18 = val;
                            break;
                        }
                    } else {
                        let ref mut fresh19 = *((*h).keys).offset(i as isize);
                        *fresh19 = key;
                        let ref mut fresh20 = *((*h).vals).offset(i as isize);
                        *fresh20 = val;
                        break;
                    }
                }
            }
            j = j.wrapping_add(1);
        }
        if (*h).n_buckets > new_n_buckets {
            tmp___4 = realloc(
                (*h).keys as *mut libc::c_void,
                (new_n_buckets as libc::c_ulong)
                    .wrapping_mul(::std::mem::size_of::<kh_cstr_t>() as libc::c_ulong),
            );
            (*h).keys = tmp___4 as *mut kh_cstr_t;
            tmp___5 = realloc(
                (*h).vals as *mut libc::c_void,
                (new_n_buckets as libc::c_ulong)
                    .wrapping_mul(
                        ::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong,
                    ),
            );
            (*h).vals = tmp___5 as *mut *mut libc::c_void;
        }
        free((*h).flags as *mut libc::c_void);
        (*h).flags = new_flags;
        (*h).n_buckets = new_n_buckets;
        (*h).n_occupied = (*h).size;
        (*h)
            .upper_bound = ((*h).n_buckets as libc::c_double * __ac_HASH_UPPER + 0.5f64)
            as khint_t;
    }
}
#[inline]
unsafe extern "C" fn kh_put_ptr(
    mut h: *mut kh_ptr_t,
    mut key: kh_cstr_t,
    mut ret: *mut libc::c_int,
) -> khint_t {
    let mut x: khint_t = 0;
    let mut inc: khint_t = 0;
    let mut k: khint_t = 0;
    let mut i: khint_t = 0;
    let mut site: khint_t = 0;
    let mut last: khint_t = 0;
    let mut tmp: libc::c_int = 0;
    if (*h).n_occupied >= (*h).upper_bound {
        if (*h).n_buckets > (*h).size << 1 as libc::c_int {
            kh_resize_ptr(h, ((*h).n_buckets).wrapping_sub(1 as libc::c_uint));
        } else {
            kh_resize_ptr(h, ((*h).n_buckets).wrapping_add(1 as libc::c_uint));
        }
    }
    site = (*h).n_buckets;
    x = site;
    k = __ac_X31_hash_string(key);
    i = k.wrapping_rem((*h).n_buckets);
    if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
        >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 2 as libc::c_uint != 0
    {
        x = i;
    } else {
        inc = (1 as libc::c_uint)
            .wrapping_add(
                k.wrapping_rem(((*h).n_buckets).wrapping_sub(1 as libc::c_uint)),
            );
        last = i;
        while *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
            >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 2 as libc::c_uint == 0
        {
            if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
                >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 1 as libc::c_uint
                == 0
            {
                tmp = strcmp(*((*h).keys).offset(i as isize), key);
                if tmp == 0 as libc::c_int {
                    break;
                }
            }
            if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
                >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 1 as libc::c_uint
                != 0
            {
                site = i;
            }
            if i.wrapping_add(inc) >= (*h).n_buckets {
                i = i.wrapping_add(inc).wrapping_sub((*h).n_buckets);
            } else {
                i = (i as libc::c_uint).wrapping_add(inc) as khint_t as khint_t;
            }
            if !(i == last) {
                continue;
            }
            x = site;
            break;
        }
        if x == (*h).n_buckets {
            if *((*h).flags).offset((i >> 4 as libc::c_int) as isize)
                >> ((i & 15 as libc::c_uint) << 1 as libc::c_int) & 2 as libc::c_uint
                != 0
            {
                if site != (*h).n_buckets {
                    x = site;
                } else {
                    x = i;
                }
            } else {
                x = i;
            }
        }
    }
    if *((*h).flags).offset((x >> 4 as libc::c_int) as isize)
        >> ((x & 15 as libc::c_uint) << 1 as libc::c_int) & 2 as libc::c_uint != 0
    {
        let ref mut fresh21 = *((*h).keys).offset(x as isize);
        *fresh21 = key;
        *((*h).flags)
            .offset(
                (x >> 4 as libc::c_int) as isize,
            ) = (*((*h).flags).offset((x >> 4 as libc::c_int) as isize) as libc::c_ulong
            & !((3 as libc::c_ulong) << ((x & 15 as libc::c_uint) << 1 as libc::c_int)))
            as uint32_t;
        (*h).size = ((*h).size).wrapping_add(1);
        (*h).n_occupied = ((*h).n_occupied).wrapping_add(1);
        *ret = 1 as libc::c_int;
    } else if *((*h).flags).offset((x >> 4 as libc::c_int) as isize)
            >> ((x & 15 as libc::c_uint) << 1 as libc::c_int) & 1 as libc::c_uint != 0
        {
        let ref mut fresh22 = *((*h).keys).offset(x as isize);
        *fresh22 = key;
        *((*h).flags)
            .offset(
                (x >> 4 as libc::c_int) as isize,
            ) = (*((*h).flags).offset((x >> 4 as libc::c_int) as isize) as libc::c_ulong
            & !((3 as libc::c_ulong) << ((x & 15 as libc::c_uint) << 1 as libc::c_int)))
            as uint32_t;
        (*h).size = ((*h).size).wrapping_add(1);
        *ret = 2 as libc::c_int;
    } else {
        *ret = 0 as libc::c_int;
    }
    return x;
}
#[inline]
unsafe extern "C" fn kh_del_ptr(mut h: *mut kh_ptr_t, mut x: khint_t) {
    if x != (*h).n_buckets {
        if *((*h).flags).offset((x >> 4 as libc::c_int) as isize)
            >> ((x & 15 as libc::c_uint) << 1 as libc::c_int) & 3 as libc::c_uint == 0
        {
            *((*h).flags)
                .offset(
                    (x >> 4 as libc::c_int) as isize,
                ) = (*((*h).flags).offset((x >> 4 as libc::c_int) as isize)
                as libc::c_ulong
                | (1 as libc::c_ulong) << ((x & 15 as libc::c_uint) << 1 as libc::c_int))
                as uint32_t;
            (*h).size = ((*h).size).wrapping_sub(1);
        }
    }
}
pub unsafe extern "C" fn hash_set(
    mut self_0: *mut hash_t,
    mut key: *mut libc::c_char,
    mut val: *mut libc::c_void,
) {
    let mut ret: libc::c_int = 0;
    let mut k: khiter_t = 0;
    let mut tmp: khint_t = 0;
    tmp = kh_put_ptr(self_0, key as kh_cstr_t, &mut ret);
    k = tmp;
    let ref mut fresh23 = *((*self_0).vals).offset(k as isize);
    *fresh23 = val;
}
pub unsafe extern "C" fn hash_has(
    mut self_0: *mut hash_t,
    mut key: *mut libc::c_char,
) -> libc::c_int {
    let mut k: khiter_t = 0;
    let mut tmp: khint_t = 0;
    tmp = kh_get_ptr(self_0, key as kh_cstr_t);
    k = tmp;
    return (*((*self_0).flags).offset((k >> 4 as libc::c_int) as isize)
        >> ((k & 15 as libc::c_uint) << 1 as libc::c_int) & 3 as libc::c_uint == 0)
        as libc::c_int;
}
pub unsafe extern "C" fn hash_del(mut self_0: *mut hash_t, mut key: *mut libc::c_char) {
    let mut k: khiter_t = 0;
    let mut tmp: khint_t = 0;
    tmp = kh_get_ptr(self_0, key as kh_cstr_t);
    k = tmp;
    kh_del_ptr(self_0, k);
}
pub unsafe extern "C" fn rimraf(mut path: *const libc::c_char) -> libc::c_int {
    let mut dir: *mut DIR = 0 as *mut DIR;
    let mut tmp: *mut DIR = 0 as *mut DIR;
    let mut dp: *mut dirent = 0 as *mut dirent;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut f: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut s: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_nlink: 0,
        st_mode: 0,
        st_uid: 0,
        st_gid: 0,
        __pad0: 0,
        st_rdev: 0,
        st_size: 0,
        st_blksize: 0,
        st_blocks: 0,
        st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
        __glibc_reserved: [0; 3],
    };
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    let mut tmp___6: libc::c_int = 0;
    tmp = opendir(path);
    dir = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == dir as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    dp = 0 as *mut libc::c_void as *mut dirent;
    loop {
        dp = readdir(dir);
        if !(0 as *mut libc::c_void as libc::c_ulong != dp as libc::c_ulong) {
            break;
        }
        tmp___0 = strcmp(
            b".\0" as *const u8 as *const libc::c_char,
            ((*dp).d_name).as_mut_ptr() as *const libc::c_char,
        );
        if 0 as libc::c_int == tmp___0 {
            continue;
        }
        tmp___1 = strcmp(
            b"..\0" as *const u8 as *const libc::c_char,
            ((*dp).d_name).as_mut_ptr() as *const libc::c_char,
        );
        if 0 as libc::c_int == tmp___1 {
            continue;
        }
        tmp___2 = path_join(path, ((*dp).d_name).as_mut_ptr() as *const libc::c_char);
        f = tmp___2;
        if 0 as *mut libc::c_void as libc::c_ulong == f as libc::c_ulong {
            return -(1 as libc::c_int);
        }
        tmp___3 = stat(f as *const libc::c_char, &mut s as *mut stat);
        if 0 as libc::c_int != tmp___3 {
            return -(1 as libc::c_int);
        }
        if s.st_mode & 16384 as libc::c_uint != 0 {
            tmp___4 = rimraf(f as *const libc::c_char);
            if -(1 as libc::c_int) == tmp___4 {
                return -(1 as libc::c_int);
            }
        } else {
            tmp___5 = unlink(f as *const libc::c_char);
            if -(1 as libc::c_int) == tmp___5 {
                return -(1 as libc::c_int);
            }
        }
        free(f as *mut libc::c_void);
    }
    free(dp as *mut libc::c_void);
    closedir(dir);
    tmp___6 = rmdir(path);
    return tmp___6;
}
pub unsafe extern "C" fn trim_left(mut str: *mut libc::c_char) -> *mut libc::c_char {
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut cur: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    tmp = strlen(str as *const libc::c_char);
    len = tmp as libc::c_int;
    cur = str;
    while *cur != 0 {
        tmp___0 = __ctype_b_loc();
        if *(*tmp___0).offset(*cur as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        cur = cur.offset(1);
        len -= 1;
    }
    if str as libc::c_ulong != cur as libc::c_ulong {
        memmove(
            str as *mut libc::c_void,
            cur as *const libc::c_void,
            (len + 1 as libc::c_int) as size_t,
        );
    }
    return str;
}
pub unsafe extern "C" fn trim_right(mut str: *mut libc::c_char) -> *mut libc::c_char {
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut cur: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    tmp = strlen(str as *const libc::c_char);
    len = tmp as libc::c_int;
    cur = str.offset(len as isize).offset(-(1 as libc::c_int as isize));
    while cur as libc::c_ulong != str as libc::c_ulong {
        tmp___0 = __ctype_b_loc();
        if *(*tmp___0).offset(*cur as libc::c_int as isize) as libc::c_int
            & 8192 as libc::c_int == 0
        {
            break;
        }
        cur = cur.offset(-1);
        len -= 1;
    }
    tmp___3 = __ctype_b_loc();
    if *(*tmp___3).offset(*cur as libc::c_int as isize) as libc::c_int
        & 8192 as libc::c_int != 0
    {
        tmp___2 = 0 as libc::c_int;
    } else {
        tmp___2 = 1 as libc::c_int;
    }
    *cur.offset(tmp___2 as isize) = '\u{0}' as i32 as libc::c_char;
    return str;
}
pub unsafe extern "C" fn trim(mut str: *mut libc::c_char) -> *mut libc::c_char {
    trim_right(str);
    trim_left(str);
    return str;
}
pub unsafe extern "C" fn str_starts_with(
    mut str: *const libc::c_char,
    mut start: *const libc::c_char,
) -> bool {
    loop {
        if *start == 0 {
            return 1 as libc::c_int != 0
        } else {
            if *str as libc::c_int != *start as libc::c_int {
                return 0 as libc::c_int != 0;
            }
        }
        str = str.offset(1);
        start = start.offset(1);
    };
}
static mut seeded: libc::c_int = 0 as libc::c_int;
unsafe extern "C" fn use_colors(mut stream: *mut FILE) -> libc::c_int {
    let mut tty: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut colors: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: libc::c_int = 0;
    tmp = fileno(stream);
    tmp___0 = isatty(tmp);
    tty = tmp___0;
    if 0 as libc::c_int == tty {
        return 0 as libc::c_int;
    }
    tmp___1 = getenv(b"DEBUG_COLORS\0" as *const u8 as *const libc::c_char);
    colors = tmp___1;
    if colors.is_null() {
        return 1 as libc::c_int;
    }
    tmp___2 = strcmp(
        b"0\0" as *const u8 as *const libc::c_char,
        colors as *const libc::c_char,
    );
    if 0 as libc::c_int == tmp___2 {
        return 0 as libc::c_int;
    }
    tmp___3 = strncmp(
        b"no\0" as *const u8 as *const libc::c_char,
        colors as *const libc::c_char,
        2 as libc::c_int as size_t,
    );
    if 0 as libc::c_int == tmp___3 {
        return 0 as libc::c_int;
    }
    tmp___4 = strncmp(
        b"false\0" as *const u8 as *const libc::c_char,
        colors as *const libc::c_char,
        5 as libc::c_int as size_t,
    );
    if 0 as libc::c_int == tmp___4 {
        return 0 as libc::c_int;
    }
    tmp___5 = strncmp(
        b"disabled\0" as *const u8 as *const libc::c_char,
        colors as *const libc::c_char,
        8 as libc::c_int as size_t,
    );
    if 0 as libc::c_int == tmp___5 {
        return 0 as libc::c_int;
    }
    return 1 as libc::c_int;
}
pub unsafe extern "C" fn debug_is_enabled(mut name: *const libc::c_char) -> libc::c_int {
    let mut env: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut debugger___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut enabled: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    env = 0 as *mut libc::c_void as *mut libc::c_char;
    tmp = 0 as *mut libc::c_void as *mut libc::c_char;
    debugger___1 = 0 as *mut libc::c_void as *mut libc::c_char;
    enabled = 0 as libc::c_int;
    env = getenv(b"DEBUG\0" as *const u8 as *const libc::c_char);
    if env.is_null() {
        return 0 as libc::c_int;
    }
    tmp = strdup(env as *const libc::c_char);
    if tmp.is_null() {
        return 0 as libc::c_int;
    }
    debugger___1 = strtok(tmp, b",\0" as *const u8 as *const libc::c_char);
    while !debugger___1.is_null() {
        tmp___0 = wildcardcmp(debugger___1 as *const libc::c_char, name);
        if 1 as libc::c_int == tmp___0 {
            enabled = 1 as libc::c_int;
            break;
        } else {
            debugger___1 = strtok(
                0 as *mut libc::c_void as *mut libc::c_char,
                b",\0" as *const u8 as *const libc::c_char,
            );
        }
    }
    free(tmp as *mut libc::c_void);
    return enabled;
}
pub unsafe extern "C" fn debug_init(
    mut debugger___1: *mut debug_t,
    mut name: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: clock_t = 0;
    let mut tmp___0: libc::c_int = 0;
    if 0 as libc::c_int == seeded {
        tmp = clock();
        srand(tmp as libc::c_uint);
        seeded = 1 as libc::c_int;
    }
    tmp___0 = rand();
    (*debugger___1).color = 1 as libc::c_int + tmp___0 % 6 as libc::c_int;
    (*debugger___1).enabled = debug_is_enabled(name);
    (*debugger___1).name = name;
    (*debugger___1).stream = stderr;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn debug(
    mut debugger___1: *mut debug_t,
    mut fmt: *const libc::c_char,
    mut args: ...
) {
    let mut pre: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut post: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    if 0 as libc::c_int == (*debugger___1).enabled {
        return;
    }
    pre = 0 as *mut libc::c_void as *mut libc::c_char;
    post = 0 as *mut libc::c_void as *mut libc::c_char;
    args_0 = args.clone();
    tmp___0 = use_colors((*debugger___1).stream);
    if tmp___0 != 0 {
        tmp = asprintf(
            &mut pre as *mut *mut libc::c_char,
            b"\x1B[3%dm%s\x1B[0m\0" as *const u8 as *const libc::c_char,
            (*debugger___1).color,
            (*debugger___1).name,
        );
        if -(1 as libc::c_int) == tmp {
            return;
        }
    } else {
        pre = strdup((*debugger___1).name);
        if pre.is_null() {
            return;
        }
    }
    tmp___1 = vasprintf(&mut post, fmt, args_0.as_va_list());
    if -(1 as libc::c_int) == tmp___1 {
        free(pre as *mut libc::c_void);
        return;
    }
    fprintf(
        (*debugger___1).stream,
        b" %s : %s\n\0" as *const u8 as *const libc::c_char,
        pre,
        post,
    );
    free(pre as *mut libc::c_void);
    free(post as *mut libc::c_void);
}
pub unsafe extern "C" fn occurrences(
    mut needle: *const libc::c_char,
    mut haystack: *const libc::c_char,
) -> size_t {
    let mut pos: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut i: size_t = 0;
    let mut l: size_t = 0;
    let mut tmp: size_t = 0;
    if 0 as *mut libc::c_void as libc::c_ulong == needle as libc::c_ulong {
        return -(1 as libc::c_int) as size_t
    } else {
        if 0 as *mut libc::c_void as libc::c_ulong == haystack as libc::c_ulong {
            return -(1 as libc::c_int) as size_t;
        }
    }
    pos = haystack as *mut libc::c_char;
    i = 0 as libc::c_int as size_t;
    tmp = strlen(needle);
    l = tmp;
    loop {
        pos = strstr(pos as *const libc::c_char, needle);
        if pos.is_null() {
            break;
        }
        pos = pos.offset(l as isize);
        i = i.wrapping_add(1);
    }
    return i;
}
pub unsafe extern "C" fn mkdirp(
    mut path: *const libc::c_char,
    mut mode: mode_t,
) -> libc::c_int {
    let mut current_block: u64;
    let mut pathname: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut parent: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut p: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: size_t = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut rc: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: *mut libc::c_int = 0 as *mut libc::c_int;
    pathname = 0 as *mut libc::c_void as *mut libc::c_char;
    parent = 0 as *mut libc::c_void as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == path as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    pathname = path_normalize(path);
    if !(0 as *mut libc::c_void as libc::c_ulong == pathname as libc::c_ulong) {
        parent = strdup(pathname as *const libc::c_char);
        if !(0 as *mut libc::c_void as libc::c_ulong == parent as libc::c_ulong) {
            tmp = strlen(parent as *const libc::c_char);
            p = parent.offset(tmp as isize);
            while 47 as libc::c_int != *p as libc::c_int {
                if !(p as libc::c_ulong != parent as libc::c_ulong) {
                    break;
                }
                p = p.offset(-1);
            }
            *p = '\u{0}' as i32 as libc::c_char;
            if p as libc::c_ulong != parent as libc::c_ulong {
                tmp___0 = mkdirp(parent as *const libc::c_char, mode);
                if 0 as libc::c_int != tmp___0 {
                    current_block = 9591112486498067914;
                } else {
                    current_block = 2668756484064249700;
                }
            } else {
                current_block = 2668756484064249700;
            }
            match current_block {
                9591112486498067914 => {}
                _ => {
                    free(parent as *mut libc::c_void);
                    tmp___1 = mkdir(pathname as *const libc::c_char, mode);
                    rc = tmp___1;
                    free(pathname as *mut libc::c_void);
                    if 0 as libc::c_int == rc {
                        tmp___3 = 0 as libc::c_int;
                    } else {
                        tmp___4 = __errno_location();
                        if 17 as libc::c_int == *tmp___4 {
                            tmp___3 = 0 as libc::c_int;
                        } else {
                            tmp___3 = -(1 as libc::c_int);
                        }
                    }
                    return tmp___3;
                }
            }
        }
    }
    free(pathname as *mut libc::c_void);
    free(parent as *mut libc::c_void);
    return -(1 as libc::c_int);
}
unsafe extern "C" fn wiki_package_new() -> *mut wiki_package_t {
    let mut pkg: *mut wiki_package_t = 0 as *mut wiki_package_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(::std::mem::size_of::<wiki_package_t>() as libc::c_ulong);
    pkg = tmp as *mut wiki_package_t;
    if !pkg.is_null() {
        (*pkg).repo = 0 as *mut libc::c_void as *mut libc::c_char;
        (*pkg).href = 0 as *mut libc::c_void as *mut libc::c_char;
        (*pkg).description = 0 as *mut libc::c_void as *mut libc::c_char;
        (*pkg).category = 0 as *mut libc::c_void as *mut libc::c_char;
    }
    return pkg;
}
unsafe extern "C" fn add_package_href(mut self_0: *mut wiki_package_t) {
    let mut len: size_t = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = strlen((*self_0).repo as *const libc::c_char);
    len = tmp.wrapping_add(20 as libc::c_ulong);
    tmp___0 = malloc(len);
    (*self_0).href = tmp___0 as *mut libc::c_char;
    if !((*self_0).href).is_null() {
        sprintf(
            (*self_0).href,
            b"https://github.com/%s\0" as *const u8 as *const libc::c_char,
            (*self_0).repo,
        );
    }
}
unsafe extern "C" fn parse_li(mut li: *mut GumboNode) -> *mut wiki_package_t {
    let mut self_0: *mut wiki_package_t = 0 as *mut wiki_package_t;
    let mut tmp: *mut wiki_package_t = 0 as *mut wiki_package_t;
    let mut text: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tok: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut pos: libc::c_int = 0;
    tmp = wiki_package_new();
    self_0 = tmp;
    text = 0 as *mut libc::c_void as *mut libc::c_char;
    if !self_0.is_null() {
        text = gumbo_text_content(li);
        if !text.is_null() {
            tmp___0 = strstr(
                text as *const libc::c_char,
                b" - \0" as *const u8 as *const libc::c_char,
            );
            tok = tmp___0;
            if !tok.is_null() {
                pos = tok.offset_from(text) as libc::c_long as libc::c_int;
                (*self_0)
                    .repo = substr(text as *const libc::c_char, 0 as libc::c_int, pos);
                (*self_0)
                    .description = substr(
                    text as *const libc::c_char,
                    pos + 3 as libc::c_int,
                    -(1 as libc::c_int),
                );
                if !((*self_0).repo).is_null() {
                    if !((*self_0).description).is_null() {
                        trim((*self_0).description);
                        trim((*self_0).repo);
                        add_package_href(self_0);
                    }
                }
            }
        }
    }
    free(text as *mut libc::c_void);
    return self_0;
}
pub unsafe extern "C" fn wiki_registry_parse(
    mut html: *const libc::c_char,
) -> *mut list_t {
    let mut output: *mut GumboOutput = 0 as *mut GumboOutput;
    let mut tmp: *mut GumboOutput = 0 as *mut GumboOutput;
    let mut pkgs: *mut list_t = 0 as *mut list_t;
    let mut tmp___0: *mut list_t = 0 as *mut list_t;
    let mut body: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut h2s: *mut list_t = 0 as *mut list_t;
    let mut tmp___2: *mut list_t = 0 as *mut list_t;
    let mut heading_node: *mut list_node_t = 0 as *mut list_node_t;
    let mut heading_iterator: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut tmp___3: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut heading: *mut GumboNode = 0 as *mut GumboNode;
    let mut category: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut siblings: *mut GumboVector = 0 as *mut GumboVector;
    let mut pos: size_t = 0;
    let mut ul: *mut GumboNode = 0 as *mut GumboNode;
    let mut lis: *mut list_t = 0 as *mut list_t;
    let mut tmp___6: *mut list_t = 0 as *mut list_t;
    let mut li_iterator: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut tmp___7: *mut list_iterator_t = 0 as *mut list_iterator_t;
    let mut li_node: *mut list_node_t = 0 as *mut list_node_t;
    let mut package: *mut wiki_package_t = 0 as *mut wiki_package_t;
    let mut tmp___8: *mut wiki_package_t = 0 as *mut wiki_package_t;
    let mut tmp___9: *mut list_node_t = 0 as *mut list_node_t;
    tmp = gumbo_parse(html);
    output = tmp;
    tmp___0 = list_new();
    pkgs = tmp___0;
    tmp___1 = gumbo_get_element_by_id(
        b"wiki-body\0" as *const u8 as *const libc::c_char,
        (*output).root,
    );
    body = tmp___1;
    if !body.is_null() {
        tmp___2 = gumbo_get_elements_by_tag_name(
            b"h2\0" as *const u8 as *const libc::c_char,
            body,
        );
        h2s = tmp___2;
        tmp___3 = list_iterator_new(h2s, LIST_HEAD);
        heading_iterator = tmp___3;
        loop {
            heading_node = list_iterator_next(heading_iterator);
            if heading_node.is_null() {
                break;
            }
            heading = (*heading_node).val as *mut GumboNode;
            tmp___4 = gumbo_text_content(heading);
            category = tmp___4;
            if category.is_null() {
                break;
            }
            tmp___5 = case_lower(category);
            trim(tmp___5);
            siblings = &mut (*(*heading).parent).v.element.children;
            pos = (*heading).index_within_parent;
            ul = *((*siblings).data)
                .offset(pos.wrapping_add(2 as libc::c_ulong) as isize) as *mut GumboNode;
            if 30 as libc::c_uint != (*ul).v.element.tag as libc::c_uint {
                free(category as *mut libc::c_void);
            } else {
                tmp___6 = gumbo_get_elements_by_tag_name(
                    b"li\0" as *const u8 as *const libc::c_char,
                    ul,
                );
                lis = tmp___6;
                tmp___7 = list_iterator_new(lis, LIST_HEAD);
                li_iterator = tmp___7;
                loop {
                    li_node = list_iterator_next(li_iterator);
                    if li_node.is_null() {
                        break;
                    }
                    tmp___8 = parse_li((*li_node).val as *mut GumboNode);
                    package = tmp___8;
                    let mut current_block_33: u64;
                    if !package.is_null() {
                        if !((*package).description).is_null() {
                            (*package)
                                .category = strdup(category as *const libc::c_char);
                            tmp___9 = list_node_new(package as *mut libc::c_void);
                            list_rpush(pkgs, tmp___9);
                            current_block_33 = 10758786907990354186;
                        } else {
                            current_block_33 = 13425114249623996696;
                        }
                    } else {
                        current_block_33 = 13425114249623996696;
                    }
                    match current_block_33 {
                        13425114249623996696 => {
                            if !package.is_null() {
                                wiki_package_free(package);
                            }
                        }
                        _ => {}
                    }
                }
                list_iterator_destroy(li_iterator);
                list_destroy(lis);
                free(category as *mut libc::c_void);
            }
        }
        list_iterator_destroy(heading_iterator);
        list_destroy(h2s);
    }
    gumbo_destroy_output(&kGumboDefaultOptions, output);
    return pkgs;
}
pub unsafe extern "C" fn wiki_registry(mut url: *const libc::c_char) -> *mut list_t {
    let mut res: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut tmp: *mut http_get_response_t = 0 as *mut http_get_response_t;
    let mut list: *mut list_t = 0 as *mut list_t;
    let mut tmp___0: *mut list_t = 0 as *mut list_t;
    tmp = http_get(url);
    res = tmp;
    if (*res).ok == 0 {
        return 0 as *mut libc::c_void as *mut list_t;
    }
    tmp___0 = wiki_registry_parse((*res).data as *const libc::c_char);
    list = tmp___0;
    http_get_free(res);
    return list;
}
pub unsafe extern "C" fn wiki_package_free(mut pkg: *mut wiki_package_t) {
    free((*pkg).repo as *mut libc::c_void);
    free((*pkg).href as *mut libc::c_void);
    free((*pkg).description as *mut libc::c_void);
    free((*pkg).category as *mut libc::c_void);
    free(pkg as *mut libc::c_void);
}
pub unsafe extern "C" fn which(mut name: *const libc::c_char) -> *mut libc::c_char {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = getenv(b"PATH\0" as *const u8 as *const libc::c_char);
    tmp___0 = which_path(name, tmp as *const libc::c_char);
    return tmp___0;
}
pub unsafe extern "C" fn which_path(
    mut name: *const libc::c_char,
    mut _path: *const libc::c_char,
) -> *mut libc::c_char {
    let mut path: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tok: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut len: libc::c_int = 0;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: size_t = 0;
    let mut file: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___4: libc::c_int = 0;
    tmp = strdup(_path);
    path = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == path as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = strtok(path, b":\0" as *const u8 as *const libc::c_char);
    tok = tmp___0;
    while !tok.is_null() {
        tmp___1 = strlen(tok as *const libc::c_char);
        tmp___2 = strlen(name);
        len = tmp___1.wrapping_add(2 as libc::c_ulong).wrapping_add(tmp___2)
            as libc::c_int;
        tmp___3 = malloc(len as size_t);
        file = tmp___3 as *mut libc::c_char;
        if file.is_null() {
            free(path as *mut libc::c_void);
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
        sprintf(file, b"%s/%s\0" as *const u8 as *const libc::c_char, tok, name);
        tmp___4 = access(file as *const libc::c_char, 1 as libc::c_int);
        if 0 as libc::c_int == tmp___4 {
            free(path as *mut libc::c_void);
            return file;
        }
        tok = strtok(
            0 as *mut libc::c_void as *mut libc::c_char,
            b":\0" as *const u8 as *const libc::c_char,
        );
        free(file as *mut libc::c_void);
    }
    free(path as *mut libc::c_void);
    return 0 as *mut libc::c_void as *mut libc::c_char;
}
pub unsafe extern "C" fn path_normalize(
    mut path: *const libc::c_char,
) -> *mut libc::c_char {
    let mut copy___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut i: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    if path.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = strdup(path);
    copy___0 = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == copy___0 as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    ptr = copy___0;
    i = 0 as libc::c_int;
    while *copy___0.offset(i as isize) != 0 {
        tmp___0 = ptr;
        ptr = ptr.offset(1);
        *tmp___0 = *path.offset(i as isize);
        if 47 as libc::c_int == *path.offset(i as isize) as libc::c_int {
            i += 1;
            while 47 as libc::c_int == *path.offset(i as isize) as libc::c_int {
                i += 1;
            }
            i -= 1;
        }
        i += 1;
    }
    *ptr = '\u{0}' as i32 as libc::c_char;
    return copy___0;
}
pub unsafe extern "C" fn fs_error(mut prefix: *const libc::c_char) {
    let mut fmt: [libc::c_char; 256] = [0; 256];
    sprintf(
        fmt.as_mut_ptr(),
        b"fs: %s: error\0" as *const u8 as *const libc::c_char,
        prefix,
    );
    perror(fmt.as_mut_ptr() as *const libc::c_char);
}
pub unsafe extern "C" fn fs_open(
    mut path: *const libc::c_char,
    mut flags: *const libc::c_char,
) -> *mut FILE {
    let mut tmp: *mut FILE = 0 as *mut FILE;
    tmp = fopen(path, flags);
    return tmp;
}
pub unsafe extern "C" fn fs_close(mut file: *mut FILE) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = fclose(file);
    return tmp;
}
pub unsafe extern "C" fn fs_rename(
    mut from: *const libc::c_char,
    mut to: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = rename(from, to);
    return tmp;
}
pub unsafe extern "C" fn fs_stat(mut path: *const libc::c_char) -> *mut fs_stats {
    let mut stats: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut e: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = malloc(::std::mem::size_of::<fs_stats>() as libc::c_ulong);
    stats = tmp as *mut fs_stats;
    tmp___0 = stat(path, stats as *mut stat);
    e = tmp___0;
    if -(1 as libc::c_int) == e {
        free(stats as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut fs_stats;
    }
    return stats;
}
pub unsafe extern "C" fn fs_fstat(mut file: *mut FILE) -> *mut fs_stats {
    let mut stats: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut fd: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut e: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    if 0 as *mut libc::c_void as libc::c_ulong == file as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut fs_stats;
    }
    tmp = malloc(::std::mem::size_of::<fs_stats>() as libc::c_ulong);
    stats = tmp as *mut fs_stats;
    tmp___0 = fileno(file);
    fd = tmp___0;
    tmp___1 = fstat(fd, stats);
    e = tmp___1;
    if -(1 as libc::c_int) == e {
        free(stats as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut fs_stats;
    }
    return stats;
}
pub unsafe extern "C" fn fs_lstat(mut path: *const libc::c_char) -> *mut fs_stats {
    let mut stats: *mut fs_stats = 0 as *mut fs_stats;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut e: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = malloc(::std::mem::size_of::<fs_stats>() as libc::c_ulong);
    stats = tmp as *mut fs_stats;
    tmp___0 = lstat(path, stats as *mut stat);
    e = tmp___0;
    if -(1 as libc::c_int) == e {
        free(stats as *mut libc::c_void);
        return 0 as *mut libc::c_void as *mut fs_stats;
    }
    return stats;
}
pub unsafe extern "C" fn fs_ftruncate(
    mut file: *mut FILE,
    mut len: libc::c_int,
) -> libc::c_int {
    let mut fd: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = fileno(file);
    fd = tmp;
    tmp___0 = ftruncate(fd, len as off_t);
    return tmp___0;
}
pub unsafe extern "C" fn fs_truncate(
    mut path: *const libc::c_char,
    mut len: libc::c_int,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = truncate(path, len as off_t);
    return tmp;
}
pub unsafe extern "C" fn fs_chown(
    mut path: *const libc::c_char,
    mut uid: libc::c_int,
    mut gid: libc::c_int,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = chown(path, uid as uid_t, gid as gid_t);
    return tmp;
}
pub unsafe extern "C" fn fs_fchown(
    mut file: *mut FILE,
    mut uid: libc::c_int,
    mut gid: libc::c_int,
) -> libc::c_int {
    let mut fd: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = fileno(file);
    fd = tmp;
    tmp___0 = fchown(fd, uid as uid_t, gid as gid_t);
    return tmp___0;
}
pub unsafe extern "C" fn fs_lchown(
    mut path: *const libc::c_char,
    mut uid: libc::c_int,
    mut gid: libc::c_int,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = lchown(path, uid as uid_t, gid as gid_t);
    return tmp;
}
pub unsafe extern "C" fn fs_size(mut path: *const libc::c_char) -> size_t {
    let mut size: size_t = 0;
    let mut file: *mut FILE = 0 as *mut FILE;
    let mut tmp: *mut FILE = 0 as *mut FILE;
    let mut tmp___0: libc::c_long = 0;
    tmp = fs_open(path, b"r\0" as *const u8 as *const libc::c_char);
    file = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == file as libc::c_ulong {
        return -(1 as libc::c_int) as size_t;
    }
    fseek(file, 0 as libc::c_long, 2 as libc::c_int);
    tmp___0 = ftell(file);
    size = tmp___0 as size_t;
    fs_close(file);
    return size;
}
pub unsafe extern "C" fn fs_fsize(mut file: *mut FILE) -> size_t {
    let mut pos: libc::c_ulong = 0;
    let mut tmp: libc::c_long = 0;
    let mut size: size_t = 0;
    let mut tmp___0: libc::c_long = 0;
    tmp = ftell(file);
    pos = tmp as libc::c_ulong;
    rewind(file);
    fseek(file, 0 as libc::c_long, 2 as libc::c_int);
    tmp___0 = ftell(file);
    size = tmp___0 as size_t;
    fseek(file, pos as libc::c_long, 0 as libc::c_int);
    return size;
}
pub unsafe extern "C" fn fs_read(mut path: *const libc::c_char) -> *mut libc::c_char {
    let mut file: *mut FILE = 0 as *mut FILE;
    let mut tmp: *mut FILE = 0 as *mut FILE;
    let mut data: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = fs_open(path, b"r\0" as *const u8 as *const libc::c_char);
    file = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == file as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = fs_fread(file);
    data = tmp___0;
    fclose(file);
    return data;
}
pub unsafe extern "C" fn fs_nread(
    mut path: *const libc::c_char,
    mut len: libc::c_int,
) -> *mut libc::c_char {
    let mut file: *mut FILE = 0 as *mut FILE;
    let mut tmp: *mut FILE = 0 as *mut FILE;
    let mut buffer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = fs_open(path, b"r\0" as *const u8 as *const libc::c_char);
    file = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == file as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = fs_fnread(file, len);
    buffer = tmp___0;
    fs_close(file);
    return buffer;
}
pub unsafe extern "C" fn fs_fread(mut file: *mut FILE) -> *mut libc::c_char {
    let mut fsize: size_t = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    tmp = fs_fsize(file);
    fsize = tmp;
    tmp___0 = fs_fnread(file, fsize as libc::c_int);
    return tmp___0;
}
pub unsafe extern "C" fn fs_fnread(
    mut file: *mut FILE,
    mut len: libc::c_int,
) -> *mut libc::c_char {
    let mut buffer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut n: size_t = 0;
    let mut tmp___0: size_t = 0;
    tmp = malloc(
        (::std::mem::size_of::<libc::c_char>() as libc::c_ulong)
            .wrapping_mul((len + 1 as libc::c_int) as libc::c_ulong),
    );
    buffer = tmp as *mut libc::c_char;
    tmp___0 = fread(
        buffer as *mut libc::c_void,
        1 as libc::c_int as size_t,
        len as size_t,
        file,
    );
    n = tmp___0;
    *buffer.offset(n as isize) = '\u{0}' as i32 as libc::c_char;
    return buffer;
}
pub unsafe extern "C" fn fs_write(
    mut path: *const libc::c_char,
    mut buffer: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: size_t = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = strlen(buffer);
    tmp___0 = fs_nwrite(path, buffer, tmp as libc::c_int);
    return tmp___0;
}
pub unsafe extern "C" fn fs_nwrite(
    mut path: *const libc::c_char,
    mut buffer: *const libc::c_char,
    mut len: libc::c_int,
) -> libc::c_int {
    let mut file: *mut FILE = 0 as *mut FILE;
    let mut tmp: *mut FILE = 0 as *mut FILE;
    let mut result: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = fs_open(path, b"w\0" as *const u8 as *const libc::c_char);
    file = tmp;
    if 0 as *mut libc::c_void as libc::c_ulong == file as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    tmp___0 = fs_fnwrite(file, buffer, len);
    result = tmp___0;
    fclose(file);
    return result;
}
pub unsafe extern "C" fn fs_fwrite(
    mut file: *mut FILE,
    mut buffer: *const libc::c_char,
) -> libc::c_int {
    let mut tmp: size_t = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = strlen(buffer);
    tmp___0 = fs_fnwrite(file, buffer, tmp as libc::c_int);
    return tmp___0;
}
pub unsafe extern "C" fn fs_fnwrite(
    mut file: *mut FILE,
    mut buffer: *const libc::c_char,
    mut len: libc::c_int,
) -> libc::c_int {
    let mut tmp: size_t = 0;
    tmp = fwrite(
        buffer as *const libc::c_void,
        1 as libc::c_int as size_t,
        len as size_t,
        file,
    );
    return tmp as libc::c_int;
}
pub unsafe extern "C" fn fs_mkdir(
    mut path: *const libc::c_char,
    mut mode: libc::c_int,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = mkdir(path, mode as mode_t);
    return tmp;
}
pub unsafe extern "C" fn fs_rmdir(mut path: *const libc::c_char) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = rmdir(path);
    return tmp;
}
pub unsafe extern "C" fn fs_exists(mut path: *const libc::c_char) -> libc::c_int {
    let mut b: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_nlink: 0,
        st_mode: 0,
        st_uid: 0,
        st_gid: 0,
        __pad0: 0,
        st_rdev: 0,
        st_size: 0,
        st_blksize: 0,
        st_blocks: 0,
        st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
        __glibc_reserved: [0; 3],
    };
    let mut tmp: libc::c_int = 0;
    tmp = stat(path, &mut b as *mut stat);
    return tmp;
}
pub unsafe extern "C" fn parse_repo_owner(
    mut slug: *const libc::c_char,
    mut fallback: *const libc::c_char,
) -> *mut libc::c_char {
    let mut copy___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut owner: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: size_t = 0;
    let mut delta: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: size_t = 0;
    copy___0 = 0 as *mut libc::c_void as *mut libc::c_char;
    owner = 0 as *mut libc::c_void as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == slug as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = strlen(slug);
    if 0 as libc::c_ulong == tmp {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    copy___0 = strdup(slug);
    if copy___0.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    owner = strchr(copy___0 as *const libc::c_char, '/' as i32);
    if !owner.is_null() {
        delta = owner.offset_from(copy___0) as libc::c_long as libc::c_int;
        if delta == 0 {
            free(copy___0 as *mut libc::c_void);
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
        tmp___1 = substr(copy___0 as *const libc::c_char, 0 as libc::c_int, delta);
        tmp___0 = tmp___1;
        free(copy___0 as *mut libc::c_void);
        return tmp___0;
    }
    if !fallback.is_null() {
        tmp___2 = strlen(copy___0 as *const libc::c_char);
        if (0 as libc::c_ulong) < tmp___2 {
            if 64 as libc::c_int
                != *copy___0.offset(0 as libc::c_int as isize) as libc::c_int
            {
                owner = strdup(fallback);
            }
        }
    }
    free(copy___0 as *mut libc::c_void);
    return owner;
}
pub unsafe extern "C" fn parse_repo_name(
    mut slug: *const libc::c_char,
) -> *mut libc::c_char {
    let mut owner: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut copy___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut version: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: size_t = 0;
    let mut delta: libc::c_int = 0;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut delta___0: libc::c_int = 0;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    owner = 0 as *mut libc::c_void as *mut libc::c_char;
    copy___0 = 0 as *mut libc::c_void as *mut libc::c_char;
    name = 0 as *mut libc::c_void as *mut libc::c_char;
    version = 0 as *mut libc::c_void as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == slug as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = strlen(slug);
    if 0 as libc::c_ulong == tmp {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    copy___0 = strdup(slug);
    if copy___0.is_null() {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    version = strchr(copy___0 as *const libc::c_char, '@' as i32);
    if !version.is_null() {
        delta = version.offset_from(copy___0) as libc::c_long as libc::c_int;
        tmp___1 = substr(copy___0 as *const libc::c_char, 0 as libc::c_int, delta);
        tmp___0 = tmp___1;
        free(copy___0 as *mut libc::c_void);
        if tmp___0.is_null() {
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
        copy___0 = tmp___0;
    }
    owner = strchr(copy___0 as *const libc::c_char, '/' as i32);
    if !owner.is_null() {
        delta___0 = owner.offset_from(copy___0) as libc::c_long as libc::c_int;
        if delta___0 == 0 {
            free(copy___0 as *mut libc::c_void);
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
        tmp___3 = substr(
            copy___0 as *const libc::c_char,
            delta___0 + 1 as libc::c_int,
            -(1 as libc::c_int),
        );
        tmp___2 = tmp___3;
        free(copy___0 as *mut libc::c_void);
        copy___0 = tmp___2;
    }
    if !copy___0.is_null() {
        name = strdup(copy___0 as *const libc::c_char);
    }
    free(copy___0 as *mut libc::c_void);
    return name;
}
pub unsafe extern "C" fn parse_repo_version(
    mut slug: *const libc::c_char,
    mut fallback: *const libc::c_char,
) -> *mut libc::c_char {
    let mut tmp: size_t = 0;
    let mut name: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut version: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: size_t = 0;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___4: *mut libc::c_char = 0 as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == slug as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = strlen(slug);
    if 0 as libc::c_ulong == tmp {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp___0 = parse_repo_name(slug);
    name = tmp___0;
    if 0 as *mut libc::c_void as libc::c_ulong == name as libc::c_ulong {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    free(name as *mut libc::c_void);
    tmp___1 = strchr(slug, '@' as i32);
    version = tmp___1;
    if !version.is_null() {
        version = version.offset(1);
        tmp___2 = strlen(version as *const libc::c_char);
        if 0 as libc::c_ulong == tmp___2 {
            return 0 as *mut libc::c_void as *mut libc::c_char;
        }
        if 42 as libc::c_int == *version.offset(0 as libc::c_int as isize) as libc::c_int
        {
            tmp___3 = strdup(b"master\0" as *const u8 as *const libc::c_char);
            return tmp___3;
        }
        tmp___4 = strdup(version as *const libc::c_char);
        return tmp___4;
    }
    version = 0 as *mut libc::c_void as *mut libc::c_char;
    if !fallback.is_null() {
        version = strdup(fallback);
    }
    return version;
}
pub static mut kGumboEmptyVector: __anonstruct_GumboVector_216886465 = {
    let mut init = __anonstruct_GumboVector_216886465 {
        data: 0 as *const libc::c_void as *mut libc::c_void as *mut *mut libc::c_void,
        length: 0 as libc::c_uint,
        capacity: 0 as libc::c_uint,
    };
    init
};
pub unsafe extern "C" fn gumbo_vector_init(
    mut parser: *mut GumboInternalParser,
    mut initial_capacity: size_t,
    mut vector: *mut GumboVector,
) {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    (*vector).length = 0 as libc::c_uint;
    (*vector).capacity = initial_capacity as libc::c_uint;
    if initial_capacity > 0 as libc::c_ulong {
        tmp = gumbo_parser_allocate(
            parser,
            (::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong)
                .wrapping_mul(initial_capacity),
        );
        (*vector).data = tmp as *mut *mut libc::c_void;
    } else {
        (*vector).data = 0 as *mut libc::c_void as *mut *mut libc::c_void;
    };
}
pub unsafe extern "C" fn gumbo_vector_destroy(
    mut parser: *mut GumboInternalParser,
    mut vector: *mut GumboVector,
) {
    if (*vector).capacity > 0 as libc::c_uint {
        gumbo_parser_deallocate(parser, (*vector).data as *mut libc::c_void);
    }
}
unsafe extern "C" fn enlarge_vector_if_full(
    mut parser: *mut GumboInternalParser,
    mut vector: *mut GumboVector,
) {
    let mut old_num_bytes: size_t = 0;
    let mut num_bytes: size_t = 0;
    let mut temp: *mut *mut libc::c_void = 0 as *mut *mut libc::c_void;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    if (*vector).length >= (*vector).capacity {
        if (*vector).capacity != 0 {
            old_num_bytes = (::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong)
                .wrapping_mul((*vector).capacity as libc::c_ulong);
            (*vector).capacity = ((*vector).capacity).wrapping_mul(2 as libc::c_uint);
            num_bytes = (::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong)
                .wrapping_mul((*vector).capacity as libc::c_ulong);
            tmp = gumbo_parser_allocate(parser, num_bytes);
            temp = tmp as *mut *mut libc::c_void;
            memcpy(
                temp as *mut libc::c_void,
                (*vector).data as *const libc::c_void,
                old_num_bytes,
            );
            gumbo_parser_deallocate(parser, (*vector).data as *mut libc::c_void);
            (*vector).data = temp;
        } else {
            (*vector).capacity = 2 as libc::c_uint;
            tmp___0 = gumbo_parser_allocate(
                parser,
                (::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong)
                    .wrapping_mul((*vector).capacity as libc::c_ulong),
            );
            (*vector).data = tmp___0 as *mut *mut libc::c_void;
        }
    }
}
pub unsafe extern "C" fn gumbo_vector_add(
    mut parser: *mut GumboInternalParser,
    mut element: *mut libc::c_void,
    mut vector: *mut GumboVector,
) {
    let mut tmp___1: libc::c_uint = 0;
    enlarge_vector_if_full(parser, vector);
    if ((*vector).data).is_null() {
        __assert_fail(
            b"vector->data\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/vector.c\0" as *const u8 as *const libc::c_char,
            71 as libc::c_uint,
            b"gumbo_vector_add\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*vector).length < (*vector).capacity) {
        __assert_fail(
            b"vector->length < vector->capacity\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/vector.c\0" as *const u8 as *const libc::c_char,
            72 as libc::c_uint,
            b"gumbo_vector_add\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___1 = (*vector).length;
    (*vector).length = ((*vector).length).wrapping_add(1);
    let ref mut fresh24 = *((*vector).data).offset(tmp___1 as isize);
    *fresh24 = element;
}
pub unsafe extern "C" fn gumbo_vector_pop(
    mut parser: *mut GumboInternalParser,
    mut vector: *mut GumboVector,
) -> *mut libc::c_void {
    if (*vector).length == 0 as libc::c_uint {
        return 0 as *mut libc::c_void;
    }
    (*vector).length = ((*vector).length).wrapping_sub(1);
    return *((*vector).data).offset((*vector).length as isize);
}
pub unsafe extern "C" fn gumbo_vector_index_of(
    mut vector: *mut GumboVector,
    mut element: *mut libc::c_void,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*vector).length {
        if *((*vector).data).offset(i as isize) as libc::c_ulong
            == element as libc::c_ulong
        {
            return i;
        }
        i += 1;
    }
    return -(1 as libc::c_int);
}
pub unsafe extern "C" fn gumbo_vector_insert_at(
    mut parser: *mut GumboInternalParser,
    mut element: *mut libc::c_void,
    mut index___0: libc::c_int,
    mut vector: *mut GumboVector,
) {
    if !(index___0 >= 0 as libc::c_int) {
        __assert_fail(
            b"index >= 0\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/vector.c\0" as *const u8 as *const libc::c_char,
            96 as libc::c_uint,
            b"gumbo_vector_insert_at\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(index___0 as libc::c_uint <= (*vector).length) {
        __assert_fail(
            b"index <= vector->length\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/vector.c\0" as *const u8 as *const libc::c_char,
            97 as libc::c_uint,
            b"gumbo_vector_insert_at\0" as *const u8 as *const libc::c_char,
        );
    }
    enlarge_vector_if_full(parser, vector);
    (*vector).length = ((*vector).length).wrapping_add(1);
    memmove(
        ((*vector).data).offset((index___0 + 1 as libc::c_int) as isize)
            as *mut libc::c_void,
        ((*vector).data).offset(index___0 as isize) as *const libc::c_void,
        (::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong)
            .wrapping_mul(
                ((*vector).length)
                    .wrapping_sub(index___0 as libc::c_uint)
                    .wrapping_sub(1 as libc::c_uint) as libc::c_ulong,
            ),
    );
    let ref mut fresh25 = *((*vector).data).offset(index___0 as isize);
    *fresh25 = element;
}
pub unsafe extern "C" fn gumbo_vector_remove(
    mut parser: *mut GumboInternalParser,
    mut node: *mut libc::c_void,
    mut vector: *mut GumboVector,
) {
    let mut index___0: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    tmp = gumbo_vector_index_of(vector, node);
    index___0 = tmp;
    if index___0 == -(1 as libc::c_int) {
        return;
    }
    gumbo_vector_remove_at(parser, index___0, vector);
}
pub unsafe extern "C" fn gumbo_vector_remove_at(
    mut parser: *mut GumboInternalParser,
    mut index___0: libc::c_int,
    mut vector: *mut GumboVector,
) -> *mut libc::c_void {
    let mut result: *mut libc::c_void = 0 as *mut libc::c_void;
    if !(index___0 >= 0 as libc::c_int) {
        __assert_fail(
            b"index >= 0\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/vector.c\0" as *const u8 as *const libc::c_char,
            116 as libc::c_uint,
            b"gumbo_vector_remove_at\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((index___0 as libc::c_uint) < (*vector).length) {
        __assert_fail(
            b"index < vector->length\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/vector.c\0" as *const u8 as *const libc::c_char,
            117 as libc::c_uint,
            b"gumbo_vector_remove_at\0" as *const u8 as *const libc::c_char,
        );
    }
    result = *((*vector).data).offset(index___0 as isize);
    memmove(
        ((*vector).data).offset(index___0 as isize) as *mut libc::c_void,
        ((*vector).data).offset((index___0 + 1 as libc::c_int) as isize)
            as *const libc::c_void,
        (::std::mem::size_of::<*mut libc::c_void>() as libc::c_ulong)
            .wrapping_mul(
                ((*vector).length)
                    .wrapping_sub(index___0 as libc::c_uint)
                    .wrapping_sub(1 as libc::c_uint) as libc::c_ulong,
            ),
    );
    (*vector).length = ((*vector).length).wrapping_sub(1);
    return result;
}
pub unsafe extern "C" fn gumbo_get_attribute(
    mut attributes: *const GumboVector,
    mut name: *const libc::c_char,
) -> *mut GumboAttribute {
    let mut i: libc::c_int = 0;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp: libc::c_int = 0;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*attributes).length {
        attr = *((*attributes).data).offset(i as isize) as *mut GumboAttribute;
        tmp = strcasecmp((*attr).name, name);
        if tmp == 0 {
            return attr;
        }
        i += 1;
    }
    return 0 as *mut libc::c_void as *mut GumboAttribute;
}
pub unsafe extern "C" fn gumbo_destroy_attribute(
    mut parser: *mut GumboInternalParser,
    mut attribute: *mut GumboAttribute,
) {
    gumbo_parser_deallocate(parser, (*attribute).name as *mut libc::c_void);
    gumbo_parser_deallocate(parser, (*attribute).value as *mut libc::c_void);
    gumbo_parser_deallocate(parser, attribute as *mut libc::c_void);
}
pub static mut kGumboTagNames: [*const libc::c_char; 151] = [
    b"html\0" as *const u8 as *const libc::c_char,
    b"head\0" as *const u8 as *const libc::c_char,
    b"title\0" as *const u8 as *const libc::c_char,
    b"base\0" as *const u8 as *const libc::c_char,
    b"link\0" as *const u8 as *const libc::c_char,
    b"meta\0" as *const u8 as *const libc::c_char,
    b"style\0" as *const u8 as *const libc::c_char,
    b"script\0" as *const u8 as *const libc::c_char,
    b"noscript\0" as *const u8 as *const libc::c_char,
    b"template\0" as *const u8 as *const libc::c_char,
    b"body\0" as *const u8 as *const libc::c_char,
    b"article\0" as *const u8 as *const libc::c_char,
    b"section\0" as *const u8 as *const libc::c_char,
    b"nav\0" as *const u8 as *const libc::c_char,
    b"aside\0" as *const u8 as *const libc::c_char,
    b"h1\0" as *const u8 as *const libc::c_char,
    b"h2\0" as *const u8 as *const libc::c_char,
    b"h3\0" as *const u8 as *const libc::c_char,
    b"h4\0" as *const u8 as *const libc::c_char,
    b"h5\0" as *const u8 as *const libc::c_char,
    b"h6\0" as *const u8 as *const libc::c_char,
    b"hgroup\0" as *const u8 as *const libc::c_char,
    b"header\0" as *const u8 as *const libc::c_char,
    b"footer\0" as *const u8 as *const libc::c_char,
    b"address\0" as *const u8 as *const libc::c_char,
    b"p\0" as *const u8 as *const libc::c_char,
    b"hr\0" as *const u8 as *const libc::c_char,
    b"pre\0" as *const u8 as *const libc::c_char,
    b"blockquote\0" as *const u8 as *const libc::c_char,
    b"ol\0" as *const u8 as *const libc::c_char,
    b"ul\0" as *const u8 as *const libc::c_char,
    b"li\0" as *const u8 as *const libc::c_char,
    b"dl\0" as *const u8 as *const libc::c_char,
    b"dt\0" as *const u8 as *const libc::c_char,
    b"dd\0" as *const u8 as *const libc::c_char,
    b"figure\0" as *const u8 as *const libc::c_char,
    b"figcaption\0" as *const u8 as *const libc::c_char,
    b"main\0" as *const u8 as *const libc::c_char,
    b"div\0" as *const u8 as *const libc::c_char,
    b"a\0" as *const u8 as *const libc::c_char,
    b"em\0" as *const u8 as *const libc::c_char,
    b"strong\0" as *const u8 as *const libc::c_char,
    b"small\0" as *const u8 as *const libc::c_char,
    b"s\0" as *const u8 as *const libc::c_char,
    b"cite\0" as *const u8 as *const libc::c_char,
    b"q\0" as *const u8 as *const libc::c_char,
    b"dfn\0" as *const u8 as *const libc::c_char,
    b"abbr\0" as *const u8 as *const libc::c_char,
    b"data\0" as *const u8 as *const libc::c_char,
    b"time\0" as *const u8 as *const libc::c_char,
    b"code\0" as *const u8 as *const libc::c_char,
    b"var\0" as *const u8 as *const libc::c_char,
    b"samp\0" as *const u8 as *const libc::c_char,
    b"kbd\0" as *const u8 as *const libc::c_char,
    b"sub\0" as *const u8 as *const libc::c_char,
    b"sup\0" as *const u8 as *const libc::c_char,
    b"i\0" as *const u8 as *const libc::c_char,
    b"b\0" as *const u8 as *const libc::c_char,
    b"u\0" as *const u8 as *const libc::c_char,
    b"mark\0" as *const u8 as *const libc::c_char,
    b"ruby\0" as *const u8 as *const libc::c_char,
    b"rt\0" as *const u8 as *const libc::c_char,
    b"rp\0" as *const u8 as *const libc::c_char,
    b"bdi\0" as *const u8 as *const libc::c_char,
    b"bdo\0" as *const u8 as *const libc::c_char,
    b"span\0" as *const u8 as *const libc::c_char,
    b"br\0" as *const u8 as *const libc::c_char,
    b"wbr\0" as *const u8 as *const libc::c_char,
    b"ins\0" as *const u8 as *const libc::c_char,
    b"del\0" as *const u8 as *const libc::c_char,
    b"image\0" as *const u8 as *const libc::c_char,
    b"img\0" as *const u8 as *const libc::c_char,
    b"iframe\0" as *const u8 as *const libc::c_char,
    b"embed\0" as *const u8 as *const libc::c_char,
    b"object\0" as *const u8 as *const libc::c_char,
    b"param\0" as *const u8 as *const libc::c_char,
    b"video\0" as *const u8 as *const libc::c_char,
    b"audio\0" as *const u8 as *const libc::c_char,
    b"source\0" as *const u8 as *const libc::c_char,
    b"track\0" as *const u8 as *const libc::c_char,
    b"canvas\0" as *const u8 as *const libc::c_char,
    b"map\0" as *const u8 as *const libc::c_char,
    b"area\0" as *const u8 as *const libc::c_char,
    b"math\0" as *const u8 as *const libc::c_char,
    b"mi\0" as *const u8 as *const libc::c_char,
    b"mo\0" as *const u8 as *const libc::c_char,
    b"mn\0" as *const u8 as *const libc::c_char,
    b"ms\0" as *const u8 as *const libc::c_char,
    b"mtext\0" as *const u8 as *const libc::c_char,
    b"mglyph\0" as *const u8 as *const libc::c_char,
    b"malignmark\0" as *const u8 as *const libc::c_char,
    b"annotation-xml\0" as *const u8 as *const libc::c_char,
    b"svg\0" as *const u8 as *const libc::c_char,
    b"foreignobject\0" as *const u8 as *const libc::c_char,
    b"desc\0" as *const u8 as *const libc::c_char,
    b"table\0" as *const u8 as *const libc::c_char,
    b"caption\0" as *const u8 as *const libc::c_char,
    b"colgroup\0" as *const u8 as *const libc::c_char,
    b"col\0" as *const u8 as *const libc::c_char,
    b"tbody\0" as *const u8 as *const libc::c_char,
    b"thead\0" as *const u8 as *const libc::c_char,
    b"tfoot\0" as *const u8 as *const libc::c_char,
    b"tr\0" as *const u8 as *const libc::c_char,
    b"td\0" as *const u8 as *const libc::c_char,
    b"th\0" as *const u8 as *const libc::c_char,
    b"form\0" as *const u8 as *const libc::c_char,
    b"fieldset\0" as *const u8 as *const libc::c_char,
    b"legend\0" as *const u8 as *const libc::c_char,
    b"label\0" as *const u8 as *const libc::c_char,
    b"input\0" as *const u8 as *const libc::c_char,
    b"button\0" as *const u8 as *const libc::c_char,
    b"select\0" as *const u8 as *const libc::c_char,
    b"datalist\0" as *const u8 as *const libc::c_char,
    b"optgroup\0" as *const u8 as *const libc::c_char,
    b"option\0" as *const u8 as *const libc::c_char,
    b"textarea\0" as *const u8 as *const libc::c_char,
    b"keygen\0" as *const u8 as *const libc::c_char,
    b"output\0" as *const u8 as *const libc::c_char,
    b"progress\0" as *const u8 as *const libc::c_char,
    b"meter\0" as *const u8 as *const libc::c_char,
    b"details\0" as *const u8 as *const libc::c_char,
    b"summary\0" as *const u8 as *const libc::c_char,
    b"menu\0" as *const u8 as *const libc::c_char,
    b"menuitem\0" as *const u8 as *const libc::c_char,
    b"applet\0" as *const u8 as *const libc::c_char,
    b"acronym\0" as *const u8 as *const libc::c_char,
    b"bgsound\0" as *const u8 as *const libc::c_char,
    b"dir\0" as *const u8 as *const libc::c_char,
    b"frame\0" as *const u8 as *const libc::c_char,
    b"frameset\0" as *const u8 as *const libc::c_char,
    b"noframes\0" as *const u8 as *const libc::c_char,
    b"isindex\0" as *const u8 as *const libc::c_char,
    b"listing\0" as *const u8 as *const libc::c_char,
    b"xmp\0" as *const u8 as *const libc::c_char,
    b"nextid\0" as *const u8 as *const libc::c_char,
    b"noembed\0" as *const u8 as *const libc::c_char,
    b"plaintext\0" as *const u8 as *const libc::c_char,
    b"rb\0" as *const u8 as *const libc::c_char,
    b"strike\0" as *const u8 as *const libc::c_char,
    b"basefont\0" as *const u8 as *const libc::c_char,
    b"big\0" as *const u8 as *const libc::c_char,
    b"blink\0" as *const u8 as *const libc::c_char,
    b"center\0" as *const u8 as *const libc::c_char,
    b"font\0" as *const u8 as *const libc::c_char,
    b"marquee\0" as *const u8 as *const libc::c_char,
    b"multicol\0" as *const u8 as *const libc::c_char,
    b"nobr\0" as *const u8 as *const libc::c_char,
    b"spacer\0" as *const u8 as *const libc::c_char,
    b"tt\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
];
pub unsafe extern "C" fn gumbo_normalized_tagname(
    mut tag: GumboTag,
) -> *const libc::c_char {
    if !(tag as libc::c_uint <= 150 as libc::c_uint) {
        __assert_fail(
            b"tag <= GUMBO_TAG_LAST\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tag.c\0" as *const u8 as *const libc::c_char,
            182 as libc::c_uint,
            b"gumbo_normalized_tagname\0" as *const u8 as *const libc::c_char,
        );
    }
    return kGumboTagNames[tag as usize];
}
pub unsafe extern "C" fn gumbo_tag_from_original_text(mut text: *mut GumboStringPiece) {
    let mut c: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___3: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    if (*text).data as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        return;
    }
    if !((*text).length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"text->length >= 2\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tag.c\0" as *const u8 as *const libc::c_char,
            192 as libc::c_uint,
            b"gumbo_tag_from_original_text\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(*((*text).data).offset(0 as libc::c_int as isize) as libc::c_int
        == 60 as libc::c_int)
    {
        __assert_fail(
            b"text->data[0] == '<'\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tag.c\0" as *const u8 as *const libc::c_char,
            193 as libc::c_uint,
            b"gumbo_tag_from_original_text\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(*((*text).data)
        .offset(((*text).length).wrapping_sub(1 as libc::c_ulong) as isize)
        as libc::c_int == 62 as libc::c_int)
    {
        __assert_fail(
            b"text->data[text->length - 1] == '>'\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tag.c\0" as *const u8 as *const libc::c_char,
            194 as libc::c_uint,
            b"gumbo_tag_from_original_text\0" as *const u8 as *const libc::c_char,
        );
    }
    if *((*text).data).offset(1 as libc::c_int as isize) as libc::c_int
        == 47 as libc::c_int
    {
        if !((*text).length >= 3 as libc::c_ulong) {
            __assert_fail(
                b"text->length >= 3\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/tag.c\0" as *const u8 as *const libc::c_char,
                197 as libc::c_uint,
                b"gumbo_tag_from_original_text\0" as *const u8 as *const libc::c_char,
            );
        }
        (*text).data = ((*text).data).offset(2 as libc::c_int as isize);
        (*text)
            .length = ((*text).length as libc::c_ulong).wrapping_sub(3 as libc::c_ulong)
            as size_t as size_t;
    } else {
        (*text).data = ((*text).data).offset(1);
        (*text)
            .length = ((*text).length as libc::c_ulong).wrapping_sub(2 as libc::c_ulong)
            as size_t as size_t;
        c = (*text).data;
        while c as libc::c_ulong
            != ((*text).data).offset((*text).length as isize) as libc::c_ulong
        {
            tmp___3 = __ctype_b_loc();
            if *(*tmp___3).offset(*c as libc::c_int as isize) as libc::c_int
                & 8192 as libc::c_int != 0
            {
                (*text).length = c.offset_from((*text).data) as libc::c_long as size_t;
                break;
            } else if *c as libc::c_int == 47 as libc::c_int {
                (*text).length = c.offset_from((*text).data) as libc::c_long as size_t;
                break;
            } else {
                c = c.offset(1);
            }
        }
    };
}
pub unsafe extern "C" fn gumbo_tag_enum(mut tagname: *const libc::c_char) -> GumboTag {
    let mut i: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < 150 as libc::c_int {
        tmp = strcasecmp(tagname, kGumboTagNames[i as usize]);
        if tmp == 0 as libc::c_int {
            return i as GumboTag;
        }
        i += 1;
    }
    return GUMBO_TAG_UNKNOWN;
}
pub static mut kGumboEmptySourcePosition: __anonstruct_GumboSourcePosition_891927932 = {
    let mut init = __anonstruct_GumboSourcePosition_891927932 {
        line: 0 as libc::c_uint,
        column: 0 as libc::c_uint,
        offset: 0 as libc::c_uint,
    };
    init
};
pub unsafe extern "C" fn gumbo_parser_allocate(
    mut parser: *mut GumboInternalParser,
    mut num_bytes: size_t,
) -> *mut libc::c_void {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = (Some(((*(*parser)._options).allocator).expect("non-null function pointer")))
        .expect("non-null function pointer")((*(*parser)._options).userdata, num_bytes);
    return tmp;
}
pub unsafe extern "C" fn gumbo_parser_deallocate(
    mut parser: *mut GumboInternalParser,
    mut ptr: *mut libc::c_void,
) {
    (Some(((*(*parser)._options).deallocator).expect("non-null function pointer")))
        .expect("non-null function pointer")((*(*parser)._options).userdata, ptr);
}
pub unsafe extern "C" fn gumbo_copy_stringz(
    mut parser: *mut GumboInternalParser,
    mut str: *const libc::c_char,
) -> *mut libc::c_char {
    let mut buffer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = strlen(str);
    tmp___0 = gumbo_parser_allocate(parser, tmp.wrapping_add(1 as libc::c_ulong));
    buffer = tmp___0 as *mut libc::c_char;
    strcpy(buffer, str);
    return buffer;
}
pub unsafe extern "C" fn gumbo_debug(mut format: *const libc::c_char, mut args: ...) {}
unsafe extern "C" fn malloc_wrapper(
    mut unused: *mut libc::c_void,
    mut size: size_t,
) -> *mut libc::c_void {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = malloc(size);
    return tmp;
}
unsafe extern "C" fn free_wrapper(
    mut unused: *mut libc::c_void,
    mut ptr: *mut libc::c_void,
) {
    free(ptr);
}
pub static mut kGumboDefaultOptions: GumboInternalOptions = {
    let mut init = GumboInternalOptions {
        allocator: Some(
            malloc_wrapper
                as unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void,
        ),
        deallocator: Some(
            free_wrapper
                as unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> (),
        ),
        userdata: 0 as *const libc::c_void as *mut libc::c_void,
        tab_stop: 8 as libc::c_int,
        stop_on_first_error: 0 as libc::c_int != 0,
        max_errors: -(1 as libc::c_int),
    };
    init
};
static mut kDoctypeHtml: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kPublicIdHtml4_0: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kPublicIdHtml4_01: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kPublicIdXhtml1_0: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kPublicIdXhtml1_1: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kSystemIdRecHtml4_0: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kSystemIdHtml4: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kSystemIdXhtmlStrict1_1: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kSystemIdXhtml1_1: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kSystemIdLegacyCompat: __anonstruct_GumboStringPiece_673951369 = __anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
};
static mut kQuirksModePublicIdPrefixes: [GumboStringPiece; 56] = [__anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
}; 56];
static mut kQuirksModePublicIdExactMatches: [GumboStringPiece; 4] = [__anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
}; 4];
static mut kQuirksModeSystemIdExactMatches: [GumboStringPiece; 2] = [__anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
}; 2];
static mut kLimitedQuirksPublicIdPrefixes: [GumboStringPiece; 3] = [__anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
}; 3];
static mut kLimitedQuirksRequiresSystemIdPublicIdPrefixes: [GumboStringPiece; 3] = [__anonstruct_GumboStringPiece_673951369 {
    data: 0 as *const libc::c_char,
    length: 0,
}; 3];
static mut kLegalXmlns: [*const libc::c_char; 3] = [
    b"http://www.w3.org/1999/xhtml\0" as *const u8 as *const libc::c_char,
    b"http://www.w3.org/2000/svg\0" as *const u8 as *const libc::c_char,
    b"http://www.w3.org/1998/Math/MathML\0" as *const u8 as *const libc::c_char,
];
static mut kSvgAttributeReplacements: [ReplacementEntry; 62] = [ReplacementEntry {
    from: __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    },
    to: __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    },
}; 62];
static mut kSvgTagReplacements: [ReplacementEntry; 36] = [ReplacementEntry {
    from: __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    },
    to: __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    },
}; 36];
static mut kForeignAttributeReplacements: [NamespacedAttributeReplacement; 12] = [
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:actuate\0" as *const u8 as *const libc::c_char,
            local_name: b"actuate\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:actuate\0" as *const u8 as *const libc::c_char,
            local_name: b"actuate\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:href\0" as *const u8 as *const libc::c_char,
            local_name: b"href\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:role\0" as *const u8 as *const libc::c_char,
            local_name: b"role\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:show\0" as *const u8 as *const libc::c_char,
            local_name: b"show\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:title\0" as *const u8 as *const libc::c_char,
            local_name: b"title\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xlink:type\0" as *const u8 as *const libc::c_char,
            local_name: b"type\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XLINK,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xml:base\0" as *const u8 as *const libc::c_char,
            local_name: b"base\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XML,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xml:lang\0" as *const u8 as *const libc::c_char,
            local_name: b"lang\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XML,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xml:space\0" as *const u8 as *const libc::c_char,
            local_name: b"space\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XML,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xmlns\0" as *const u8 as *const libc::c_char,
            local_name: b"xmlns\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XMLNS,
        };
        init
    },
    {
        let mut init = _NamespacedAttributeReplacement {
            from: b"xmlns:xlink\0" as *const u8 as *const libc::c_char,
            local_name: b"xlink\0" as *const u8 as *const libc::c_char,
            attr_namespace: GUMBO_ATTR_NAMESPACE_XMLNS,
        };
        init
    },
];
static mut kActiveFormattingScopeMarker: GumboNode = GumboNode {
    type_0: GUMBO_NODE_DOCUMENT,
    parent: 0 as *const GumboNode as *mut GumboNode,
    index_within_parent: 0,
    parse_flags: GUMBO_INSERTION_NORMAL,
    v: __anonunion_v_889275138 {
        document: GumboDocument {
            children: GumboVector {
                data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
                length: 0,
                capacity: 0,
            },
            has_doctype: false,
            name: 0 as *const libc::c_char,
            public_identifier: 0 as *const libc::c_char,
            system_identifier: 0 as *const libc::c_char,
            doc_type_quirks_mode: GUMBO_DOCTYPE_NO_QUIRKS,
        },
    },
};
static mut kStartTag: bool = 1 as libc::c_int != 0;
static mut kEndTag: bool = 0 as libc::c_int != 0;
unsafe extern "C" fn token_has_attribute(
    mut token: *const GumboToken,
    mut name: *const libc::c_char,
) -> bool {
    let mut tmp___0: *mut GumboAttribute = 0 as *mut GumboAttribute;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            404 as libc::c_uint,
            b"token_has_attribute\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___0 = gumbo_get_attribute(&(*token).v.start_tag.attributes, name);
    return tmp___0 as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong;
}
unsafe extern "C" fn attribute_matches(
    mut attributes: *const GumboVector,
    mut name: *const libc::c_char,
    mut value: *const libc::c_char,
) -> bool {
    let mut attr: *const GumboAttribute = 0 as *const GumboAttribute;
    let mut tmp: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    tmp = gumbo_get_attribute(attributes, name);
    attr = tmp as *const GumboAttribute;
    if !attr.is_null() {
        tmp___0 = strcasecmp(value, (*attr).value);
        tmp___1 = (tmp___0 == 0 as libc::c_int) as libc::c_int;
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1 != 0;
}
unsafe extern "C" fn attribute_matches_case_sensitive(
    mut attributes: *const GumboVector,
    mut name: *const libc::c_char,
    mut value: *const libc::c_char,
) -> bool {
    let mut attr: *const GumboAttribute = 0 as *const GumboAttribute;
    let mut tmp: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    tmp = gumbo_get_attribute(attributes, name);
    attr = tmp as *const GumboAttribute;
    if !attr.is_null() {
        tmp___0 = strcmp(value, (*attr).value);
        tmp___1 = (tmp___0 == 0 as libc::c_int) as libc::c_int;
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1 != 0;
}
unsafe extern "C" fn all_attributes_match(
    mut attr1: *const GumboVector,
    mut attr2: *const GumboVector,
) -> bool {
    let mut num_unmatched_attr2_elements: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut attr: *const GumboAttribute = 0 as *const GumboAttribute;
    let mut tmp: bool = false;
    num_unmatched_attr2_elements = (*attr2).length as libc::c_int;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*attr1).length {
        attr = *((*attr1).data).offset(i as isize) as *const GumboAttribute;
        tmp = attribute_matches_case_sensitive(attr2, (*attr).name, (*attr).value);
        if tmp {
            num_unmatched_attr2_elements -= 1;
        } else {
            return 0 as libc::c_int != 0
        }
        i += 1;
    }
    return num_unmatched_attr2_elements == 0 as libc::c_int;
}
unsafe extern "C" fn set_frameset_not_ok(mut parser: *mut GumboParser) {
    gumbo_debug(
        b"Setting frameset_ok to false.\n\0" as *const u8 as *const libc::c_char,
    );
    (*(*parser)._parser_state)._frameset_ok = 0 as libc::c_int != 0;
}
unsafe extern "C" fn create_node(
    mut parser: *mut GumboParser,
    mut type_0: GumboNodeType,
) -> *mut GumboNode {
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboNode>() as libc::c_ulong,
    );
    node = tmp as *mut GumboNode;
    (*node).parent = 0 as *mut libc::c_void as *mut GumboNode;
    (*node).index_within_parent = -(1 as libc::c_int) as size_t;
    (*node).type_0 = type_0;
    (*node).parse_flags = GUMBO_INSERTION_NORMAL;
    return node;
}
unsafe extern "C" fn new_document_node(mut parser: *mut GumboParser) -> *mut GumboNode {
    let mut document_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut document: *mut GumboDocument = 0 as *mut GumboDocument;
    tmp = create_node(parser, GUMBO_NODE_DOCUMENT);
    document_node = tmp;
    (*document_node).parse_flags = GUMBO_INSERTION_BY_PARSER;
    gumbo_vector_init(
        parser,
        1 as libc::c_int as size_t,
        &mut (*document_node).v.document.children,
    );
    document = &mut (*document_node).v.document;
    (*document).has_doctype = 0 as libc::c_int != 0;
    (*document).name = 0 as *mut libc::c_void as *const libc::c_char;
    (*document).public_identifier = 0 as *mut libc::c_void as *const libc::c_char;
    (*document).system_identifier = 0 as *mut libc::c_void as *const libc::c_char;
    return document_node;
}
unsafe extern "C" fn output_init(mut parser: *mut GumboParser) {
    let mut output: *mut GumboOutput = 0 as *mut GumboOutput;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboOutput>() as libc::c_ulong,
    );
    output = tmp as *mut GumboOutput;
    (*output).root = 0 as *mut libc::c_void as *mut GumboNode;
    (*output).document = new_document_node(parser);
    (*parser)._output = output;
    gumbo_init_errors(parser);
}
unsafe extern "C" fn parser_state_init(mut parser: *mut GumboParser) {
    let mut parser_state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboParserState>() as libc::c_ulong,
    );
    parser_state = tmp as *mut GumboParserState;
    (*parser_state)._insertion_mode = GUMBO_INSERTION_MODE_INITIAL;
    (*parser_state)._reprocess_current_token = 0 as libc::c_int != 0;
    (*parser_state)._frameset_ok = 1 as libc::c_int != 0;
    (*parser_state)._ignore_next_linefeed = 0 as libc::c_int != 0;
    (*parser_state)._foster_parent_insertions = 0 as libc::c_int != 0;
    (*parser_state)._text_node._type = GUMBO_NODE_WHITESPACE;
    gumbo_string_buffer_init(parser, &mut (*parser_state)._text_node._buffer);
    gumbo_vector_init(
        parser,
        10 as libc::c_int as size_t,
        &mut (*parser_state)._open_elements,
    );
    gumbo_vector_init(
        parser,
        5 as libc::c_int as size_t,
        &mut (*parser_state)._active_formatting_elements,
    );
    gumbo_vector_init(
        parser,
        5 as libc::c_int as size_t,
        &mut (*parser_state)._template_insertion_modes,
    );
    (*parser_state)._head_element = 0 as *mut libc::c_void as *mut GumboNode;
    (*parser_state)._form_element = 0 as *mut libc::c_void as *mut GumboNode;
    (*parser_state)._current_token = 0 as *mut libc::c_void as *mut GumboToken;
    (*parser_state)._closed_body_tag = 0 as libc::c_int != 0;
    (*parser_state)._closed_html_tag = 0 as libc::c_int != 0;
    (*parser)._parser_state = parser_state;
}
unsafe extern "C" fn parser_state_destroy(mut parser: *mut GumboParser) {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    state = (*parser)._parser_state;
    gumbo_vector_destroy(parser, &mut (*state)._active_formatting_elements);
    gumbo_vector_destroy(parser, &mut (*state)._open_elements);
    gumbo_vector_destroy(parser, &mut (*state)._template_insertion_modes);
    gumbo_string_buffer_destroy(parser, &mut (*state)._text_node._buffer);
    gumbo_parser_deallocate(parser, state as *mut libc::c_void);
}
unsafe extern "C" fn get_document_node(mut parser: *mut GumboParser) -> *mut GumboNode {
    return (*(*parser)._output).document;
}
unsafe extern "C" fn get_current_node(mut parser: *mut GumboParser) -> *mut GumboNode {
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    open_elements = &mut (*(*parser)._parser_state)._open_elements;
    if (*open_elements).length == 0 as libc::c_uint {
        if !((*(*parser)._output).root).is_null() {
            __assert_fail(
                b"!parser->_output->root\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                516 as libc::c_uint,
                b"get_current_node\0" as *const u8 as *const libc::c_char,
            );
        }
        return 0 as *mut libc::c_void as *mut GumboNode;
    }
    if !((*open_elements).length > 0 as libc::c_uint) {
        __assert_fail(
            b"open_elements->length > 0\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            519 as libc::c_uint,
            b"get_current_node\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*open_elements).data as libc::c_ulong
        != 0 as *mut libc::c_void as libc::c_ulong)
    {
        __assert_fail(
            b"open_elements->data != NULL\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            520 as libc::c_uint,
            b"get_current_node\0" as *const u8 as *const libc::c_char,
        );
    }
    return *((*open_elements).data)
        .offset(((*open_elements).length).wrapping_sub(1 as libc::c_uint) as isize)
        as *mut GumboNode;
}
unsafe extern "C" fn is_in_static_list(
    mut needle: *const libc::c_char,
    mut haystack: *const GumboStringPiece,
    mut exact_match: bool,
) -> bool {
    let mut i: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    i = 0 as libc::c_int;
    while (*haystack.offset(i as isize)).length > 0 as libc::c_ulong {
        if exact_match {
            tmp = strcmp(needle, (*haystack.offset(i as isize)).data);
            if !(tmp != 0) {
                return 1 as libc::c_int != 0;
            }
        }
        if !exact_match {
            tmp___0 = strcasecmp(needle, (*haystack.offset(i as isize)).data);
            if tmp___0 == 0 {
                return 1 as libc::c_int != 0;
            }
        }
        i += 1;
    }
    return 0 as libc::c_int != 0;
}
unsafe extern "C" fn set_insertion_mode(
    mut parser: *mut GumboParser,
    mut mode: GumboInsertionMode,
) {
    (*(*parser)._parser_state)._insertion_mode = mode;
}
unsafe extern "C" fn get_appropriate_insertion_mode(
    mut node: *const GumboNode,
    mut is_last: bool,
) -> GumboInsertionMode {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"node->type == GUMBO_NODE_ELEMENT\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            570 as libc::c_uint,
            b"get_appropriate_insertion_mode\0" as *const u8 as *const libc::c_char,
        );
    }
    match (*node).v.element.tag as libc::c_uint {
        111 => return GUMBO_INSERTION_MODE_IN_SELECT,
        104 | 103 => {
            if is_last {
                tmp___0 = 6 as libc::c_int;
            } else {
                tmp___0 = 14 as libc::c_int;
            }
            return tmp___0 as GumboInsertionMode;
        }
        102 => return GUMBO_INSERTION_MODE_IN_ROW,
        101 | 100 | 99 => return GUMBO_INSERTION_MODE_IN_TABLE_BODY,
        96 => return GUMBO_INSERTION_MODE_IN_CAPTION,
        97 => return GUMBO_INSERTION_MODE_IN_COLUMN_GROUP,
        95 => return GUMBO_INSERTION_MODE_IN_TABLE,
        10 | 1 => return GUMBO_INSERTION_MODE_IN_BODY,
        129 => return GUMBO_INSERTION_MODE_IN_FRAMESET,
        0 => return GUMBO_INSERTION_MODE_BEFORE_HEAD,
        _ => {
            if is_last {
                tmp___1 = 6 as libc::c_int;
            } else {
                tmp___1 = 0 as libc::c_int;
            }
            return tmp___1 as GumboInsertionMode;
        }
    };
}
unsafe extern "C" fn reset_insertion_mode_appropriately(mut parser: *mut GumboParser) {
    let mut open_elements: *const GumboVector = 0 as *const GumboVector;
    let mut i: libc::c_int = 0;
    let mut mode: GumboInsertionMode = GUMBO_INSERTION_MODE_INITIAL;
    let mut tmp: GumboInsertionMode = GUMBO_INSERTION_MODE_INITIAL;
    open_elements = &mut (*(*parser)._parser_state)._open_elements as *mut GumboVector
        as *const GumboVector;
    i = (*open_elements).length as libc::c_int;
    loop {
        i -= 1;
        if !(i >= 0 as libc::c_int) {
            break;
        }
        tmp = get_appropriate_insertion_mode(
            *((*open_elements).data).offset(i as isize) as *const GumboNode,
            i == 0 as libc::c_int,
        );
        mode = tmp;
        if mode as libc::c_uint != 0 as libc::c_uint {
            set_insertion_mode(parser, mode);
            return;
        }
    }
    __assert_fail(
        b"0\0" as *const u8 as *const libc::c_char,
        b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
        616 as libc::c_uint,
        b"reset_insertion_mode_appropriately\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn add_parse_error(
    mut parser: *mut GumboParser,
    mut token: *const GumboToken,
) -> *mut GumboError {
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    let mut extra_data: *mut GumboParserError = 0 as *mut GumboParserError;
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut i: libc::c_int = 0;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    gumbo_debug(b"Adding parse error.\n\0" as *const u8 as *const libc::c_char);
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return 0 as *mut libc::c_void as *mut GumboError;
    }
    (*error___0).type_0 = GUMBO_ERR_PARSER;
    (*error___0).position = (*token).position;
    (*error___0).original_text = (*token).original_text.data;
    extra_data = &mut (*error___0).v.parser;
    (*extra_data).input_type = (*token).type_0;
    (*extra_data).input_tag = GUMBO_TAG_UNKNOWN;
    if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
        (*extra_data).input_tag = (*token).v.start_tag.tag;
    } else if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
        (*extra_data).input_tag = (*token).v.end_tag;
    }
    state = (*parser)._parser_state;
    (*extra_data).parser_state = (*state)._insertion_mode;
    gumbo_vector_init(
        parser,
        (*state)._open_elements.length as size_t,
        &mut (*extra_data).tag_stack,
    );
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*state)._open_elements.length {
        node = *((*state)._open_elements.data).offset(i as isize) as *const GumboNode;
        if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
            __assert_fail(
                b"node->type == GUMBO_NODE_ELEMENT\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                642 as libc::c_uint,
                b"add_parse_error\0" as *const u8 as *const libc::c_char,
            );
        }
        gumbo_vector_add(
            parser,
            (*node).v.element.tag as *mut libc::c_void,
            &mut (*extra_data).tag_stack,
        );
        i += 1;
    }
    return error___0;
}
unsafe extern "C" fn tag_in(
    mut token: *const GumboToken,
    mut is_start: bool,
    mut args: ...
) -> bool {
    let mut token_tag: GumboTag = GUMBO_TAG_HTML;
    let mut tags: ::std::ffi::VaListImpl;
    let mut result: bool = false;
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___0: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___1: GumboTag = GUMBO_TAG_HTML;
    let mut current_block_10: u64;
    if is_start {
        if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
            token_tag = (*token).v.start_tag.tag;
            current_block_10 = 4166486009154926805;
        } else {
            current_block_10 = 16518980852635181181;
        }
    } else {
        current_block_10 = 16518980852635181181;
    }
    match current_block_10 {
        16518980852635181181 => {
            if !is_start {
                if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
                    token_tag = (*token).v.end_tag;
                } else {
                    return 0 as libc::c_int != 0
                }
            } else {
                return 0 as libc::c_int != 0
            }
        }
        _ => {}
    }
    tags = args.clone();
    result = 0 as libc::c_int != 0;
    tmp___0 = tags.arg::<GumboTag>();
    tag = tmp___0;
    while tag as libc::c_uint != 150 as libc::c_uint {
        if tag as libc::c_uint == token_tag as libc::c_uint {
            result = 1 as libc::c_int != 0;
            break;
        } else {
            tmp___1 = tags.arg::<GumboTag>();
            tag = tmp___1;
        }
    }
    return result;
}
unsafe extern "C" fn tag_is(
    mut token: *const GumboToken,
    mut is_start: bool,
    mut tag: GumboTag,
) -> bool {
    if is_start {
        if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
            return (*token).v.start_tag.tag as libc::c_uint == tag as libc::c_uint;
        }
    }
    if !is_start {
        if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
            return (*token).v.end_tag as libc::c_uint == tag as libc::c_uint
        } else {
            return 0 as libc::c_int != 0
        }
    } else {
        return 0 as libc::c_int != 0
    };
}
unsafe extern "C" fn node_tag_in(mut node: *const GumboNode, mut args: ...) -> bool {
    let mut node_tag: GumboTag = GUMBO_TAG_HTML;
    let mut tags: ::std::ffi::VaListImpl;
    let mut result: bool = false;
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___1: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___2: GumboTag = GUMBO_TAG_HTML;
    if !(node as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong) {
        __assert_fail(
            b"node != NULL\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            696 as libc::c_uint,
            b"node_tag_in\0" as *const u8 as *const libc::c_char,
        );
    }
    if (*node).type_0 as libc::c_uint != 1 as libc::c_uint {
        return 0 as libc::c_int != 0;
    }
    node_tag = (*node).v.element.tag;
    tags = args.clone();
    result = 0 as libc::c_int != 0;
    tmp___1 = tags.arg::<GumboTag>();
    tag = tmp___1;
    while tag as libc::c_uint != 150 as libc::c_uint {
        if !(tag as libc::c_uint <= 150 as libc::c_uint) {
            __assert_fail(
                b"tag <= GUMBO_TAG_LAST\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                707 as libc::c_uint,
                b"node_tag_in\0" as *const u8 as *const libc::c_char,
            );
        }
        if tag as libc::c_uint == node_tag as libc::c_uint {
            result = 1 as libc::c_int != 0;
            break;
        } else {
            tmp___2 = tags.arg::<GumboTag>();
            tag = tmp___2;
        }
    }
    return result;
}
unsafe extern "C" fn node_tag_is(mut node: *const GumboNode, mut tag: GumboTag) -> bool {
    let mut tmp: libc::c_int = 0;
    if (*node).type_0 as libc::c_uint == 1 as libc::c_uint {
        if (*node).v.element.tag as libc::c_uint == tag as libc::c_uint {
            tmp = 1 as libc::c_int;
        } else {
            tmp = 0 as libc::c_int;
        }
    } else {
        tmp = 0 as libc::c_int;
    }
    return tmp != 0;
}
unsafe extern "C" fn is_mathml_integration_point(mut node: *const GumboNode) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: libc::c_int = 0;
    tmp = node_tag_in(
        node,
        84 as libc::c_int,
        85 as libc::c_int,
        86 as libc::c_int,
        87 as libc::c_int,
        88 as libc::c_int,
        150 as libc::c_int,
    );
    if tmp {
        if (*node).v.element.tag_namespace as libc::c_uint == 2 as libc::c_uint {
            tmp___0 = 1 as libc::c_int;
        } else {
            tmp___0 = 0 as libc::c_int;
        }
    } else {
        tmp___0 = 0 as libc::c_int;
    }
    return tmp___0 != 0;
}
unsafe extern "C" fn is_html_integration_point(mut node: *const GumboNode) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: libc::c_int = 0;
    tmp = node_tag_in(
        node,
        93 as libc::c_int,
        94 as libc::c_int,
        2 as libc::c_int,
        150 as libc::c_int,
    );
    let mut current_block_18: u64;
    if tmp {
        if (*node).v.element.tag_namespace as libc::c_uint == 1 as libc::c_uint {
            tmp___3 = 1 as libc::c_int;
            current_block_18 = 11584701595673473500;
        } else {
            current_block_18 = 6502693957509629166;
        }
    } else {
        current_block_18 = 6502693957509629166;
    }
    match current_block_18 {
        6502693957509629166 => {
            tmp___0 = node_tag_is(node, GUMBO_TAG_ANNOTATION_XML);
            if tmp___0 {
                tmp___1 = attribute_matches(
                    &(*node).v.element.attributes,
                    b"encoding\0" as *const u8 as *const libc::c_char,
                    b"text/html\0" as *const u8 as *const libc::c_char,
                );
                if tmp___1 {
                    tmp___3 = 1 as libc::c_int;
                } else {
                    tmp___2 = attribute_matches(
                        &(*node).v.element.attributes,
                        b"encoding\0" as *const u8 as *const libc::c_char,
                        b"application/xhtml+xml\0" as *const u8 as *const libc::c_char,
                    );
                    if tmp___2 {
                        tmp___3 = 1 as libc::c_int;
                    } else {
                        tmp___3 = 0 as libc::c_int;
                    }
                }
            } else {
                tmp___3 = 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return tmp___3 != 0;
}
unsafe extern "C" fn append_node(
    mut parser: *mut GumboParser,
    mut parent: *mut GumboNode,
    mut node: *mut GumboNode,
) {
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    if !((*node).parent as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong) {
        __assert_fail(
            b"node->parent == NULL\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            745 as libc::c_uint,
            b"append_node\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*node).index_within_parent == 0xffffffffffffffff as libc::c_ulong) {
        __assert_fail(
            b"node->index_within_parent == -1\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            746 as libc::c_uint,
            b"append_node\0" as *const u8 as *const libc::c_char,
        );
    }
    if (*parent).type_0 as libc::c_uint == 1 as libc::c_uint {
        children = &mut (*parent).v.element.children;
    } else {
        if !((*parent).type_0 as libc::c_uint == 0 as libc::c_uint) {
            __assert_fail(
                b"parent->type == GUMBO_NODE_DOCUMENT\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                751 as libc::c_uint,
                b"append_node\0" as *const u8 as *const libc::c_char,
            );
        }
        children = &mut (*parent).v.document.children;
    }
    (*node).parent = parent;
    (*node).index_within_parent = (*children).length as size_t;
    gumbo_vector_add(parser, node as *mut libc::c_void, children);
    if !((*node).index_within_parent < (*children).length as size_t) {
        __assert_fail(
            b"node->index_within_parent < children->length\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            757 as libc::c_uint,
            b"append_node\0" as *const u8 as *const libc::c_char,
        );
    }
}
unsafe extern "C" fn insert_node(
    mut parser: *mut GumboParser,
    mut parent: *mut GumboNode,
    mut index___0: libc::c_int,
    mut node: *mut GumboNode,
) {
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut sibling: *mut GumboNode = 0 as *mut GumboNode;
    if !((*node).parent as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong) {
        __assert_fail(
            b"node->parent == NULL\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            764 as libc::c_uint,
            b"insert_node\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*node).index_within_parent == 0xffffffffffffffff as libc::c_ulong) {
        __assert_fail(
            b"node->index_within_parent == -1\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            765 as libc::c_uint,
            b"insert_node\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*parent).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"parent->type == GUMBO_NODE_ELEMENT\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            766 as libc::c_uint,
            b"insert_node\0" as *const u8 as *const libc::c_char,
        );
    }
    children = &mut (*parent).v.element.children;
    if !(index___0 >= 0 as libc::c_int) {
        __assert_fail(
            b"index >= 0\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            768 as libc::c_uint,
            b"insert_node\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((index___0 as libc::c_uint) < (*children).length) {
        __assert_fail(
            b"index < children->length\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            769 as libc::c_uint,
            b"insert_node\0" as *const u8 as *const libc::c_char,
        );
    }
    (*node).parent = parent;
    (*node).index_within_parent = index___0 as size_t;
    gumbo_vector_insert_at(parser, node as *mut libc::c_void, index___0, children);
    if !((*node).index_within_parent < (*children).length as size_t) {
        __assert_fail(
            b"node->index_within_parent < children->length\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            773 as libc::c_uint,
            b"insert_node\0" as *const u8 as *const libc::c_char,
        );
    }
    i = index___0 + 1 as libc::c_int;
    while (i as libc::c_uint) < (*children).length {
        sibling = *((*children).data).offset(i as isize) as *mut GumboNode;
        (*sibling).index_within_parent = i as size_t;
        if !((*sibling).index_within_parent < (*children).length as size_t) {
            __assert_fail(
                b"sibling->index_within_parent < children->length\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                777 as libc::c_uint,
                b"insert_node\0" as *const u8 as *const libc::c_char,
            );
        }
        i += 1;
    }
}
unsafe extern "C" fn foster_parent_element(
    mut parser: *mut GumboParser,
    mut node: *mut GumboNode,
) {
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut foster_parent_element___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: bool = false;
    let mut i: libc::c_int = 0;
    let mut table_element: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___6: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___8: bool = false;
    open_elements = &mut (*(*parser)._parser_state)._open_elements;
    if !((*open_elements).length > 2 as libc::c_uint) {
        __assert_fail(
            b"open_elements->length > 2\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            784 as libc::c_uint,
            b"foster_parent_element\0" as *const u8 as *const libc::c_char,
        );
    }
    (*node)
        .parse_flags = ((*node).parse_flags as libc::c_uint | 1024 as libc::c_uint)
        as GumboParseFlags;
    foster_parent_element___0 = *((*open_elements).data)
        .offset(0 as libc::c_int as isize) as *mut GumboNode;
    if !((*foster_parent_element___0).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"foster_parent_element->type == GUMBO_NODE_ELEMENT\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            788 as libc::c_uint,
            b"foster_parent_element\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___4 = node_tag_is(foster_parent_element___0 as *const GumboNode, GUMBO_TAG_HTML);
    if !tmp___4 {
        __assert_fail(
            b"node_tag_is(foster_parent_element, GUMBO_TAG_HTML)\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            789 as libc::c_uint,
            b"foster_parent_element\0" as *const u8 as *const libc::c_char,
        );
    }
    i = (*open_elements).length as libc::c_int;
    loop {
        i -= 1;
        if !(i > 1 as libc::c_int) {
            break;
        }
        table_element = *((*open_elements).data).offset(i as isize) as *mut GumboNode;
        tmp___8 = node_tag_is(table_element as *const GumboNode, GUMBO_TAG_TABLE);
        if !tmp___8 {
            continue;
        }
        foster_parent_element___0 = (*table_element).parent;
        if foster_parent_element___0.is_null() {
            gumbo_debug(b"Table has no parent.\n\0" as *const u8 as *const libc::c_char);
            foster_parent_element___0 = *((*open_elements).data)
                .offset((i - 1 as libc::c_int) as isize) as *mut GumboNode;
            break;
        } else if (*foster_parent_element___0).type_0 as libc::c_uint
                != 1 as libc::c_uint
            {
            gumbo_debug(b"Table has no parent.\n\0" as *const u8 as *const libc::c_char);
            foster_parent_element___0 = *((*open_elements).data)
                .offset((i - 1 as libc::c_int) as isize) as *mut GumboNode;
            break;
        } else {
            if !((*foster_parent_element___0).type_0 as libc::c_uint
                == 1 as libc::c_uint)
            {
                __assert_fail(
                    b"foster_parent_element->type == GUMBO_NODE_ELEMENT\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    802 as libc::c_uint,
                    b"foster_parent_element\0" as *const u8 as *const libc::c_char,
                );
            }
            tmp___6 = gumbo_normalized_tagname(
                (*foster_parent_element___0).v.element.tag,
            );
            gumbo_debug(
                b"Found enclosing table (%x) at %d; parent=%s, index=%d.\n\0"
                    as *const u8 as *const libc::c_char,
                table_element,
                i,
                tmp___6,
                (*table_element).index_within_parent,
            );
            if !(*((*foster_parent_element___0).v.element.children.data)
                .offset((*table_element).index_within_parent as isize) as libc::c_ulong
                == table_element as libc::c_ulong)
            {
                __assert_fail(
                    b"foster_parent_element->v.element.children.data[ table_element->index_within_parent] == table_element\0"
                        as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    808 as libc::c_uint,
                    b"foster_parent_element\0" as *const u8 as *const libc::c_char,
                );
            }
            insert_node(
                parser,
                foster_parent_element___0,
                (*table_element).index_within_parent as libc::c_int,
                node,
            );
            return;
        }
    }
    if (*node).type_0 as libc::c_uint == 1 as libc::c_uint {
        gumbo_vector_add(parser, node as *mut libc::c_void, open_elements);
    }
    append_node(parser, foster_parent_element___0, node);
}
unsafe extern "C" fn maybe_flush_text_node_buffer(mut parser: *mut GumboParser) {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut buffer_state: *mut TextNodeBufferState = 0 as *mut TextNodeBufferState;
    let mut text_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut text_node_data: *mut GumboText = 0 as *mut GumboText;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___3: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___5: bool = false;
    state = (*parser)._parser_state;
    buffer_state = &mut (*state)._text_node;
    if (*buffer_state)._buffer.length == 0 as libc::c_ulong {
        return;
    }
    if !((*buffer_state)._type as libc::c_uint == 5 as libc::c_uint) {
        if !((*buffer_state)._type as libc::c_uint == 2 as libc::c_uint) {
            __assert_fail(
                b"buffer_state->_type == GUMBO_NODE_WHITESPACE || buffer_state->_type == GUMBO_NODE_TEXT\0"
                    as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                828 as libc::c_uint,
                b"maybe_flush_text_node_buffer\0" as *const u8 as *const libc::c_char,
            );
        }
    }
    tmp___0 = create_node(parser, (*buffer_state)._type);
    text_node = tmp___0;
    text_node_data = &mut (*text_node).v.text;
    tmp___1 = gumbo_string_buffer_to_string(parser, &mut (*buffer_state)._buffer);
    (*text_node_data).text = tmp___1 as *const libc::c_char;
    (*text_node_data).original_text.data = (*buffer_state)._start_original_text;
    (*text_node_data)
        .original_text
        .length = ((*(*state)._current_token).original_text.data)
        .offset_from((*buffer_state)._start_original_text) as libc::c_long as size_t;
    (*text_node_data).start_pos = (*buffer_state)._start_position;
    let mut current_block_28: u64;
    if (*state)._foster_parent_insertions {
        tmp___4 = get_current_node(parser);
        tmp___5 = node_tag_in(
            tmp___4 as *const GumboNode,
            95 as libc::c_int,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            102 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___5 {
            foster_parent_element(parser, text_node);
            current_block_28 = 15925075030174552612;
        } else {
            current_block_28 = 8994486162129117177;
        }
    } else {
        current_block_28 = 8994486162129117177;
    }
    match current_block_28 {
        8994486162129117177 => {
            if !((*(*parser)._output).root).is_null() {
                tmp___2 = get_current_node(parser);
                tmp___3 = tmp___2;
            } else {
                tmp___3 = (*(*parser)._output).document;
            }
            append_node(parser, tmp___3, text_node);
        }
        _ => {}
    }
    gumbo_debug(
        b"Flushing text node buffer of %.*s.\n\0" as *const u8 as *const libc::c_char,
        (*buffer_state)._buffer.length as libc::c_int,
        (*buffer_state)._buffer.data,
    );
    gumbo_string_buffer_destroy(parser, &mut (*buffer_state)._buffer);
    gumbo_string_buffer_init(parser, &mut (*buffer_state)._buffer);
    (*buffer_state)._type = GUMBO_NODE_WHITESPACE;
    if !((*buffer_state)._buffer.length == 0 as libc::c_ulong) {
        __assert_fail(
            b"buffer_state->_buffer.length == 0\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            853 as libc::c_uint,
            b"maybe_flush_text_node_buffer\0" as *const u8 as *const libc::c_char,
        );
    }
}
unsafe extern "C" fn record_end_of_element(
    mut current_token: *mut GumboToken,
    mut element: *mut GumboElement,
) {
    (*element).end_pos = (*current_token).position;
    if (*current_token).type_0 as libc::c_uint == 2 as libc::c_uint {
        (*element).original_end_tag = (*current_token).original_text;
    } else {
        (*element).original_end_tag = kGumboEmptyString;
    };
}
unsafe extern "C" fn pop_current_node(mut parser: *mut GumboParser) -> *mut GumboNode {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut tmp___2: bool = false;
    let mut tmp___3: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: *const libc::c_char = 0 as *const libc::c_char;
    let mut current_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___5: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut is_closed_body_or_html_tag: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: libc::c_int = 0;
    let mut tmp___11: bool = false;
    state = (*parser)._parser_state;
    maybe_flush_text_node_buffer(parser);
    if (*state)._open_elements.length > 0 as libc::c_uint {
        tmp___2 = node_tag_is(
            *((*state)._open_elements.data).offset(0 as libc::c_int as isize)
                as *const GumboNode,
            GUMBO_TAG_HTML,
        );
        if !tmp___2 {
            __assert_fail(
                b"node_tag_is(state->_open_elements.data[0], GUMBO_TAG_HTML)\0"
                    as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                868 as libc::c_uint,
                b"pop_current_node\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___3 = get_current_node(parser);
        tmp___4 = gumbo_normalized_tagname((*tmp___3).v.element.tag);
        gumbo_debug(
            b"Popping %s node.\n\0" as *const u8 as *const libc::c_char,
            tmp___4,
        );
    }
    tmp___5 = gumbo_vector_pop(parser, &mut (*state)._open_elements);
    current_node = tmp___5 as *mut GumboNode;
    if current_node.is_null() {
        if !((*state)._open_elements.length == 0 as libc::c_uint) {
            __assert_fail(
                b"state->_open_elements.length == 0\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                875 as libc::c_uint,
                b"pop_current_node\0" as *const u8 as *const libc::c_char,
            );
        }
        return 0 as *mut libc::c_void as *mut GumboNode;
    }
    if !((*current_node).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"current_node->type == GUMBO_NODE_ELEMENT\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            878 as libc::c_uint,
            b"pop_current_node\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___8 = node_tag_is(current_node as *const GumboNode, GUMBO_TAG_BODY);
    let mut current_block_34: u64;
    if tmp___8 {
        if (*state)._closed_body_tag {
            tmp___10 = 1 as libc::c_int;
            current_block_34 = 11913429853522160501;
        } else {
            current_block_34 = 11527809639215255403;
        }
    } else {
        current_block_34 = 11527809639215255403;
    }
    match current_block_34 {
        11527809639215255403 => {
            tmp___9 = node_tag_is(current_node as *const GumboNode, GUMBO_TAG_HTML);
            if tmp___9 {
                if (*state)._closed_html_tag {
                    tmp___10 = 1 as libc::c_int;
                } else {
                    tmp___10 = 0 as libc::c_int;
                }
            } else {
                tmp___10 = 0 as libc::c_int;
            }
        }
        _ => {}
    }
    is_closed_body_or_html_tag = tmp___10 != 0;
    let mut current_block_40: u64;
    if (*(*state)._current_token).type_0 as libc::c_uint != 2 as libc::c_uint {
        current_block_40 = 13772082997626052725;
    } else {
        tmp___11 = node_tag_is(
            current_node as *const GumboNode,
            (*(*state)._current_token).v.end_tag,
        );
        if !tmp___11 {
            current_block_40 = 13772082997626052725;
        } else {
            current_block_40 = 7427571413727699167;
        }
    }
    match current_block_40 {
        13772082997626052725 => {
            if !is_closed_body_or_html_tag {
                (*current_node)
                    .parse_flags = ((*current_node).parse_flags as libc::c_uint
                    | 2 as libc::c_uint) as GumboParseFlags;
            }
        }
        _ => {}
    }
    if !is_closed_body_or_html_tag {
        record_end_of_element((*state)._current_token, &mut (*current_node).v.element);
    }
    return current_node;
}
unsafe extern "C" fn append_comment_node(
    mut parser: *mut GumboParser,
    mut node: *mut GumboNode,
    mut token: *const GumboToken,
) {
    let mut comment: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    maybe_flush_text_node_buffer(parser);
    tmp = create_node(parser, GUMBO_NODE_COMMENT);
    comment = tmp;
    (*comment).type_0 = GUMBO_NODE_COMMENT;
    (*comment).parse_flags = GUMBO_INSERTION_NORMAL;
    (*comment).v.text.text = (*token).v.text;
    (*comment).v.text.original_text = (*token).original_text;
    (*comment).v.text.start_pos = (*token).position;
    append_node(parser, node, comment);
}
unsafe extern "C" fn clear_stack_to_table_row_context(mut parser: *mut GumboParser) {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    loop {
        tmp = get_current_node(parser);
        tmp___0 = node_tag_in(
            tmp as *const GumboNode,
            0 as libc::c_int,
            102 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___0 {
            break;
        }
        pop_current_node(parser);
    };
}
unsafe extern "C" fn clear_stack_to_table_context(mut parser: *mut GumboParser) {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    loop {
        tmp = get_current_node(parser);
        tmp___0 = node_tag_in(
            tmp as *const GumboNode,
            0 as libc::c_int,
            95 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___0 {
            break;
        }
        pop_current_node(parser);
    };
}
pub unsafe extern "C" fn clear_stack_to_table_body_context(
    mut parser: *mut GumboParser,
) {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    loop {
        tmp = get_current_node(parser);
        tmp___0 = node_tag_in(
            tmp as *const GumboNode,
            0 as libc::c_int,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___0 {
            break;
        }
        pop_current_node(parser);
    };
}
unsafe extern "C" fn create_element(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
) -> *mut GumboNode {
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut element: *mut GumboElement = 0 as *mut GumboElement;
    tmp = create_node(parser, GUMBO_NODE_ELEMENT);
    node = tmp;
    element = &mut (*node).v.element;
    gumbo_vector_init(parser, 1 as libc::c_int as size_t, &mut (*element).children);
    gumbo_vector_init(parser, 0 as libc::c_int as size_t, &mut (*element).attributes);
    (*element).tag = tag;
    (*element).tag_namespace = GUMBO_NAMESPACE_HTML;
    (*element).original_tag = kGumboEmptyString;
    (*element).original_end_tag = kGumboEmptyString;
    (*element).start_pos = (*(*(*parser)._parser_state)._current_token).position;
    (*element).end_pos = kGumboEmptySourcePosition;
    return node;
}
unsafe extern "C" fn create_element_from_token(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut tag_namespace: GumboNamespaceEnum,
) -> *mut GumboNode {
    let mut start_tag: *mut GumboTokenStartTag = 0 as *mut GumboTokenStartTag;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut element: *mut GumboElement = 0 as *mut GumboElement;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            948 as libc::c_uint,
            b"create_element_from_token\0" as *const u8 as *const libc::c_char,
        );
    }
    start_tag = &mut (*token).v.start_tag;
    tmp___0 = create_node(parser, GUMBO_NODE_ELEMENT);
    node = tmp___0;
    element = &mut (*node).v.element;
    gumbo_vector_init(parser, 1 as libc::c_int as size_t, &mut (*element).children);
    (*element).attributes = (*start_tag).attributes;
    (*element).tag = (*start_tag).tag;
    (*element).tag_namespace = tag_namespace;
    if !((*token).original_text.length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"token->original_text.length >= 2\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            958 as libc::c_uint,
            b"create_element_from_token\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(*((*token).original_text.data).offset(0 as libc::c_int as isize) as libc::c_int
        == 60 as libc::c_int)
    {
        __assert_fail(
            b"token->original_text.data[0] == '<'\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            959 as libc::c_uint,
            b"create_element_from_token\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(*((*token).original_text.data)
        .offset(
            ((*token).original_text.length).wrapping_sub(1 as libc::c_ulong) as isize,
        ) as libc::c_int == 62 as libc::c_int)
    {
        __assert_fail(
            b"token->original_text.data[token->original_text.length - 1] == '>'\0"
                as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            960 as libc::c_uint,
            b"create_element_from_token\0" as *const u8 as *const libc::c_char,
        );
    }
    (*element).original_tag = (*token).original_text;
    (*element).start_pos = (*token).position;
    (*element).original_end_tag = kGumboEmptyString;
    (*element).end_pos = kGumboEmptySourcePosition;
    (*start_tag).attributes = kGumboEmptyVector;
    return node;
}
unsafe extern "C" fn insert_element(
    mut parser: *mut GumboParser,
    mut node: *mut GumboNode,
    mut is_reconstructing_formatting_elements: bool,
) {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: *mut GumboNode = 0 as *mut GumboNode;
    state = (*parser)._parser_state;
    if !is_reconstructing_formatting_elements {
        maybe_flush_text_node_buffer(parser);
    }
    if (*state)._foster_parent_insertions {
        tmp = get_current_node(parser);
        tmp___0 = node_tag_in(
            tmp as *const GumboNode,
            95 as libc::c_int,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            102 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___0 {
            foster_parent_element(parser, node);
            gumbo_vector_add(
                parser,
                node as *mut libc::c_void,
                &mut (*state)._open_elements,
            );
            return;
        }
    }
    if !((*(*parser)._output).root).is_null() {
        tmp___1 = get_current_node(parser);
        tmp___2 = tmp___1;
    } else {
        tmp___2 = (*(*parser)._output).document;
    }
    append_node(parser, tmp___2, node);
    gumbo_vector_add(parser, node as *mut libc::c_void, &mut (*state)._open_elements);
}
unsafe extern "C" fn insert_element_from_token(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> *mut GumboNode {
    let mut element: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = create_element_from_token(parser, token, GUMBO_NAMESPACE_HTML);
    element = tmp;
    insert_element(parser, element, 0 as libc::c_int != 0);
    tmp___0 = gumbo_normalized_tagname((*element).v.element.tag);
    gumbo_debug(
        b"Inserting <%s> element (@%x) from token.\n\0" as *const u8
            as *const libc::c_char,
        tmp___0,
        element,
    );
    return element;
}
unsafe extern "C" fn insert_element_of_tag_type(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
    mut reason: GumboParseFlags,
) -> *mut GumboNode {
    let mut element: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tmp = create_element(parser, tag);
    element = tmp;
    (*element)
        .parse_flags = ((*element).parse_flags as libc::c_uint
        | (1 as libc::c_uint | reason as libc::c_uint)) as GumboParseFlags;
    insert_element(parser, element, 0 as libc::c_int != 0);
    tmp___0 = gumbo_normalized_tagname(tag);
    gumbo_debug(
        b"Inserting %s element (@%x) from tag type.\n\0" as *const u8
            as *const libc::c_char,
        tmp___0,
        element,
    );
    return element;
}
unsafe extern "C" fn insert_foreign_element(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut tag_namespace: GumboNamespaceEnum,
) -> *mut GumboNode {
    let mut element: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1035 as libc::c_uint,
            b"insert_foreign_element\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___0 = create_element_from_token(parser, token, tag_namespace);
    element = tmp___0;
    insert_element(parser, element, 0 as libc::c_int != 0);
    tmp___1 = token_has_attribute(
        token as *const GumboToken,
        b"xmlns\0" as *const u8 as *const libc::c_char,
    );
    if tmp___1 {
        tmp___2 = attribute_matches_case_sensitive(
            &mut (*token).v.start_tag.attributes as *mut GumboVector
                as *const GumboVector,
            b"xmlns\0" as *const u8 as *const libc::c_char,
            kLegalXmlns[tag_namespace as usize],
        );
        if !tmp___2 {
            add_parse_error(parser, token as *const GumboToken);
        }
    }
    tmp___3 = token_has_attribute(
        token as *const GumboToken,
        b"xmlns:xlink\0" as *const u8 as *const libc::c_char,
    );
    if tmp___3 {
        tmp___4 = attribute_matches_case_sensitive(
            &mut (*token).v.start_tag.attributes as *mut GumboVector
                as *const GumboVector,
            b"xmlns:xlink\0" as *const u8 as *const libc::c_char,
            b"http://www.w3.org/1999/xlink\0" as *const u8 as *const libc::c_char,
        );
        if !tmp___4 {
            add_parse_error(parser, token as *const GumboToken);
        }
    }
    return element;
}
unsafe extern "C" fn insert_text_token(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) {
    let mut buffer_state: *mut TextNodeBufferState = 0 as *mut TextNodeBufferState;
    if !((*token).type_0 as libc::c_uint == 4 as libc::c_uint) {
        if !((*token).type_0 as libc::c_uint == 5 as libc::c_uint) {
            __assert_fail(
                b"token->type == GUMBO_TOKEN_WHITESPACE || token->type == GUMBO_TOKEN_CHARACTER\0"
                    as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1057 as libc::c_uint,
                b"insert_text_token\0" as *const u8 as *const libc::c_char,
            );
        }
    }
    buffer_state = &mut (*(*parser)._parser_state)._text_node;
    if (*buffer_state)._buffer.length == 0 as libc::c_ulong {
        (*buffer_state)._start_original_text = (*token).original_text.data;
        (*buffer_state)._start_position = (*token).position;
    }
    gumbo_string_buffer_append_codepoint(
        parser,
        (*token).v.character,
        &mut (*buffer_state)._buffer,
    );
    if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
        (*buffer_state)._type = GUMBO_NODE_TEXT;
    }
    gumbo_debug(
        b"Inserting text token '%c'.\n\0" as *const u8 as *const libc::c_char,
        (*token).v.character,
    );
}
unsafe extern "C" fn run_generic_parsing_algorithm(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut lexer_state: GumboTokenizerEnum,
) {
    insert_element_from_token(parser, token);
    gumbo_tokenizer_set_state(parser, lexer_state);
    (*(*parser)._parser_state)
        ._original_insertion_mode = (*(*parser)._parser_state)._insertion_mode;
    (*(*parser)._parser_state)._insertion_mode = GUMBO_INSERTION_MODE_TEXT;
}
unsafe extern "C" fn acknowledge_self_closing_tag(mut parser: *mut GumboParser) {
    (*(*parser)._parser_state)._self_closing_flag_acknowledged = 1 as libc::c_int != 0;
}
unsafe extern "C" fn find_last_anchor_index(
    mut parser: *mut GumboParser,
    mut anchor_index: *mut libc::c_int,
) -> bool {
    let mut elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: bool = false;
    elements = &mut (*(*parser)._parser_state)._active_formatting_elements;
    i = (*elements).length as libc::c_int;
    loop {
        i -= 1;
        if !(i >= 0 as libc::c_int) {
            break;
        }
        node = *((*elements).data).offset(i as isize) as *mut GumboNode;
        if node as libc::c_ulong
            == &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong
        {
            return 0 as libc::c_int != 0;
        }
        tmp = node_tag_is(node as *const GumboNode, GUMBO_TAG_A);
        if tmp {
            *anchor_index = i;
            return 1 as libc::c_int != 0;
        }
    }
    return 0 as libc::c_int != 0;
}
unsafe extern "C" fn count_formatting_elements_of_tag(
    mut parser: *mut GumboParser,
    mut desired_node: *const GumboNode,
    mut earliest_matching_index: *mut libc::c_int,
) -> libc::c_int {
    let mut desired_element: *const GumboElement = 0 as *const GumboElement;
    let mut elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut num_identical_elements: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut element: *mut GumboElement = 0 as *mut GumboElement;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    desired_element = &(*desired_node).v.element;
    elements = &mut (*(*parser)._parser_state)._active_formatting_elements;
    num_identical_elements = 0 as libc::c_int;
    i = (*elements).length as libc::c_int;
    loop {
        i -= 1;
        if !(i >= 0 as libc::c_int) {
            break;
        }
        node = *((*elements).data).offset(i as isize) as *mut GumboNode;
        if node as libc::c_ulong
            == &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong
        {
            break;
        }
        if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
            __assert_fail(
                b"node->type == GUMBO_NODE_ELEMENT\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1118 as libc::c_uint,
                b"count_formatting_elements_of_tag\0" as *const u8 as *const libc::c_char,
            );
        }
        element = &mut (*node).v.element;
        tmp___0 = node_tag_is(node as *const GumboNode, (*desired_element).tag);
        if tmp___0 {
            if (*element).tag_namespace as libc::c_uint
                == (*desired_element).tag_namespace as libc::c_uint
            {
                tmp___1 = all_attributes_match(
                    &mut (*element).attributes as *mut GumboVector as *const GumboVector,
                    &(*desired_element).attributes,
                );
                if tmp___1 {
                    num_identical_elements += 1;
                    *earliest_matching_index = i;
                }
            }
        }
    }
    return num_identical_elements;
}
unsafe extern "C" fn add_formatting_element(
    mut parser: *mut GumboParser,
    mut node: *const GumboNode,
) {
    let mut elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut earliest_identical_element: libc::c_int = 0;
    let mut num_identical_elements: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    if !(node as libc::c_ulong
        == &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong)
    {
        if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
            __assert_fail(
                b"node == &kActiveFormattingScopeMarker || node->type == GUMBO_NODE_ELEMENT\0"
                    as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1134 as libc::c_uint,
                b"add_formatting_element\0" as *const u8 as *const libc::c_char,
            );
        }
    }
    elements = &mut (*(*parser)._parser_state)._active_formatting_elements;
    if node as libc::c_ulong
        == &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong
    {
        gumbo_debug(b"Adding a scope marker.\n\0" as *const u8 as *const libc::c_char);
    } else {
        gumbo_debug(
            b"Adding a formatting element.\n\0" as *const u8 as *const libc::c_char,
        );
    }
    earliest_identical_element = (*elements).length as libc::c_int;
    tmp___0 = count_formatting_elements_of_tag(
        parser,
        node,
        &mut earliest_identical_element,
    );
    num_identical_elements = tmp___0;
    if num_identical_elements >= 3 as libc::c_int {
        gumbo_debug(
            b"Noah's ark clause: removing element at %d.\n\0" as *const u8
                as *const libc::c_char,
            earliest_identical_element,
        );
        gumbo_vector_remove_at(parser, earliest_identical_element, elements);
    }
    gumbo_vector_add(parser, node as *mut libc::c_void, elements);
}
unsafe extern "C" fn is_open_element(
    mut parser: *mut GumboParser,
    mut node: *const GumboNode,
) -> bool {
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    open_elements = &mut (*(*parser)._parser_state)._open_elements;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*open_elements).length {
        if *((*open_elements).data).offset(i as isize) as libc::c_ulong
            == node as libc::c_ulong
        {
            return 1 as libc::c_int != 0;
        }
        i += 1;
    }
    return 0 as libc::c_int != 0;
}
pub unsafe extern "C" fn clone_node(
    mut parser: *mut GumboParser,
    mut node: *const GumboNode,
    mut reason: GumboParseFlags,
) -> *mut GumboNode {
    let mut new_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut element: *mut GumboElement = 0 as *mut GumboElement;
    let mut old_attributes: *const GumboVector = 0 as *const GumboVector;
    let mut i: libc::c_int = 0;
    let mut old_attr: *const GumboAttribute = 0 as *const GumboAttribute;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___1: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: *mut libc::c_char = 0 as *mut libc::c_char;
    if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"node->type == GUMBO_NODE_ELEMENT\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1172 as libc::c_uint,
            b"clone_node\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___0 = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboNode>() as libc::c_ulong,
    );
    new_node = tmp___0 as *mut GumboNode;
    *new_node = *node;
    (*new_node).parent = 0 as *mut libc::c_void as *mut GumboNode;
    (*new_node).index_within_parent = -(1 as libc::c_int) as size_t;
    (*new_node)
        .parse_flags = ((*new_node).parse_flags as libc::c_uint
        & 4294967293 as libc::c_uint) as GumboParseFlags;
    (*new_node)
        .parse_flags = ((*new_node).parse_flags as libc::c_uint
        | (reason as libc::c_uint | 1 as libc::c_uint)) as GumboParseFlags;
    element = &mut (*new_node).v.element;
    gumbo_vector_init(parser, 1 as libc::c_int as size_t, &mut (*element).children);
    old_attributes = &(*node).v.element.attributes;
    gumbo_vector_init(
        parser,
        (*old_attributes).length as size_t,
        &mut (*element).attributes,
    );
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*old_attributes).length {
        old_attr = *((*old_attributes).data).offset(i as isize) as *const GumboAttribute;
        tmp___1 = gumbo_parser_allocate(
            parser,
            ::std::mem::size_of::<GumboAttribute>() as libc::c_ulong,
        );
        attr = tmp___1 as *mut GumboAttribute;
        *attr = *old_attr;
        tmp___2 = gumbo_copy_stringz(parser, (*old_attr).name);
        (*attr).name = tmp___2 as *const libc::c_char;
        tmp___3 = gumbo_copy_stringz(parser, (*old_attr).value);
        (*attr).value = tmp___3 as *const libc::c_char;
        gumbo_vector_add(parser, attr as *mut libc::c_void, &mut (*element).attributes);
        i += 1;
    }
    return new_node;
}
unsafe extern "C" fn reconstruct_active_formatting_elements(
    mut parser: *mut GumboParser,
) {
    let mut elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut element: *const GumboNode = 0 as *const GumboNode;
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: *const libc::c_char = 0 as *const libc::c_char;
    let mut clone: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___6: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___7: *const libc::c_char = 0 as *const libc::c_char;
    elements = &mut (*(*parser)._parser_state)._active_formatting_elements;
    if (*elements).length == 0 as libc::c_uint {
        return;
    }
    i = ((*elements).length).wrapping_sub(1 as libc::c_uint) as libc::c_int;
    element = *((*elements).data).offset(i as isize) as *const GumboNode;
    if element as libc::c_ulong
        == &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong
    {
        return
    } else {
        tmp = is_open_element(parser, element);
        if tmp {
            return;
        }
    }
    loop {
        if i == 0 as libc::c_int {
            i = -(1 as libc::c_int);
            break;
        } else {
            i -= 1;
            element = *((*elements).data).offset(i as isize) as *const GumboNode;
            if !(element as libc::c_ulong
                != &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong)
            {
                break;
            }
            tmp___0 = is_open_element(parser, element);
            if tmp___0 {
                break;
            }
        }
    }
    i += 1;
    tmp___1 = get_current_node(parser);
    tmp___2 = gumbo_normalized_tagname((*tmp___1).v.element.tag);
    gumbo_debug(
        b"Reconstructing elements from %d on %s parent.\n\0" as *const u8
            as *const libc::c_char,
        i,
        tmp___2,
    );
    while (i as libc::c_uint) < (*elements).length {
        if !((*elements).length > 0 as libc::c_uint) {
            __assert_fail(
                b"elements->length > 0\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1235 as libc::c_uint,
                b"reconstruct_active_formatting_elements\0" as *const u8
                    as *const libc::c_char,
            );
        }
        if !((i as libc::c_uint) < (*elements).length) {
            __assert_fail(
                b"i < elements->length\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1236 as libc::c_uint,
                b"reconstruct_active_formatting_elements\0" as *const u8
                    as *const libc::c_char,
            );
        }
        element = *((*elements).data).offset(i as isize) as *const GumboNode;
        if !(element as libc::c_ulong
            != &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong)
        {
            __assert_fail(
                b"element != &kActiveFormattingScopeMarker\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1238 as libc::c_uint,
                b"reconstruct_active_formatting_elements\0" as *const u8
                    as *const libc::c_char,
            );
        }
        tmp___6 = clone_node(
            parser,
            element,
            GUMBO_INSERTION_RECONSTRUCTED_FORMATTING_ELEMENT,
        );
        clone = tmp___6;
        insert_element(parser, clone, 1 as libc::c_int != 0);
        let ref mut fresh26 = *((*elements).data).offset(i as isize);
        *fresh26 = clone as *mut libc::c_void;
        tmp___7 = gumbo_normalized_tagname((*clone).v.element.tag);
        gumbo_debug(
            b"Reconstructed %s element at %d.\n\0" as *const u8 as *const libc::c_char,
            tmp___7,
            i,
        );
        i += 1;
    }
}
unsafe extern "C" fn clear_active_formatting_elements(mut parser: *mut GumboParser) {
    let mut elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut num_elements_cleared: libc::c_int = 0;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    elements = &mut (*(*parser)._parser_state)._active_formatting_elements;
    num_elements_cleared = 0 as libc::c_int;
    loop {
        tmp = gumbo_vector_pop(parser, elements);
        node = tmp as *const GumboNode;
        num_elements_cleared += 1;
        if node.is_null() {
            break;
        }
        if !(node as libc::c_ulong
            != &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong)
        {
            break;
        }
    }
    gumbo_debug(
        b"Cleared %d elements from active formatting list.\n\0" as *const u8
            as *const libc::c_char,
        num_elements_cleared,
    );
}
unsafe extern "C" fn compute_quirks_mode(
    mut doctype: *const GumboTokenDocType,
) -> GumboQuirksModeEnum {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    if (*doctype).force_quirks {
        return GUMBO_DOCTYPE_QUIRKS
    } else {
        tmp___1 = strcmp((*doctype).name, kDoctypeHtml.data);
        if tmp___1 != 0 {
            return GUMBO_DOCTYPE_QUIRKS
        } else {
            tmp___2 = is_in_static_list(
                (*doctype).public_identifier,
                kQuirksModePublicIdPrefixes.as_ptr(),
                0 as libc::c_int != 0,
            );
            if tmp___2 {
                return GUMBO_DOCTYPE_QUIRKS
            } else {
                tmp___3 = is_in_static_list(
                    (*doctype).public_identifier,
                    kQuirksModePublicIdExactMatches.as_ptr(),
                    1 as libc::c_int != 0,
                );
                if tmp___3 {
                    return GUMBO_DOCTYPE_QUIRKS
                } else {
                    tmp___4 = is_in_static_list(
                        (*doctype).system_identifier,
                        kQuirksModeSystemIdExactMatches.as_ptr(),
                        1 as libc::c_int != 0,
                    );
                    if tmp___4 {
                        return GUMBO_DOCTYPE_QUIRKS
                    } else {
                        tmp___5 = is_in_static_list(
                            (*doctype).public_identifier,
                            kLimitedQuirksRequiresSystemIdPublicIdPrefixes.as_ptr(),
                            0 as libc::c_int != 0,
                        );
                        if tmp___5 {
                            if !(*doctype).has_system_identifier {
                                return GUMBO_DOCTYPE_QUIRKS;
                            }
                        }
                        tmp = is_in_static_list(
                            (*doctype).public_identifier,
                            kLimitedQuirksPublicIdPrefixes.as_ptr(),
                            0 as libc::c_int != 0,
                        );
                        if tmp {
                            return GUMBO_DOCTYPE_LIMITED_QUIRKS
                        } else {
                            tmp___0 = is_in_static_list(
                                (*doctype).public_identifier,
                                kLimitedQuirksRequiresSystemIdPublicIdPrefixes.as_ptr(),
                                0 as libc::c_int != 0,
                            );
                            if tmp___0 {
                                if (*doctype).has_system_identifier {
                                    return GUMBO_DOCTYPE_LIMITED_QUIRKS;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return GUMBO_DOCTYPE_NO_QUIRKS;
}
unsafe extern "C" fn has_an_element_in_specific_scope(
    mut parser: *mut GumboParser,
    mut expected: *mut GumboVector,
    mut negate: bool,
    mut args: ...
) -> bool {
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut args_0: ::std::ffi::VaListImpl;
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___0: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___1: GumboTag = GUMBO_TAG_HTML;
    let mut result: bool = false;
    let mut i: libc::c_int = 0;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut node_tag: GumboTag = GUMBO_TAG_HTML;
    let mut j: libc::c_int = 0;
    let mut expected_tag: GumboTag = GUMBO_TAG_HTML;
    let mut found_tag: bool = false;
    let mut j___0: libc::c_int = 0;
    let mut tag___0: GumboTag = GUMBO_TAG_HTML;
    open_elements = &mut (*(*parser)._parser_state)._open_elements;
    args_0 = args.clone();
    gumbo_vector_init(parser, 10 as libc::c_int as size_t, &mut tags);
    tmp___0 = args_0.arg::<GumboTag>();
    tag = tmp___0;
    while tag as libc::c_uint != 150 as libc::c_uint {
        gumbo_vector_add(parser, tag as *mut libc::c_void, &mut tags);
        tmp___1 = args_0.arg::<GumboTag>();
        tag = tmp___1;
    }
    result = 0 as libc::c_int != 0;
    i = (*open_elements).length as libc::c_int;
    's_78: loop {
        i -= 1;
        if !(i >= 0 as libc::c_int) {
            break;
        }
        node = *((*open_elements).data).offset(i as isize) as *const GumboNode;
        if (*node).type_0 as libc::c_uint != 1 as libc::c_uint {
            continue;
        }
        node_tag = (*node).v.element.tag;
        j = 0 as libc::c_int;
        while (j as libc::c_uint) < (*expected).length {
            expected_tag = *((*expected).data).offset(j as isize) as GumboTag;
            if node_tag as libc::c_uint == expected_tag as libc::c_uint {
                result = 1 as libc::c_int != 0;
                break 's_78;
            } else {
                j += 1;
            }
        }
        found_tag = 0 as libc::c_int != 0;
        j___0 = 0 as libc::c_int;
        while (j___0 as libc::c_uint) < tags.length {
            tag___0 = *(tags.data).offset(j___0 as isize) as GumboTag;
            if tag___0 as libc::c_uint == node_tag as libc::c_uint {
                found_tag = 1 as libc::c_int != 0;
                break;
            } else {
                j___0 += 1;
            }
        }
        if !(negate as libc::c_int != found_tag as libc::c_int) {
            continue;
        }
        result = 0 as libc::c_int != 0;
        break;
    }
    gumbo_vector_destroy(parser, &mut tags);
    return result;
}
unsafe extern "C" fn has_an_element_in_scope(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
) -> bool {
    let mut tags_tmp_array: [*mut libc::c_void; 1] = [0 as *mut libc::c_void; 1];
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut tmp: bool = false;
    tags_tmp_array[0 as libc::c_int as usize] = tag as *mut libc::c_void;
    tags.data = tags_tmp_array.as_mut_ptr();
    tags.length = 1 as libc::c_uint;
    tags.capacity = 1 as libc::c_uint;
    tmp = has_an_element_in_specific_scope(
        parser,
        &mut tags as *mut GumboVector,
        0 as libc::c_int != 0,
        124 as libc::c_int,
        96 as libc::c_int,
        0 as libc::c_int,
        95 as libc::c_int,
        103 as libc::c_int,
        104 as libc::c_int,
        144 as libc::c_int,
        74 as libc::c_int,
        84 as libc::c_int,
        85 as libc::c_int,
        86 as libc::c_int,
        87 as libc::c_int,
        88 as libc::c_int,
        91 as libc::c_int,
        93 as libc::c_int,
        94 as libc::c_int,
        2 as libc::c_int,
        150 as libc::c_int,
    );
    return tmp;
}
unsafe extern "C" fn has_node_in_scope(
    mut parser: *mut GumboParser,
    mut node: *const GumboNode,
) -> bool {
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut current: *const GumboNode = 0 as *const GumboNode;
    let mut tmp: bool = false;
    open_elements = &mut (*(*parser)._parser_state)._open_elements;
    i = (*open_elements).length as libc::c_int;
    loop {
        i -= 1;
        if !(i >= 0 as libc::c_int) {
            break;
        }
        current = *((*open_elements).data).offset(i as isize) as *const GumboNode;
        if current as libc::c_ulong == node as libc::c_ulong {
            return 1 as libc::c_int != 0;
        }
        if (*current).type_0 as libc::c_uint != 1 as libc::c_uint {
            continue;
        }
        tmp = node_tag_in(
            current,
            124 as libc::c_int,
            96 as libc::c_int,
            0 as libc::c_int,
            95 as libc::c_int,
            103 as libc::c_int,
            104 as libc::c_int,
            144 as libc::c_int,
            74 as libc::c_int,
            84 as libc::c_int,
            85 as libc::c_int,
            86 as libc::c_int,
            87 as libc::c_int,
            88 as libc::c_int,
            91 as libc::c_int,
            93 as libc::c_int,
            94 as libc::c_int,
            2 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp {
            return 0 as libc::c_int != 0;
        }
    }
    __assert_fail(
        b"false\0" as *const u8 as *const libc::c_char,
        b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
        1396 as libc::c_uint,
        b"has_node_in_scope\0" as *const u8 as *const libc::c_char,
    );
}
unsafe extern "C" fn has_an_element_in_scope_with_tagname(
    mut parser: *mut GumboParser,
    mut args: ...
) -> bool {
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut args_0: ::std::ffi::VaListImpl;
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___0: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___1: GumboTag = GUMBO_TAG_HTML;
    let mut found: bool = false;
    let mut tmp___2: bool = false;
    gumbo_vector_init(parser, 6 as libc::c_int as size_t, &mut tags);
    args_0 = args.clone();
    tmp___0 = args_0.arg::<GumboTag>();
    tag = tmp___0;
    while tag as libc::c_uint != 150 as libc::c_uint {
        gumbo_vector_add(parser, tag as *mut libc::c_void, &mut tags);
        tmp___1 = args_0.arg::<GumboTag>();
        tag = tmp___1;
    }
    tmp___2 = has_an_element_in_specific_scope(
        parser,
        &mut tags as *mut GumboVector,
        0 as libc::c_int != 0,
        124 as libc::c_int,
        96 as libc::c_int,
        0 as libc::c_int,
        95 as libc::c_int,
        103 as libc::c_int,
        104 as libc::c_int,
        144 as libc::c_int,
        74 as libc::c_int,
        84 as libc::c_int,
        85 as libc::c_int,
        86 as libc::c_int,
        87 as libc::c_int,
        88 as libc::c_int,
        91 as libc::c_int,
        93 as libc::c_int,
        94 as libc::c_int,
        2 as libc::c_int,
        150 as libc::c_int,
    );
    found = tmp___2;
    gumbo_vector_destroy(parser, &mut tags);
    return found;
}
unsafe extern "C" fn has_an_element_in_list_scope(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
) -> bool {
    let mut tags_tmp_array: [*mut libc::c_void; 1] = [0 as *mut libc::c_void; 1];
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut tmp: bool = false;
    tags_tmp_array[0 as libc::c_int as usize] = tag as *mut libc::c_void;
    tags.data = tags_tmp_array.as_mut_ptr();
    tags.length = 1 as libc::c_uint;
    tags.capacity = 1 as libc::c_uint;
    tmp = has_an_element_in_specific_scope(
        parser,
        &mut tags as *mut GumboVector,
        0 as libc::c_int != 0,
        124 as libc::c_int,
        96 as libc::c_int,
        0 as libc::c_int,
        95 as libc::c_int,
        103 as libc::c_int,
        104 as libc::c_int,
        144 as libc::c_int,
        74 as libc::c_int,
        84 as libc::c_int,
        85 as libc::c_int,
        86 as libc::c_int,
        87 as libc::c_int,
        88 as libc::c_int,
        91 as libc::c_int,
        93 as libc::c_int,
        94 as libc::c_int,
        2 as libc::c_int,
        29 as libc::c_int,
        30 as libc::c_int,
        150 as libc::c_int,
    );
    return tmp;
}
unsafe extern "C" fn has_an_element_in_button_scope(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
) -> bool {
    let mut tags_tmp_array: [*mut libc::c_void; 1] = [0 as *mut libc::c_void; 1];
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut tmp: bool = false;
    tags_tmp_array[0 as libc::c_int as usize] = tag as *mut libc::c_void;
    tags.data = tags_tmp_array.as_mut_ptr();
    tags.length = 1 as libc::c_uint;
    tags.capacity = 1 as libc::c_uint;
    tmp = has_an_element_in_specific_scope(
        parser,
        &mut tags as *mut GumboVector,
        0 as libc::c_int != 0,
        124 as libc::c_int,
        96 as libc::c_int,
        0 as libc::c_int,
        95 as libc::c_int,
        103 as libc::c_int,
        104 as libc::c_int,
        144 as libc::c_int,
        74 as libc::c_int,
        84 as libc::c_int,
        85 as libc::c_int,
        86 as libc::c_int,
        87 as libc::c_int,
        88 as libc::c_int,
        91 as libc::c_int,
        93 as libc::c_int,
        94 as libc::c_int,
        2 as libc::c_int,
        110 as libc::c_int,
        150 as libc::c_int,
    );
    return tmp;
}
unsafe extern "C" fn has_an_element_in_table_scope(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
) -> bool {
    let mut tags_tmp_array: [*mut libc::c_void; 1] = [0 as *mut libc::c_void; 1];
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut tmp: bool = false;
    tags_tmp_array[0 as libc::c_int as usize] = tag as *mut libc::c_void;
    tags.data = tags_tmp_array.as_mut_ptr();
    tags.length = 1 as libc::c_uint;
    tags.capacity = 1 as libc::c_uint;
    tmp = has_an_element_in_specific_scope(
        parser,
        &mut tags as *mut GumboVector,
        0 as libc::c_int != 0,
        0 as libc::c_int,
        95 as libc::c_int,
        150 as libc::c_int,
    );
    return tmp;
}
unsafe extern "C" fn has_an_element_in_select_scope(
    mut parser: *mut GumboParser,
    mut tag: GumboTag,
) -> bool {
    let mut tags_tmp_array: [*mut libc::c_void; 1] = [0 as *mut libc::c_void; 1];
    let mut tags: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut tmp: bool = false;
    tags_tmp_array[0 as libc::c_int as usize] = tag as *mut libc::c_void;
    tags.data = tags_tmp_array.as_mut_ptr();
    tags.length = 1 as libc::c_uint;
    tags.capacity = 1 as libc::c_uint;
    tmp = has_an_element_in_specific_scope(
        parser,
        &mut tags as *mut GumboVector,
        1 as libc::c_int != 0,
        113 as libc::c_int,
        114 as libc::c_int,
        150 as libc::c_int,
    );
    return tmp;
}
unsafe extern "C" fn generate_implied_end_tags(
    mut parser: *mut GumboParser,
    mut exception: GumboTag,
) {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    loop {
        tmp = get_current_node(parser);
        tmp___0 = node_tag_in(
            tmp as *const GumboNode,
            34 as libc::c_int,
            33 as libc::c_int,
            31 as libc::c_int,
            114 as libc::c_int,
            113 as libc::c_int,
            25 as libc::c_int,
            62 as libc::c_int,
            61 as libc::c_int,
            150 as libc::c_int,
        );
        if !tmp___0 {
            break;
        }
        tmp___1 = get_current_node(parser);
        tmp___2 = node_tag_is(tmp___1 as *const GumboNode, exception);
        if tmp___2 {
            break;
        }
        pop_current_node(parser);
    };
}
unsafe extern "C" fn close_table(mut parser: *mut GumboParser) -> bool {
    let mut tmp: bool = false;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: bool = false;
    tmp = has_an_element_in_table_scope(parser, GUMBO_TAG_TABLE);
    if !tmp {
        return 0 as libc::c_int != 0;
    }
    tmp___0 = pop_current_node(parser);
    node = tmp___0;
    loop {
        tmp___1 = node_tag_is(node as *const GumboNode, GUMBO_TAG_TABLE);
        if tmp___1 {
            break;
        }
        node = pop_current_node(parser);
    }
    reset_insertion_mode_appropriately(parser);
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn close_table_cell(
    mut parser: *mut GumboParser,
    mut token: *const GumboToken,
    mut cell_tag: GumboTag,
) -> bool {
    let mut result: bool = false;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    result = 1 as libc::c_int != 0;
    generate_implied_end_tags(parser, GUMBO_TAG_LAST);
    tmp = get_current_node(parser);
    node = tmp as *const GumboNode;
    tmp___0 = node_tag_is(node, cell_tag);
    if !tmp___0 {
        add_parse_error(parser, token);
        result = 0 as libc::c_int != 0;
    }
    loop {
        tmp___1 = pop_current_node(parser);
        node = tmp___1 as *const GumboNode;
        tmp___2 = node_tag_is(node, cell_tag);
        if tmp___2 {
            break;
        }
    }
    clear_active_formatting_elements(parser);
    set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_ROW);
    return result;
}
unsafe extern "C" fn close_current_cell(
    mut parser: *mut GumboParser,
    mut token: *const GumboToken,
) -> bool {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    tmp___9 = has_an_element_in_table_scope(parser, GUMBO_TAG_TD);
    if tmp___9 {
        tmp___2 = has_an_element_in_table_scope(parser, GUMBO_TAG_TH);
        if tmp___2 {
            __assert_fail(
                b"!has_an_element_in_table_scope(parser, GUMBO_TAG_TH)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1516 as libc::c_uint,
                b"close_current_cell\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___3 = close_table_cell(parser, token, GUMBO_TAG_TD);
        return tmp___3;
    } else {
        tmp___7 = has_an_element_in_table_scope(parser, GUMBO_TAG_TH);
        if !tmp___7 {
            __assert_fail(
                b"has_an_element_in_table_scope(parser, GUMBO_TAG_TH)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1519 as libc::c_uint,
                b"close_current_cell\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___8 = close_table_cell(parser, token, GUMBO_TAG_TH);
        return tmp___8;
    };
}
unsafe extern "C" fn close_current_select(mut parser: *mut GumboParser) {
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    tmp = pop_current_node(parser);
    node = tmp;
    loop {
        tmp___0 = node_tag_is(node as *const GumboNode, GUMBO_TAG_SELECT);
        if tmp___0 {
            break;
        }
        node = pop_current_node(parser);
    }
    reset_insertion_mode_appropriately(parser);
}
unsafe extern "C" fn is_special_node(mut node: *const GumboNode) -> bool {
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"node->type == GUMBO_NODE_ELEMENT\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1539 as libc::c_uint,
            b"is_special_node\0" as *const u8 as *const libc::c_char,
        );
    }
    match (*node).v.element.tag_namespace as libc::c_uint {
        0 => {
            tmp___0 = node_tag_in(
                node,
                24 as libc::c_int,
                124 as libc::c_int,
                82 as libc::c_int,
                11 as libc::c_int,
                14 as libc::c_int,
                3 as libc::c_int,
                139 as libc::c_int,
                126 as libc::c_int,
                28 as libc::c_int,
                10 as libc::c_int,
                66 as libc::c_int,
                110 as libc::c_int,
                96 as libc::c_int,
                142 as libc::c_int,
                98 as libc::c_int,
                97 as libc::c_int,
                123 as libc::c_int,
                34 as libc::c_int,
                120 as libc::c_int,
                127 as libc::c_int,
                38 as libc::c_int,
                32 as libc::c_int,
                33 as libc::c_int,
                73 as libc::c_int,
                106 as libc::c_int,
                36 as libc::c_int,
                35 as libc::c_int,
                23 as libc::c_int,
                105 as libc::c_int,
                128 as libc::c_int,
                129 as libc::c_int,
                15 as libc::c_int,
                16 as libc::c_int,
                17 as libc::c_int,
                18 as libc::c_int,
                19 as libc::c_int,
                20 as libc::c_int,
                1 as libc::c_int,
                22 as libc::c_int,
                21 as libc::c_int,
                26 as libc::c_int,
                0 as libc::c_int,
                72 as libc::c_int,
                71 as libc::c_int,
                109 as libc::c_int,
                131 as libc::c_int,
                31 as libc::c_int,
                4 as libc::c_int,
                132 as libc::c_int,
                144 as libc::c_int,
                122 as libc::c_int,
                5 as libc::c_int,
                13 as libc::c_int,
                135 as libc::c_int,
                130 as libc::c_int,
                8 as libc::c_int,
                74 as libc::c_int,
                29 as libc::c_int,
                25 as libc::c_int,
                75 as libc::c_int,
                136 as libc::c_int,
                27 as libc::c_int,
                7 as libc::c_int,
                12 as libc::c_int,
                111 as libc::c_int,
                6 as libc::c_int,
                121 as libc::c_int,
                95 as libc::c_int,
                99 as libc::c_int,
                103 as libc::c_int,
                115 as libc::c_int,
                101 as libc::c_int,
                104 as libc::c_int,
                100 as libc::c_int,
                2 as libc::c_int,
                102 as libc::c_int,
                30 as libc::c_int,
                67 as libc::c_int,
                133 as libc::c_int,
                150 as libc::c_int,
            );
            return tmp___0;
        }
        2 => {
            tmp___1 = node_tag_in(
                node,
                84 as libc::c_int,
                85 as libc::c_int,
                86 as libc::c_int,
                87 as libc::c_int,
                88 as libc::c_int,
                91 as libc::c_int,
                150 as libc::c_int,
            );
            return tmp___1;
        }
        1 => {
            tmp___2 = node_tag_in(
                node,
                93 as libc::c_int,
                94 as libc::c_int,
                150 as libc::c_int,
            );
            return tmp___2;
        }
        _ => {}
    }
    abort();
}
unsafe extern "C" fn implicitly_close_tags(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut target: GumboTag,
) -> bool {
    let mut result: bool = false;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    let mut tmp___8: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___9: bool = false;
    result = 1 as libc::c_int != 0;
    generate_implied_end_tags(parser, target);
    tmp___1 = get_current_node(parser);
    tmp___2 = node_tag_is(tmp___1 as *const GumboNode, target);
    if !tmp___2 {
        add_parse_error(parser, token as *const GumboToken);
        loop {
            tmp = get_current_node(parser);
            tmp___0 = node_tag_is(tmp as *const GumboNode, target);
            if tmp___0 {
                break;
            }
            pop_current_node(parser);
        }
        result = 0 as libc::c_int != 0;
    }
    tmp___8 = get_current_node(parser);
    tmp___9 = node_tag_is(tmp___8 as *const GumboNode, target);
    if !tmp___9 {
        __assert_fail(
            b"node_tag_is(get_current_node(parser), target)\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1592 as libc::c_uint,
            b"implicitly_close_tags\0" as *const u8 as *const libc::c_char,
        );
    }
    pop_current_node(parser);
    return result;
}
unsafe extern "C" fn maybe_implicitly_close_p_tag(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    tmp___0 = has_an_element_in_button_scope(parser, GUMBO_TAG_P);
    if tmp___0 {
        tmp = implicitly_close_tags(parser, token, GUMBO_TAG_P);
        return tmp;
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn maybe_implicitly_close_list_tag(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut is_li: bool,
) {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut i: libc::c_int = 0;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut is_list_tag: bool = false;
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    state = (*parser)._parser_state;
    (*state)._frameset_ok = 0 as libc::c_int != 0;
    i = (*state)._open_elements.length as libc::c_int;
    loop {
        i -= 1;
        if !(i >= 0 as libc::c_int) {
            break;
        }
        node = *((*state)._open_elements.data).offset(i as isize) as *const GumboNode;
        if is_li {
            tmp = node_tag_is(node, GUMBO_TAG_LI);
            tmp___1 = tmp as libc::c_int;
        } else {
            tmp___0 = node_tag_in(
                node,
                34 as libc::c_int,
                33 as libc::c_int,
                150 as libc::c_int,
            );
            tmp___1 = tmp___0 as libc::c_int;
        }
        is_list_tag = tmp___1 != 0;
        if is_list_tag {
            implicitly_close_tags(parser, token, (*node).v.element.tag);
            return;
        }
        tmp___2 = is_special_node(node);
        if tmp___2 {
            tmp___3 = node_tag_in(
                node,
                24 as libc::c_int,
                38 as libc::c_int,
                25 as libc::c_int,
                150 as libc::c_int,
            );
            if !tmp___3 {
                return;
            }
        }
    };
}
unsafe extern "C" fn merge_attributes(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut node: *mut GumboNode,
) {
    let mut token_attr: *const GumboVector = 0 as *const GumboVector;
    let mut node_attr: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___1: *mut GumboAttribute = 0 as *mut GumboAttribute;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1633 as libc::c_uint,
            b"merge_attributes\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*node).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"node->type == GUMBO_NODE_ELEMENT\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1634 as libc::c_uint,
            b"merge_attributes\0" as *const u8 as *const libc::c_char,
        );
    }
    token_attr = &mut (*token).v.start_tag.attributes as *mut GumboVector
        as *const GumboVector;
    node_attr = &mut (*node).v.element.attributes;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*token_attr).length {
        attr = *((*token_attr).data).offset(i as isize) as *mut GumboAttribute;
        tmp___1 = gumbo_get_attribute(node_attr as *const GumboVector, (*attr).name);
        if tmp___1.is_null() {
            gumbo_vector_add(parser, attr as *mut libc::c_void, node_attr);
            let ref mut fresh27 = *((*token_attr).data).offset(i as isize);
            *fresh27 = 0 as *mut libc::c_void;
        }
        i += 1;
    }
    gumbo_token_destroy(parser, token);
    (*token).v.start_tag.attributes = kGumboEmptyVector;
}
pub unsafe extern "C" fn gumbo_normalize_svg_tagname(
    mut tag: *const GumboStringPiece,
) -> *const libc::c_char {
    let mut i: libc::c_int = 0;
    let mut entry: *const ReplacementEntry = 0 as *const ReplacementEntry;
    let mut tmp: bool = false;
    i = 0 as libc::c_int;
    while (i as libc::c_ulong)
        < (::std::mem::size_of::<[ReplacementEntry; 36]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<ReplacementEntry>() as libc::c_ulong)
    {
        entry = &*kSvgTagReplacements.as_ptr().offset(i as isize)
            as *const ReplacementEntry;
        tmp = gumbo_string_equals_ignore_case(tag, &(*entry).from);
        if tmp {
            return (*entry).to.data;
        }
        i += 1;
    }
    return 0 as *mut libc::c_void as *const libc::c_char;
}
unsafe extern "C" fn adjust_foreign_attributes(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) {
    let mut attributes: *const GumboVector = 0 as *const GumboVector;
    let mut i: libc::c_int = 0;
    let mut entry: *const NamespacedAttributeReplacement = 0
        as *const NamespacedAttributeReplacement;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___0: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1676 as libc::c_uint,
            b"adjust_foreign_attributes\0" as *const u8 as *const libc::c_char,
        );
    }
    attributes = &mut (*token).v.start_tag.attributes as *mut GumboVector
        as *const GumboVector;
    i = 0 as libc::c_int;
    while (i as libc::c_ulong)
        < (::std::mem::size_of::<[NamespacedAttributeReplacement; 12]>()
            as libc::c_ulong)
            .wrapping_div(
                ::std::mem::size_of::<NamespacedAttributeReplacement>() as libc::c_ulong,
            )
    {
        entry = &*kForeignAttributeReplacements.as_ptr().offset(i as isize)
            as *const NamespacedAttributeReplacement;
        tmp___0 = gumbo_get_attribute(attributes, (*entry).from);
        attr = tmp___0;
        if !attr.is_null() {
            gumbo_parser_deallocate(parser, (*attr).name as *mut libc::c_void);
            (*attr).attr_namespace = (*entry).attr_namespace;
            tmp___1 = gumbo_copy_stringz(parser, (*entry).local_name);
            (*attr).name = tmp___1 as *const libc::c_char;
        }
        i += 1;
    }
}
unsafe extern "C" fn adjust_svg_attributes(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) {
    let mut attributes: *const GumboVector = 0 as *const GumboVector;
    let mut i: libc::c_int = 0;
    let mut entry: *const ReplacementEntry = 0 as *const ReplacementEntry;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___0: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1696 as libc::c_uint,
            b"adjust_svg_attributes\0" as *const u8 as *const libc::c_char,
        );
    }
    attributes = &mut (*token).v.start_tag.attributes as *mut GumboVector
        as *const GumboVector;
    i = 0 as libc::c_int;
    while (i as libc::c_ulong)
        < (::std::mem::size_of::<[ReplacementEntry; 62]>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<ReplacementEntry>() as libc::c_ulong)
    {
        entry = &*kSvgAttributeReplacements.as_ptr().offset(i as isize)
            as *const ReplacementEntry;
        tmp___0 = gumbo_get_attribute(attributes, (*entry).from.data);
        attr = tmp___0;
        if !attr.is_null() {
            gumbo_parser_deallocate(parser, (*attr).name as *mut libc::c_void);
            tmp___1 = gumbo_copy_stringz(parser, (*entry).to.data);
            (*attr).name = tmp___1 as *const libc::c_char;
        }
        i += 1;
    }
}
unsafe extern "C" fn adjust_mathml_attributes(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) {
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___0: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    if !((*token).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"token->type == GUMBO_TOKEN_START_TAG\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1714 as libc::c_uint,
            b"adjust_mathml_attributes\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___0 = gumbo_get_attribute(
        &mut (*token).v.start_tag.attributes as *mut GumboVector as *const GumboVector,
        b"definitionurl\0" as *const u8 as *const libc::c_char,
    );
    attr = tmp___0;
    if attr.is_null() {
        return;
    }
    gumbo_parser_deallocate(parser, (*attr).name as *mut libc::c_void);
    tmp___1 = gumbo_copy_stringz(
        parser,
        b"definitionURL\0" as *const u8 as *const libc::c_char,
    );
    (*attr).name = tmp___1 as *const libc::c_char;
}
unsafe extern "C" fn doctype_matches(
    mut doctype: *const GumboTokenDocType,
    mut public_id: *const GumboStringPiece,
    mut system_id: *const GumboStringPiece,
    mut allow_missing_system_id: bool,
) -> bool {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    tmp = strcmp((*doctype).public_identifier, (*public_id).data);
    if tmp != 0 {
        tmp___1 = 0 as libc::c_int;
    } else {
        let mut current_block_10: u64;
        if allow_missing_system_id {
            current_block_10 = 14846689705409343343;
        } else if (*doctype).has_system_identifier {
            current_block_10 = 14846689705409343343;
        } else {
            tmp___1 = 0 as libc::c_int;
            current_block_10 = 13586036798005543211;
        }
        match current_block_10 {
            14846689705409343343 => {
                tmp___0 = strcmp((*doctype).system_identifier, (*system_id).data);
                if tmp___0 != 0 {
                    tmp___1 = 0 as libc::c_int;
                } else {
                    tmp___1 = 1 as libc::c_int;
                }
            }
            _ => {}
        }
    }
    return tmp___1 != 0;
}
unsafe extern "C" fn maybe_add_doctype_error(
    mut parser: *mut GumboParser,
    mut token: *const GumboToken,
) -> bool {
    let mut doctype: *const GumboTokenDocType = 0 as *const GumboTokenDocType;
    let mut html_doctype: bool = false;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    doctype = &(*token).v.doc_type;
    tmp = strcmp((*doctype).name, kDoctypeHtml.data);
    if tmp != 0 {
        tmp___0 = 0 as libc::c_int;
    } else {
        tmp___0 = 1 as libc::c_int;
    }
    html_doctype = tmp___0 != 0;
    if !html_doctype {
        add_parse_error(parser, token);
        return 0 as libc::c_int != 0;
    } else {
        if (*doctype).has_public_identifier {
            add_parse_error(parser, token);
            return 0 as libc::c_int != 0;
        } else {
            if (*doctype).has_system_identifier {
                tmp___1 = strcmp(
                    (*doctype).system_identifier,
                    kSystemIdLegacyCompat.data,
                );
                if !(tmp___1 != 0) {
                    add_parse_error(parser, token);
                    return 0 as libc::c_int != 0;
                }
            }
            if html_doctype {
                tmp___2 = doctype_matches(
                    doctype,
                    &kPublicIdHtml4_0,
                    &kSystemIdRecHtml4_0,
                    1 as libc::c_int != 0,
                );
                if !tmp___2 {
                    tmp___3 = doctype_matches(
                        doctype,
                        &kPublicIdHtml4_01,
                        &kSystemIdHtml4,
                        1 as libc::c_int != 0,
                    );
                    if !tmp___3 {
                        tmp___4 = doctype_matches(
                            doctype,
                            &kPublicIdXhtml1_0,
                            &kSystemIdXhtmlStrict1_1,
                            0 as libc::c_int != 0,
                        );
                        if !tmp___4 {
                            tmp___5 = doctype_matches(
                                doctype,
                                &kPublicIdXhtml1_1,
                                &kSystemIdXhtml1_1,
                                0 as libc::c_int != 0,
                            );
                            if !tmp___5 {
                                add_parse_error(parser, token);
                                return 0 as libc::c_int != 0;
                            }
                        }
                    }
                }
            } else {
                add_parse_error(parser, token);
                return 0 as libc::c_int != 0;
            }
        }
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn remove_from_parent(
    mut parser: *mut GumboParser,
    mut node: *mut GumboNode,
) {
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    let mut index___0: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut child: *mut GumboNode = 0 as *mut GumboNode;
    if ((*node).parent).is_null() {
        return;
    }
    if !((*(*node).parent).type_0 as libc::c_uint == 1 as libc::c_uint) {
        __assert_fail(
            b"node->parent->type == GUMBO_NODE_ELEMENT\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1764 as libc::c_uint,
            b"remove_from_parent\0" as *const u8 as *const libc::c_char,
        );
    }
    children = &mut (*(*node).parent).v.element.children;
    tmp___0 = gumbo_vector_index_of(children, node as *mut libc::c_void);
    index___0 = tmp___0;
    if !(index___0 != -(1 as libc::c_int)) {
        __assert_fail(
            b"index != -1\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            1767 as libc::c_uint,
            b"remove_from_parent\0" as *const u8 as *const libc::c_char,
        );
    }
    gumbo_vector_remove_at(parser, index___0, children);
    (*node).parent = 0 as *mut libc::c_void as *mut GumboNode;
    (*node).index_within_parent = -(1 as libc::c_int) as size_t;
    i = index___0;
    while (i as libc::c_uint) < (*children).length {
        child = *((*children).data).offset(i as isize) as *mut GumboNode;
        (*child).index_within_parent = i as size_t;
        i += 1;
    }
}
unsafe extern "C" fn adoption_agency_algorithm(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
    mut closing_tag: GumboTag,
) -> bool {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut i: libc::c_int = 0;
    let mut formatting_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut formatting_node_in_open_elements: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut current_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___7: bool = false;
    let mut tmp___11: bool = false;
    let mut furthest_block: *mut GumboNode = 0 as *mut GumboNode;
    let mut j___0: libc::c_int = 0;
    let mut current: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___13: bool = false;
    let mut tmp___14: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___18: bool = false;
    let mut common_ancestor: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___20: libc::c_int = 0;
    let mut tmp___21: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___22: *const libc::c_char = 0 as *const libc::c_char;
    let mut bookmark: libc::c_int = 0;
    let mut tmp___23: libc::c_int = 0;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut last_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut saved_node_index: libc::c_int = 0;
    let mut tmp___24: libc::c_int = 0;
    let mut j___1: libc::c_int = 0;
    let mut node_index: libc::c_int = 0;
    let mut tmp___26: libc::c_int = 0;
    let mut tmp___30: libc::c_int = 0;
    let mut formatting_index: libc::c_int = 0;
    let mut tmp___31: libc::c_int = 0;
    let mut tmp___33: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___34: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___35: bool = false;
    let mut new_formatting_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___36: *mut GumboNode = 0 as *mut GumboNode;
    let mut temp: GumboVector = GumboVector {
        data: 0 as *const *mut libc::c_void as *mut *mut libc::c_void,
        length: 0,
        capacity: 0,
    };
    let mut i___0: libc::c_int = 0;
    let mut child: *mut GumboNode = 0 as *mut GumboNode;
    let mut formatting_node_index: libc::c_int = 0;
    let mut tmp___37: libc::c_int = 0;
    let mut insert_at: libc::c_int = 0;
    let mut tmp___41: libc::c_int = 0;
    state = (*parser)._parser_state;
    gumbo_debug(
        b"Entering adoption agency algorithm.\n\0" as *const u8 as *const libc::c_char,
    );
    i = 0 as libc::c_int;
    while i < 8 as libc::c_int {
        formatting_node = 0 as *mut libc::c_void as *mut GumboNode;
        formatting_node_in_open_elements = -(1 as libc::c_int);
        j = (*state)._active_formatting_elements.length as libc::c_int;
        loop {
            j -= 1;
            if !(j >= 0 as libc::c_int) {
                break;
            }
            current_node = *((*state)._active_formatting_elements.data)
                .offset(j as isize) as *mut GumboNode;
            if current_node as libc::c_ulong
                == &kActiveFormattingScopeMarker as *const GumboNode as libc::c_ulong
            {
                gumbo_debug(
                    b"Broke on scope marker; aborting.\n\0" as *const u8
                        as *const libc::c_char,
                );
                return 0 as libc::c_int != 0;
            }
            tmp___0 = node_tag_is(current_node as *const GumboNode, closing_tag);
            if !tmp___0 {
                continue;
            }
            formatting_node = current_node;
            formatting_node_in_open_elements = gumbo_vector_index_of(
                &mut (*state)._open_elements,
                formatting_node as *mut libc::c_void,
            );
            tmp = gumbo_normalized_tagname(closing_tag);
            gumbo_debug(
                b"Formatting element of tag %s at %d.\n\0" as *const u8
                    as *const libc::c_char,
                tmp,
                formatting_node_in_open_elements,
            );
            break;
        }
        if formatting_node.is_null() {
            gumbo_debug(
                b"No active formatting elements; aborting.\n\0" as *const u8
                    as *const libc::c_char,
            );
            return 0 as libc::c_int != 0;
        }
        if formatting_node_in_open_elements == -(1 as libc::c_int) {
            gumbo_debug(
                b"Formatting node not on stack of open elements.\n\0" as *const u8
                    as *const libc::c_char,
            );
            gumbo_vector_remove(
                parser,
                formatting_node as *mut libc::c_void,
                &mut (*state)._active_formatting_elements,
            );
            return 0 as libc::c_int != 0;
        }
        tmp___1 = has_an_element_in_scope(parser, (*formatting_node).v.element.tag);
        if !tmp___1 {
            add_parse_error(parser, token as *const GumboToken);
            gumbo_debug(
                b"Element not in scope.\n\0" as *const u8 as *const libc::c_char,
            );
            return 0 as libc::c_int != 0;
        }
        tmp___2 = get_current_node(parser);
        if formatting_node as libc::c_ulong != tmp___2 as libc::c_ulong {
            add_parse_error(parser, token as *const GumboToken);
        }
        if formatting_node.is_null() {
            __assert_fail(
                b"formatting_node\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1830 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___7 = node_tag_is(formatting_node as *const GumboNode, GUMBO_TAG_HTML);
        if tmp___7 {
            __assert_fail(
                b"!node_tag_is(formatting_node, GUMBO_TAG_HTML)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1831 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___11 = node_tag_is(formatting_node as *const GumboNode, GUMBO_TAG_BODY);
        if tmp___11 {
            __assert_fail(
                b"!node_tag_is(formatting_node, GUMBO_TAG_BODY)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1832 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        furthest_block = 0 as *mut libc::c_void as *mut GumboNode;
        j___0 = formatting_node_in_open_elements;
        while (j___0 as libc::c_uint) < (*state)._open_elements.length {
            if !(j___0 > 0 as libc::c_int) {
                __assert_fail(
                    b"j > 0\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    1838 as libc::c_uint,
                    b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
                );
            }
            current = *((*state)._open_elements.data).offset(j___0 as isize)
                as *mut GumboNode;
            tmp___13 = is_special_node(current as *const GumboNode);
            if tmp___13 {
                furthest_block = current;
                break;
            } else {
                j___0 += 1;
            }
        }
        if furthest_block.is_null() {
            loop {
                tmp___14 = get_current_node(parser);
                if !(tmp___14 as libc::c_ulong != formatting_node as libc::c_ulong) {
                    break;
                }
                pop_current_node(parser);
            }
            pop_current_node(parser);
            gumbo_vector_remove(
                parser,
                formatting_node as *mut libc::c_void,
                &mut (*state)._active_formatting_elements,
            );
            return 0 as libc::c_int != 0;
        }
        tmp___18 = node_tag_is(furthest_block as *const GumboNode, GUMBO_TAG_HTML);
        if tmp___18 {
            __assert_fail(
                b"!node_tag_is(furthest_block, GUMBO_TAG_HTML)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1857 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        if furthest_block.is_null() {
            __assert_fail(
                b"furthest_block\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1858 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___20 = gumbo_vector_index_of(
            &mut (*state)._open_elements,
            formatting_node as *mut libc::c_void,
        );
        common_ancestor = *((*state)._open_elements.data)
            .offset((tmp___20 - 1 as libc::c_int) as isize) as *mut GumboNode;
        tmp___21 = gumbo_normalized_tagname((*furthest_block).v.element.tag);
        tmp___22 = gumbo_normalized_tagname((*common_ancestor).v.element.tag);
        gumbo_debug(
            b"Common ancestor tag = %s, furthest block tag = %s.\n\0" as *const u8
                as *const libc::c_char,
            tmp___22,
            tmp___21,
        );
        tmp___23 = gumbo_vector_index_of(
            &mut (*state)._active_formatting_elements,
            formatting_node as *mut libc::c_void,
        );
        bookmark = tmp___23;
        node = furthest_block;
        last_node = furthest_block;
        tmp___24 = gumbo_vector_index_of(
            &mut (*state)._open_elements,
            node as *mut libc::c_void,
        );
        saved_node_index = tmp___24;
        if !(saved_node_index > 0 as libc::c_int) {
            __assert_fail(
                b"saved_node_index > 0\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1879 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        j___1 = 0 as libc::c_int;
        while j___1 < 3 as libc::c_int {
            tmp___26 = gumbo_vector_index_of(
                &mut (*state)._open_elements,
                node as *mut libc::c_void,
            );
            node_index = tmp___26;
            gumbo_debug(
                b"Current index: %d, last index: %d.\n\0" as *const u8
                    as *const libc::c_char,
                node_index,
                saved_node_index,
            );
            if node_index == -(1 as libc::c_int) {
                node_index = saved_node_index;
            }
            node_index -= 1;
            saved_node_index = node_index;
            if !(node_index > 0 as libc::c_int) {
                __assert_fail(
                    b"node_index > 0\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    1890 as libc::c_uint,
                    b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
                );
            }
            if !((node_index as libc::c_uint) < (*state)._open_elements.capacity) {
                __assert_fail(
                    b"node_index < state->_open_elements.capacity\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    1891 as libc::c_uint,
                    b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
                );
            }
            node = *((*state)._open_elements.data).offset(node_index as isize)
                as *mut GumboNode;
            if ((*node).parent).is_null() {
                __assert_fail(
                    b"node->parent\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    1893 as libc::c_uint,
                    b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
                );
            }
            tmp___30 = gumbo_vector_index_of(
                &mut (*state)._active_formatting_elements,
                node as *mut libc::c_void,
            );
            if tmp___30 == -(1 as libc::c_int) {
                gumbo_vector_remove_at(parser, node_index, &mut (*state)._open_elements);
            } else {
                if node as libc::c_ulong == formatting_node as libc::c_ulong {
                    break;
                }
                tmp___31 = gumbo_vector_index_of(
                    &mut (*state)._active_formatting_elements,
                    node as *mut libc::c_void,
                );
                formatting_index = tmp___31;
                node = clone_node(
                    parser,
                    node as *const GumboNode,
                    GUMBO_INSERTION_ADOPTION_AGENCY_CLONED,
                );
                let ref mut fresh28 = *((*state)._active_formatting_elements.data)
                    .offset(formatting_index as isize);
                *fresh28 = node as *mut libc::c_void;
                let ref mut fresh29 = *((*state)._open_elements.data)
                    .offset(node_index as isize);
                *fresh29 = node as *mut libc::c_void;
                if last_node as libc::c_ulong == furthest_block as libc::c_ulong {
                    bookmark = formatting_index + 1 as libc::c_int;
                    if !(bookmark as libc::c_uint
                        <= (*state)._active_formatting_elements.length)
                    {
                        __assert_fail(
                            b"bookmark <= state->_active_formatting_elements.length\0"
                                as *const u8 as *const libc::c_char,
                            b"deps/gumbo-parser/parser.c\0" as *const u8
                                as *const libc::c_char,
                            1912 as libc::c_uint,
                            b"adoption_agency_algorithm\0" as *const u8
                                as *const libc::c_char,
                        );
                    }
                }
                (*last_node)
                    .parse_flags = ((*last_node).parse_flags as libc::c_uint
                    | 512 as libc::c_uint) as GumboParseFlags;
                remove_from_parent(parser, last_node);
                append_node(parser, node, last_node);
                last_node = node;
            }
            j___1 += 1;
        }
        tmp___33 = gumbo_normalized_tagname((*last_node).v.element.tag);
        gumbo_debug(
            b"Removing %s node from parent \0" as *const u8 as *const libc::c_char,
            tmp___33,
        );
        remove_from_parent(parser, last_node);
        (*last_node)
            .parse_flags = ((*last_node).parse_flags as libc::c_uint
            | 512 as libc::c_uint) as GumboParseFlags;
        tmp___35 = node_tag_in(
            common_ancestor as *const GumboNode,
            95 as libc::c_int,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            102 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___35 {
            gumbo_debug(
                b"and foster-parenting it.\n\0" as *const u8 as *const libc::c_char,
            );
            foster_parent_element(parser, last_node);
        } else {
            tmp___34 = gumbo_normalized_tagname((*common_ancestor).v.element.tag);
            gumbo_debug(
                b"and inserting it into %s.\n\0" as *const u8 as *const libc::c_char,
                tmp___34,
            );
            append_node(parser, common_ancestor, last_node);
        }
        tmp___36 = clone_node(
            parser,
            formatting_node as *const GumboNode,
            GUMBO_INSERTION_ADOPTION_AGENCY_CLONED,
        );
        new_formatting_node = tmp___36;
        (*formatting_node)
            .parse_flags = ((*formatting_node).parse_flags as libc::c_uint
            | 2 as libc::c_uint) as GumboParseFlags;
        temp = (*new_formatting_node).v.element.children;
        (*new_formatting_node).v.element.children = (*furthest_block).v.element.children;
        (*furthest_block).v.element.children = temp;
        temp = (*new_formatting_node).v.element.children;
        i___0 = 0 as libc::c_int;
        while (i___0 as libc::c_uint) < temp.length {
            child = *(temp.data).offset(i___0 as isize) as *mut GumboNode;
            (*child).parent = new_formatting_node;
            i___0 += 1;
        }
        append_node(parser, furthest_block, new_formatting_node);
        tmp___37 = gumbo_vector_index_of(
            &mut (*state)._active_formatting_elements,
            formatting_node as *mut libc::c_void,
        );
        formatting_node_index = tmp___37;
        if !(formatting_node_index != -(1 as libc::c_int)) {
            __assert_fail(
                b"formatting_node_index != -1\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1967 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        if formatting_node_index < bookmark {
            bookmark -= 1;
        }
        gumbo_vector_remove_at(
            parser,
            formatting_node_index,
            &mut (*state)._active_formatting_elements,
        );
        if !(bookmark >= 0 as libc::c_int) {
            __assert_fail(
                b"bookmark >= 0\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1973 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        if !(bookmark as libc::c_uint <= (*state)._active_formatting_elements.length) {
            __assert_fail(
                b"bookmark <= state->_active_formatting_elements.length\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1974 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        gumbo_vector_insert_at(
            parser,
            new_formatting_node as *mut libc::c_void,
            bookmark,
            &mut (*state)._active_formatting_elements,
        );
        gumbo_vector_remove(
            parser,
            formatting_node as *mut libc::c_void,
            &mut (*state)._open_elements,
        );
        tmp___41 = gumbo_vector_index_of(
            &mut (*state)._open_elements,
            furthest_block as *mut libc::c_void,
        );
        insert_at = tmp___41 + 1 as libc::c_int;
        if !(insert_at >= 0 as libc::c_int) {
            __assert_fail(
                b"insert_at >= 0\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1983 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        if !(insert_at as libc::c_uint <= (*state)._open_elements.length) {
            __assert_fail(
                b"insert_at <= state->_open_elements.length\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                1984 as libc::c_uint,
                b"adoption_agency_algorithm\0" as *const u8 as *const libc::c_char,
            );
        }
        gumbo_vector_insert_at(
            parser,
            new_formatting_node as *mut libc::c_void,
            insert_at,
            &mut (*state)._open_elements,
        );
        i += 1;
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn ignore_token(mut parser: *mut GumboParser) {
    let mut token: *mut GumboToken = 0 as *mut GumboToken;
    token = (*(*parser)._parser_state)._current_token;
    gumbo_token_destroy(parser, token);
    if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
        (*token).v.start_tag.attributes = kGumboEmptyVector;
    }
}
unsafe extern "C" fn finish_parsing(mut parser: *mut GumboParser) {
    let mut current_block: u64;
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: *mut GumboNode = 0 as *mut GumboNode;
    maybe_flush_text_node_buffer(parser);
    state = (*parser)._parser_state;
    tmp = pop_current_node(parser);
    node = tmp;
    while !node.is_null() {
        tmp___0 = node_tag_is(node as *const GumboNode, GUMBO_TAG_BODY);
        if tmp___0 {
            if (*state)._closed_body_tag {
                current_block = 12993123634440162238;
            } else {
                current_block = 12445516071305573171;
            }
        } else {
            current_block = 12445516071305573171;
        }
        match current_block {
            12445516071305573171 => {
                tmp___1 = node_tag_is(node as *const GumboNode, GUMBO_TAG_HTML);
                if tmp___1 {
                    if (*state)._closed_html_tag {
                        current_block = 12993123634440162238;
                    } else {
                        current_block = 12349973810996921269;
                    }
                } else {
                    current_block = 12349973810996921269;
                }
                match current_block {
                    12993123634440162238 => {}
                    _ => {
                        (*node)
                            .parse_flags = ((*node).parse_flags as libc::c_uint
                            | 2 as libc::c_uint) as GumboParseFlags;
                    }
                }
            }
            _ => {}
        }
        node = pop_current_node(parser);
    }
    loop {
        tmp___2 = pop_current_node(parser);
        if tmp___2.is_null() {
            break;
        }
    };
}
unsafe extern "C" fn handle_initial(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut document: *mut GumboDocument = 0 as *mut GumboDocument;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: bool = false;
    tmp = get_document_node(parser);
    document = &mut (*tmp).v.document;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        ignore_token(parser);
        return 1 as libc::c_int != 0;
    } else {
        if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
            tmp___0 = get_document_node(parser);
            append_comment_node(parser, tmp___0, token as *const GumboToken);
            return 1 as libc::c_int != 0;
        } else {
            if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
                (*document).has_doctype = 1 as libc::c_int != 0;
                (*document).name = (*token).v.doc_type.name;
                (*document).public_identifier = (*token).v.doc_type.public_identifier;
                (*document).system_identifier = (*token).v.doc_type.system_identifier;
                (*document)
                    .doc_type_quirks_mode = compute_quirks_mode(
                    &mut (*token).v.doc_type as *mut GumboTokenDocType
                        as *const GumboTokenDocType,
                );
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_BEFORE_HTML);
                tmp___1 = maybe_add_doctype_error(parser, token as *const GumboToken);
                return tmp___1;
            }
        }
    }
    add_parse_error(parser, token as *const GumboToken);
    (*document).doc_type_quirks_mode = GUMBO_DOCTYPE_QUIRKS;
    set_insertion_mode(parser, GUMBO_INSERTION_MODE_BEFORE_HTML);
    (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn handle_before_html(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut html_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut html_node___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_document_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        ignore_token(parser);
        return 1 as libc::c_int != 0;
    } else {
        tmp___4 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___4 {
            tmp___0 = insert_element_from_token(parser, token);
            html_node = tmp___0;
            (*(*parser)._output).root = html_node;
            set_insertion_mode(parser, GUMBO_INSERTION_MODE_BEFORE_HEAD);
            return 1 as libc::c_int != 0;
        } else {
            if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
                tmp___3 = tag_in(
                    token as *const GumboToken,
                    0 as libc::c_int != 0,
                    1 as libc::c_int,
                    10 as libc::c_int,
                    0 as libc::c_int,
                    66 as libc::c_int,
                    150 as libc::c_int,
                );
                if !tmp___3 {
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                }
            }
            tmp___1 = insert_element_of_tag_type(
                parser,
                GUMBO_TAG_HTML,
                GUMBO_INSERTION_IMPLIED,
            );
            html_node___0 = tmp___1;
            if html_node___0.is_null() {
                __assert_fail(
                    b"html_node\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    2073 as libc::c_uint,
                    b"handle_before_html\0" as *const u8 as *const libc::c_char,
                );
            }
            (*(*parser)._output).root = html_node___0;
            set_insertion_mode(parser, GUMBO_INSERTION_MODE_BEFORE_HEAD);
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
            return 1 as libc::c_int != 0;
        }
    };
}
unsafe extern "C" fn handle_before_head(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut node___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        ignore_token(parser);
        return 1 as libc::c_int != 0;
    } else {
        tmp___3 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HEAD);
        if tmp___3 {
            tmp___0 = insert_element_from_token(parser, token);
            node = tmp___0;
            set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_HEAD);
            (*(*parser)._parser_state)._head_element = node;
            return 1 as libc::c_int != 0;
        } else {
            if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
                tmp___2 = tag_in(
                    token as *const GumboToken,
                    0 as libc::c_int != 0,
                    1 as libc::c_int,
                    10 as libc::c_int,
                    0 as libc::c_int,
                    66 as libc::c_int,
                    150 as libc::c_int,
                );
                if !tmp___2 {
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                }
            }
            tmp___1 = insert_element_of_tag_type(
                parser,
                GUMBO_TAG_HEAD,
                GUMBO_INSERTION_IMPLIED,
            );
            node___0 = tmp___1;
            set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_HEAD);
            (*(*parser)._parser_state)._head_element = node___0;
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
            return 1 as libc::c_int != 0;
        }
    };
}
unsafe extern "C" fn handle_in_head(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut head: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___5: bool = false;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___6: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___10: bool = false;
    let mut tmp___11: bool = false;
    let mut tmp___12: bool = false;
    let mut tmp___13: bool = false;
    let mut tmp___14: bool = false;
    let mut tmp___15: bool = false;
    let mut tmp___16: bool = false;
    let mut tmp___17: bool = false;
    let mut tmp___18: bool = false;
    let mut tmp___19: bool = false;
    let mut tmp___20: bool = false;
    let mut tmp___21: bool = false;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else {
        tmp___21 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___21 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else {
            tmp___20 = tag_in(
                token as *const GumboToken,
                kStartTag,
                3 as libc::c_int,
                139 as libc::c_int,
                126 as libc::c_int,
                123 as libc::c_int,
                4 as libc::c_int,
                150 as libc::c_int,
            );
            if tmp___20 {
                insert_element_from_token(parser, token);
                pop_current_node(parser);
                acknowledge_self_closing_tag(parser);
                return 1 as libc::c_int != 0;
            } else {
                tmp___19 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_META);
                if tmp___19 {
                    insert_element_from_token(parser, token);
                    pop_current_node(parser);
                    acknowledge_self_closing_tag(parser);
                    return 1 as libc::c_int != 0;
                } else {
                    tmp___18 = tag_is(
                        token as *const GumboToken,
                        kStartTag,
                        GUMBO_TAG_TITLE,
                    );
                    if tmp___18 {
                        run_generic_parsing_algorithm(parser, token, GUMBO_LEX_RCDATA);
                        return 1 as libc::c_int != 0;
                    } else {
                        tmp___17 = tag_in(
                            token as *const GumboToken,
                            kStartTag,
                            130 as libc::c_int,
                            6 as libc::c_int,
                            150 as libc::c_int,
                        );
                        if tmp___17 {
                            run_generic_parsing_algorithm(
                                parser,
                                token,
                                GUMBO_LEX_RAWTEXT,
                            );
                            return 1 as libc::c_int != 0;
                        } else {
                            tmp___16 = tag_is(
                                token as *const GumboToken,
                                kStartTag,
                                GUMBO_TAG_NOSCRIPT,
                            );
                            if tmp___16 {
                                insert_element_from_token(parser, token);
                                set_insertion_mode(
                                    parser,
                                    GUMBO_INSERTION_MODE_IN_HEAD_NOSCRIPT,
                                );
                                return 1 as libc::c_int != 0;
                            } else {
                                tmp___15 = tag_is(
                                    token as *const GumboToken,
                                    kStartTag,
                                    GUMBO_TAG_SCRIPT,
                                );
                                if tmp___15 {
                                    run_generic_parsing_algorithm(
                                        parser,
                                        token,
                                        GUMBO_LEX_SCRIPT,
                                    );
                                    return 1 as libc::c_int != 0;
                                } else {
                                    tmp___14 = tag_is(
                                        token as *const GumboToken,
                                        kEndTag,
                                        GUMBO_TAG_HEAD,
                                    );
                                    if tmp___14 {
                                        tmp___1 = pop_current_node(parser);
                                        head = tmp___1;
                                        tmp___5 = node_tag_is(
                                            head as *const GumboNode,
                                            GUMBO_TAG_HEAD,
                                        );
                                        if !tmp___5 {
                                            __assert_fail(
                                                b"node_tag_is(head, GUMBO_TAG_HEAD)\0" as *const u8
                                                    as *const libc::c_char,
                                                b"deps/gumbo-parser/parser.c\0" as *const u8
                                                    as *const libc::c_char,
                                                2165 as libc::c_uint,
                                                b"handle_in_head\0" as *const u8 as *const libc::c_char,
                                            );
                                        }
                                        set_insertion_mode(parser, GUMBO_INSERTION_MODE_AFTER_HEAD);
                                        return 1 as libc::c_int != 0;
                                    } else {
                                        tmp___13 = tag_is(
                                            token as *const GumboToken,
                                            kStartTag,
                                            GUMBO_TAG_HEAD,
                                        );
                                        if tmp___13 {
                                            add_parse_error(parser, token as *const GumboToken);
                                            ignore_token(parser);
                                            return 0 as libc::c_int != 0;
                                        } else {
                                            tmp___11 = tag_is(
                                                token as *const GumboToken,
                                                kStartTag,
                                                GUMBO_TAG_HEAD,
                                            );
                                            if tmp___11 {
                                                add_parse_error(parser, token as *const GumboToken);
                                                return 0 as libc::c_int != 0;
                                            } else {
                                                if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
                                                    tmp___12 = tag_in(
                                                        token as *const GumboToken,
                                                        kEndTag,
                                                        10 as libc::c_int,
                                                        0 as libc::c_int,
                                                        66 as libc::c_int,
                                                        150 as libc::c_int,
                                                    );
                                                    if !tmp___12 {
                                                        add_parse_error(parser, token as *const GumboToken);
                                                        return 0 as libc::c_int != 0;
                                                    }
                                                }
                                                tmp___6 = pop_current_node(parser);
                                                node = tmp___6 as *const GumboNode;
                                                tmp___10 = node_tag_is(node, GUMBO_TAG_HEAD);
                                                if !tmp___10 {
                                                    __assert_fail(
                                                        b"node_tag_is(node, GUMBO_TAG_HEAD)\0" as *const u8
                                                            as *const libc::c_char,
                                                        b"deps/gumbo-parser/parser.c\0" as *const u8
                                                            as *const libc::c_char,
                                                        2180 as libc::c_uint,
                                                        b"handle_in_head\0" as *const u8 as *const libc::c_char,
                                                    );
                                                }
                                                set_insertion_mode(parser, GUMBO_INSERTION_MODE_AFTER_HEAD);
                                                (*(*parser)._parser_state)
                                                    ._reprocess_current_token = 1 as libc::c_int != 0;
                                                return 1 as libc::c_int != 0;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn handle_in_head_noscript(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut node___0: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___6: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___10: bool = false;
    let mut tmp___11: bool = false;
    let mut tmp___12: bool = false;
    let mut tmp___13: bool = false;
    let mut tmp___14: bool = false;
    let mut tmp___15: bool = false;
    if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        return 0 as libc::c_int != 0;
    } else {
        tmp___15 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___15 {
            tmp = handle_in_body(parser, token);
            return tmp;
        } else {
            tmp___14 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_NOSCRIPT);
            if tmp___14 {
                tmp___0 = pop_current_node(parser);
                node = tmp___0 as *const GumboNode;
                tmp___4 = node_tag_is(node, GUMBO_TAG_NOSCRIPT);
                if !tmp___4 {
                    __assert_fail(
                        b"node_tag_is(node, GUMBO_TAG_NOSCRIPT)\0" as *const u8
                            as *const libc::c_char,
                        b"deps/gumbo-parser/parser.c\0" as *const u8
                            as *const libc::c_char,
                        2199 as libc::c_uint,
                        b"handle_in_head_noscript\0" as *const u8 as *const libc::c_char,
                    );
                }
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_HEAD);
                return 1 as libc::c_int != 0;
            } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
                tmp___5 = handle_in_head(parser, token);
                return tmp___5;
            } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
                tmp___5 = handle_in_head(parser, token);
                return tmp___5;
            } else {
                tmp___13 = tag_in(
                    token as *const GumboToken,
                    kStartTag,
                    139 as libc::c_int,
                    126 as libc::c_int,
                    4 as libc::c_int,
                    5 as libc::c_int,
                    130 as libc::c_int,
                    6 as libc::c_int,
                    150 as libc::c_int,
                );
                if tmp___13 {
                    tmp___5 = handle_in_head(parser, token);
                    return tmp___5;
                } else {
                    tmp___11 = tag_in(
                        token as *const GumboToken,
                        kStartTag,
                        1 as libc::c_int,
                        8 as libc::c_int,
                        150 as libc::c_int,
                    );
                    if tmp___11 {
                        add_parse_error(parser, token as *const GumboToken);
                        ignore_token(parser);
                        return 0 as libc::c_int != 0;
                    } else {
                        if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
                            tmp___12 = tag_is(
                                token as *const GumboToken,
                                kEndTag,
                                GUMBO_TAG_BR,
                            );
                            if !tmp___12 {
                                add_parse_error(parser, token as *const GumboToken);
                                ignore_token(parser);
                                return 0 as libc::c_int != 0;
                            }
                        }
                        add_parse_error(parser, token as *const GumboToken);
                        tmp___6 = pop_current_node(parser);
                        node___0 = tmp___6 as *const GumboNode;
                        tmp___10 = node_tag_is(node___0, GUMBO_TAG_NOSCRIPT);
                        if !tmp___10 {
                            __assert_fail(
                                b"node_tag_is(node, GUMBO_TAG_NOSCRIPT)\0" as *const u8
                                    as *const libc::c_char,
                                b"deps/gumbo-parser/parser.c\0" as *const u8
                                    as *const libc::c_char,
                                2219 as libc::c_uint,
                                b"handle_in_head_noscript\0" as *const u8
                                    as *const libc::c_char,
                            );
                        }
                        set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_HEAD);
                        (*(*parser)._parser_state)
                            ._reprocess_current_token = 1 as libc::c_int != 0;
                        return 0 as libc::c_int != 0;
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn handle_after_head(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut result: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    state = (*parser)._parser_state;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else {
        tmp___8 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___8 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else {
            tmp___7 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_BODY);
            if tmp___7 {
                insert_element_from_token(parser, token);
                (*state)._frameset_ok = 0 as libc::c_int != 0;
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_BODY);
                return 1 as libc::c_int != 0;
            } else {
                tmp___6 = tag_is(
                    token as *const GumboToken,
                    kStartTag,
                    GUMBO_TAG_FRAMESET,
                );
                if tmp___6 {
                    insert_element_from_token(parser, token);
                    set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_FRAMESET);
                    return 1 as libc::c_int != 0;
                } else {
                    tmp___5 = tag_in(
                        token as *const GumboToken,
                        kStartTag,
                        3 as libc::c_int,
                        139 as libc::c_int,
                        126 as libc::c_int,
                        4 as libc::c_int,
                        5 as libc::c_int,
                        130 as libc::c_int,
                        7 as libc::c_int,
                        6 as libc::c_int,
                        2 as libc::c_int,
                        150 as libc::c_int,
                    );
                    if tmp___5 {
                        add_parse_error(parser, token as *const GumboToken);
                        if !((*state)._head_element as libc::c_ulong
                            != 0 as *mut libc::c_void as libc::c_ulong)
                        {
                            __assert_fail(
                                b"state->_head_element != NULL\0" as *const u8
                                    as *const libc::c_char,
                                b"deps/gumbo-parser/parser.c\0" as *const u8
                                    as *const libc::c_char,
                                2256 as libc::c_uint,
                                b"handle_after_head\0" as *const u8 as *const libc::c_char,
                            );
                        }
                        maybe_flush_text_node_buffer(parser);
                        gumbo_vector_add(
                            parser,
                            (*state)._head_element as *mut libc::c_void,
                            &mut (*state)._open_elements,
                        );
                        tmp___2 = handle_in_head(parser, token);
                        result = tmp___2;
                        gumbo_vector_remove(
                            parser,
                            (*state)._head_element as *mut libc::c_void,
                            &mut (*state)._open_elements,
                        );
                        return result;
                    } else {
                        tmp___3 = tag_is(
                            token as *const GumboToken,
                            kStartTag,
                            GUMBO_TAG_HEAD,
                        );
                        if tmp___3 {
                            add_parse_error(parser, token as *const GumboToken);
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        } else if (*token).type_0 as libc::c_uint == 2 as libc::c_uint {
                            tmp___4 = tag_in(
                                token as *const GumboToken,
                                kEndTag,
                                10 as libc::c_int,
                                0 as libc::c_int,
                                66 as libc::c_int,
                                150 as libc::c_int,
                            );
                            if tmp___4 {
                                insert_element_of_tag_type(
                                    parser,
                                    GUMBO_TAG_BODY,
                                    GUMBO_INSERTION_IMPLIED,
                                );
                                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_BODY);
                                (*state)._reprocess_current_token = 1 as libc::c_int != 0;
                                return 1 as libc::c_int != 0;
                            } else {
                                add_parse_error(parser, token as *const GumboToken);
                                ignore_token(parser);
                                return 0 as libc::c_int != 0;
                            }
                        } else {
                            insert_element_of_tag_type(
                                parser,
                                GUMBO_TAG_BODY,
                                GUMBO_INSERTION_IMPLIED,
                            );
                            set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_BODY);
                            (*state)._reprocess_current_token = 1 as libc::c_int != 0;
                            return 1 as libc::c_int != 0;
                        }
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn destroy_node(
    mut parser: *mut GumboParser,
    mut node: *mut GumboNode,
) {
    let mut doc: *mut GumboDocument = 0 as *mut GumboDocument;
    let mut i: libc::c_int = 0;
    let mut i___0: libc::c_int = 0;
    let mut i___1: libc::c_int = 0;
    match (*node).type_0 as libc::c_uint {
        0 => {
            doc = &mut (*node).v.document;
            i = 0 as libc::c_int;
            while (i as libc::c_uint) < (*doc).children.length {
                destroy_node(
                    parser,
                    *((*doc).children.data).offset(i as isize) as *mut GumboNode,
                );
                i += 1;
            }
            gumbo_parser_deallocate(parser, (*doc).children.data as *mut libc::c_void);
            gumbo_parser_deallocate(parser, (*doc).name as *mut libc::c_void);
            gumbo_parser_deallocate(
                parser,
                (*doc).public_identifier as *mut libc::c_void,
            );
            gumbo_parser_deallocate(
                parser,
                (*doc).system_identifier as *mut libc::c_void,
            );
        }
        1 => {
            i___0 = 0 as libc::c_int;
            while (i___0 as libc::c_uint) < (*node).v.element.attributes.length {
                gumbo_destroy_attribute(
                    parser,
                    *((*node).v.element.attributes.data).offset(i___0 as isize)
                        as *mut GumboAttribute,
                );
                i___0 += 1;
            }
            gumbo_parser_deallocate(
                parser,
                (*node).v.element.attributes.data as *mut libc::c_void,
            );
            i___1 = 0 as libc::c_int;
            while (i___1 as libc::c_uint) < (*node).v.element.children.length {
                destroy_node(
                    parser,
                    *((*node).v.element.children.data).offset(i___1 as isize)
                        as *mut GumboNode,
                );
                i___1 += 1;
            }
            gumbo_parser_deallocate(
                parser,
                (*node).v.element.children.data as *mut libc::c_void,
            );
        }
        5 | 4 | 3 | 2 => {
            gumbo_parser_deallocate(parser, (*node).v.text.text as *mut libc::c_void);
        }
        _ => {}
    }
    gumbo_parser_deallocate(parser, node as *mut libc::c_void);
}
unsafe extern "C" fn handle_in_body(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut body_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut i___0: libc::c_int = 0;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut success: bool = false;
    let mut i___1: libc::c_int = 0;
    let mut tmp___8: bool = false;
    let mut body: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___12: bool = false;
    let mut tmp___13: bool = false;
    let mut result: bool = false;
    let mut tmp___14: bool = false;
    let mut result___0: bool = false;
    let mut tmp___15: bool = false;
    let mut tmp___16: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___17: bool = false;
    let mut result___1: bool = false;
    let mut tmp___18: bool = false;
    let mut result___2: bool = false;
    let mut tmp___19: bool = false;
    let mut result___3: bool = false;
    let mut tmp___20: bool = false;
    let mut result___4: bool = false;
    let mut tmp___21: bool = false;
    let mut result___5: bool = false;
    let mut tmp___22: bool = false;
    let mut tmp___23: bool = false;
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___24: bool = false;
    let mut result___6: bool = false;
    let mut node___0: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___26: bool = false;
    let mut tmp___27: *mut GumboNode = 0 as *mut GumboNode;
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut index___0: libc::c_int = 0;
    let mut tmp___29: bool = false;
    let mut tmp___30: bool = false;
    let mut tmp___31: bool = false;
    let mut tmp___32: bool = false;
    let mut token_tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___34: bool = false;
    let mut tmp___35: bool = false;
    let mut current_node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___36: *mut GumboNode = 0 as *mut GumboNode;
    let mut success___0: bool = false;
    let mut tmp___37: bool = false;
    let mut tmp___38: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___39: bool = false;
    let mut tmp___40: bool = false;
    let mut success___1: bool = false;
    let mut last_a: libc::c_int = 0;
    let mut has_matching_a: libc::c_int = 0;
    let mut tmp___41: bool = false;
    let mut last_element: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___43: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___44: bool = false;
    let mut tmp___45: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___46: *mut GumboNode = 0 as *mut GumboNode;
    let mut result___7: bool = false;
    let mut tmp___47: bool = false;
    let mut tmp___48: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___49: bool = false;
    let mut token_tag___0: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___50: bool = false;
    let mut tmp___51: *mut GumboNode = 0 as *mut GumboNode;
    let mut success___2: bool = false;
    let mut tmp___52: bool = false;
    let mut node___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___53: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___54: bool = false;
    let mut tmp___55: bool = false;
    let mut result___8: bool = false;
    let mut tmp___56: bool = false;
    let mut token_attrs: *mut GumboVector = 0 as *mut GumboVector;
    let mut prompt_attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___57: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut action_attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___58: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut name_attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___59: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut form: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___60: *mut GumboNode = 0 as *mut GumboNode;
    let mut text_state: *mut TextNodeBufferState = 0 as *mut TextNodeBufferState;
    let mut prompt_attr_length: libc::c_int = 0;
    let mut tmp___61: size_t = 0;
    let mut prompt_text: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut input: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___62: *mut GumboNode = 0 as *mut GumboNode;
    let mut i___2: libc::c_int = 0;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut name: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___63: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut name_str: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut isindex_str: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut tmp___64: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___65: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut result___9: bool = false;
    let mut tmp___66: bool = false;
    let mut state___0: GumboInsertionMode = GUMBO_INSERTION_MODE_INITIAL;
    let mut tmp___67: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___68: bool = false;
    let mut success___3: bool = false;
    let mut tmp___69: bool = false;
    let mut tmp___70: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___71: bool = false;
    let mut end_tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___77: bool = false;
    let mut i___3: libc::c_int = 0;
    let mut node___2: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___78: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___79: bool = false;
    let mut tmp___80: bool = false;
    let mut tmp___81: bool = false;
    let mut tmp___82: bool = false;
    let mut tmp___83: bool = false;
    let mut tmp___84: bool = false;
    let mut tmp___85: bool = false;
    let mut tmp___86: bool = false;
    let mut tmp___87: bool = false;
    let mut tmp___88: bool = false;
    let mut tmp___89: bool = false;
    let mut tmp___90: bool = false;
    let mut tmp___91: bool = false;
    let mut tmp___92: bool = false;
    let mut tmp___93: bool = false;
    let mut tmp___94: bool = false;
    let mut tmp___95: bool = false;
    let mut tmp___96: bool = false;
    let mut tmp___97: bool = false;
    let mut tmp___98: bool = false;
    let mut tmp___99: bool = false;
    let mut tmp___100: bool = false;
    let mut tmp___101: bool = false;
    let mut tmp___102: bool = false;
    let mut tmp___103: bool = false;
    let mut tmp___104: bool = false;
    let mut tmp___105: bool = false;
    let mut tmp___106: bool = false;
    let mut tmp___107: bool = false;
    let mut tmp___108: bool = false;
    let mut tmp___109: bool = false;
    let mut tmp___110: bool = false;
    let mut tmp___111: bool = false;
    let mut tmp___112: bool = false;
    let mut tmp___113: bool = false;
    let mut tmp___114: bool = false;
    let mut tmp___115: bool = false;
    let mut tmp___116: bool = false;
    let mut tmp___117: bool = false;
    let mut tmp___118: bool = false;
    let mut tmp___119: bool = false;
    let mut tmp___120: bool = false;
    let mut tmp___121: bool = false;
    let mut tmp___122: bool = false;
    state = (*parser)._parser_state;
    if !((*state)._open_elements.length > 0 as libc::c_uint) {
        __assert_fail(
            b"state->_open_elements.length > 0\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            2316 as libc::c_uint,
            b"handle_in_body\0" as *const u8 as *const libc::c_char,
        );
    }
    if (*token).type_0 as libc::c_uint == 6 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        reconstruct_active_formatting_elements(parser);
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
        reconstruct_active_formatting_elements(parser);
        insert_text_token(parser, token);
        set_frameset_not_ok(parser);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp___0 = get_current_node(parser);
        append_comment_node(parser, tmp___0, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else {
        tmp___122 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___122 {
            if !((*(*parser)._output).root as libc::c_ulong
                != 0 as *mut libc::c_void as libc::c_ulong)
            {
                __assert_fail(
                    b"parser->_output->root != NULL\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    2338 as libc::c_uint,
                    b"handle_in_body\0" as *const u8 as *const libc::c_char,
                );
            }
            if !((*(*(*parser)._output).root).type_0 as libc::c_uint
                == 1 as libc::c_uint)
            {
                __assert_fail(
                    b"parser->_output->root->type == GUMBO_NODE_ELEMENT\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    2339 as libc::c_uint,
                    b"handle_in_body\0" as *const u8 as *const libc::c_char,
                );
            }
            add_parse_error(parser, token as *const GumboToken);
            merge_attributes(parser, token, (*(*parser)._output).root);
            return 0 as libc::c_int != 0;
        } else {
            tmp___121 = tag_in(
                token as *const GumboToken,
                kStartTag,
                3 as libc::c_int,
                139 as libc::c_int,
                126 as libc::c_int,
                123 as libc::c_int,
                4 as libc::c_int,
                5 as libc::c_int,
                130 as libc::c_int,
                7 as libc::c_int,
                6 as libc::c_int,
                2 as libc::c_int,
                150 as libc::c_int,
            );
            if tmp___121 {
                tmp___3 = handle_in_head(parser, token);
                return tmp___3;
            } else {
                tmp___120 = tag_is(
                    token as *const GumboToken,
                    kStartTag,
                    GUMBO_TAG_BODY,
                );
                if tmp___120 {
                    add_parse_error(parser, token as *const GumboToken);
                    if (*state)._open_elements.length < 2 as libc::c_uint {
                        ignore_token(parser);
                        return 0 as libc::c_int != 0;
                    } else {
                        tmp___4 = node_tag_is(
                            *((*state)._open_elements.data)
                                .offset(1 as libc::c_int as isize) as *const GumboNode,
                            GUMBO_TAG_BODY,
                        );
                        if !tmp___4 {
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        }
                    }
                    (*state)._frameset_ok = 0 as libc::c_int != 0;
                    merge_attributes(
                        parser,
                        token,
                        *((*state)._open_elements.data).offset(1 as libc::c_int as isize)
                            as *mut GumboNode,
                    );
                    return 0 as libc::c_int != 0;
                } else {
                    tmp___119 = tag_is(
                        token as *const GumboToken,
                        kStartTag,
                        GUMBO_TAG_FRAMESET,
                    );
                    if tmp___119 {
                        add_parse_error(parser, token as *const GumboToken);
                        if (*state)._open_elements.length < 2 as libc::c_uint {
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        } else {
                            tmp___5 = node_tag_is(
                                *((*state)._open_elements.data)
                                    .offset(1 as libc::c_int as isize) as *const GumboNode,
                                GUMBO_TAG_BODY,
                            );
                            if tmp___5 {
                                if !(*state)._frameset_ok {
                                    ignore_token(parser);
                                    return 0 as libc::c_int != 0;
                                }
                            } else {
                                ignore_token(parser);
                                return 0 as libc::c_int != 0;
                            }
                        }
                        body_node = *((*state)._open_elements.data)
                            .offset(1 as libc::c_int as isize) as *mut GumboNode;
                        loop {
                            node = pop_current_node(parser);
                            if !(node as libc::c_ulong
                                != *((*state)._open_elements.data)
                                    .offset(1 as libc::c_int as isize) as libc::c_ulong)
                            {
                                break;
                            }
                        }
                        children = &mut (*(*(*parser)._output).root).v.element.children;
                        i = 0 as libc::c_int;
                        while (i as libc::c_uint) < (*children).length {
                            if *((*children).data).offset(i as isize) as libc::c_ulong
                                == body_node as libc::c_ulong
                            {
                                gumbo_vector_remove_at(parser, i, children);
                                break;
                            } else {
                                i += 1;
                            }
                        }
                        destroy_node(parser, body_node);
                        insert_element_from_token(parser, token);
                        set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_FRAMESET);
                        return 1 as libc::c_int != 0;
                    } else if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
                        i___0 = 0 as libc::c_int;
                        while (i___0 as libc::c_uint) < (*state)._open_elements.length {
                            tmp___6 = node_tag_in(
                                *((*state)._open_elements.data).offset(i___0 as isize)
                                    as *const GumboNode,
                                34 as libc::c_int,
                                33 as libc::c_int,
                                31 as libc::c_int,
                                25 as libc::c_int,
                                99 as libc::c_int,
                                103 as libc::c_int,
                                101 as libc::c_int,
                                104 as libc::c_int,
                                100 as libc::c_int,
                                102 as libc::c_int,
                                10 as libc::c_int,
                                0 as libc::c_int,
                                150 as libc::c_int,
                            );
                            if !tmp___6 {
                                add_parse_error(parser, token as *const GumboToken);
                                return 0 as libc::c_int != 0;
                            }
                            i___0 += 1;
                        }
                        return 1 as libc::c_int != 0;
                    } else {
                        tmp___118 = tag_in(
                            token as *const GumboToken,
                            kEndTag,
                            10 as libc::c_int,
                            0 as libc::c_int,
                            150 as libc::c_int,
                        );
                        if tmp___118 {
                            tmp___7 = has_an_element_in_scope(parser, GUMBO_TAG_BODY);
                            if !tmp___7 {
                                add_parse_error(parser, token as *const GumboToken);
                                ignore_token(parser);
                                return 0 as libc::c_int != 0;
                            }
                            success = 1 as libc::c_int != 0;
                            i___1 = 0 as libc::c_int;
                            while (i___1 as libc::c_uint)
                                < (*state)._open_elements.length
                            {
                                tmp___8 = node_tag_in(
                                    *((*state)._open_elements.data).offset(i___1 as isize)
                                        as *const GumboNode,
                                    34 as libc::c_int,
                                    33 as libc::c_int,
                                    31 as libc::c_int,
                                    113 as libc::c_int,
                                    114 as libc::c_int,
                                    25 as libc::c_int,
                                    62 as libc::c_int,
                                    61 as libc::c_int,
                                    99 as libc::c_int,
                                    103 as libc::c_int,
                                    101 as libc::c_int,
                                    104 as libc::c_int,
                                    100 as libc::c_int,
                                    102 as libc::c_int,
                                    10 as libc::c_int,
                                    0 as libc::c_int,
                                    150 as libc::c_int,
                                );
                                if !tmp___8 {
                                    add_parse_error(parser, token as *const GumboToken);
                                    success = 0 as libc::c_int != 0;
                                    break;
                                } else {
                                    i___1 += 1;
                                }
                            }
                            set_insertion_mode(parser, GUMBO_INSERTION_MODE_AFTER_BODY);
                            tmp___13 = tag_is(
                                token as *const GumboToken,
                                kEndTag,
                                GUMBO_TAG_HTML,
                            );
                            if tmp___13 {
                                (*(*parser)._parser_state)
                                    ._reprocess_current_token = 1 as libc::c_int != 0;
                            } else {
                                body = *((*state)._open_elements.data)
                                    .offset(1 as libc::c_int as isize) as *mut GumboNode;
                                tmp___12 = node_tag_is(
                                    body as *const GumboNode,
                                    GUMBO_TAG_BODY,
                                );
                                if !tmp___12 {
                                    __assert_fail(
                                        b"node_tag_is(body, GUMBO_TAG_BODY)\0" as *const u8
                                            as *const libc::c_char,
                                        b"deps/gumbo-parser/parser.c\0" as *const u8
                                            as *const libc::c_char,
                                        2428 as libc::c_uint,
                                        b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                    );
                                }
                                record_end_of_element(
                                    (*state)._current_token,
                                    &mut (*body).v.element,
                                );
                            }
                            return success;
                        } else {
                            tmp___117 = tag_in(
                                token as *const GumboToken,
                                kStartTag,
                                24 as libc::c_int,
                                11 as libc::c_int,
                                14 as libc::c_int,
                                28 as libc::c_int,
                                142 as libc::c_int,
                                120 as libc::c_int,
                                127 as libc::c_int,
                                38 as libc::c_int,
                                32 as libc::c_int,
                                106 as libc::c_int,
                                36 as libc::c_int,
                                35 as libc::c_int,
                                23 as libc::c_int,
                                22 as libc::c_int,
                                21 as libc::c_int,
                                122 as libc::c_int,
                                13 as libc::c_int,
                                29 as libc::c_int,
                                25 as libc::c_int,
                                12 as libc::c_int,
                                121 as libc::c_int,
                                30 as libc::c_int,
                                150 as libc::c_int,
                            );
                            if tmp___117 {
                                tmp___14 = maybe_implicitly_close_p_tag(parser, token);
                                result = tmp___14;
                                insert_element_from_token(parser, token);
                                return result;
                            } else {
                                tmp___116 = tag_in(
                                    token as *const GumboToken,
                                    kStartTag,
                                    15 as libc::c_int,
                                    16 as libc::c_int,
                                    17 as libc::c_int,
                                    18 as libc::c_int,
                                    19 as libc::c_int,
                                    20 as libc::c_int,
                                    150 as libc::c_int,
                                );
                                if tmp___116 {
                                    tmp___15 = maybe_implicitly_close_p_tag(parser, token);
                                    result___0 = tmp___15;
                                    tmp___16 = get_current_node(parser);
                                    tmp___17 = node_tag_in(
                                        tmp___16 as *const GumboNode,
                                        15 as libc::c_int,
                                        16 as libc::c_int,
                                        17 as libc::c_int,
                                        18 as libc::c_int,
                                        19 as libc::c_int,
                                        20 as libc::c_int,
                                        150 as libc::c_int,
                                    );
                                    if tmp___17 {
                                        add_parse_error(parser, token as *const GumboToken);
                                        pop_current_node(parser);
                                        result___0 = 0 as libc::c_int != 0;
                                    }
                                    insert_element_from_token(parser, token);
                                    return result___0;
                                } else {
                                    tmp___115 = tag_in(
                                        token as *const GumboToken,
                                        kStartTag,
                                        27 as libc::c_int,
                                        132 as libc::c_int,
                                        150 as libc::c_int,
                                    );
                                    if tmp___115 {
                                        tmp___18 = maybe_implicitly_close_p_tag(parser, token);
                                        result___1 = tmp___18;
                                        insert_element_from_token(parser, token);
                                        (*state)._ignore_next_linefeed = 1 as libc::c_int != 0;
                                        (*state)._frameset_ok = 0 as libc::c_int != 0;
                                        return result___1;
                                    } else {
                                        tmp___114 = tag_is(
                                            token as *const GumboToken,
                                            kStartTag,
                                            GUMBO_TAG_FORM,
                                        );
                                        if tmp___114 {
                                            if (*state)._form_element as libc::c_ulong
                                                != 0 as *mut libc::c_void as libc::c_ulong
                                            {
                                                gumbo_debug(
                                                    b"Ignoring nested form.\n\0" as *const u8
                                                        as *const libc::c_char,
                                                );
                                                add_parse_error(parser, token as *const GumboToken);
                                                ignore_token(parser);
                                                return 0 as libc::c_int != 0;
                                            }
                                            tmp___19 = maybe_implicitly_close_p_tag(parser, token);
                                            result___2 = tmp___19;
                                            (*state)
                                                ._form_element = insert_element_from_token(parser, token);
                                            return result___2;
                                        } else {
                                            tmp___113 = tag_is(
                                                token as *const GumboToken,
                                                kStartTag,
                                                GUMBO_TAG_LI,
                                            );
                                            if tmp___113 {
                                                maybe_implicitly_close_list_tag(
                                                    parser,
                                                    token,
                                                    1 as libc::c_int != 0,
                                                );
                                                tmp___20 = maybe_implicitly_close_p_tag(parser, token);
                                                result___3 = tmp___20;
                                                insert_element_from_token(parser, token);
                                                return result___3;
                                            } else {
                                                tmp___112 = tag_in(
                                                    token as *const GumboToken,
                                                    kStartTag,
                                                    34 as libc::c_int,
                                                    33 as libc::c_int,
                                                    150 as libc::c_int,
                                                );
                                                if tmp___112 {
                                                    maybe_implicitly_close_list_tag(
                                                        parser,
                                                        token,
                                                        0 as libc::c_int != 0,
                                                    );
                                                    tmp___21 = maybe_implicitly_close_p_tag(parser, token);
                                                    result___4 = tmp___21;
                                                    insert_element_from_token(parser, token);
                                                    return result___4;
                                                } else {
                                                    tmp___111 = tag_is(
                                                        token as *const GumboToken,
                                                        kStartTag,
                                                        GUMBO_TAG_PLAINTEXT,
                                                    );
                                                    if tmp___111 {
                                                        tmp___22 = maybe_implicitly_close_p_tag(parser, token);
                                                        result___5 = tmp___22;
                                                        insert_element_from_token(parser, token);
                                                        gumbo_tokenizer_set_state(parser, GUMBO_LEX_PLAINTEXT);
                                                        return result___5;
                                                    } else {
                                                        tmp___110 = tag_is(
                                                            token as *const GumboToken,
                                                            kStartTag,
                                                            GUMBO_TAG_BUTTON,
                                                        );
                                                        if tmp___110 {
                                                            tmp___23 = has_an_element_in_scope(
                                                                parser,
                                                                GUMBO_TAG_BUTTON,
                                                            );
                                                            if tmp___23 {
                                                                add_parse_error(parser, token as *const GumboToken);
                                                                implicitly_close_tags(parser, token, GUMBO_TAG_BUTTON);
                                                                (*state)._reprocess_current_token = 1 as libc::c_int != 0;
                                                                return 0 as libc::c_int != 0;
                                                            }
                                                            reconstruct_active_formatting_elements(parser);
                                                            insert_element_from_token(parser, token);
                                                            (*state)._frameset_ok = 0 as libc::c_int != 0;
                                                            return 1 as libc::c_int != 0;
                                                        } else {
                                                            tmp___109 = tag_in(
                                                                token as *const GumboToken,
                                                                kEndTag,
                                                                24 as libc::c_int,
                                                                11 as libc::c_int,
                                                                14 as libc::c_int,
                                                                28 as libc::c_int,
                                                                110 as libc::c_int,
                                                                142 as libc::c_int,
                                                                120 as libc::c_int,
                                                                127 as libc::c_int,
                                                                38 as libc::c_int,
                                                                32 as libc::c_int,
                                                                106 as libc::c_int,
                                                                36 as libc::c_int,
                                                                35 as libc::c_int,
                                                                23 as libc::c_int,
                                                                22 as libc::c_int,
                                                                21 as libc::c_int,
                                                                132 as libc::c_int,
                                                                122 as libc::c_int,
                                                                13 as libc::c_int,
                                                                29 as libc::c_int,
                                                                27 as libc::c_int,
                                                                12 as libc::c_int,
                                                                121 as libc::c_int,
                                                                30 as libc::c_int,
                                                                150 as libc::c_int,
                                                            );
                                                            if tmp___109 {
                                                                tag = (*token).v.end_tag;
                                                                tmp___24 = has_an_element_in_scope(parser, tag);
                                                                if !tmp___24 {
                                                                    add_parse_error(parser, token as *const GumboToken);
                                                                    ignore_token(parser);
                                                                    return 0 as libc::c_int != 0;
                                                                }
                                                                implicitly_close_tags(parser, token, (*token).v.end_tag);
                                                                return 1 as libc::c_int != 0;
                                                            } else {
                                                                tmp___108 = tag_is(
                                                                    token as *const GumboToken,
                                                                    kEndTag,
                                                                    GUMBO_TAG_FORM,
                                                                );
                                                                if tmp___108 {
                                                                    result___6 = 1 as libc::c_int != 0;
                                                                    node___0 = (*state)._form_element as *const GumboNode;
                                                                    if !node___0.is_null() {
                                                                        if !((*node___0).type_0 as libc::c_uint
                                                                            == 1 as libc::c_uint)
                                                                        {
                                                                            __assert_fail(
                                                                                b"!node || node->type == GUMBO_NODE_ELEMENT\0" as *const u8
                                                                                    as *const libc::c_char,
                                                                                b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                    as *const libc::c_char,
                                                                                2520 as libc::c_uint,
                                                                                b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                            );
                                                                        }
                                                                    }
                                                                    (*state)
                                                                        ._form_element = 0 as *mut libc::c_void as *mut GumboNode;
                                                                    if node___0.is_null() {
                                                                        gumbo_debug(
                                                                            b"Closing an unopened form.\n\0" as *const u8
                                                                                as *const libc::c_char,
                                                                        );
                                                                        add_parse_error(parser, token as *const GumboToken);
                                                                        ignore_token(parser);
                                                                        return 0 as libc::c_int != 0;
                                                                    } else {
                                                                        tmp___26 = has_node_in_scope(parser, node___0);
                                                                        if !tmp___26 {
                                                                            gumbo_debug(
                                                                                b"Closing an unopened form.\n\0" as *const u8
                                                                                    as *const libc::c_char,
                                                                            );
                                                                            add_parse_error(parser, token as *const GumboToken);
                                                                            ignore_token(parser);
                                                                            return 0 as libc::c_int != 0;
                                                                        }
                                                                    }
                                                                    generate_implied_end_tags(parser, GUMBO_TAG_LAST);
                                                                    tmp___27 = get_current_node(parser);
                                                                    if tmp___27 as libc::c_ulong != node___0 as libc::c_ulong {
                                                                        add_parse_error(parser, token as *const GumboToken);
                                                                        result___6 = 0 as libc::c_int != 0;
                                                                    }
                                                                    open_elements = &mut (*state)._open_elements;
                                                                    index___0 = ((*open_elements).length)
                                                                        .wrapping_sub(1 as libc::c_uint) as libc::c_int;
                                                                    while index___0 >= 0 as libc::c_int {
                                                                        if !(*((*open_elements).data).offset(index___0 as isize)
                                                                            as libc::c_ulong != node___0 as libc::c_ulong)
                                                                        {
                                                                            break;
                                                                        }
                                                                        index___0 -= 1;
                                                                    }
                                                                    if !(index___0 >= 0 as libc::c_int) {
                                                                        __assert_fail(
                                                                            b"index >= 0\0" as *const u8 as *const libc::c_char,
                                                                            b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                as *const libc::c_char,
                                                                            2539 as libc::c_uint,
                                                                            b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                        );
                                                                    }
                                                                    gumbo_vector_remove_at(parser, index___0, open_elements);
                                                                    return result___6;
                                                                } else {
                                                                    tmp___107 = tag_is(
                                                                        token as *const GumboToken,
                                                                        kEndTag,
                                                                        GUMBO_TAG_P,
                                                                    );
                                                                    if tmp___107 {
                                                                        tmp___29 = has_an_element_in_button_scope(
                                                                            parser,
                                                                            GUMBO_TAG_P,
                                                                        );
                                                                        if !tmp___29 {
                                                                            add_parse_error(parser, token as *const GumboToken);
                                                                            reconstruct_active_formatting_elements(parser);
                                                                            insert_element_of_tag_type(
                                                                                parser,
                                                                                GUMBO_TAG_P,
                                                                                GUMBO_INSERTION_CONVERTED_FROM_END_TAG,
                                                                            );
                                                                            (*state)._reprocess_current_token = 1 as libc::c_int != 0;
                                                                            return 0 as libc::c_int != 0;
                                                                        }
                                                                        tmp___30 = implicitly_close_tags(
                                                                            parser,
                                                                            token,
                                                                            GUMBO_TAG_P,
                                                                        );
                                                                        return tmp___30;
                                                                    } else {
                                                                        tmp___106 = tag_is(
                                                                            token as *const GumboToken,
                                                                            kEndTag,
                                                                            GUMBO_TAG_LI,
                                                                        );
                                                                        if tmp___106 {
                                                                            tmp___31 = has_an_element_in_list_scope(
                                                                                parser,
                                                                                GUMBO_TAG_LI,
                                                                            );
                                                                            if !tmp___31 {
                                                                                add_parse_error(parser, token as *const GumboToken);
                                                                                ignore_token(parser);
                                                                                return 0 as libc::c_int != 0;
                                                                            }
                                                                            tmp___32 = implicitly_close_tags(
                                                                                parser,
                                                                                token,
                                                                                GUMBO_TAG_LI,
                                                                            );
                                                                            return tmp___32;
                                                                        } else {
                                                                            tmp___105 = tag_in(
                                                                                token as *const GumboToken,
                                                                                kEndTag,
                                                                                34 as libc::c_int,
                                                                                33 as libc::c_int,
                                                                                150 as libc::c_int,
                                                                            );
                                                                            if tmp___105 {
                                                                                if !((*token).type_0 as libc::c_uint == 2 as libc::c_uint) {
                                                                                    __assert_fail(
                                                                                        b"token->type == GUMBO_TOKEN_END_TAG\0" as *const u8
                                                                                            as *const libc::c_char,
                                                                                        b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                            as *const libc::c_char,
                                                                                        2561 as libc::c_uint,
                                                                                        b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                                    );
                                                                                }
                                                                                token_tag = (*token).v.end_tag;
                                                                                tmp___34 = has_an_element_in_scope(parser, token_tag);
                                                                                if !tmp___34 {
                                                                                    add_parse_error(parser, token as *const GumboToken);
                                                                                    ignore_token(parser);
                                                                                    return 0 as libc::c_int != 0;
                                                                                }
                                                                                tmp___35 = implicitly_close_tags(parser, token, token_tag);
                                                                                return tmp___35;
                                                                            } else {
                                                                                tmp___104 = tag_in(
                                                                                    token as *const GumboToken,
                                                                                    kEndTag,
                                                                                    15 as libc::c_int,
                                                                                    16 as libc::c_int,
                                                                                    17 as libc::c_int,
                                                                                    18 as libc::c_int,
                                                                                    19 as libc::c_int,
                                                                                    20 as libc::c_int,
                                                                                    150 as libc::c_int,
                                                                                );
                                                                                if tmp___104 {
                                                                                    tmp___40 = has_an_element_in_scope_with_tagname(
                                                                                        parser,
                                                                                        15 as libc::c_int,
                                                                                        16 as libc::c_int,
                                                                                        17 as libc::c_int,
                                                                                        18 as libc::c_int,
                                                                                        19 as libc::c_int,
                                                                                        20 as libc::c_int,
                                                                                        150 as libc::c_int,
                                                                                    );
                                                                                    if tmp___40 {
                                                                                        generate_implied_end_tags(parser, GUMBO_TAG_LAST);
                                                                                        tmp___36 = get_current_node(parser);
                                                                                        current_node = tmp___36 as *const GumboNode;
                                                                                        tmp___37 = node_tag_is(current_node, (*token).v.end_tag);
                                                                                        success___0 = tmp___37;
                                                                                        if !success___0 {
                                                                                            add_parse_error(parser, token as *const GumboToken);
                                                                                        }
                                                                                        loop {
                                                                                            tmp___38 = pop_current_node(parser);
                                                                                            current_node = tmp___38 as *const GumboNode;
                                                                                            tmp___39 = node_tag_in(
                                                                                                current_node,
                                                                                                15 as libc::c_int,
                                                                                                16 as libc::c_int,
                                                                                                17 as libc::c_int,
                                                                                                18 as libc::c_int,
                                                                                                19 as libc::c_int,
                                                                                                20 as libc::c_int,
                                                                                                150 as libc::c_int,
                                                                                            );
                                                                                            if tmp___39 {
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        return success___0;
                                                                                    } else {
                                                                                        add_parse_error(parser, token as *const GumboToken);
                                                                                        ignore_token(parser);
                                                                                        return 0 as libc::c_int != 0;
                                                                                    }
                                                                                } else {
                                                                                    tmp___103 = tag_is(
                                                                                        token as *const GumboToken,
                                                                                        kStartTag,
                                                                                        GUMBO_TAG_A,
                                                                                    );
                                                                                    if tmp___103 {
                                                                                        success___1 = 1 as libc::c_int != 0;
                                                                                        tmp___41 = find_last_anchor_index(parser, &mut last_a);
                                                                                        has_matching_a = tmp___41 as libc::c_int;
                                                                                        if has_matching_a != 0 {
                                                                                            if !(has_matching_a == 1 as libc::c_int) {
                                                                                                __assert_fail(
                                                                                                    b"has_matching_a == 1\0" as *const u8
                                                                                                        as *const libc::c_char,
                                                                                                    b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                                        as *const libc::c_char,
                                                                                                    2601 as libc::c_uint,
                                                                                                    b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                                                );
                                                                                            }
                                                                                            add_parse_error(parser, token as *const GumboToken);
                                                                                            adoption_agency_algorithm(parser, token, GUMBO_TAG_A);
                                                                                            tmp___44 = find_last_anchor_index(parser, &mut last_a);
                                                                                            if tmp___44 {
                                                                                                tmp___43 = gumbo_vector_remove_at(
                                                                                                    parser,
                                                                                                    last_a,
                                                                                                    &mut (*state)._active_formatting_elements,
                                                                                                );
                                                                                                last_element = tmp___43;
                                                                                                gumbo_vector_remove(
                                                                                                    parser,
                                                                                                    last_element,
                                                                                                    &mut (*state)._open_elements,
                                                                                                );
                                                                                            }
                                                                                            success___1 = 0 as libc::c_int != 0;
                                                                                        }
                                                                                        reconstruct_active_formatting_elements(parser);
                                                                                        tmp___45 = insert_element_from_token(parser, token);
                                                                                        add_formatting_element(
                                                                                            parser,
                                                                                            tmp___45 as *const GumboNode,
                                                                                        );
                                                                                        return success___1;
                                                                                    } else {
                                                                                        tmp___102 = tag_in(
                                                                                            token as *const GumboToken,
                                                                                            kStartTag,
                                                                                            57 as libc::c_int,
                                                                                            140 as libc::c_int,
                                                                                            50 as libc::c_int,
                                                                                            40 as libc::c_int,
                                                                                            143 as libc::c_int,
                                                                                            56 as libc::c_int,
                                                                                            43 as libc::c_int,
                                                                                            42 as libc::c_int,
                                                                                            138 as libc::c_int,
                                                                                            41 as libc::c_int,
                                                                                            148 as libc::c_int,
                                                                                            58 as libc::c_int,
                                                                                            150 as libc::c_int,
                                                                                        );
                                                                                        if tmp___102 {
                                                                                            reconstruct_active_formatting_elements(parser);
                                                                                            tmp___46 = insert_element_from_token(parser, token);
                                                                                            add_formatting_element(
                                                                                                parser,
                                                                                                tmp___46 as *const GumboNode,
                                                                                            );
                                                                                            return 1 as libc::c_int != 0;
                                                                                        } else {
                                                                                            tmp___101 = tag_is(
                                                                                                token as *const GumboToken,
                                                                                                kStartTag,
                                                                                                GUMBO_TAG_NOBR,
                                                                                            );
                                                                                            if tmp___101 {
                                                                                                result___7 = 1 as libc::c_int != 0;
                                                                                                reconstruct_active_formatting_elements(parser);
                                                                                                tmp___47 = has_an_element_in_scope(parser, GUMBO_TAG_NOBR);
                                                                                                if tmp___47 {
                                                                                                    result___7 = 0 as libc::c_int != 0;
                                                                                                    add_parse_error(parser, token as *const GumboToken);
                                                                                                    adoption_agency_algorithm(parser, token, GUMBO_TAG_NOBR);
                                                                                                    reconstruct_active_formatting_elements(parser);
                                                                                                }
                                                                                                insert_element_from_token(parser, token);
                                                                                                tmp___48 = get_current_node(parser);
                                                                                                add_formatting_element(
                                                                                                    parser,
                                                                                                    tmp___48 as *const GumboNode,
                                                                                                );
                                                                                                return result___7;
                                                                                            } else {
                                                                                                tmp___100 = tag_in(
                                                                                                    token as *const GumboToken,
                                                                                                    kEndTag,
                                                                                                    39 as libc::c_int,
                                                                                                    57 as libc::c_int,
                                                                                                    140 as libc::c_int,
                                                                                                    50 as libc::c_int,
                                                                                                    40 as libc::c_int,
                                                                                                    143 as libc::c_int,
                                                                                                    56 as libc::c_int,
                                                                                                    146 as libc::c_int,
                                                                                                    43 as libc::c_int,
                                                                                                    42 as libc::c_int,
                                                                                                    138 as libc::c_int,
                                                                                                    41 as libc::c_int,
                                                                                                    148 as libc::c_int,
                                                                                                    58 as libc::c_int,
                                                                                                    150 as libc::c_int,
                                                                                                );
                                                                                                if tmp___100 {
                                                                                                    tmp___49 = adoption_agency_algorithm(
                                                                                                        parser,
                                                                                                        token,
                                                                                                        (*token).v.end_tag,
                                                                                                    );
                                                                                                    return tmp___49;
                                                                                                } else {
                                                                                                    tmp___99 = tag_in(
                                                                                                        token as *const GumboToken,
                                                                                                        kStartTag,
                                                                                                        124 as libc::c_int,
                                                                                                        144 as libc::c_int,
                                                                                                        74 as libc::c_int,
                                                                                                        150 as libc::c_int,
                                                                                                    );
                                                                                                    if tmp___99 {
                                                                                                        reconstruct_active_formatting_elements(parser);
                                                                                                        insert_element_from_token(parser, token);
                                                                                                        add_formatting_element(
                                                                                                            parser,
                                                                                                            &kActiveFormattingScopeMarker,
                                                                                                        );
                                                                                                        set_frameset_not_ok(parser);
                                                                                                        return 1 as libc::c_int != 0;
                                                                                                    } else {
                                                                                                        tmp___98 = tag_in(
                                                                                                            token as *const GumboToken,
                                                                                                            kEndTag,
                                                                                                            124 as libc::c_int,
                                                                                                            144 as libc::c_int,
                                                                                                            74 as libc::c_int,
                                                                                                            150 as libc::c_int,
                                                                                                        );
                                                                                                        if tmp___98 {
                                                                                                            token_tag___0 = (*token).v.end_tag;
                                                                                                            tmp___50 = has_an_element_in_table_scope(
                                                                                                                parser,
                                                                                                                token_tag___0,
                                                                                                            );
                                                                                                            if !tmp___50 {
                                                                                                                add_parse_error(parser, token as *const GumboToken);
                                                                                                                ignore_token(parser);
                                                                                                                return 0 as libc::c_int != 0;
                                                                                                            }
                                                                                                            implicitly_close_tags(parser, token, token_tag___0);
                                                                                                            clear_active_formatting_elements(parser);
                                                                                                            return 1 as libc::c_int != 0;
                                                                                                        } else {
                                                                                                            tmp___97 = tag_is(
                                                                                                                token as *const GumboToken,
                                                                                                                kStartTag,
                                                                                                                GUMBO_TAG_TABLE,
                                                                                                            );
                                                                                                            if tmp___97 {
                                                                                                                tmp___51 = get_document_node(parser);
                                                                                                                if (*tmp___51).v.document.doc_type_quirks_mode
                                                                                                                    as libc::c_uint != 1 as libc::c_uint
                                                                                                                {
                                                                                                                    maybe_implicitly_close_p_tag(parser, token);
                                                                                                                }
                                                                                                                insert_element_from_token(parser, token);
                                                                                                                set_frameset_not_ok(parser);
                                                                                                                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE);
                                                                                                                return 1 as libc::c_int != 0;
                                                                                                            } else {
                                                                                                                tmp___96 = tag_in(
                                                                                                                    token as *const GumboToken,
                                                                                                                    kStartTag,
                                                                                                                    82 as libc::c_int,
                                                                                                                    66 as libc::c_int,
                                                                                                                    73 as libc::c_int,
                                                                                                                    71 as libc::c_int,
                                                                                                                    70 as libc::c_int,
                                                                                                                    116 as libc::c_int,
                                                                                                                    67 as libc::c_int,
                                                                                                                    150 as libc::c_int,
                                                                                                                );
                                                                                                                if tmp___96 {
                                                                                                                    success___2 = 1 as libc::c_int != 0;
                                                                                                                    tmp___52 = tag_is(
                                                                                                                        token as *const GumboToken,
                                                                                                                        kStartTag,
                                                                                                                        GUMBO_TAG_IMAGE,
                                                                                                                    );
                                                                                                                    if tmp___52 {
                                                                                                                        success___2 = 0 as libc::c_int != 0;
                                                                                                                        add_parse_error(parser, token as *const GumboToken);
                                                                                                                        (*token).v.start_tag.tag = GUMBO_TAG_IMG;
                                                                                                                    }
                                                                                                                    reconstruct_active_formatting_elements(parser);
                                                                                                                    tmp___53 = insert_element_from_token(parser, token);
                                                                                                                    node___1 = tmp___53;
                                                                                                                    tmp___54 = tag_is(
                                                                                                                        token as *const GumboToken,
                                                                                                                        kStartTag,
                                                                                                                        GUMBO_TAG_IMAGE,
                                                                                                                    );
                                                                                                                    if tmp___54 {
                                                                                                                        success___2 = 0 as libc::c_int != 0;
                                                                                                                        add_parse_error(parser, token as *const GumboToken);
                                                                                                                        (*node___1).v.element.tag = GUMBO_TAG_IMG;
                                                                                                                        (*node___1)
                                                                                                                            .parse_flags = ((*node___1).parse_flags as libc::c_uint
                                                                                                                            | 64 as libc::c_uint) as GumboParseFlags;
                                                                                                                    }
                                                                                                                    pop_current_node(parser);
                                                                                                                    acknowledge_self_closing_tag(parser);
                                                                                                                    set_frameset_not_ok(parser);
                                                                                                                    return success___2;
                                                                                                                } else {
                                                                                                                    tmp___95 = tag_is(
                                                                                                                        token as *const GumboToken,
                                                                                                                        kStartTag,
                                                                                                                        GUMBO_TAG_INPUT,
                                                                                                                    );
                                                                                                                    if tmp___95 {
                                                                                                                        tmp___55 = attribute_matches(
                                                                                                                            &mut (*token).v.start_tag.attributes as *mut GumboVector
                                                                                                                                as *const GumboVector,
                                                                                                                            b"type\0" as *const u8 as *const libc::c_char,
                                                                                                                            b"hidden\0" as *const u8 as *const libc::c_char,
                                                                                                                        );
                                                                                                                        if !tmp___55 {
                                                                                                                            set_frameset_not_ok(parser);
                                                                                                                        }
                                                                                                                        reconstruct_active_formatting_elements(parser);
                                                                                                                        insert_element_from_token(parser, token);
                                                                                                                        pop_current_node(parser);
                                                                                                                        acknowledge_self_closing_tag(parser);
                                                                                                                        return 1 as libc::c_int != 0;
                                                                                                                    } else {
                                                                                                                        tmp___94 = tag_in(
                                                                                                                            token as *const GumboToken,
                                                                                                                            kStartTag,
                                                                                                                            75 as libc::c_int,
                                                                                                                            78 as libc::c_int,
                                                                                                                            79 as libc::c_int,
                                                                                                                            150 as libc::c_int,
                                                                                                                        );
                                                                                                                        if tmp___94 {
                                                                                                                            insert_element_from_token(parser, token);
                                                                                                                            pop_current_node(parser);
                                                                                                                            acknowledge_self_closing_tag(parser);
                                                                                                                            return 1 as libc::c_int != 0;
                                                                                                                        } else {
                                                                                                                            tmp___93 = tag_is(
                                                                                                                                token as *const GumboToken,
                                                                                                                                kStartTag,
                                                                                                                                GUMBO_TAG_HR,
                                                                                                                            );
                                                                                                                            if tmp___93 {
                                                                                                                                tmp___56 = maybe_implicitly_close_p_tag(parser, token);
                                                                                                                                result___8 = tmp___56;
                                                                                                                                insert_element_from_token(parser, token);
                                                                                                                                pop_current_node(parser);
                                                                                                                                acknowledge_self_closing_tag(parser);
                                                                                                                                set_frameset_not_ok(parser);
                                                                                                                                return result___8;
                                                                                                                            } else {
                                                                                                                                tmp___92 = tag_is(
                                                                                                                                    token as *const GumboToken,
                                                                                                                                    kStartTag,
                                                                                                                                    GUMBO_TAG_ISINDEX,
                                                                                                                                );
                                                                                                                                if tmp___92 {
                                                                                                                                    add_parse_error(parser, token as *const GumboToken);
                                                                                                                                    if (*(*parser)._parser_state)._form_element as libc::c_ulong
                                                                                                                                        != 0 as *mut libc::c_void as libc::c_ulong
                                                                                                                                    {
                                                                                                                                        ignore_token(parser);
                                                                                                                                        return 0 as libc::c_int != 0;
                                                                                                                                    }
                                                                                                                                    acknowledge_self_closing_tag(parser);
                                                                                                                                    maybe_implicitly_close_p_tag(parser, token);
                                                                                                                                    set_frameset_not_ok(parser);
                                                                                                                                    token_attrs = &mut (*token).v.start_tag.attributes;
                                                                                                                                    tmp___57 = gumbo_get_attribute(
                                                                                                                                        token_attrs as *const GumboVector,
                                                                                                                                        b"prompt\0" as *const u8 as *const libc::c_char,
                                                                                                                                    );
                                                                                                                                    prompt_attr = tmp___57;
                                                                                                                                    tmp___58 = gumbo_get_attribute(
                                                                                                                                        token_attrs as *const GumboVector,
                                                                                                                                        b"action\0" as *const u8 as *const libc::c_char,
                                                                                                                                    );
                                                                                                                                    action_attr = tmp___58;
                                                                                                                                    tmp___59 = gumbo_get_attribute(
                                                                                                                                        token_attrs as *const GumboVector,
                                                                                                                                        b"isindex\0" as *const u8 as *const libc::c_char,
                                                                                                                                    );
                                                                                                                                    name_attr = tmp___59;
                                                                                                                                    tmp___60 = insert_element_of_tag_type(
                                                                                                                                        parser,
                                                                                                                                        GUMBO_TAG_FORM,
                                                                                                                                        GUMBO_INSERTION_FROM_ISINDEX,
                                                                                                                                    );
                                                                                                                                    form = tmp___60;
                                                                                                                                    if !action_attr.is_null() {
                                                                                                                                        gumbo_vector_add(
                                                                                                                                            parser,
                                                                                                                                            action_attr as *mut libc::c_void,
                                                                                                                                            &mut (*form).v.element.attributes,
                                                                                                                                        );
                                                                                                                                    }
                                                                                                                                    insert_element_of_tag_type(
                                                                                                                                        parser,
                                                                                                                                        GUMBO_TAG_HR,
                                                                                                                                        GUMBO_INSERTION_FROM_ISINDEX,
                                                                                                                                    );
                                                                                                                                    pop_current_node(parser);
                                                                                                                                    insert_element_of_tag_type(
                                                                                                                                        parser,
                                                                                                                                        GUMBO_TAG_LABEL,
                                                                                                                                        GUMBO_INSERTION_FROM_ISINDEX,
                                                                                                                                    );
                                                                                                                                    text_state = &mut (*(*parser)._parser_state)._text_node;
                                                                                                                                    (*text_state)
                                                                                                                                        ._start_original_text = (*token).original_text.data;
                                                                                                                                    (*text_state)._start_position = (*token).position;
                                                                                                                                    (*text_state)._type = GUMBO_NODE_TEXT;
                                                                                                                                    if !prompt_attr.is_null() {
                                                                                                                                        tmp___61 = strlen((*prompt_attr).value);
                                                                                                                                        prompt_attr_length = tmp___61 as libc::c_int;
                                                                                                                                        gumbo_string_buffer_destroy(
                                                                                                                                            parser,
                                                                                                                                            &mut (*text_state)._buffer,
                                                                                                                                        );
                                                                                                                                        (*text_state)
                                                                                                                                            ._buffer
                                                                                                                                            .data = gumbo_copy_stringz(parser, (*prompt_attr).value);
                                                                                                                                        (*text_state)._buffer.length = prompt_attr_length as size_t;
                                                                                                                                        (*text_state)
                                                                                                                                            ._buffer
                                                                                                                                            .capacity = (prompt_attr_length + 1 as libc::c_int)
                                                                                                                                            as size_t;
                                                                                                                                        gumbo_destroy_attribute(parser, prompt_attr);
                                                                                                                                    } else {
                                                                                                                                        prompt_text
                                                                                                                                            .data = b"This is a searchable index. Enter search keywords: \0"
                                                                                                                                            as *const u8 as *const libc::c_char;
                                                                                                                                        prompt_text
                                                                                                                                            .length = (::std::mem::size_of::<[libc::c_char; 52]>()
                                                                                                                                            as libc::c_ulong)
                                                                                                                                            .wrapping_sub(1 as libc::c_ulong);
                                                                                                                                        gumbo_string_buffer_append_string(
                                                                                                                                            parser,
                                                                                                                                            &mut prompt_text,
                                                                                                                                            &mut (*text_state)._buffer,
                                                                                                                                        );
                                                                                                                                    }
                                                                                                                                    tmp___62 = insert_element_of_tag_type(
                                                                                                                                        parser,
                                                                                                                                        GUMBO_TAG_INPUT,
                                                                                                                                        GUMBO_INSERTION_FROM_ISINDEX,
                                                                                                                                    );
                                                                                                                                    input = tmp___62;
                                                                                                                                    i___2 = 0 as libc::c_int;
                                                                                                                                    while (i___2 as libc::c_uint) < (*token_attrs).length {
                                                                                                                                        attr = *((*token_attrs).data).offset(i___2 as isize)
                                                                                                                                            as *mut GumboAttribute;
                                                                                                                                        if attr as libc::c_ulong != prompt_attr as libc::c_ulong {
                                                                                                                                            if attr as libc::c_ulong != action_attr as libc::c_ulong {
                                                                                                                                                if attr as libc::c_ulong != name_attr as libc::c_ulong {
                                                                                                                                                    gumbo_vector_add(
                                                                                                                                                        parser,
                                                                                                                                                        attr as *mut libc::c_void,
                                                                                                                                                        &mut (*input).v.element.attributes,
                                                                                                                                                    );
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        let ref mut fresh30 = *((*token_attrs).data)
                                                                                                                                            .offset(i___2 as isize);
                                                                                                                                        *fresh30 = 0 as *mut libc::c_void;
                                                                                                                                        i___2 += 1;
                                                                                                                                    }
                                                                                                                                    ignore_token(parser);
                                                                                                                                    tmp___63 = gumbo_parser_allocate(
                                                                                                                                        parser,
                                                                                                                                        ::std::mem::size_of::<GumboAttribute>() as libc::c_ulong,
                                                                                                                                    );
                                                                                                                                    name = tmp___63 as *mut GumboAttribute;
                                                                                                                                    name_str
                                                                                                                                        .data = b"name\0" as *const u8 as *const libc::c_char;
                                                                                                                                    name_str
                                                                                                                                        .length = (::std::mem::size_of::<[libc::c_char; 5]>()
                                                                                                                                        as libc::c_ulong)
                                                                                                                                        .wrapping_sub(1 as libc::c_ulong);
                                                                                                                                    isindex_str
                                                                                                                                        .data = b"isindex\0" as *const u8 as *const libc::c_char;
                                                                                                                                    isindex_str
                                                                                                                                        .length = (::std::mem::size_of::<[libc::c_char; 8]>()
                                                                                                                                        as libc::c_ulong)
                                                                                                                                        .wrapping_sub(1 as libc::c_ulong);
                                                                                                                                    (*name).attr_namespace = GUMBO_ATTR_NAMESPACE_NONE;
                                                                                                                                    tmp___64 = gumbo_copy_stringz(
                                                                                                                                        parser,
                                                                                                                                        b"name\0" as *const u8 as *const libc::c_char,
                                                                                                                                    );
                                                                                                                                    (*name).name = tmp___64 as *const libc::c_char;
                                                                                                                                    tmp___65 = gumbo_copy_stringz(
                                                                                                                                        parser,
                                                                                                                                        b"isindex\0" as *const u8 as *const libc::c_char,
                                                                                                                                    );
                                                                                                                                    (*name).value = tmp___65 as *const libc::c_char;
                                                                                                                                    (*name).original_name = name_str;
                                                                                                                                    (*name).original_value = isindex_str;
                                                                                                                                    (*name).name_start = kGumboEmptySourcePosition;
                                                                                                                                    (*name).name_end = kGumboEmptySourcePosition;
                                                                                                                                    (*name).value_start = kGumboEmptySourcePosition;
                                                                                                                                    (*name).value_end = kGumboEmptySourcePosition;
                                                                                                                                    gumbo_vector_add(
                                                                                                                                        parser,
                                                                                                                                        name as *mut libc::c_void,
                                                                                                                                        &mut (*input).v.element.attributes,
                                                                                                                                    );
                                                                                                                                    pop_current_node(parser);
                                                                                                                                    pop_current_node(parser);
                                                                                                                                    insert_element_of_tag_type(
                                                                                                                                        parser,
                                                                                                                                        GUMBO_TAG_HR,
                                                                                                                                        GUMBO_INSERTION_FROM_ISINDEX,
                                                                                                                                    );
                                                                                                                                    pop_current_node(parser);
                                                                                                                                    pop_current_node(parser);
                                                                                                                                    return 0 as libc::c_int != 0;
                                                                                                                                } else {
                                                                                                                                    tmp___91 = tag_is(
                                                                                                                                        token as *const GumboToken,
                                                                                                                                        kStartTag,
                                                                                                                                        GUMBO_TAG_TEXTAREA,
                                                                                                                                    );
                                                                                                                                    if tmp___91 {
                                                                                                                                        run_generic_parsing_algorithm(
                                                                                                                                            parser,
                                                                                                                                            token,
                                                                                                                                            GUMBO_LEX_RCDATA,
                                                                                                                                        );
                                                                                                                                        (*(*parser)._parser_state)
                                                                                                                                            ._ignore_next_linefeed = 1 as libc::c_int != 0;
                                                                                                                                        set_frameset_not_ok(parser);
                                                                                                                                        return 1 as libc::c_int != 0;
                                                                                                                                    } else {
                                                                                                                                        tmp___90 = tag_is(
                                                                                                                                            token as *const GumboToken,
                                                                                                                                            kStartTag,
                                                                                                                                            GUMBO_TAG_XMP,
                                                                                                                                        );
                                                                                                                                        if tmp___90 {
                                                                                                                                            tmp___66 = maybe_implicitly_close_p_tag(parser, token);
                                                                                                                                            result___9 = tmp___66;
                                                                                                                                            reconstruct_active_formatting_elements(parser);
                                                                                                                                            set_frameset_not_ok(parser);
                                                                                                                                            run_generic_parsing_algorithm(
                                                                                                                                                parser,
                                                                                                                                                token,
                                                                                                                                                GUMBO_LEX_RAWTEXT,
                                                                                                                                            );
                                                                                                                                            return result___9;
                                                                                                                                        } else {
                                                                                                                                            tmp___89 = tag_is(
                                                                                                                                                token as *const GumboToken,
                                                                                                                                                kStartTag,
                                                                                                                                                GUMBO_TAG_IFRAME,
                                                                                                                                            );
                                                                                                                                            if tmp___89 {
                                                                                                                                                set_frameset_not_ok(parser);
                                                                                                                                                run_generic_parsing_algorithm(
                                                                                                                                                    parser,
                                                                                                                                                    token,
                                                                                                                                                    GUMBO_LEX_RAWTEXT,
                                                                                                                                                );
                                                                                                                                                return 1 as libc::c_int != 0;
                                                                                                                                            } else {
                                                                                                                                                tmp___88 = tag_is(
                                                                                                                                                    token as *const GumboToken,
                                                                                                                                                    kStartTag,
                                                                                                                                                    GUMBO_TAG_NOEMBED,
                                                                                                                                                );
                                                                                                                                                if tmp___88 {
                                                                                                                                                    run_generic_parsing_algorithm(
                                                                                                                                                        parser,
                                                                                                                                                        token,
                                                                                                                                                        GUMBO_LEX_RAWTEXT,
                                                                                                                                                    );
                                                                                                                                                    return 1 as libc::c_int != 0;
                                                                                                                                                } else {
                                                                                                                                                    tmp___87 = tag_is(
                                                                                                                                                        token as *const GumboToken,
                                                                                                                                                        kStartTag,
                                                                                                                                                        GUMBO_TAG_SELECT,
                                                                                                                                                    );
                                                                                                                                                    if tmp___87 {
                                                                                                                                                        reconstruct_active_formatting_elements(parser);
                                                                                                                                                        insert_element_from_token(parser, token);
                                                                                                                                                        set_frameset_not_ok(parser);
                                                                                                                                                        state___0 = (*(*parser)._parser_state)._insertion_mode;
                                                                                                                                                        if state___0 as libc::c_uint == 8 as libc::c_uint {
                                                                                                                                                            set_insertion_mode(
                                                                                                                                                                parser,
                                                                                                                                                                GUMBO_INSERTION_MODE_IN_SELECT_IN_TABLE,
                                                                                                                                                            );
                                                                                                                                                        } else if state___0 as libc::c_uint == 10 as libc::c_uint {
                                                                                                                                                            set_insertion_mode(
                                                                                                                                                                parser,
                                                                                                                                                                GUMBO_INSERTION_MODE_IN_SELECT_IN_TABLE,
                                                                                                                                                            );
                                                                                                                                                        } else if state___0 as libc::c_uint == 12 as libc::c_uint {
                                                                                                                                                            set_insertion_mode(
                                                                                                                                                                parser,
                                                                                                                                                                GUMBO_INSERTION_MODE_IN_SELECT_IN_TABLE,
                                                                                                                                                            );
                                                                                                                                                        } else if state___0 as libc::c_uint == 13 as libc::c_uint {
                                                                                                                                                            set_insertion_mode(
                                                                                                                                                                parser,
                                                                                                                                                                GUMBO_INSERTION_MODE_IN_SELECT_IN_TABLE,
                                                                                                                                                            );
                                                                                                                                                        } else if state___0 as libc::c_uint == 14 as libc::c_uint {
                                                                                                                                                            set_insertion_mode(
                                                                                                                                                                parser,
                                                                                                                                                                GUMBO_INSERTION_MODE_IN_SELECT_IN_TABLE,
                                                                                                                                                            );
                                                                                                                                                        } else {
                                                                                                                                                            set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_SELECT);
                                                                                                                                                        }
                                                                                                                                                        return 1 as libc::c_int != 0;
                                                                                                                                                    } else {
                                                                                                                                                        tmp___86 = tag_in(
                                                                                                                                                            token as *const GumboToken,
                                                                                                                                                            kStartTag,
                                                                                                                                                            114 as libc::c_int,
                                                                                                                                                            113 as libc::c_int,
                                                                                                                                                            150 as libc::c_int,
                                                                                                                                                        );
                                                                                                                                                        if tmp___86 {
                                                                                                                                                            tmp___67 = get_current_node(parser);
                                                                                                                                                            tmp___68 = node_tag_is(
                                                                                                                                                                tmp___67 as *const GumboNode,
                                                                                                                                                                GUMBO_TAG_OPTION,
                                                                                                                                                            );
                                                                                                                                                            if tmp___68 {
                                                                                                                                                                pop_current_node(parser);
                                                                                                                                                            }
                                                                                                                                                            reconstruct_active_formatting_elements(parser);
                                                                                                                                                            insert_element_from_token(parser, token);
                                                                                                                                                            return 1 as libc::c_int != 0;
                                                                                                                                                        } else {
                                                                                                                                                            tmp___85 = tag_in(
                                                                                                                                                                token as *const GumboToken,
                                                                                                                                                                kStartTag,
                                                                                                                                                                62 as libc::c_int,
                                                                                                                                                                61 as libc::c_int,
                                                                                                                                                                150 as libc::c_int,
                                                                                                                                                            );
                                                                                                                                                            if tmp___85 {
                                                                                                                                                                success___3 = 1 as libc::c_int != 0;
                                                                                                                                                                tmp___69 = has_an_element_in_scope(parser, GUMBO_TAG_RUBY);
                                                                                                                                                                if tmp___69 {
                                                                                                                                                                    generate_implied_end_tags(parser, GUMBO_TAG_LAST);
                                                                                                                                                                }
                                                                                                                                                                tmp___70 = get_current_node(parser);
                                                                                                                                                                tmp___71 = node_tag_is(
                                                                                                                                                                    tmp___70 as *const GumboNode,
                                                                                                                                                                    GUMBO_TAG_RUBY,
                                                                                                                                                                );
                                                                                                                                                                if !tmp___71 {
                                                                                                                                                                    add_parse_error(parser, token as *const GumboToken);
                                                                                                                                                                    success___3 = 0 as libc::c_int != 0;
                                                                                                                                                                }
                                                                                                                                                                insert_element_from_token(parser, token);
                                                                                                                                                                return success___3;
                                                                                                                                                            } else {
                                                                                                                                                                tmp___84 = tag_is(
                                                                                                                                                                    token as *const GumboToken,
                                                                                                                                                                    kEndTag,
                                                                                                                                                                    GUMBO_TAG_BR,
                                                                                                                                                                );
                                                                                                                                                                if tmp___84 {
                                                                                                                                                                    add_parse_error(parser, token as *const GumboToken);
                                                                                                                                                                    reconstruct_active_formatting_elements(parser);
                                                                                                                                                                    insert_element_of_tag_type(
                                                                                                                                                                        parser,
                                                                                                                                                                        GUMBO_TAG_BR,
                                                                                                                                                                        GUMBO_INSERTION_CONVERTED_FROM_END_TAG,
                                                                                                                                                                    );
                                                                                                                                                                    pop_current_node(parser);
                                                                                                                                                                    return 0 as libc::c_int != 0;
                                                                                                                                                                } else {
                                                                                                                                                                    tmp___83 = tag_is(
                                                                                                                                                                        token as *const GumboToken,
                                                                                                                                                                        kStartTag,
                                                                                                                                                                        GUMBO_TAG_MATH,
                                                                                                                                                                    );
                                                                                                                                                                    if tmp___83 {
                                                                                                                                                                        reconstruct_active_formatting_elements(parser);
                                                                                                                                                                        adjust_mathml_attributes(parser, token);
                                                                                                                                                                        adjust_foreign_attributes(parser, token);
                                                                                                                                                                        insert_foreign_element(
                                                                                                                                                                            parser,
                                                                                                                                                                            token,
                                                                                                                                                                            GUMBO_NAMESPACE_MATHML,
                                                                                                                                                                        );
                                                                                                                                                                        if (*token).v.start_tag.is_self_closing {
                                                                                                                                                                            pop_current_node(parser);
                                                                                                                                                                            acknowledge_self_closing_tag(parser);
                                                                                                                                                                        }
                                                                                                                                                                        return 1 as libc::c_int != 0;
                                                                                                                                                                    } else {
                                                                                                                                                                        tmp___82 = tag_is(
                                                                                                                                                                            token as *const GumboToken,
                                                                                                                                                                            kStartTag,
                                                                                                                                                                            GUMBO_TAG_SVG,
                                                                                                                                                                        );
                                                                                                                                                                        if tmp___82 {
                                                                                                                                                                            reconstruct_active_formatting_elements(parser);
                                                                                                                                                                            adjust_svg_attributes(parser, token);
                                                                                                                                                                            adjust_foreign_attributes(parser, token);
                                                                                                                                                                            insert_foreign_element(parser, token, GUMBO_NAMESPACE_SVG);
                                                                                                                                                                            if (*token).v.start_tag.is_self_closing {
                                                                                                                                                                                pop_current_node(parser);
                                                                                                                                                                                acknowledge_self_closing_tag(parser);
                                                                                                                                                                            }
                                                                                                                                                                            return 1 as libc::c_int != 0;
                                                                                                                                                                        } else {
                                                                                                                                                                            tmp___81 = tag_in(
                                                                                                                                                                                token as *const GumboToken,
                                                                                                                                                                                kStartTag,
                                                                                                                                                                                96 as libc::c_int,
                                                                                                                                                                                98 as libc::c_int,
                                                                                                                                                                                97 as libc::c_int,
                                                                                                                                                                                128 as libc::c_int,
                                                                                                                                                                                1 as libc::c_int,
                                                                                                                                                                                99 as libc::c_int,
                                                                                                                                                                                103 as libc::c_int,
                                                                                                                                                                                101 as libc::c_int,
                                                                                                                                                                                104 as libc::c_int,
                                                                                                                                                                                100 as libc::c_int,
                                                                                                                                                                                102 as libc::c_int,
                                                                                                                                                                                150 as libc::c_int,
                                                                                                                                                                            );
                                                                                                                                                                            if tmp___81 {
                                                                                                                                                                                add_parse_error(parser, token as *const GumboToken);
                                                                                                                                                                                ignore_token(parser);
                                                                                                                                                                                return 0 as libc::c_int != 0;
                                                                                                                                                                            } else if (*token).type_0 as libc::c_uint
                                                                                                                                                                                    == 1 as libc::c_uint
                                                                                                                                                                                {
                                                                                                                                                                                reconstruct_active_formatting_elements(parser);
                                                                                                                                                                                insert_element_from_token(parser, token);
                                                                                                                                                                                return 1 as libc::c_int != 0;
                                                                                                                                                                            } else {
                                                                                                                                                                                if !((*token).type_0 as libc::c_uint == 2 as libc::c_uint) {
                                                                                                                                                                                    __assert_fail(
                                                                                                                                                                                        b"token->type == GUMBO_TOKEN_END_TAG\0" as *const u8
                                                                                                                                                                                            as *const libc::c_char,
                                                                                                                                                                                        b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                                                                                                                            as *const libc::c_char,
                                                                                                                                                                                        2891 as libc::c_uint,
                                                                                                                                                                                        b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                                                                                                                                    );
                                                                                                                                                                                }
                                                                                                                                                                                end_tag = (*token).v.end_tag;
                                                                                                                                                                                if !((*state)._open_elements.length > 0 as libc::c_uint) {
                                                                                                                                                                                    __assert_fail(
                                                                                                                                                                                        b"state->_open_elements.length > 0\0" as *const u8
                                                                                                                                                                                            as *const libc::c_char,
                                                                                                                                                                                        b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                                                                                                                            as *const libc::c_char,
                                                                                                                                                                                        2893 as libc::c_uint,
                                                                                                                                                                                        b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                                                                                                                                    );
                                                                                                                                                                                }
                                                                                                                                                                                tmp___77 = node_tag_is(
                                                                                                                                                                                    *((*state)._open_elements.data)
                                                                                                                                                                                        .offset(0 as libc::c_int as isize) as *const GumboNode,
                                                                                                                                                                                    GUMBO_TAG_HTML,
                                                                                                                                                                                );
                                                                                                                                                                                if !tmp___77 {
                                                                                                                                                                                    __assert_fail(
                                                                                                                                                                                        b"node_tag_is(state->_open_elements.data[0], GUMBO_TAG_HTML)\0"
                                                                                                                                                                                            as *const u8 as *const libc::c_char,
                                                                                                                                                                                        b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                                                                                                                            as *const libc::c_char,
                                                                                                                                                                                        2894 as libc::c_uint,
                                                                                                                                                                                        b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                                                                                                                                    );
                                                                                                                                                                                }
                                                                                                                                                                                i___3 = (*state)._open_elements.length as libc::c_int;
                                                                                                                                                                                loop {
                                                                                                                                                                                    i___3 -= 1;
                                                                                                                                                                                    if !(i___3 >= 0 as libc::c_int) {
                                                                                                                                                                                        break;
                                                                                                                                                                                    }
                                                                                                                                                                                    node___2 = *((*state)._open_elements.data)
                                                                                                                                                                                        .offset(i___3 as isize) as *const GumboNode;
                                                                                                                                                                                    if (*node___2).v.element.tag_namespace as libc::c_uint
                                                                                                                                                                                        == 0 as libc::c_uint
                                                                                                                                                                                    {
                                                                                                                                                                                        tmp___80 = node_tag_is(node___2, end_tag);
                                                                                                                                                                                        if tmp___80 {
                                                                                                                                                                                            generate_implied_end_tags(parser, end_tag);
                                                                                                                                                                                            loop {
                                                                                                                                                                                                tmp___78 = pop_current_node(parser);
                                                                                                                                                                                                if !(node___2 as libc::c_ulong != tmp___78 as libc::c_ulong)
                                                                                                                                                                                                {
                                                                                                                                                                                                    break;
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            return 1 as libc::c_int != 0;
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    tmp___79 = is_special_node(node___2);
                                                                                                                                                                                    if tmp___79 {
                                                                                                                                                                                        add_parse_error(parser, token as *const GumboToken);
                                                                                                                                                                                        ignore_token(parser);
                                                                                                                                                                                        return 0 as libc::c_int != 0;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                __assert_fail(
                                                                                                                                                                                    b"0\0" as *const u8 as *const libc::c_char,
                                                                                                                                                                                    b"deps/gumbo-parser/parser.c\0" as *const u8
                                                                                                                                                                                        as *const libc::c_char,
                                                                                                                                                                                    2918 as libc::c_uint,
                                                                                                                                                                                    b"handle_in_body\0" as *const u8 as *const libc::c_char,
                                                                                                                                                                                );
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn handle_text(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
        insert_text_token(parser, token);
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
    } else {
        if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
            add_parse_error(parser, token as *const GumboToken);
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
        }
        pop_current_node(parser);
        set_insertion_mode(parser, (*(*parser)._parser_state)._original_insertion_mode);
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn handle_in_table(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___6: bool = false;
    let mut result: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: bool = false;
    let mut tmp___11: bool = false;
    let mut tmp___12: bool = false;
    let mut tmp___13: bool = false;
    let mut tmp___14: bool = false;
    let mut tmp___15: bool = false;
    let mut tmp___16: bool = false;
    let mut tmp___17: bool = false;
    let mut tmp___18: bool = false;
    state = (*parser)._parser_state;
    if !((*token).type_0 as libc::c_uint == 5 as libc::c_uint) {
        if !((*token).type_0 as libc::c_uint == 4 as libc::c_uint) {
            if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
                add_parse_error(parser, token as *const GumboToken);
                ignore_token(parser);
                return 0 as libc::c_int != 0;
            } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
                tmp___0 = get_current_node(parser);
                append_comment_node(parser, tmp___0, token as *const GumboToken);
                return 1 as libc::c_int != 0;
            } else {
                tmp___18 = tag_is(
                    token as *const GumboToken,
                    kStartTag,
                    GUMBO_TAG_CAPTION,
                );
                if tmp___18 {
                    clear_stack_to_table_context(parser);
                    add_formatting_element(parser, &kActiveFormattingScopeMarker);
                    insert_element_from_token(parser, token);
                    set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_CAPTION);
                    return 1 as libc::c_int != 0;
                } else {
                    tmp___17 = tag_is(
                        token as *const GumboToken,
                        kStartTag,
                        GUMBO_TAG_COLGROUP,
                    );
                    if tmp___17 {
                        clear_stack_to_table_context(parser);
                        insert_element_from_token(parser, token);
                        set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_COLUMN_GROUP);
                        return 1 as libc::c_int != 0;
                    } else {
                        tmp___16 = tag_is(
                            token as *const GumboToken,
                            kStartTag,
                            GUMBO_TAG_COL,
                        );
                        if tmp___16 {
                            clear_stack_to_table_context(parser);
                            insert_element_of_tag_type(
                                parser,
                                GUMBO_TAG_COLGROUP,
                                GUMBO_INSERTION_IMPLIED,
                            );
                            (*(*parser)._parser_state)
                                ._reprocess_current_token = 1 as libc::c_int != 0;
                            set_insertion_mode(
                                parser,
                                GUMBO_INSERTION_MODE_IN_COLUMN_GROUP,
                            );
                            return 1 as libc::c_int != 0;
                        } else {
                            tmp___15 = tag_in(
                                token as *const GumboToken,
                                kStartTag,
                                99 as libc::c_int,
                                101 as libc::c_int,
                                100 as libc::c_int,
                                103 as libc::c_int,
                                104 as libc::c_int,
                                102 as libc::c_int,
                                150 as libc::c_int,
                            );
                            if tmp___15 {
                                clear_stack_to_table_context(parser);
                                set_insertion_mode(
                                    parser,
                                    GUMBO_INSERTION_MODE_IN_TABLE_BODY,
                                );
                                tmp___1 = tag_in(
                                    token as *const GumboToken,
                                    kStartTag,
                                    103 as libc::c_int,
                                    104 as libc::c_int,
                                    102 as libc::c_int,
                                    150 as libc::c_int,
                                );
                                if tmp___1 {
                                    insert_element_of_tag_type(
                                        parser,
                                        GUMBO_TAG_TBODY,
                                        GUMBO_INSERTION_IMPLIED,
                                    );
                                    (*state)._reprocess_current_token = 1 as libc::c_int != 0;
                                } else {
                                    insert_element_from_token(parser, token);
                                }
                                return 1 as libc::c_int != 0;
                            } else {
                                tmp___14 = tag_is(
                                    token as *const GumboToken,
                                    kStartTag,
                                    GUMBO_TAG_TABLE,
                                );
                                if tmp___14 {
                                    add_parse_error(parser, token as *const GumboToken);
                                    tmp___2 = close_table(parser);
                                    if tmp___2 {
                                        (*(*parser)._parser_state)
                                            ._reprocess_current_token = 1 as libc::c_int != 0;
                                    } else {
                                        ignore_token(parser);
                                    }
                                    return 0 as libc::c_int != 0;
                                } else {
                                    tmp___13 = tag_is(
                                        token as *const GumboToken,
                                        kEndTag,
                                        GUMBO_TAG_TABLE,
                                    );
                                    if tmp___13 {
                                        tmp___3 = close_table(parser);
                                        if !tmp___3 {
                                            add_parse_error(parser, token as *const GumboToken);
                                            return 0 as libc::c_int != 0;
                                        }
                                        return 1 as libc::c_int != 0;
                                    } else {
                                        tmp___12 = tag_in(
                                            token as *const GumboToken,
                                            kEndTag,
                                            10 as libc::c_int,
                                            96 as libc::c_int,
                                            98 as libc::c_int,
                                            97 as libc::c_int,
                                            0 as libc::c_int,
                                            99 as libc::c_int,
                                            103 as libc::c_int,
                                            101 as libc::c_int,
                                            104 as libc::c_int,
                                            100 as libc::c_int,
                                            102 as libc::c_int,
                                            150 as libc::c_int,
                                        );
                                        if tmp___12 {
                                            add_parse_error(parser, token as *const GumboToken);
                                            ignore_token(parser);
                                            return 0 as libc::c_int != 0;
                                        } else {
                                            tmp___11 = tag_in(
                                                token as *const GumboToken,
                                                kStartTag,
                                                6 as libc::c_int,
                                                7 as libc::c_int,
                                                150 as libc::c_int,
                                            );
                                            if tmp___11 {
                                                tmp___4 = handle_in_head(parser, token);
                                                return tmp___4;
                                            } else {
                                                tmp___9 = tag_is(
                                                    token as *const GumboToken,
                                                    kStartTag,
                                                    GUMBO_TAG_INPUT,
                                                );
                                                if tmp___9 {
                                                    tmp___10 = attribute_matches(
                                                        &mut (*token).v.start_tag.attributes as *mut GumboVector
                                                            as *const GumboVector,
                                                        b"type\0" as *const u8 as *const libc::c_char,
                                                        b"hidden\0" as *const u8 as *const libc::c_char,
                                                    );
                                                    if tmp___10 {
                                                        add_parse_error(parser, token as *const GumboToken);
                                                        insert_element_from_token(parser, token);
                                                        pop_current_node(parser);
                                                        return 0 as libc::c_int != 0;
                                                    }
                                                }
                                                tmp___8 = tag_is(
                                                    token as *const GumboToken,
                                                    kStartTag,
                                                    GUMBO_TAG_FORM,
                                                );
                                                if tmp___8 {
                                                    add_parse_error(parser, token as *const GumboToken);
                                                    if !((*state)._form_element).is_null() {
                                                        ignore_token(parser);
                                                        return 0 as libc::c_int != 0;
                                                    }
                                                    (*state)
                                                        ._form_element = insert_element_from_token(parser, token);
                                                    pop_current_node(parser);
                                                    return 0 as libc::c_int != 0;
                                                } else if (*token).type_0 as libc::c_uint
                                                        == 7 as libc::c_uint
                                                    {
                                                    tmp___5 = get_current_node(parser);
                                                    tmp___6 = node_tag_is(
                                                        tmp___5 as *const GumboNode,
                                                        GUMBO_TAG_HTML,
                                                    );
                                                    if !tmp___6 {
                                                        add_parse_error(parser, token as *const GumboToken);
                                                        return 0 as libc::c_int != 0;
                                                    }
                                                    return 1 as libc::c_int != 0;
                                                } else {
                                                    add_parse_error(parser, token as *const GumboToken);
                                                    (*state)._foster_parent_insertions = 1 as libc::c_int != 0;
                                                    tmp___7 = handle_in_body(parser, token);
                                                    result = tmp___7;
                                                    (*state)._foster_parent_insertions = 0 as libc::c_int != 0;
                                                    return result;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if !((*state)._text_node._buffer.length == 0 as libc::c_ulong) {
        __assert_fail(
            b"state->_text_node._buffer.length == 0\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
            2955 as libc::c_uint,
            b"handle_in_table\0" as *const u8 as *const libc::c_char,
        );
    }
    (*state)._original_insertion_mode = (*state)._insertion_mode;
    (*state)._reprocess_current_token = 1 as libc::c_int != 0;
    set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE_TEXT);
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn handle_in_table_text(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut buffer: *mut GumboStringBuffer = 0 as *mut GumboStringBuffer;
    let mut i: libc::c_int = 0;
    let mut tmp: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    if (*token).type_0 as libc::c_uint == 6 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else {
        state = (*parser)._parser_state;
        buffer = &mut (*state)._text_node._buffer;
        i = 0 as libc::c_int;
        while (i as size_t) < (*buffer).length {
            tmp = __ctype_b_loc();
            if *(*tmp)
                .offset(*((*buffer).data).offset(i as isize) as libc::c_int as isize)
                as libc::c_int & 8192 as libc::c_int != 0
            {
                if *((*buffer).data).offset(i as isize) as libc::c_int
                    == 11 as libc::c_int
                {
                    (*state)._foster_parent_insertions = 1 as libc::c_int != 0;
                    reconstruct_active_formatting_elements(parser);
                    break;
                } else {
                    i += 1;
                }
            } else {
                (*state)._foster_parent_insertions = 1 as libc::c_int != 0;
                reconstruct_active_formatting_elements(parser);
                break;
            }
        }
        maybe_flush_text_node_buffer(parser);
        (*state)._foster_parent_insertions = 0 as libc::c_int != 0;
        (*state)._reprocess_current_token = 1 as libc::c_int != 0;
        (*state)._insertion_mode = (*state)._original_insertion_mode;
        return 1 as libc::c_int != 0;
    };
}
unsafe extern "C" fn handle_in_caption(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut result: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    let mut tmp___3: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    tmp___7 = tag_in(
        token as *const GumboToken,
        kStartTag,
        96 as libc::c_int,
        98 as libc::c_int,
        97 as libc::c_int,
        99 as libc::c_int,
        103 as libc::c_int,
        101 as libc::c_int,
        104 as libc::c_int,
        100 as libc::c_int,
        102 as libc::c_int,
        150 as libc::c_int,
    );
    if !tmp___7 {
        tmp___8 = tag_in(
            token as *const GumboToken,
            kEndTag,
            96 as libc::c_int,
            95 as libc::c_int,
            150 as libc::c_int,
        );
        if !tmp___8 {
            tmp___6 = tag_in(
                token as *const GumboToken,
                kEndTag,
                10 as libc::c_int,
                98 as libc::c_int,
                97 as libc::c_int,
                0 as libc::c_int,
                99 as libc::c_int,
                103 as libc::c_int,
                101 as libc::c_int,
                104 as libc::c_int,
                100 as libc::c_int,
                102 as libc::c_int,
                150 as libc::c_int,
            );
            if tmp___6 {
                add_parse_error(parser, token as *const GumboToken);
                ignore_token(parser);
                return 0 as libc::c_int != 0;
            } else {
                tmp___5 = handle_in_body(parser, token);
                return tmp___5;
            }
        }
    }
    tmp = has_an_element_in_table_scope(parser, GUMBO_TAG_CAPTION);
    if !tmp {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    }
    tmp___0 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_CAPTION);
    if !tmp___0 {
        add_parse_error(parser, token as *const GumboToken);
        (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
    }
    generate_implied_end_tags(parser, GUMBO_TAG_LAST);
    result = 1 as libc::c_int != 0;
    tmp___3 = get_current_node(parser);
    tmp___4 = node_tag_is(tmp___3 as *const GumboNode, GUMBO_TAG_CAPTION);
    if !tmp___4 {
        add_parse_error(parser, token as *const GumboToken);
        loop {
            tmp___1 = get_current_node(parser);
            tmp___2 = node_tag_is(tmp___1 as *const GumboNode, GUMBO_TAG_CAPTION);
            if tmp___2 {
                break;
            }
            pop_current_node(parser);
        }
        result = 0 as libc::c_int != 0;
    }
    pop_current_node(parser);
    clear_active_formatting_elements(parser);
    set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE);
    return result;
}
unsafe extern "C" fn handle_in_column_group(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___7: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___11: bool = false;
    let mut tmp___12: bool = false;
    let mut tmp___13: bool = false;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else {
        tmp___13 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___13 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else {
            tmp___12 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_COL);
            if tmp___12 {
                insert_element_from_token(parser, token);
                pop_current_node(parser);
                acknowledge_self_closing_tag(parser);
                return 1 as libc::c_int != 0;
            } else {
                tmp___11 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_COL);
                if tmp___11 {
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                } else {
                    if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
                        tmp___10 = get_current_node(parser);
                        if tmp___10 as libc::c_ulong
                            == (*(*parser)._output).root as libc::c_ulong
                        {
                            return 1 as libc::c_int != 0;
                        }
                    }
                    tmp___1 = get_current_node(parser);
                    if tmp___1 as libc::c_ulong
                        == (*(*parser)._output).root as libc::c_ulong
                    {
                        add_parse_error(parser, token as *const GumboToken);
                        return 0 as libc::c_int != 0;
                    }
                    tmp___7 = get_current_node(parser);
                    tmp___8 = node_tag_is(
                        tmp___7 as *const GumboNode,
                        GUMBO_TAG_COLGROUP,
                    );
                    if !tmp___8 {
                        __assert_fail(
                            b"node_tag_is(get_current_node(parser), GUMBO_TAG_COLGROUP)\0"
                                as *const u8 as *const libc::c_char,
                            b"deps/gumbo-parser/parser.c\0" as *const u8
                                as *const libc::c_char,
                            3161 as libc::c_uint,
                            b"handle_in_column_group\0" as *const u8
                                as *const libc::c_char,
                        );
                    }
                    pop_current_node(parser);
                    set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE);
                    tmp___9 = tag_is(
                        token as *const GumboToken,
                        kEndTag,
                        GUMBO_TAG_COLGROUP,
                    );
                    if !tmp___9 {
                        (*(*parser)._parser_state)
                            ._reprocess_current_token = 1 as libc::c_int != 0;
                    }
                    return 1 as libc::c_int != 0;
                }
            }
        }
    };
}
unsafe extern "C" fn handle_in_table_body(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    tmp___9 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_TR);
    if tmp___9 {
        clear_stack_to_table_body_context(parser);
        insert_element_from_token(parser, token);
        set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_ROW);
        return 1 as libc::c_int != 0;
    } else {
        tmp___8 = tag_in(
            token as *const GumboToken,
            kStartTag,
            103 as libc::c_int,
            104 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___8 {
            add_parse_error(parser, token as *const GumboToken);
            clear_stack_to_table_body_context(parser);
            insert_element_of_tag_type(parser, GUMBO_TAG_TR, GUMBO_INSERTION_IMPLIED);
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
            set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_ROW);
            return 0 as libc::c_int != 0;
        } else {
            tmp___7 = tag_in(
                token as *const GumboToken,
                kEndTag,
                99 as libc::c_int,
                101 as libc::c_int,
                100 as libc::c_int,
                150 as libc::c_int,
            );
            if tmp___7 {
                tmp = has_an_element_in_table_scope(parser, (*token).v.end_tag);
                if !tmp {
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                }
                clear_stack_to_table_body_context(parser);
                pop_current_node(parser);
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE);
                return 1 as libc::c_int != 0;
            } else {
                tmp___5 = tag_in(
                    token as *const GumboToken,
                    kStartTag,
                    96 as libc::c_int,
                    98 as libc::c_int,
                    97 as libc::c_int,
                    99 as libc::c_int,
                    101 as libc::c_int,
                    100 as libc::c_int,
                    150 as libc::c_int,
                );
                if !tmp___5 {
                    tmp___6 = tag_is(
                        token as *const GumboToken,
                        kEndTag,
                        GUMBO_TAG_TABLE,
                    );
                    if !tmp___6 {
                        tmp___4 = tag_in(
                            token as *const GumboToken,
                            kEndTag,
                            10 as libc::c_int,
                            96 as libc::c_int,
                            98 as libc::c_int,
                            102 as libc::c_int,
                            97 as libc::c_int,
                            0 as libc::c_int,
                            103 as libc::c_int,
                            104 as libc::c_int,
                            150 as libc::c_int,
                        );
                        if tmp___4 {
                            add_parse_error(parser, token as *const GumboToken);
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        } else {
                            tmp___3 = handle_in_table(parser, token);
                            return tmp___3;
                        }
                    }
                }
                tmp___0 = has_an_element_in_table_scope(parser, GUMBO_TAG_TBODY);
                if !tmp___0 {
                    tmp___1 = has_an_element_in_table_scope(parser, GUMBO_TAG_THEAD);
                    if !tmp___1 {
                        tmp___2 = has_an_element_in_table_scope(parser, GUMBO_TAG_TFOOT);
                        if !tmp___2 {
                            add_parse_error(parser, token as *const GumboToken);
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        }
                    }
                }
                clear_stack_to_table_body_context(parser);
                pop_current_node(parser);
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE);
                (*(*parser)._parser_state)
                    ._reprocess_current_token = 1 as libc::c_int != 0;
                return 1 as libc::c_int != 0;
            }
        }
    };
}
unsafe extern "C" fn handle_in_row(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut desired_tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___0: libc::c_uint = 0;
    let mut tmp___1: bool = false;
    let mut tmp___2: *const libc::c_char = 0 as *const libc::c_char;
    let mut i: libc::c_int = 0;
    let mut node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___3: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___4: bool = false;
    let mut last_element: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___5: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___9: bool = false;
    let mut tmp___10: bool = false;
    let mut tmp___11: bool = false;
    let mut tmp___12: bool = false;
    let mut tmp___13: bool = false;
    let mut tmp___14: bool = false;
    let mut tmp___15: bool = false;
    tmp___15 = tag_in(
        token as *const GumboToken,
        kStartTag,
        104 as libc::c_int,
        103 as libc::c_int,
        150 as libc::c_int,
    );
    if tmp___15 {
        clear_stack_to_table_row_context(parser);
        insert_element_from_token(parser, token);
        set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_CELL);
        add_formatting_element(parser, &kActiveFormattingScopeMarker);
        return 1 as libc::c_int != 0;
    } else {
        tmp___13 = tag_in(
            token as *const GumboToken,
            kStartTag,
            96 as libc::c_int,
            97 as libc::c_int,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            102 as libc::c_int,
            150 as libc::c_int,
        );
        if !tmp___13 {
            tmp___14 = tag_in(
                token as *const GumboToken,
                kEndTag,
                102 as libc::c_int,
                95 as libc::c_int,
                99 as libc::c_int,
                101 as libc::c_int,
                100 as libc::c_int,
                150 as libc::c_int,
            );
            if !tmp___14 {
                tmp___12 = tag_in(
                    token as *const GumboToken,
                    kEndTag,
                    10 as libc::c_int,
                    96 as libc::c_int,
                    98 as libc::c_int,
                    97 as libc::c_int,
                    0 as libc::c_int,
                    103 as libc::c_int,
                    104 as libc::c_int,
                    150 as libc::c_int,
                );
                if tmp___12 {
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                } else {
                    tmp___11 = handle_in_table(parser, token);
                    return tmp___11;
                }
            }
        }
        tmp___1 = tag_in(
            token as *const GumboToken,
            kEndTag,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___1 {
            tmp___0 = (*token).v.end_tag as libc::c_uint;
        } else {
            tmp___0 = 102 as libc::c_uint;
        }
        desired_tag = tmp___0 as GumboTag;
        tmp___4 = has_an_element_in_table_scope(parser, desired_tag);
        if !tmp___4 {
            tmp___2 = gumbo_normalized_tagname(desired_tag);
            gumbo_debug(
                b"Bailing because there is no tag %s in table scope.\nOpen elements:\0"
                    as *const u8 as *const libc::c_char,
                tmp___2,
            );
            i = 0 as libc::c_int;
            while (i as libc::c_uint) < (*(*parser)._parser_state)._open_elements.length
            {
                node = *((*(*parser)._parser_state)._open_elements.data)
                    .offset(i as isize) as *const GumboNode;
                tmp___3 = gumbo_normalized_tagname((*node).v.element.tag);
                gumbo_debug(b"%s\n\0" as *const u8 as *const libc::c_char, tmp___3);
                i += 1;
            }
            add_parse_error(parser, token as *const GumboToken);
            ignore_token(parser);
            return 0 as libc::c_int != 0;
        }
        clear_stack_to_table_row_context(parser);
        tmp___5 = pop_current_node(parser);
        last_element = tmp___5;
        tmp___9 = node_tag_is(last_element as *const GumboNode, GUMBO_TAG_TR);
        if !tmp___9 {
            __assert_fail(
                b"node_tag_is(last_element, GUMBO_TAG_TR)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                3259 as libc::c_uint,
                b"handle_in_row\0" as *const u8 as *const libc::c_char,
            );
        }
        set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_TABLE_BODY);
        tmp___10 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_TR);
        if !tmp___10 {
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
        }
        return 1 as libc::c_int != 0;
    };
}
unsafe extern "C" fn handle_in_cell(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut token_tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: bool = false;
    tmp___10 = tag_in(
        token as *const GumboToken,
        kEndTag,
        103 as libc::c_int,
        104 as libc::c_int,
        150 as libc::c_int,
    );
    if tmp___10 {
        token_tag = (*token).v.end_tag;
        tmp = has_an_element_in_table_scope(parser, token_tag);
        if !tmp {
            add_parse_error(parser, token as *const GumboToken);
            return 0 as libc::c_int != 0;
        }
        tmp___0 = close_table_cell(parser, token as *const GumboToken, token_tag);
        return tmp___0;
    } else {
        tmp___9 = tag_in(
            token as *const GumboToken,
            kStartTag,
            96 as libc::c_int,
            98 as libc::c_int,
            97 as libc::c_int,
            99 as libc::c_int,
            103 as libc::c_int,
            101 as libc::c_int,
            104 as libc::c_int,
            100 as libc::c_int,
            102 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___9 {
            gumbo_debug(
                b"Handling <td> in cell.\n\0" as *const u8 as *const libc::c_char,
            );
            tmp___1 = has_an_element_in_table_scope(parser, GUMBO_TAG_TH);
            if !tmp___1 {
                tmp___2 = has_an_element_in_table_scope(parser, GUMBO_TAG_TD);
                if !tmp___2 {
                    gumbo_debug(
                        b"Bailing out because there's no <td> or <th> in scope.\n\0"
                            as *const u8 as *const libc::c_char,
                    );
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                }
            }
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
            tmp___3 = close_current_cell(parser, token as *const GumboToken);
            return tmp___3;
        } else {
            tmp___8 = tag_in(
                token as *const GumboToken,
                kEndTag,
                10 as libc::c_int,
                96 as libc::c_int,
                98 as libc::c_int,
                97 as libc::c_int,
                0 as libc::c_int,
                150 as libc::c_int,
            );
            if tmp___8 {
                add_parse_error(parser, token as *const GumboToken);
                ignore_token(parser);
                return 0 as libc::c_int != 0;
            } else {
                tmp___7 = tag_in(
                    token as *const GumboToken,
                    kEndTag,
                    95 as libc::c_int,
                    99 as libc::c_int,
                    101 as libc::c_int,
                    100 as libc::c_int,
                    102 as libc::c_int,
                    150 as libc::c_int,
                );
                if tmp___7 {
                    tmp___4 = has_an_element_in_table_scope(parser, (*token).v.end_tag);
                    if !tmp___4 {
                        add_parse_error(parser, token as *const GumboToken);
                        ignore_token(parser);
                        return 0 as libc::c_int != 0;
                    }
                    (*(*parser)._parser_state)
                        ._reprocess_current_token = 1 as libc::c_int != 0;
                    tmp___5 = close_current_cell(parser, token as *const GumboToken);
                    return tmp___5;
                } else {
                    tmp___6 = handle_in_body(parser, token);
                    return tmp___6;
                }
            }
        }
    };
}
unsafe extern "C" fn handle_in_select(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    let mut tmp___3: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: bool = false;
    let mut tmp___5: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___6: bool = false;
    let mut open_elements: *mut GumboVector = 0 as *mut GumboVector;
    let mut tmp___7: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___11: bool = false;
    let mut tmp___12: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___13: bool = false;
    let mut tmp___14: bool = false;
    let mut tmp___15: bool = false;
    let mut tmp___16: bool = false;
    let mut tmp___17: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___18: bool = false;
    let mut tmp___19: bool = false;
    let mut tmp___20: bool = false;
    let mut tmp___21: bool = false;
    let mut tmp___22: bool = false;
    let mut tmp___23: bool = false;
    let mut tmp___24: bool = false;
    let mut tmp___25: bool = false;
    let mut tmp___26: bool = false;
    if (*token).type_0 as libc::c_uint == 6 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else {
        tmp___26 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___26 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else {
            tmp___25 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_OPTION);
            if tmp___25 {
                tmp___1 = get_current_node(parser);
                tmp___2 = node_tag_is(tmp___1 as *const GumboNode, GUMBO_TAG_OPTION);
                if tmp___2 {
                    pop_current_node(parser);
                }
                insert_element_from_token(parser, token);
                return 1 as libc::c_int != 0;
            } else {
                tmp___24 = tag_is(
                    token as *const GumboToken,
                    kStartTag,
                    GUMBO_TAG_OPTGROUP,
                );
                if tmp___24 {
                    tmp___3 = get_current_node(parser);
                    tmp___4 = node_tag_is(tmp___3 as *const GumboNode, GUMBO_TAG_OPTION);
                    if tmp___4 {
                        pop_current_node(parser);
                    }
                    tmp___5 = get_current_node(parser);
                    tmp___6 = node_tag_is(
                        tmp___5 as *const GumboNode,
                        GUMBO_TAG_OPTGROUP,
                    );
                    if tmp___6 {
                        pop_current_node(parser);
                    }
                    insert_element_from_token(parser, token);
                    return 1 as libc::c_int != 0;
                } else {
                    tmp___23 = tag_is(
                        token as *const GumboToken,
                        kEndTag,
                        GUMBO_TAG_OPTGROUP,
                    );
                    if tmp___23 {
                        open_elements = &mut (*(*parser)._parser_state)._open_elements;
                        tmp___7 = get_current_node(parser);
                        tmp___8 = node_tag_is(
                            tmp___7 as *const GumboNode,
                            GUMBO_TAG_OPTION,
                        );
                        if tmp___8 {
                            tmp___9 = node_tag_is(
                                *((*open_elements).data)
                                    .offset(
                                        ((*open_elements).length).wrapping_sub(2 as libc::c_uint)
                                            as isize,
                                    ) as *const GumboNode,
                                GUMBO_TAG_OPTGROUP,
                            );
                            if tmp___9 {
                                pop_current_node(parser);
                            }
                        }
                        tmp___10 = get_current_node(parser);
                        tmp___11 = node_tag_is(
                            tmp___10 as *const GumboNode,
                            GUMBO_TAG_OPTGROUP,
                        );
                        if tmp___11 {
                            pop_current_node(parser);
                            return 1 as libc::c_int != 0;
                        } else {
                            add_parse_error(parser, token as *const GumboToken);
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        }
                    } else {
                        tmp___22 = tag_is(
                            token as *const GumboToken,
                            kEndTag,
                            GUMBO_TAG_OPTION,
                        );
                        if tmp___22 {
                            tmp___12 = get_current_node(parser);
                            tmp___13 = node_tag_is(
                                tmp___12 as *const GumboNode,
                                GUMBO_TAG_OPTION,
                            );
                            if tmp___13 {
                                pop_current_node(parser);
                                return 1 as libc::c_int != 0;
                            } else {
                                add_parse_error(parser, token as *const GumboToken);
                                ignore_token(parser);
                                return 0 as libc::c_int != 0;
                            }
                        } else {
                            tmp___21 = tag_is(
                                token as *const GumboToken,
                                kEndTag,
                                GUMBO_TAG_SELECT,
                            );
                            if tmp___21 {
                                tmp___14 = has_an_element_in_select_scope(
                                    parser,
                                    GUMBO_TAG_SELECT,
                                );
                                if !tmp___14 {
                                    add_parse_error(parser, token as *const GumboToken);
                                    ignore_token(parser);
                                    return 0 as libc::c_int != 0;
                                }
                                close_current_select(parser);
                                return 1 as libc::c_int != 0;
                            } else {
                                tmp___20 = tag_is(
                                    token as *const GumboToken,
                                    kStartTag,
                                    GUMBO_TAG_SELECT,
                                );
                                if tmp___20 {
                                    add_parse_error(parser, token as *const GumboToken);
                                    ignore_token(parser);
                                    close_current_select(parser);
                                    return 0 as libc::c_int != 0;
                                } else {
                                    tmp___19 = tag_in(
                                        token as *const GumboToken,
                                        kStartTag,
                                        109 as libc::c_int,
                                        116 as libc::c_int,
                                        115 as libc::c_int,
                                        150 as libc::c_int,
                                    );
                                    if tmp___19 {
                                        add_parse_error(parser, token as *const GumboToken);
                                        tmp___15 = has_an_element_in_select_scope(
                                            parser,
                                            GUMBO_TAG_SELECT,
                                        );
                                        if tmp___15 {
                                            close_current_select(parser);
                                            (*(*parser)._parser_state)
                                                ._reprocess_current_token = 1 as libc::c_int != 0;
                                        } else {
                                            ignore_token(parser);
                                        }
                                        return 0 as libc::c_int != 0;
                                    } else {
                                        tmp___18 = tag_is(
                                            token as *const GumboToken,
                                            kStartTag,
                                            GUMBO_TAG_SCRIPT,
                                        );
                                        if tmp___18 {
                                            tmp___16 = handle_in_head(parser, token);
                                            return tmp___16;
                                        } else if (*token).type_0 as libc::c_uint
                                                == 7 as libc::c_uint
                                            {
                                            tmp___17 = get_current_node(parser);
                                            if tmp___17 as libc::c_ulong
                                                != (*(*parser)._output).root as libc::c_ulong
                                            {
                                                add_parse_error(parser, token as *const GumboToken);
                                                return 0 as libc::c_int != 0;
                                            }
                                            return 1 as libc::c_int != 0;
                                        } else {
                                            add_parse_error(parser, token as *const GumboToken);
                                            ignore_token(parser);
                                            return 0 as libc::c_int != 0;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn handle_in_select_in_table(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    tmp___2 = tag_in(
        token as *const GumboToken,
        kStartTag,
        96 as libc::c_int,
        95 as libc::c_int,
        99 as libc::c_int,
        101 as libc::c_int,
        100 as libc::c_int,
        102 as libc::c_int,
        103 as libc::c_int,
        104 as libc::c_int,
        150 as libc::c_int,
    );
    if tmp___2 {
        add_parse_error(parser, token as *const GumboToken);
        close_current_select(parser);
        (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
        return 0 as libc::c_int != 0;
    } else {
        tmp___1 = tag_in(
            token as *const GumboToken,
            kEndTag,
            96 as libc::c_int,
            95 as libc::c_int,
            99 as libc::c_int,
            101 as libc::c_int,
            100 as libc::c_int,
            102 as libc::c_int,
            103 as libc::c_int,
            104 as libc::c_int,
            150 as libc::c_int,
        );
        if tmp___1 {
            add_parse_error(parser, token as *const GumboToken);
            tmp = has_an_element_in_table_scope(parser, (*token).v.end_tag);
            if tmp {
                close_current_select(parser);
                reset_insertion_mode_appropriately(parser);
                (*(*parser)._parser_state)
                    ._reprocess_current_token = 1 as libc::c_int != 0;
            } else {
                ignore_token(parser);
            }
            return 0 as libc::c_int != 0;
        } else {
            tmp___0 = handle_in_select(parser, token);
            return tmp___0;
        }
    };
}
unsafe extern "C" fn handle_in_template(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn handle_after_body(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut html_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut html: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        tmp = handle_in_body(parser, token);
        return tmp;
    } else {
        tmp___6 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___6 {
            tmp = handle_in_body(parser, token);
            return tmp;
        } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
            html_node = (*(*parser)._output).root;
            if !(html_node as libc::c_ulong != 0 as *mut libc::c_void as libc::c_ulong) {
                __assert_fail(
                    b"html_node != NULL\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                    3456 as libc::c_uint,
                    b"handle_after_body\0" as *const u8 as *const libc::c_char,
                );
            }
            append_comment_node(parser, html_node, token as *const GumboToken);
            return 1 as libc::c_int != 0;
        } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
            add_parse_error(parser, token as *const GumboToken);
            ignore_token(parser);
            return 0 as libc::c_int != 0;
        } else {
            tmp___5 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_HTML);
            if tmp___5 {
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_AFTER_AFTER_BODY);
                html = *((*(*parser)._parser_state)._open_elements.data)
                    .offset(0 as libc::c_int as isize) as *mut GumboNode;
                tmp___4 = node_tag_is(html as *const GumboNode, GUMBO_TAG_HTML);
                if !tmp___4 {
                    __assert_fail(
                        b"node_tag_is(html, GUMBO_TAG_HTML)\0" as *const u8
                            as *const libc::c_char,
                        b"deps/gumbo-parser/parser.c\0" as *const u8
                            as *const libc::c_char,
                        3467 as libc::c_uint,
                        b"handle_after_body\0" as *const u8 as *const libc::c_char,
                    );
                }
                record_end_of_element(
                    (*(*parser)._parser_state)._current_token,
                    &mut (*html).v.element,
                );
                return 1 as libc::c_int != 0;
            } else if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
                return 1 as libc::c_int != 0
            } else {
                add_parse_error(parser, token as *const GumboToken);
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_BODY);
                (*(*parser)._parser_state)
                    ._reprocess_current_token = 1 as libc::c_int != 0;
                return 0 as libc::c_int != 0;
            }
        }
    };
}
unsafe extern "C" fn handle_in_frameset(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___2: bool = false;
    let mut tmp___3: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: bool = false;
    let mut tmp___11: bool = false;
    let mut tmp___12: bool = false;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else {
        tmp___12 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___12 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else {
            tmp___11 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_FRAMESET);
            if tmp___11 {
                insert_element_from_token(parser, token);
                return 1 as libc::c_int != 0;
            } else {
                tmp___10 = tag_is(
                    token as *const GumboToken,
                    kEndTag,
                    GUMBO_TAG_FRAMESET,
                );
                if tmp___10 {
                    tmp___1 = get_current_node(parser);
                    tmp___2 = node_tag_is(tmp___1 as *const GumboNode, GUMBO_TAG_HTML);
                    if tmp___2 {
                        add_parse_error(parser, token as *const GumboToken);
                        ignore_token(parser);
                        return 0 as libc::c_int != 0;
                    }
                    pop_current_node(parser);
                    tmp___3 = get_current_node(parser);
                    tmp___4 = node_tag_is(
                        tmp___3 as *const GumboNode,
                        GUMBO_TAG_FRAMESET,
                    );
                    if !tmp___4 {
                        set_insertion_mode(parser, GUMBO_INSERTION_MODE_AFTER_FRAMESET);
                    }
                    return 1 as libc::c_int != 0;
                } else {
                    tmp___9 = tag_is(
                        token as *const GumboToken,
                        kStartTag,
                        GUMBO_TAG_FRAME,
                    );
                    if tmp___9 {
                        insert_element_from_token(parser, token);
                        pop_current_node(parser);
                        acknowledge_self_closing_tag(parser);
                        return 1 as libc::c_int != 0;
                    } else {
                        tmp___8 = tag_is(
                            token as *const GumboToken,
                            kStartTag,
                            GUMBO_TAG_NOFRAMES,
                        );
                        if tmp___8 {
                            tmp___5 = handle_in_head(parser, token);
                            return tmp___5;
                        } else if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
                            tmp___6 = get_current_node(parser);
                            tmp___7 = node_tag_is(
                                tmp___6 as *const GumboNode,
                                GUMBO_TAG_HTML,
                            );
                            if !tmp___7 {
                                add_parse_error(parser, token as *const GumboToken);
                                return 0 as libc::c_int != 0;
                            }
                            return 1 as libc::c_int != 0;
                        } else {
                            add_parse_error(parser, token as *const GumboToken);
                            ignore_token(parser);
                            return 0 as libc::c_int != 0;
                        }
                    }
                }
            }
        }
    };
}
unsafe extern "C" fn handle_after_frameset(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        insert_text_token(parser, token);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_current_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        add_parse_error(parser, token as *const GumboToken);
        ignore_token(parser);
        return 0 as libc::c_int != 0;
    } else {
        tmp___4 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___4 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else {
            tmp___3 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_HTML);
            if tmp___3 {
                set_insertion_mode(parser, GUMBO_INSERTION_MODE_AFTER_AFTER_FRAMESET);
                return 1 as libc::c_int != 0;
            } else {
                tmp___2 = tag_is(
                    token as *const GumboToken,
                    kStartTag,
                    GUMBO_TAG_NOFRAMES,
                );
                if tmp___2 {
                    tmp___1 = handle_in_head(parser, token);
                    return tmp___1;
                } else if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
                    return 1 as libc::c_int != 0
                } else {
                    add_parse_error(parser, token as *const GumboToken);
                    ignore_token(parser);
                    return 0 as libc::c_int != 0;
                }
            }
        }
    };
}
unsafe extern "C" fn handle_after_after_body(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_document_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        tmp___0 = handle_in_body(parser, token);
        return tmp___0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        tmp___0 = handle_in_body(parser, token);
        return tmp___0;
    } else {
        tmp___1 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___1 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
            return 1 as libc::c_int != 0
        } else {
            add_parse_error(parser, token as *const GumboToken);
            set_insertion_mode(parser, GUMBO_INSERTION_MODE_IN_BODY);
            (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
            return 0 as libc::c_int != 0;
        }
    };
}
unsafe extern "C" fn handle_after_after_frameset(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    if (*token).type_0 as libc::c_uint == 3 as libc::c_uint {
        tmp = get_document_node(parser);
        append_comment_node(parser, tmp, token as *const GumboToken);
        return 1 as libc::c_int != 0;
    } else if (*token).type_0 as libc::c_uint == 0 as libc::c_uint {
        tmp___0 = handle_in_body(parser, token);
        return tmp___0;
    } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
        tmp___0 = handle_in_body(parser, token);
        return tmp___0;
    } else {
        tmp___3 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_HTML);
        if tmp___3 {
            tmp___0 = handle_in_body(parser, token);
            return tmp___0;
        } else if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
            return 1 as libc::c_int != 0
        } else {
            tmp___2 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_NOFRAMES);
            if tmp___2 {
                tmp___1 = handle_in_head(parser, token);
                return tmp___1;
            } else {
                add_parse_error(parser, token as *const GumboToken);
                ignore_token(parser);
                return 0 as libc::c_int != 0;
            }
        }
    };
}
static mut kTokenHandlers: [TokenHandler; 23] = unsafe {
    [
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_initial
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_before_html
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_before_head
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_head
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_head_noscript
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_after_head
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_body
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_text
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_table
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_table_text
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_caption
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_column_group
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_table_body
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_row
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_cell
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_select
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_select_in_table
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_template
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_after_body
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_in_frameset
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_after_frameset
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_after_after_body
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
        ::std::mem::transmute::<
            Option::<unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool>,
            TokenHandler,
        >(
            Some(
                handle_after_after_frameset
                    as unsafe extern "C" fn(*mut GumboParser, *mut GumboToken) -> bool,
            ),
        ),
    ]
};
unsafe extern "C" fn handle_html_content(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    tmp = (Some(
        (*kTokenHandlers
            .as_ptr()
            .offset((*(*parser)._parser_state)._insertion_mode as libc::c_uint as isize))
            .expect("non-null function pointer"),
    ))
        .expect("non-null function pointer")(parser, token);
    return tmp;
}
unsafe extern "C" fn handle_in_foreign_content(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut current_block: u64;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: bool = false;
    let mut tmp___2: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___3: bool = false;
    let mut tmp___4: *mut GumboNode = 0 as *mut GumboNode;
    let mut current_namespace: GumboNamespaceEnum = GUMBO_NAMESPACE_HTML;
    let mut tmp___5: *mut GumboNode = 0 as *mut GumboNode;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___7: *mut GumboNode = 0 as *mut GumboNode;
    let mut token_tagname: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut node_tagname: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut is_success: bool = false;
    let mut tmp___9: bool = false;
    let mut i: libc::c_int = 0;
    let mut tmp___10: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___11: bool = false;
    let mut tmp___13: bool = false;
    let mut tmp___14: libc::c_int = 0;
    let mut tmp___15: bool = false;
    let mut tmp___16: bool = false;
    let mut tmp___17: bool = false;
    let mut tmp___18: bool = false;
    let mut tmp___19: bool = false;
    match (*token).type_0 as libc::c_uint {
        6 => {
            add_parse_error(parser, token as *const GumboToken);
            (*token).type_0 = GUMBO_TOKEN_CHARACTER;
            (*token).v.character = kUtf8ReplacementChar;
            insert_text_token(parser, token);
            return 0 as libc::c_int != 0;
        }
        4 => {
            insert_text_token(parser, token);
            return 1 as libc::c_int != 0;
        }
        5 => {
            insert_text_token(parser, token);
            set_frameset_not_ok(parser);
            return 1 as libc::c_int != 0;
        }
        3 => {
            tmp = get_current_node(parser);
            append_comment_node(parser, tmp, token as *const GumboToken);
            return 1 as libc::c_int != 0;
        }
        0 => {
            add_parse_error(parser, token as *const GumboToken);
            ignore_token(parser);
            return 0 as libc::c_int != 0;
        }
        _ => {}
    }
    tmp___15 = tag_in(
        token as *const GumboToken,
        kStartTag,
        57 as libc::c_int,
        140 as libc::c_int,
        28 as libc::c_int,
        10 as libc::c_int,
        66 as libc::c_int,
        142 as libc::c_int,
        50 as libc::c_int,
        34 as libc::c_int,
        38 as libc::c_int,
        32 as libc::c_int,
        33 as libc::c_int,
        40 as libc::c_int,
        73 as libc::c_int,
        15 as libc::c_int,
        16 as libc::c_int,
        17 as libc::c_int,
        18 as libc::c_int,
        19 as libc::c_int,
        20 as libc::c_int,
        1 as libc::c_int,
        26 as libc::c_int,
        56 as libc::c_int,
        71 as libc::c_int,
        31 as libc::c_int,
        132 as libc::c_int,
        122 as libc::c_int,
        5 as libc::c_int,
        146 as libc::c_int,
        29 as libc::c_int,
        25 as libc::c_int,
        27 as libc::c_int,
        60 as libc::c_int,
        43 as libc::c_int,
        42 as libc::c_int,
        65 as libc::c_int,
        41 as libc::c_int,
        138 as libc::c_int,
        54 as libc::c_int,
        55 as libc::c_int,
        95 as libc::c_int,
        148 as libc::c_int,
        58 as libc::c_int,
        30 as libc::c_int,
        51 as libc::c_int,
        150 as libc::c_int,
    );
    if !tmp___15 {
        tmp___16 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_FONT);
        if tmp___16 {
            tmp___17 = token_has_attribute(
                token as *const GumboToken,
                b"color\0" as *const u8 as *const libc::c_char,
            );
            if tmp___17 {
                current_block = 5222098282247160654;
            } else {
                tmp___18 = token_has_attribute(
                    token as *const GumboToken,
                    b"face\0" as *const u8 as *const libc::c_char,
                );
                if tmp___18 {
                    current_block = 5222098282247160654;
                } else {
                    tmp___19 = token_has_attribute(
                        token as *const GumboToken,
                        b"size\0" as *const u8 as *const libc::c_char,
                    );
                    if tmp___19 {
                        current_block = 5222098282247160654;
                    } else {
                        current_block = 3820247578567811600;
                    }
                }
            }
        } else {
            current_block = 3820247578567811600;
        }
        match current_block {
            5222098282247160654 => {}
            _ => {
                if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
                    tmp___5 = get_current_node(parser);
                    current_namespace = (*tmp___5).v.element.tag_namespace;
                    if current_namespace as libc::c_uint == 2 as libc::c_uint {
                        adjust_mathml_attributes(parser, token);
                    }
                    if current_namespace as libc::c_uint == 1 as libc::c_uint {
                        adjust_svg_attributes(parser, token);
                    }
                    adjust_foreign_attributes(parser, token);
                    insert_foreign_element(parser, token, current_namespace);
                    if (*token).v.start_tag.is_self_closing {
                        pop_current_node(parser);
                        acknowledge_self_closing_tag(parser);
                    }
                    return 1 as libc::c_int != 0;
                } else {
                    if !((*token).type_0 as libc::c_uint == 2 as libc::c_uint) {
                        __assert_fail(
                            b"token->type == GUMBO_TOKEN_END_TAG\0" as *const u8
                                as *const libc::c_char,
                            b"deps/gumbo-parser/parser.c\0" as *const u8
                                as *const libc::c_char,
                            3708 as libc::c_uint,
                            b"handle_in_foreign_content\0" as *const u8
                                as *const libc::c_char,
                        );
                    }
                    tmp___7 = get_current_node(parser);
                    node = tmp___7;
                    if !(node as libc::c_ulong
                        != 0 as *mut libc::c_void as libc::c_ulong)
                    {
                        __assert_fail(
                            b"node != NULL\0" as *const u8 as *const libc::c_char,
                            b"deps/gumbo-parser/parser.c\0" as *const u8
                                as *const libc::c_char,
                            3710 as libc::c_uint,
                            b"handle_in_foreign_content\0" as *const u8
                                as *const libc::c_char,
                        );
                    }
                    token_tagname = (*token).original_text;
                    node_tagname = (*node).v.element.original_tag;
                    gumbo_tag_from_original_text(&mut token_tagname);
                    gumbo_tag_from_original_text(&mut node_tagname);
                    is_success = 1 as libc::c_int != 0;
                    tmp___9 = gumbo_string_equals_ignore_case(
                        &mut node_tagname as *mut GumboStringPiece
                            as *const GumboStringPiece,
                        &mut token_tagname as *mut GumboStringPiece
                            as *const GumboStringPiece,
                    );
                    if !tmp___9 {
                        add_parse_error(parser, token as *const GumboToken);
                        is_success = 0 as libc::c_int != 0;
                    }
                    i = (*(*parser)._parser_state)._open_elements.length as libc::c_int;
                    i -= 1;
                    while i > 0 as libc::c_int {
                        gumbo_debug(
                            b"Foreign %.*s node at %d.\n\0" as *const u8
                                as *const libc::c_char,
                            node_tagname.length,
                            node_tagname.data,
                            i,
                        );
                        tmp___11 = gumbo_string_equals_ignore_case(
                            &mut node_tagname as *mut GumboStringPiece
                                as *const GumboStringPiece,
                            &mut token_tagname as *mut GumboStringPiece
                                as *const GumboStringPiece,
                        );
                        if tmp___11 {
                            gumbo_debug(
                                b"Matches.\n\0" as *const u8 as *const libc::c_char,
                            );
                            loop {
                                tmp___10 = pop_current_node(parser);
                                if !(tmp___10 as libc::c_ulong != node as libc::c_ulong) {
                                    break;
                                }
                            }
                            return is_success;
                        }
                        i -= 1;
                        node = *((*(*parser)._parser_state)._open_elements.data)
                            .offset(i as isize) as *mut GumboNode;
                        if (*node).v.element.tag_namespace as libc::c_uint
                            == 0 as libc::c_uint
                        {
                            break;
                        }
                        node_tagname = (*node).v.element.original_tag;
                        gumbo_tag_from_original_text(&mut node_tagname);
                    }
                    if !((*node).v.element.tag_namespace as libc::c_uint
                        == 0 as libc::c_uint)
                    {
                        __assert_fail(
                            b"node->v.element.tag_namespace == GUMBO_NAMESPACE_HTML\0"
                                as *const u8 as *const libc::c_char,
                            b"deps/gumbo-parser/parser.c\0" as *const u8
                                as *const libc::c_char,
                            3748 as libc::c_uint,
                            b"handle_in_foreign_content\0" as *const u8
                                as *const libc::c_char,
                        );
                    }
                    tmp___13 = handle_html_content(parser, token);
                    if tmp___13 {
                        if is_success {
                            tmp___14 = 1 as libc::c_int;
                        } else {
                            tmp___14 = 0 as libc::c_int;
                        }
                    } else {
                        tmp___14 = 0 as libc::c_int;
                    }
                    return tmp___14 != 0;
                }
            }
        }
    }
    add_parse_error(parser, token as *const GumboToken);
    loop {
        pop_current_node(parser);
        tmp___0 = get_current_node(parser);
        tmp___1 = is_mathml_integration_point(tmp___0 as *const GumboNode);
        if tmp___1 {
            break;
        }
        tmp___2 = get_current_node(parser);
        tmp___3 = is_html_integration_point(tmp___2 as *const GumboNode);
        if tmp___3 {
            break;
        }
        tmp___4 = get_current_node(parser);
        if (*tmp___4).v.element.tag_namespace as libc::c_uint == 0 as libc::c_uint {
            break;
        }
    }
    (*(*parser)._parser_state)._reprocess_current_token = 1 as libc::c_int != 0;
    return 0 as libc::c_int != 0;
}
unsafe extern "C" fn handle_token(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) -> bool {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut current_node: *const GumboNode = 0 as *const GumboNode;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___3: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    let mut tmp___8: bool = false;
    let mut tmp___9: bool = false;
    let mut tmp___10: bool = false;
    if (*(*parser)._parser_state)._ignore_next_linefeed {
        if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
            if (*token).v.character == 10 as libc::c_int {
                (*(*parser)._parser_state)._ignore_next_linefeed = 0 as libc::c_int != 0;
                ignore_token(parser);
                return 1 as libc::c_int != 0;
            }
        }
    }
    (*(*parser)._parser_state)._ignore_next_linefeed = 0 as libc::c_int != 0;
    tmp = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_BODY);
    if tmp {
        (*(*parser)._parser_state)._closed_body_tag = 1 as libc::c_int != 0;
    }
    tmp___0 = tag_is(token as *const GumboToken, kEndTag, GUMBO_TAG_HTML);
    if tmp___0 {
        (*(*parser)._parser_state)._closed_html_tag = 1 as libc::c_int != 0;
    }
    tmp___1 = get_current_node(parser);
    current_node = tmp___1 as *const GumboNode;
    if !current_node.is_null() {
        if !((*current_node).type_0 as libc::c_uint == 1 as libc::c_uint) {
            __assert_fail(
                b"!current_node || current_node->type == GUMBO_NODE_ELEMENT\0"
                    as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                3779 as libc::c_uint,
                b"handle_token\0" as *const u8 as *const libc::c_char,
            );
        }
    }
    if !current_node.is_null() {
        tmp___3 = gumbo_normalized_tagname((*current_node).v.element.tag);
        gumbo_debug(
            b"Current node: <%s>.\n\0" as *const u8 as *const libc::c_char,
            tmp___3,
        );
    }
    if current_node.is_null() {
        tmp___4 = handle_html_content(parser, token);
        return tmp___4;
    } else if (*current_node).v.element.tag_namespace as libc::c_uint
            == 0 as libc::c_uint
        {
        tmp___4 = handle_html_content(parser, token);
        return tmp___4;
    } else {
        tmp___6 = is_mathml_integration_point(current_node);
        if tmp___6 {
            if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            } else if (*token).type_0 as libc::c_uint == 6 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            } else if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
                tmp___7 = tag_in(
                    token as *const GumboToken,
                    kStartTag,
                    89 as libc::c_int,
                    90 as libc::c_int,
                    150 as libc::c_int,
                );
                if !tmp___7 {
                    tmp___4 = handle_html_content(parser, token);
                    return tmp___4;
                }
            }
        }
        if (*current_node).v.element.tag_namespace as libc::c_uint == 2 as libc::c_uint {
            tmp___8 = node_tag_is(current_node, GUMBO_TAG_ANNOTATION_XML);
            if tmp___8 {
                tmp___9 = tag_is(token as *const GumboToken, kStartTag, GUMBO_TAG_SVG);
                if tmp___9 {
                    tmp___4 = handle_html_content(parser, token);
                    return tmp___4;
                }
            }
        }
        tmp___10 = is_html_integration_point(current_node);
        if tmp___10 {
            if (*token).type_0 as libc::c_uint == 1 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            } else if (*token).type_0 as libc::c_uint == 5 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            } else if (*token).type_0 as libc::c_uint == 6 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            } else if (*token).type_0 as libc::c_uint == 4 as libc::c_uint {
                tmp___4 = handle_html_content(parser, token);
                return tmp___4;
            }
        }
        if (*token).type_0 as libc::c_uint == 7 as libc::c_uint {
            tmp___4 = handle_html_content(parser, token);
            return tmp___4;
        } else {
            tmp___5 = handle_in_foreign_content(parser, token);
            return tmp___5;
        }
    };
}
pub unsafe extern "C" fn gumbo_parse(
    mut buffer: *const libc::c_char,
) -> *mut GumboOutput {
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut GumboOutput = 0 as *mut GumboOutput;
    tmp = strlen(buffer);
    tmp___0 = gumbo_parse_with_options(&kGumboDefaultOptions, buffer, tmp);
    return tmp___0;
}
pub unsafe extern "C" fn gumbo_parse_with_options(
    mut options: *const GumboOptions,
    mut buffer: *const libc::c_char,
    mut length: size_t,
) -> *mut GumboOutput {
    let mut parser: GumboParser = GumboParser {
        _options: 0 as *const GumboInternalOptions,
        _output: 0 as *mut GumboInternalOutput,
        _tokenizer_state: 0 as *mut GumboInternalTokenizerState,
        _parser_state: 0 as *mut GumboInternalParserState,
    };
    let mut state: *mut GumboParserState = 0 as *mut GumboParserState;
    let mut loop_count: libc::c_int = 0;
    let mut token: GumboToken = GumboToken {
        type_0: GUMBO_TOKEN_DOCTYPE,
        position: GumboSourcePosition {
            line: 0,
            column: 0,
            offset: 0,
        },
        original_text: __anonstruct_GumboStringPiece_673951369 {
            data: 0 as *const libc::c_char,
            length: 0,
        },
        v: __anonunion_v_147506068 {
            doc_type: GumboTokenDocType {
                name: 0 as *const libc::c_char,
                public_identifier: 0 as *const libc::c_char,
                system_identifier: 0 as *const libc::c_char,
                force_quirks: false,
                has_public_identifier: false,
                has_system_identifier: false,
            },
        },
    };
    let mut has_error: bool = false;
    let mut current_node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: bool = false;
    let mut tmp___2: libc::c_int = 0;
    let mut token_type: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: bool = false;
    let mut tmp___5: libc::c_int = 0;
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp___7: *mut GumboError = 0 as *mut GumboError;
    let mut doc_type: *mut GumboDocument = 0 as *mut GumboDocument;
    let mut tmp___9: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___10: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___11: *mut libc::c_char = 0 as *mut libc::c_char;
    parser._options = options;
    output_init(&mut parser);
    gumbo_tokenizer_state_init(&mut parser, buffer, length);
    parser_state_init(&mut parser);
    state = parser._parser_state;
    gumbo_debug(
        b"Parsing %.*s.\n\0" as *const u8 as *const libc::c_char,
        length,
        buffer,
    );
    loop_count = 0 as libc::c_int;
    has_error = 0 as libc::c_int != 0;
    loop {
        if (*state)._reprocess_current_token {
            (*state)._reprocess_current_token = 0 as libc::c_int != 0;
        } else {
            tmp = get_current_node(&mut parser);
            current_node = tmp;
            if !current_node.is_null() {
                if (*current_node).v.element.tag_namespace as libc::c_uint
                    != 0 as libc::c_uint
                {
                    tmp___0 = 1 as libc::c_int;
                } else {
                    tmp___0 = 0 as libc::c_int;
                }
            } else {
                tmp___0 = 0 as libc::c_int;
            }
            gumbo_tokenizer_set_is_current_node_foreign(&mut parser, tmp___0 != 0);
            tmp___1 = gumbo_lex(&mut parser, &mut token);
            if tmp___1 {
                if has_error {
                    tmp___2 = 1 as libc::c_int;
                } else {
                    tmp___2 = 0 as libc::c_int;
                }
            } else {
                tmp___2 = 1 as libc::c_int;
            }
            has_error = tmp___2 != 0;
        }
        token_type = b"text\0" as *const u8 as *const libc::c_char;
        match token.type_0 as libc::c_uint {
            0 => {
                token_type = b"doctype\0" as *const u8 as *const libc::c_char;
            }
            1 => {
                token_type = gumbo_normalized_tagname(token.v.start_tag.tag);
            }
            2 => {
                token_type = gumbo_normalized_tagname(token.v.end_tag);
            }
            3 => {
                token_type = b"comment\0" as *const u8 as *const libc::c_char;
            }
            _ => {}
        }
        gumbo_debug(
            b"Handling %s token @%d:%d in state %d.\n\0" as *const u8
                as *const libc::c_char,
            token_type as *mut libc::c_char,
            token.position.line,
            token.position.column,
            (*state)._insertion_mode as libc::c_uint,
        );
        (*state)._current_token = &mut token;
        if token.type_0 as libc::c_uint == 1 as libc::c_uint {
            if token.v.start_tag.is_self_closing {
                tmp___3 = 0 as libc::c_int;
            } else {
                tmp___3 = 1 as libc::c_int;
            }
        } else {
            tmp___3 = 1 as libc::c_int;
        }
        (*state)._self_closing_flag_acknowledged = tmp___3 != 0;
        tmp___4 = handle_token(&mut parser, &mut token);
        if tmp___4 {
            if has_error {
                tmp___5 = 1 as libc::c_int;
            } else {
                tmp___5 = 0 as libc::c_int;
            }
        } else {
            tmp___5 = 1 as libc::c_int;
        }
        has_error = tmp___5 != 0;
        if !(*state)._reprocess_current_token {
            if !(token.type_0 as libc::c_uint != 1 as libc::c_uint) {
                if !(token.v.start_tag.attributes.data as libc::c_ulong
                    == 0 as *mut libc::c_void as libc::c_ulong)
                {
                    __assert_fail(
                        b"state->_reprocess_current_token || token.type != GUMBO_TOKEN_START_TAG || token.v.start_tag.attributes.data == NULL\0"
                            as *const u8 as *const libc::c_char,
                        b"deps/gumbo-parser/parser.c\0" as *const u8
                            as *const libc::c_char,
                        3872 as libc::c_uint,
                        b"gumbo_parse_with_options\0" as *const u8 as *const libc::c_char,
                    );
                }
            }
        }
        if !(*state)._self_closing_flag_acknowledged {
            tmp___7 = add_parse_error(
                &mut parser,
                &mut token as *mut GumboToken as *const GumboToken,
            );
            error___0 = tmp___7;
            if !error___0.is_null() {
                (*error___0).type_0 = GUMBO_ERR_UNACKNOWLEDGED_SELF_CLOSING_TAG;
            }
        }
        loop_count += 1;
        if !(loop_count < 1000000000 as libc::c_int) {
            __assert_fail(
                b"loop_count < 1000000000\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/parser.c\0" as *const u8 as *const libc::c_char,
                3882 as libc::c_uint,
                b"gumbo_parse_with_options\0" as *const u8 as *const libc::c_char,
            );
        }
        if !(token.type_0 as libc::c_uint != 7 as libc::c_uint) {
            if !(*state)._reprocess_current_token {
                break;
            }
        }
        if !(*options).stop_on_first_error {
            continue;
        }
        if has_error {
            break;
        }
    }
    finish_parsing(&mut parser);
    doc_type = &mut (*(*parser._output).document).v.document;
    if (*doc_type).name as libc::c_ulong == 0 as *mut libc::c_void as libc::c_ulong {
        tmp___9 = gumbo_copy_stringz(
            &mut parser,
            b"\0" as *const u8 as *const libc::c_char,
        );
        (*doc_type).name = tmp___9 as *const libc::c_char;
    }
    if (*doc_type).public_identifier as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp___10 = gumbo_copy_stringz(
            &mut parser,
            b"\0" as *const u8 as *const libc::c_char,
        );
        (*doc_type).public_identifier = tmp___10 as *const libc::c_char;
    }
    if (*doc_type).system_identifier as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong
    {
        tmp___11 = gumbo_copy_stringz(
            &mut parser,
            b"\0" as *const u8 as *const libc::c_char,
        );
        (*doc_type).system_identifier = tmp___11 as *const libc::c_char;
    }
    parser_state_destroy(&mut parser);
    gumbo_tokenizer_state_destroy(&mut parser);
    return parser._output;
}
pub unsafe extern "C" fn gumbo_destroy_node(
    mut options: *mut GumboOptions,
    mut node: *mut GumboNode,
) {
    let mut parser: GumboParser = GumboParser {
        _options: 0 as *const GumboInternalOptions,
        _output: 0 as *mut GumboInternalOutput,
        _tokenizer_state: 0 as *mut GumboInternalTokenizerState,
        _parser_state: 0 as *mut GumboInternalParserState,
    };
    parser._options = options as *const GumboInternalOptions;
    destroy_node(&mut parser, node);
}
pub unsafe extern "C" fn gumbo_destroy_output(
    mut options: *const GumboOptions,
    mut output: *mut GumboOutput,
) {
    let mut parser: GumboParser = GumboParser {
        _options: 0 as *const GumboInternalOptions,
        _output: 0 as *mut GumboInternalOutput,
        _tokenizer_state: 0 as *mut GumboInternalTokenizerState,
        _parser_state: 0 as *mut GumboInternalParserState,
    };
    let mut i: libc::c_int = 0;
    parser._options = options;
    destroy_node(&mut parser, (*output).document);
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*output).errors.length {
        gumbo_error_destroy(
            &mut parser,
            *((*output).errors.data).offset(i as isize) as *mut GumboError,
        );
        i += 1;
    }
    gumbo_vector_destroy(&mut parser, &mut (*output).errors);
    gumbo_parser_deallocate(&mut parser, output as *mut libc::c_void);
}
unsafe extern "C" fn print_message(
    mut parser: *mut GumboParser,
    mut output: *mut GumboStringBuffer,
    mut format: *const libc::c_char,
    mut args: ...
) -> libc::c_int {
    let mut args_0: ::std::ffi::VaListImpl;
    let mut remaining_capacity: libc::c_int = 0;
    let mut bytes_written: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    args_0 = args.clone();
    remaining_capacity = ((*output).capacity).wrapping_sub((*output).length)
        as libc::c_int;
    tmp = vsnprintf(
        ((*output).data).offset((*output).length as isize),
        remaining_capacity as size_t,
        format,
        args_0.as_va_list(),
    );
    bytes_written = tmp;
    if bytes_written > remaining_capacity {
        gumbo_string_buffer_reserve(
            parser,
            ((*output).capacity).wrapping_add(bytes_written as size_t),
            output,
        );
        remaining_capacity = ((*output).capacity).wrapping_sub((*output).length)
            as libc::c_int;
        bytes_written = vsnprintf(
            ((*output).data).offset((*output).length as isize),
            remaining_capacity as size_t,
            format,
            args_0.as_va_list(),
        );
    }
    (*output)
        .length = ((*output).length as libc::c_ulong)
        .wrapping_add(bytes_written as size_t) as size_t as size_t;
    return bytes_written;
}
unsafe extern "C" fn print_tag_stack(
    mut parser: *mut GumboParser,
    mut error___0: *const GumboParserError,
    mut output: *mut GumboStringBuffer,
) {
    let mut i: libc::c_int = 0;
    let mut tag: GumboTag = GUMBO_TAG_HTML;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    print_message(
        parser,
        output,
        b"  Currently open tags: \0" as *const u8 as *const libc::c_char,
    );
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*error___0).tag_stack.length {
        if i != 0 {
            print_message(parser, output, b", \0" as *const u8 as *const libc::c_char);
        }
        tag = *((*error___0).tag_stack.data).offset(i as isize) as GumboTag;
        tmp = gumbo_normalized_tagname(tag);
        print_message(parser, output, tmp);
        i += 1;
    }
    gumbo_string_buffer_append_codepoint(parser, '.' as i32, output);
}
unsafe extern "C" fn handle_parser_error(
    mut parser: *mut GumboParser,
    mut error___0: *const GumboParserError,
    mut output: *mut GumboStringBuffer,
) {
    if (*error___0).parser_state as libc::c_uint == 0 as libc::c_uint {
        if (*error___0).input_type as libc::c_uint != 0 as libc::c_uint {
            print_message(
                parser,
                output,
                b"The doctype must be the first token in the document\0" as *const u8
                    as *const libc::c_char,
            );
            return;
        }
    }
    match (*error___0).input_type as libc::c_uint {
        0 => {
            print_message(
                parser,
                output,
                b"This is not a legal doctype\0" as *const u8 as *const libc::c_char,
            );
            return;
        }
        3 => {
            __assert_fail(
                b"0\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/error.c\0" as *const u8 as *const libc::c_char,
                84 as libc::c_uint,
                b"handle_parser_error\0" as *const u8 as *const libc::c_char,
            );
        }
        5 | 4 => {
            print_message(
                parser,
                output,
                b"Character tokens aren't legal here\0" as *const u8
                    as *const libc::c_char,
            );
            return;
        }
        6 => {
            print_message(
                parser,
                output,
                b"Null bytes are not allowed in HTML5\0" as *const u8
                    as *const libc::c_char,
            );
            return;
        }
        7 => {
            if (*error___0).parser_state as libc::c_uint == 0 as libc::c_uint {
                print_message(
                    parser,
                    output,
                    b"You must provide a doctype\0" as *const u8 as *const libc::c_char,
                );
            } else {
                print_message(
                    parser,
                    output,
                    b"Premature end of file\0" as *const u8 as *const libc::c_char,
                );
                print_tag_stack(parser, error___0, output);
            }
            return;
        }
        2 | 1 => {
            print_message(
                parser,
                output,
                b"That tag isn't allowed here\0" as *const u8 as *const libc::c_char,
            );
            print_tag_stack(parser, error___0, output);
            return;
        }
        _ => {}
    };
}
unsafe extern "C" fn find_last_newline(
    mut original_text: *const libc::c_char,
    mut error_location: *const libc::c_char,
) -> *const libc::c_char {
    let mut c: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___1: *const libc::c_char = 0 as *const libc::c_char;
    if !(error_location as libc::c_ulong >= original_text as libc::c_ulong) {
        __assert_fail(
            b"error_location >= original_text\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/error.c\0" as *const u8 as *const libc::c_char,
            117 as libc::c_uint,
            b"find_last_newline\0" as *const u8 as *const libc::c_char,
        );
    }
    c = error_location;
    while c as libc::c_ulong != original_text as libc::c_ulong {
        if !(*c as libc::c_int != 10 as libc::c_int) {
            break;
        }
        if *c == 0 {
            if !(c as libc::c_ulong == error_location as libc::c_ulong) {
                __assert_fail(
                    b"*c || c == error_location\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/error.c\0" as *const u8 as *const libc::c_char,
                    121 as libc::c_uint,
                    b"find_last_newline\0" as *const u8 as *const libc::c_char,
                );
            }
        }
        c = c.offset(-1);
    }
    if c as libc::c_ulong == original_text as libc::c_ulong {
        tmp___1 = c;
    } else {
        tmp___1 = c.offset(1 as libc::c_int as isize);
    }
    return tmp___1;
}
unsafe extern "C" fn find_next_newline(
    mut original_text: *const libc::c_char,
    mut error_location: *const libc::c_char,
) -> *const libc::c_char {
    let mut c: *const libc::c_char = 0 as *const libc::c_char;
    c = error_location;
    while *c != 0 {
        if !(*c as libc::c_int != 10 as libc::c_int) {
            break;
        }
        c = c.offset(1);
    }
    return c;
}
pub unsafe extern "C" fn gumbo_add_error(
    mut parser: *mut GumboInternalParser,
) -> *mut GumboError {
    let mut max_errors: libc::c_int = 0;
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    max_errors = (*(*parser)._options).max_errors;
    if max_errors < 0 as libc::c_int {
        if (*(*parser)._output).errors.length >= max_errors as libc::c_uint {
            return 0 as *mut libc::c_void as *mut GumboError;
        }
    }
    tmp = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboError>() as libc::c_ulong,
    );
    error___0 = tmp as *mut GumboError;
    gumbo_vector_add(
        parser,
        error___0 as *mut libc::c_void,
        &mut (*(*parser)._output).errors,
    );
    return error___0;
}
pub unsafe extern "C" fn gumbo_error_to_string(
    mut parser: *mut GumboInternalParser,
    mut error___0: *const GumboError,
    mut output: *mut GumboStringBuffer,
) {
    print_message(
        parser,
        output,
        b"@%d:%d: \0" as *const u8 as *const libc::c_char,
        (*error___0).position.line,
        (*error___0).position.column,
    );
    match (*error___0).type_0 as libc::c_uint {
        0 => {
            print_message(
                parser,
                output,
                b"Invalid UTF8 character 0x%x\0" as *const u8 as *const libc::c_char,
                (*error___0).v.codepoint,
            );
        }
        1 => {
            print_message(
                parser,
                output,
                b"Input stream ends with a truncated UTF8 character 0x%x\0" as *const u8
                    as *const libc::c_char,
                (*error___0).v.codepoint,
            );
        }
        3 => {
            print_message(
                parser,
                output,
                b"No digits after &# in numeric character reference\0" as *const u8
                    as *const libc::c_char,
            );
        }
        4 => {
            print_message(
                parser,
                output,
                b"The numeric character reference &#%d should be followed by a semicolon\0"
                    as *const u8 as *const libc::c_char,
                (*error___0).v.codepoint,
            );
        }
        5 => {
            print_message(
                parser,
                output,
                b"The numeric character reference &#%d; encodes an invalid unicode codepoint\0"
                    as *const u8 as *const libc::c_char,
                (*error___0).v.codepoint,
            );
        }
        6 => {
            print_message(
                parser,
                output,
                b"The named character reference &%.*s should be followed by a semicolon\0"
                    as *const u8 as *const libc::c_char,
                (*error___0).v.text.length as libc::c_int,
                (*error___0).v.text.data,
            );
        }
        7 => {
            print_message(
                parser,
                output,
                b"The named character reference &%.*s; is not a valid entity name\0"
                    as *const u8 as *const libc::c_char,
                (*error___0).v.text.length as libc::c_int,
                (*error___0).v.text.data,
            );
        }
        24 => {
            print_message(
                parser,
                output,
                b"Attribute %s occurs multiple times, at positions %d and %d\0"
                    as *const u8 as *const libc::c_char,
                (*error___0).v.duplicate_attr.name,
                (*error___0).v.duplicate_attr.original_index,
                (*error___0).v.duplicate_attr.new_index,
            );
        }
        41 | 40 => {
            handle_parser_error(parser, &(*error___0).v.parser, output);
        }
        _ => {
            print_message(
                parser,
                output,
                b"Tokenizer error with an unimplemented error message\0" as *const u8
                    as *const libc::c_char,
            );
        }
    }
    gumbo_string_buffer_append_codepoint(parser, '.' as i32, output);
}
pub unsafe extern "C" fn gumbo_caret_diagnostic_to_string(
    mut parser: *mut GumboInternalParser,
    mut error___0: *const GumboError,
    mut source_text: *const libc::c_char,
    mut output: *mut GumboStringBuffer,
) {
    let mut line_start: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut line_end: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    let mut original_line: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut num_spaces: libc::c_int = 0;
    gumbo_error_to_string(parser, error___0, output);
    tmp = find_last_newline(source_text, (*error___0).original_text);
    line_start = tmp;
    tmp___0 = find_next_newline(source_text, (*error___0).original_text);
    line_end = tmp___0;
    original_line.data = line_start;
    original_line.length = line_end.offset_from(line_start) as libc::c_long as size_t;
    gumbo_string_buffer_append_codepoint(parser, '\n' as i32, output);
    gumbo_string_buffer_append_string(parser, &mut original_line, output);
    gumbo_string_buffer_append_codepoint(parser, '\n' as i32, output);
    gumbo_string_buffer_reserve(
        parser,
        ((*output).length).wrapping_add((*error___0).position.column as size_t),
        output,
    );
    num_spaces = ((*error___0).position.column).wrapping_sub(1 as libc::c_uint)
        as libc::c_int;
    memset(
        ((*output).data).offset((*output).length as isize) as *mut libc::c_void,
        ' ' as i32,
        num_spaces as size_t,
    );
    (*output)
        .length = ((*output).length as libc::c_ulong).wrapping_add(num_spaces as size_t)
        as size_t as size_t;
    gumbo_string_buffer_append_codepoint(parser, '^' as i32, output);
    gumbo_string_buffer_append_codepoint(parser, '\n' as i32, output);
}
pub unsafe extern "C" fn gumbo_print_caret_diagnostic(
    mut parser: *mut GumboInternalParser,
    mut error___0: *const GumboError,
    mut source_text: *const libc::c_char,
) {
    let mut text: GumboStringBuffer = GumboStringBuffer {
        data: 0 as *mut libc::c_char,
        length: 0,
        capacity: 0,
    };
    gumbo_string_buffer_init(parser, &mut text);
    gumbo_caret_diagnostic_to_string(parser, error___0, source_text, &mut text);
    printf(
        b"%.*s\0" as *const u8 as *const libc::c_char,
        text.length as libc::c_int,
        text.data,
    );
    gumbo_string_buffer_destroy(parser, &mut text);
}
pub unsafe extern "C" fn gumbo_error_destroy(
    mut parser: *mut GumboInternalParser,
    mut error___0: *mut GumboError,
) {
    if (*error___0).type_0 as libc::c_uint == 40 as libc::c_uint {
        gumbo_vector_destroy(parser, &mut (*error___0).v.parser.tag_stack);
    } else if (*error___0).type_0 as libc::c_uint == 41 as libc::c_uint {
        gumbo_vector_destroy(parser, &mut (*error___0).v.parser.tag_stack);
    } else if (*error___0).type_0 as libc::c_uint == 24 as libc::c_uint {
        gumbo_parser_deallocate(
            parser,
            (*error___0).v.duplicate_attr.name as *mut libc::c_void,
        );
    }
    gumbo_parser_deallocate(parser, error___0 as *mut libc::c_void);
}
pub unsafe extern "C" fn gumbo_init_errors(mut parser: *mut GumboInternalParser) {
    gumbo_vector_init(
        parser,
        5 as libc::c_int as size_t,
        &mut (*(*parser)._output).errors,
    );
}
pub unsafe extern "C" fn gumbo_destroy_errors(mut parser: *mut GumboInternalParser) {
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*(*parser)._output).errors.length {
        gumbo_error_destroy(
            parser,
            *((*(*parser)._output).errors.data).offset(i as isize) as *mut GumboError,
        );
        i += 1;
    }
    gumbo_vector_destroy(parser, &mut (*(*parser)._output).errors);
}
pub static mut kUtf8ReplacementChar: libc::c_int = 65533 as libc::c_int;
unsafe extern "C" fn add_error(mut iter: *mut Utf8Iterator, mut type_0: GumboErrorType) {
    let mut parser: *mut GumboParser = 0 as *mut GumboParser;
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    let mut code_point: uint64_t = 0;
    let mut i: libc::c_int = 0;
    parser = (*iter)._parser;
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return;
    }
    (*error___0).type_0 = type_0;
    (*error___0).position = (*iter)._pos;
    (*error___0).original_text = (*iter)._start;
    code_point = 0 as libc::c_int as uint64_t;
    i = 0 as libc::c_int;
    while i < (*iter)._width {
        code_point = code_point << 8 as libc::c_int
            | *((*iter)._start).offset(i as isize) as libc::c_uchar as libc::c_ulong;
        i += 1;
    }
    (*error___0).v.codepoint = code_point;
}
unsafe extern "C" fn read_char(mut iter: *mut Utf8Iterator) {
    let mut c: libc::c_uchar = 0;
    let mut mask: libc::c_uchar = 0;
    let mut is_bad_char: libc::c_int = 0;
    let mut code_point: uint64_t = 0;
    let mut i: libc::c_int = 0;
    let mut tmp___0: bool = false;
    let mut next: *const libc::c_char = 0 as *const libc::c_char;
    mask = '\u{0}' as i32 as libc::c_uchar;
    is_bad_char = 0 as libc::c_int;
    c = *(*iter)._start as libc::c_uchar;
    if (c as libc::c_int) < 128 as libc::c_int {
        (*iter)._width = 1 as libc::c_int;
        mask = 255 as libc::c_int as libc::c_uchar;
    } else if (c as libc::c_int) < 192 as libc::c_int {
        (*iter)._width = 1 as libc::c_int;
        is_bad_char = 1 as libc::c_int;
    } else if (c as libc::c_int) < 224 as libc::c_int {
        (*iter)._width = 2 as libc::c_int;
        mask = 31 as libc::c_int as libc::c_uchar;
        if (c as libc::c_int) < 194 as libc::c_int {
            is_bad_char = 1 as libc::c_int;
        }
    } else if (c as libc::c_int) < 240 as libc::c_int {
        (*iter)._width = 3 as libc::c_int;
        mask = 15 as libc::c_int as libc::c_uchar;
    } else if (c as libc::c_int) < 245 as libc::c_int {
        (*iter)._width = 4 as libc::c_int;
        mask = 7 as libc::c_int as libc::c_uchar;
    } else if (c as libc::c_int) < 248 as libc::c_int {
        (*iter)._width = 5 as libc::c_int;
        is_bad_char = 1 as libc::c_int;
    } else if (c as libc::c_int) < 252 as libc::c_int {
        (*iter)._width = 6 as libc::c_int;
        is_bad_char = 1 as libc::c_int;
    } else if (c as libc::c_int) < 254 as libc::c_int {
        (*iter)._width = 7 as libc::c_int;
        is_bad_char = 1 as libc::c_int;
    } else {
        (*iter)._width = 1 as libc::c_int;
        is_bad_char = 1 as libc::c_int;
    }
    code_point = (c as libc::c_int & mask as libc::c_int) as uint64_t;
    if ((*iter)._start).offset((*iter)._width as isize) as libc::c_ulong
        > (*iter)._end as libc::c_ulong
    {
        (*iter)
            ._width = ((*iter)._end).offset_from((*iter)._start) as libc::c_long
            as libc::c_int;
        add_error(iter, GUMBO_ERR_UTF8_TRUNCATED);
        is_bad_char = 1 as libc::c_int;
    }
    if !((*iter)._width < 8 as libc::c_int) {
        __assert_fail(
            b"iter->_width < 8\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/utf8.c\0" as *const u8 as *const libc::c_char,
            127 as libc::c_uint,
            b"read_char\0" as *const u8 as *const libc::c_char,
        );
    }
    i = 1 as libc::c_int;
    while i < (*iter)._width {
        c = *((*iter)._start).offset(i as isize) as libc::c_uchar;
        if (c as libc::c_int) < 128 as libc::c_int {
            (*iter)._width = i;
            is_bad_char = 1 as libc::c_int;
            break;
        } else if c as libc::c_int > 191 as libc::c_int {
            (*iter)._width = i;
            is_bad_char = 1 as libc::c_int;
            break;
        } else {
            code_point = code_point << 6 as libc::c_int
                | (c as libc::c_int & -(129 as libc::c_int)) as libc::c_ulong;
            i += 1;
        }
    }
    if code_point > 1114111 as libc::c_ulong {
        is_bad_char = 1 as libc::c_int;
    }
    if is_bad_char != 0 {
        add_error(iter, GUMBO_ERR_UTF8_INVALID);
        code_point = kUtf8ReplacementChar as uint64_t;
    } else {
        tmp___0 = utf8_is_invalid_code_point(code_point as libc::c_int);
        if tmp___0 {
            add_error(iter, GUMBO_ERR_UTF8_INVALID);
            code_point = kUtf8ReplacementChar as uint64_t;
        }
    }
    if code_point == 13 as libc::c_ulong {
        next = ((*iter)._start).offset((*iter)._width as isize);
        if (next as libc::c_ulong) < (*iter)._end as libc::c_ulong {
            if *next as libc::c_int == 10 as libc::c_int {
                (*iter)._start = ((*iter)._start).offset(1);
                (*iter)._pos.offset = ((*iter)._pos.offset).wrapping_add(1);
            }
        }
        code_point = '\n' as i32 as uint64_t;
    }
    (*iter)._current = code_point as libc::c_int;
}
unsafe extern "C" fn update_position(mut iter: *mut Utf8Iterator) {
    let mut tab_stop: libc::c_int = 0;
    (*iter)
        ._pos
        .offset = ((*iter)._pos.offset).wrapping_add((*iter)._width as libc::c_uint);
    if (*iter)._current == 10 as libc::c_int {
        (*iter)._pos.line = ((*iter)._pos.line).wrapping_add(1);
        (*iter)._pos.column = 1 as libc::c_uint;
    } else if (*iter)._current == 9 as libc::c_int {
        tab_stop = (*(*(*iter)._parser)._options).tab_stop;
        (*iter)
            ._pos
            .column = ((*iter)._pos.column)
            .wrapping_div(tab_stop as libc::c_uint)
            .wrapping_add(1 as libc::c_uint)
            .wrapping_mul(tab_stop as libc::c_uint);
    } else {
        (*iter)._pos.column = ((*iter)._pos.column).wrapping_add(1);
    };
}
pub unsafe extern "C" fn utf8_is_invalid_code_point(mut c: libc::c_int) -> bool {
    let mut tmp: libc::c_int = 0;
    let mut current_block_21: u64;
    if c >= 1 as libc::c_int {
        if c <= 8 as libc::c_int {
            tmp = 1 as libc::c_int;
            current_block_21 = 7205609094909031804;
        } else {
            current_block_21 = 8641316420387475639;
        }
    } else {
        current_block_21 = 8641316420387475639;
    }
    match current_block_21 {
        8641316420387475639 => {
            if c == 11 as libc::c_int {
                tmp = 1 as libc::c_int;
            } else {
                let mut current_block_19: u64;
                if c >= 14 as libc::c_int {
                    if c <= 31 as libc::c_int {
                        tmp = 1 as libc::c_int;
                        current_block_19 = 3437258052017859086;
                    } else {
                        current_block_19 = 12574467592686511325;
                    }
                } else {
                    current_block_19 = 12574467592686511325;
                }
                match current_block_19 {
                    12574467592686511325 => {
                        let mut current_block_18: u64;
                        if c >= 127 as libc::c_int {
                            if c <= 159 as libc::c_int {
                                tmp = 1 as libc::c_int;
                                current_block_18 = 14763689060501151050;
                            } else {
                                current_block_18 = 759131360868813562;
                            }
                        } else {
                            current_block_18 = 759131360868813562;
                        }
                        match current_block_18 {
                            759131360868813562 => {
                                let mut current_block_17: u64;
                                if c >= 64976 as libc::c_int {
                                    if c <= 65007 as libc::c_int {
                                        tmp = 1 as libc::c_int;
                                        current_block_17 = 4068382217303356765;
                                    } else {
                                        current_block_17 = 17645417183999051066;
                                    }
                                } else {
                                    current_block_17 = 17645417183999051066;
                                }
                                match current_block_17 {
                                    17645417183999051066 => {
                                        if c & 65535 as libc::c_int == 65534 as libc::c_int {
                                            tmp = 1 as libc::c_int;
                                        } else if c & 65535 as libc::c_int == 65535 as libc::c_int {
                                            tmp = 1 as libc::c_int;
                                        } else {
                                            tmp = 0 as libc::c_int;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    return tmp != 0;
}
pub unsafe extern "C" fn utf8iterator_init(
    mut parser: *mut GumboInternalParser,
    mut source: *const libc::c_char,
    mut source_length: size_t,
    mut iter: *mut Utf8Iterator,
) {
    (*iter)._start = source;
    (*iter)._end = source.offset(source_length as isize);
    (*iter)._width = 0 as libc::c_int;
    (*iter)._pos.line = 1 as libc::c_uint;
    (*iter)._pos.column = 1 as libc::c_uint;
    (*iter)._pos.offset = 0 as libc::c_uint;
    (*iter)._parser = parser;
    if source_length != 0 {
        read_char(iter);
    } else {
        (*iter)._current = -(1 as libc::c_int);
    };
}
pub unsafe extern "C" fn utf8iterator_next(mut iter: *mut Utf8Iterator) {
    (*iter)._start = ((*iter)._start).offset((*iter)._width as isize);
    update_position(iter);
    if ((*iter)._start as libc::c_ulong) < (*iter)._end as libc::c_ulong {
        read_char(iter);
    } else {
        (*iter)._current = -(1 as libc::c_int);
    };
}
pub unsafe extern "C" fn utf8iterator_current(
    mut iter: *const Utf8Iterator,
) -> libc::c_int {
    return (*iter)._current;
}
pub unsafe extern "C" fn utf8iterator_get_position(
    mut iter: *const Utf8Iterator,
    mut output: *mut GumboSourcePosition,
) {
    *output = (*iter)._pos;
}
pub unsafe extern "C" fn utf8iterator_get_char_pointer(
    mut iter: *const Utf8Iterator,
) -> *const libc::c_char {
    return (*iter)._start;
}
pub unsafe extern "C" fn utf8iterator_maybe_consume_match(
    mut iter: *mut Utf8Iterator,
    mut prefix: *const libc::c_char,
    mut length: size_t,
    mut case_sensitive: bool,
) -> bool {
    let mut matched: bool = false;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    if ((*iter)._start).offset(length as isize) as libc::c_ulong
        <= (*iter)._end as libc::c_ulong
    {
        if case_sensitive {
            tmp = strncmp((*iter)._start, prefix, length);
            if tmp != 0 {
                tmp___0 = 0 as libc::c_int;
            } else {
                tmp___0 = 1 as libc::c_int;
            }
            tmp___3 = tmp___0;
        } else {
            tmp___1 = strncasecmp((*iter)._start, prefix, length);
            if tmp___1 != 0 {
                tmp___2 = 0 as libc::c_int;
            } else {
                tmp___2 = 1 as libc::c_int;
            }
            tmp___3 = tmp___2;
        }
        if tmp___3 != 0 {
            tmp___4 = 1 as libc::c_int;
        } else {
            tmp___4 = 0 as libc::c_int;
        }
    } else {
        tmp___4 = 0 as libc::c_int;
    }
    matched = tmp___4 != 0;
    if matched {
        i = 0 as libc::c_int;
        while (i as size_t) < length {
            utf8iterator_next(iter);
            i += 1;
        }
        return 1 as libc::c_int != 0;
    } else {
        return 0 as libc::c_int != 0
    };
}
pub unsafe extern "C" fn utf8iterator_mark(mut iter: *mut Utf8Iterator) {
    (*iter)._mark = (*iter)._start;
    (*iter)._mark_pos = (*iter)._pos;
}
pub unsafe extern "C" fn utf8iterator_reset(mut iter: *mut Utf8Iterator) {
    (*iter)._start = (*iter)._mark;
    (*iter)._pos = (*iter)._mark_pos;
    read_char(iter);
}
pub unsafe extern "C" fn utf8iterator_fill_error_at_mark(
    mut iter: *mut Utf8Iterator,
    mut error___0: *mut GumboInternalError,
) {
    (*error___0).position = (*iter)._mark_pos;
    (*error___0).original_text = (*iter)._mark;
}
static mut kDefaultStringBufferSize: libc::c_ulong = 10 as libc::c_int as size_t;
unsafe extern "C" fn maybe_resize_string_buffer(
    mut parser: *mut GumboInternalParser,
    mut additional_chars: size_t,
    mut buffer: *mut GumboStringBuffer,
) {
    let mut new_length: size_t = 0;
    let mut new_capacity: size_t = 0;
    let mut new_data: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    new_length = ((*buffer).length).wrapping_add(additional_chars);
    new_capacity = (*buffer).capacity;
    while new_capacity < new_length {
        new_capacity = (new_capacity as libc::c_ulong).wrapping_mul(2 as libc::c_ulong)
            as size_t as size_t;
    }
    if new_capacity != (*buffer).capacity {
        tmp = gumbo_parser_allocate(parser, new_capacity);
        new_data = tmp as *mut libc::c_char;
        memcpy(
            new_data as *mut libc::c_void,
            (*buffer).data as *const libc::c_void,
            (*buffer).length,
        );
        gumbo_parser_deallocate(parser, (*buffer).data as *mut libc::c_void);
        (*buffer).data = new_data;
        (*buffer).capacity = new_capacity;
    }
}
pub unsafe extern "C" fn gumbo_string_buffer_init(
    mut parser: *mut GumboInternalParser,
    mut output: *mut GumboStringBuffer,
) {
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = gumbo_parser_allocate(parser, kDefaultStringBufferSize);
    (*output).data = tmp as *mut libc::c_char;
    (*output).length = 0 as libc::c_int as size_t;
    (*output).capacity = kDefaultStringBufferSize;
}
pub unsafe extern "C" fn gumbo_string_buffer_reserve(
    mut parser: *mut GumboInternalParser,
    mut min_capacity: size_t,
    mut output: *mut GumboStringBuffer,
) {
    maybe_resize_string_buffer(
        parser,
        min_capacity.wrapping_sub((*output).length),
        output,
    );
}
pub unsafe extern "C" fn gumbo_string_buffer_append_codepoint(
    mut parser: *mut GumboInternalParser,
    mut c: libc::c_int,
    mut output: *mut GumboStringBuffer,
) {
    let mut num_bytes: libc::c_int = 0;
    let mut prefix: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut i: libc::c_int = 0;
    let mut tmp___0: size_t = 0;
    if c <= 127 as libc::c_int {
        num_bytes = 0 as libc::c_int;
        prefix = 0 as libc::c_int;
    } else if c <= 2047 as libc::c_int {
        num_bytes = 1 as libc::c_int;
        prefix = 192 as libc::c_int;
    } else if c <= 65535 as libc::c_int {
        num_bytes = 2 as libc::c_int;
        prefix = 224 as libc::c_int;
    } else {
        num_bytes = 3 as libc::c_int;
        prefix = 240 as libc::c_int;
    }
    maybe_resize_string_buffer(parser, (num_bytes + 1 as libc::c_int) as size_t, output);
    tmp = (*output).length;
    (*output).length = ((*output).length).wrapping_add(1);
    *((*output).data)
        .offset(
            tmp as isize,
        ) = (prefix | c >> num_bytes * 6 as libc::c_int) as libc::c_char;
    i = num_bytes - 1 as libc::c_int;
    while i >= 0 as libc::c_int {
        tmp___0 = (*output).length;
        (*output).length = ((*output).length).wrapping_add(1);
        *((*output).data)
            .offset(
                tmp___0 as isize,
            ) = (128 as libc::c_int | 63 as libc::c_int & c >> i * 6 as libc::c_int)
            as libc::c_char;
        i -= 1;
    }
}
pub unsafe extern "C" fn gumbo_string_buffer_append_string(
    mut parser: *mut GumboInternalParser,
    mut str: *mut GumboStringPiece,
    mut output: *mut GumboStringBuffer,
) {
    maybe_resize_string_buffer(parser, (*str).length, output);
    memcpy(
        ((*output).data).offset((*output).length as isize) as *mut libc::c_void,
        (*str).data as *const libc::c_void,
        (*str).length,
    );
    (*output)
        .length = ((*output).length as libc::c_ulong).wrapping_add((*str).length)
        as size_t as size_t;
}
pub unsafe extern "C" fn gumbo_string_buffer_to_string(
    mut parser: *mut GumboInternalParser,
    mut input: *mut GumboStringBuffer,
) -> *mut libc::c_char {
    let mut buffer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = gumbo_parser_allocate(
        parser,
        ((*input).length).wrapping_add(1 as libc::c_ulong),
    );
    buffer = tmp as *mut libc::c_char;
    memcpy(
        buffer as *mut libc::c_void,
        (*input).data as *const libc::c_void,
        (*input).length,
    );
    *buffer.offset((*input).length as isize) = '\u{0}' as i32 as libc::c_char;
    return buffer;
}
pub unsafe extern "C" fn gumbo_string_buffer_destroy(
    mut parser: *mut GumboInternalParser,
    mut buffer: *mut GumboStringBuffer,
) {
    gumbo_parser_deallocate(parser, (*buffer).data as *mut libc::c_void);
}
pub static mut kGumboEmptyString: __anonstruct_GumboStringPiece_673951369 = {
    let mut init = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_void as *mut libc::c_void as *const libc::c_char,
        length: 0 as libc::c_int as size_t,
    };
    init
};
pub unsafe extern "C" fn gumbo_string_equals(
    mut str1: *const GumboStringPiece,
    mut str2: *const GumboStringPiece,
) -> bool {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    if (*str1).length == (*str2).length {
        tmp = memcmp(
            (*str1).data as *const libc::c_void,
            (*str2).data as *const libc::c_void,
            (*str1).length,
        );
        if tmp != 0 {
            tmp___0 = 0 as libc::c_int;
        } else {
            tmp___0 = 1 as libc::c_int;
        }
    } else {
        tmp___0 = 0 as libc::c_int;
    }
    return tmp___0 != 0;
}
pub unsafe extern "C" fn gumbo_string_equals_ignore_case(
    mut str1: *const GumboStringPiece,
    mut str2: *const GumboStringPiece,
) -> bool {
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    if (*str1).length == (*str2).length {
        tmp = strncasecmp((*str1).data, (*str2).data, (*str1).length);
        if tmp != 0 {
            tmp___0 = 0 as libc::c_int;
        } else {
            tmp___0 = 1 as libc::c_int;
        }
    } else {
        tmp___0 = 0 as libc::c_int;
    }
    return tmp___0 != 0;
}
pub unsafe extern "C" fn gumbo_string_copy(
    mut parser: *mut GumboInternalParser,
    mut dest: *mut GumboStringPiece,
    mut source: *const GumboStringPiece,
) {
    let mut buffer: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    (*dest).length = (*source).length;
    tmp = gumbo_parser_allocate(parser, (*source).length);
    buffer = tmp as *mut libc::c_char;
    memcpy(
        buffer as *mut libc::c_void,
        (*source).data as *const libc::c_void,
        (*source).length,
    );
    (*dest).data = buffer as *const libc::c_char;
}
pub static mut kGumboNoChar: libc::c_int = -(1 as libc::c_int);
static mut kNamedEntities: [NamedCharRef; 2231] = [NamedCharRef {
    name: 0 as *const libc::c_char,
    length: 0,
    codepoints: OneOrTwoCodepoints {
        first: 0,
        second: 0,
    },
}; 2231];
static mut kCharReplacements: [CharReplacement; 35] = [
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 0 as libc::c_int,
            to_char: 65533 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 13 as libc::c_int,
            to_char: 13 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 128 as libc::c_int,
            to_char: 8364 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 129 as libc::c_int,
            to_char: 129 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 130 as libc::c_int,
            to_char: 8218 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 131 as libc::c_int,
            to_char: 402 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 132 as libc::c_int,
            to_char: 8222 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 133 as libc::c_int,
            to_char: 8230 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 134 as libc::c_int,
            to_char: 8224 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 135 as libc::c_int,
            to_char: 8225 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 136 as libc::c_int,
            to_char: 710 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 137 as libc::c_int,
            to_char: 8240 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 138 as libc::c_int,
            to_char: 352 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 139 as libc::c_int,
            to_char: 8249 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 140 as libc::c_int,
            to_char: 338 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 141 as libc::c_int,
            to_char: 141 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 142 as libc::c_int,
            to_char: 381 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 143 as libc::c_int,
            to_char: 143 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 144 as libc::c_int,
            to_char: 144 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 145 as libc::c_int,
            to_char: 8216 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 146 as libc::c_int,
            to_char: 8217 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 147 as libc::c_int,
            to_char: 8220 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 148 as libc::c_int,
            to_char: 8221 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 149 as libc::c_int,
            to_char: 8226 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 150 as libc::c_int,
            to_char: 8211 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 151 as libc::c_int,
            to_char: 8212 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 152 as libc::c_int,
            to_char: 732 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 153 as libc::c_int,
            to_char: 8482 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 154 as libc::c_int,
            to_char: 353 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 155 as libc::c_int,
            to_char: 8250 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 156 as libc::c_int,
            to_char: 339 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 157 as libc::c_int,
            to_char: 157 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 158 as libc::c_int,
            to_char: 382 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: 159 as libc::c_int,
            to_char: 376 as libc::c_int,
        };
        init
    },
    {
        let mut init = __anonstruct_CharReplacement_1013988509 {
            from_char: -(1 as libc::c_int),
            to_char: -(1 as libc::c_int),
        };
        init
    },
];
unsafe extern "C" fn parse_digit(
    mut c: libc::c_int,
    mut allow_hex: bool,
) -> libc::c_int {
    if c >= 48 as libc::c_int {
        if c <= 57 as libc::c_int {
            return c - 48 as libc::c_int;
        }
    }
    if allow_hex {
        if c >= 97 as libc::c_int {
            if c <= 102 as libc::c_int {
                return c - 97 as libc::c_int + 10 as libc::c_int;
            }
        }
    }
    if allow_hex {
        if c >= 65 as libc::c_int {
            if c <= 70 as libc::c_int {
                return c - 65 as libc::c_int + 10 as libc::c_int;
            }
        }
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn add_no_digit_error(
    mut parser: *mut GumboInternalParser,
    mut input: *mut Utf8Iterator,
) {
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return;
    }
    utf8iterator_fill_error_at_mark(input, error___0);
    (*error___0).type_0 = GUMBO_ERR_NUMERIC_CHAR_REF_NO_DIGITS;
}
unsafe extern "C" fn add_codepoint_error(
    mut parser: *mut GumboInternalParser,
    mut input: *mut Utf8Iterator,
    mut type_0: GumboErrorType,
    mut codepoint: libc::c_int,
) {
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return;
    }
    utf8iterator_fill_error_at_mark(input, error___0);
    (*error___0).type_0 = type_0;
    (*error___0).v.codepoint = codepoint as uint64_t;
}
unsafe extern "C" fn add_named_reference_error(
    mut parser: *mut GumboInternalParser,
    mut input: *mut Utf8Iterator,
    mut type_0: GumboErrorType,
    mut text: GumboStringPiece,
) {
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return;
    }
    utf8iterator_fill_error_at_mark(input, error___0);
    (*error___0).type_0 = type_0;
    (*error___0).v.text = text;
}
unsafe extern "C" fn maybe_replace_codepoint(mut codepoint: libc::c_int) -> libc::c_int {
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while kCharReplacements[i as usize].from_char != -(1 as libc::c_int) {
        if kCharReplacements[i as usize].from_char == codepoint {
            return kCharReplacements[i as usize].to_char;
        }
        i += 1;
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn consume_numeric_ref(
    mut parser: *mut GumboInternalParser,
    mut input: *mut Utf8Iterator,
    mut output: *mut libc::c_int,
) -> bool {
    let mut is_hex: bool = false;
    let mut c: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut digit: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut codepoint: libc::c_int = 0;
    let mut status: bool = false;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    let mut replacement: libc::c_int = 0;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: bool = false;
    utf8iterator_next(input);
    is_hex = 0 as libc::c_int != 0;
    tmp = utf8iterator_current(input as *const Utf8Iterator);
    c = tmp;
    if c == 120 as libc::c_int {
        is_hex = 1 as libc::c_int != 0;
        utf8iterator_next(input);
        c = utf8iterator_current(input as *const Utf8Iterator);
    } else if c == 88 as libc::c_int {
        is_hex = 1 as libc::c_int != 0;
        utf8iterator_next(input);
        c = utf8iterator_current(input as *const Utf8Iterator);
    }
    tmp___0 = parse_digit(c, is_hex);
    digit = tmp___0;
    if digit == -(1 as libc::c_int) {
        add_no_digit_error(parser, input);
        utf8iterator_reset(input);
        *output = kGumboNoChar;
        return 0 as libc::c_int != 0;
    }
    codepoint = 0 as libc::c_int;
    status = 1 as libc::c_int != 0;
    loop {
        if is_hex {
            tmp___1 = 16 as libc::c_int;
        } else {
            tmp___1 = 10 as libc::c_int;
        }
        codepoint = codepoint * tmp___1 + digit;
        utf8iterator_next(input);
        tmp___2 = utf8iterator_current(input as *const Utf8Iterator);
        digit = parse_digit(tmp___2, is_hex);
        if !(digit != -(1 as libc::c_int)) {
            break;
        }
    }
    tmp___3 = utf8iterator_current(input as *const Utf8Iterator);
    if tmp___3 != 59 as libc::c_int {
        add_codepoint_error(
            parser,
            input,
            GUMBO_ERR_NUMERIC_CHAR_REF_WITHOUT_SEMICOLON,
            codepoint,
        );
        status = 0 as libc::c_int != 0;
    } else {
        utf8iterator_next(input);
    }
    tmp___4 = maybe_replace_codepoint(codepoint);
    replacement = tmp___4;
    if replacement != -(1 as libc::c_int) {
        add_codepoint_error(
            parser,
            input,
            GUMBO_ERR_NUMERIC_CHAR_REF_INVALID,
            codepoint,
        );
        *output = replacement;
        return 0 as libc::c_int != 0;
    }
    if codepoint >= 55296 as libc::c_int {
        if codepoint <= 57343 as libc::c_int {
            add_codepoint_error(
                parser,
                input,
                GUMBO_ERR_NUMERIC_CHAR_REF_INVALID,
                codepoint,
            );
            *output = 65533 as libc::c_int;
            return 0 as libc::c_int != 0;
        }
    }
    if codepoint > 1114111 as libc::c_int {
        add_codepoint_error(
            parser,
            input,
            GUMBO_ERR_NUMERIC_CHAR_REF_INVALID,
            codepoint,
        );
        *output = 65533 as libc::c_int;
        return 0 as libc::c_int != 0;
    }
    tmp___5 = utf8_is_invalid_code_point(codepoint);
    if tmp___5 {
        add_codepoint_error(
            parser,
            input,
            GUMBO_ERR_NUMERIC_CHAR_REF_INVALID,
            codepoint,
        );
        status = 0 as libc::c_int != 0;
    } else if codepoint == 11 as libc::c_int {
        add_codepoint_error(
            parser,
            input,
            GUMBO_ERR_NUMERIC_CHAR_REF_INVALID,
            codepoint,
        );
        status = 0 as libc::c_int != 0;
    }
    *output = codepoint;
    return status;
}
unsafe extern "C" fn find_named_char_ref(
    mut input: *mut Utf8Iterator,
) -> *const NamedCharRef {
    let mut i: libc::c_int = 0;
    let mut current: *const NamedCharRef = 0 as *const NamedCharRef;
    let mut tmp___2: size_t = 0;
    let mut tmp___6: bool = false;
    i = 0 as libc::c_int;
    while kNamedEntities[i as usize].codepoints.first != -(1 as libc::c_int) {
        current = &*kNamedEntities.as_ptr().offset(i as isize) as *const NamedCharRef;
        tmp___2 = strlen((*current).name);
        if !(tmp___2 == (*current).length) {
            __assert_fail(
                b"strlen(current->name) == current->length\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/char_ref.c\0" as *const u8 as *const libc::c_char,
                2460 as libc::c_uint,
                b"find_named_char_ref\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___6 = utf8iterator_maybe_consume_match(
            input,
            (*current).name,
            (*current).length,
            1 as libc::c_int != 0,
        );
        if tmp___6 {
            if !((*current).name as libc::c_ulong
                != 0 as *mut libc::c_void as libc::c_ulong)
            {
                __assert_fail(
                    b"current->name != NULL\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/char_ref.c\0" as *const u8
                        as *const libc::c_char,
                    2463 as libc::c_uint,
                    b"find_named_char_ref\0" as *const u8 as *const libc::c_char,
                );
            }
            if !((*current).length > 0 as libc::c_ulong) {
                __assert_fail(
                    b"current->length > 0\0" as *const u8 as *const libc::c_char,
                    b"deps/gumbo-parser/char_ref.c\0" as *const u8
                        as *const libc::c_char,
                    2464 as libc::c_uint,
                    b"find_named_char_ref\0" as *const u8 as *const libc::c_char,
                );
            }
            if !((*current).codepoints.first != kGumboNoChar) {
                __assert_fail(
                    b"current->codepoints.first != kGumboNoChar\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/char_ref.c\0" as *const u8
                        as *const libc::c_char,
                    2465 as libc::c_uint,
                    b"find_named_char_ref\0" as *const u8 as *const libc::c_char,
                );
            }
            return current;
        }
        i += 1;
    }
    return 0 as *mut libc::c_void as *const NamedCharRef;
}
unsafe extern "C" fn is_legal_attribute_char_next(mut input: *mut Utf8Iterator) -> bool {
    let mut c: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    let mut tmp___1: libc::c_int = 0;
    tmp = utf8iterator_current(input as *const Utf8Iterator);
    c = tmp;
    if c == 61 as libc::c_int {
        tmp___1 = 1 as libc::c_int;
    } else {
        tmp___0 = __ctype_b_loc();
        if *(*tmp___0).offset(c as isize) as libc::c_int & 8 as libc::c_int != 0 {
            tmp___1 = 1 as libc::c_int;
        } else {
            tmp___1 = 0 as libc::c_int;
        }
    }
    return tmp___1 != 0;
}
unsafe extern "C" fn maybe_add_invalid_named_reference(
    mut parser: *mut GumboInternalParser,
    mut input: *mut Utf8Iterator,
) -> bool {
    let mut start: *const libc::c_char = 0 as *const libc::c_char;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut c: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut bad_ref: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut tmp___1: *const libc::c_char = 0 as *const libc::c_char;
    tmp = utf8iterator_get_char_pointer(input as *const Utf8Iterator);
    start = tmp;
    tmp___0 = utf8iterator_current(input as *const Utf8Iterator);
    c = tmp___0;
    let mut current_block_5: u64;
    loop {
        if c >= 97 as libc::c_int {
            if !(c <= 122 as libc::c_int) {
                current_block_5 = 11477696009137044089;
            } else {
                current_block_5 = 1054647088692577877;
            }
        } else {
            current_block_5 = 11477696009137044089;
        }
        match current_block_5 {
            11477696009137044089 => {
                if c >= 65 as libc::c_int {
                    if !(c <= 90 as libc::c_int) {
                        current_block_5 = 12258458301917416943;
                    } else {
                        current_block_5 = 1054647088692577877;
                    }
                } else {
                    current_block_5 = 12258458301917416943;
                }
                match current_block_5 {
                    1054647088692577877 => {}
                    _ => {
                        if !(c >= 48 as libc::c_int) {
                            break;
                        }
                        if !(c <= 57 as libc::c_int) {
                            break;
                        }
                    }
                }
            }
            _ => {}
        }
        utf8iterator_next(input);
        c = utf8iterator_current(input as *const Utf8Iterator);
    }
    if c == 59 as libc::c_int {
        bad_ref.data = start;
        tmp___1 = utf8iterator_get_char_pointer(input as *const Utf8Iterator);
        bad_ref.length = tmp___1.offset_from(start) as libc::c_long as size_t;
        add_named_reference_error(
            parser,
            input,
            GUMBO_ERR_NAMED_CHAR_REF_INVALID,
            bad_ref,
        );
        return 0 as libc::c_int != 0;
    }
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn consume_named_ref(
    mut parser: *mut GumboInternalParser,
    mut input: *mut Utf8Iterator,
    mut is_in_attribute: bool,
    mut output: *mut OneOrTwoCodepoints,
) -> bool {
    let mut char_ref: *const NamedCharRef = 0 as *const NamedCharRef;
    let mut tmp___0: *const NamedCharRef = 0 as *const NamedCharRef;
    let mut tmp___4: size_t = 0;
    let mut last_char: libc::c_char = 0;
    let mut bad_ref: GumboStringPiece = __anonstruct_GumboStringPiece_673951369 {
        data: 0 as *const libc::c_char,
        length: 0,
    };
    let mut tmp___7: bool = false;
    let mut status: bool = false;
    let mut tmp___8: bool = false;
    if !((*output).first == kGumboNoChar) {
        __assert_fail(
            b"output->first == kGumboNoChar\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/char_ref.c\0" as *const u8 as *const libc::c_char,
            2503 as libc::c_uint,
            b"consume_named_ref\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___0 = find_named_char_ref(input);
    char_ref = tmp___0;
    if !char_ref.is_null() {
        tmp___4 = strlen((*char_ref).name);
        if !((*char_ref).length == tmp___4) {
            __assert_fail(
                b"char_ref->length == strlen(char_ref->name)\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/char_ref.c\0" as *const u8 as *const libc::c_char,
                2506 as libc::c_uint,
                b"consume_named_ref\0" as *const u8 as *const libc::c_char,
            );
        }
        last_char = *((*char_ref).name)
            .offset(((*char_ref).length).wrapping_sub(1 as libc::c_ulong) as isize);
        if last_char as libc::c_int == 59 as libc::c_int {
            *output = (*char_ref).codepoints;
            if !((*output).first != kGumboNoChar) {
                __assert_fail(
                    b"output->first != kGumboNoChar\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/char_ref.c\0" as *const u8
                        as *const libc::c_char,
                    2510 as libc::c_uint,
                    b"consume_named_ref\0" as *const u8 as *const libc::c_char,
                );
            }
            return 1 as libc::c_int != 0;
        } else {
            if is_in_attribute {
                tmp___7 = is_legal_attribute_char_next(input);
                if tmp___7 {
                    utf8iterator_reset(input);
                    return 1 as libc::c_int != 0;
                }
            }
            bad_ref.data = (*char_ref).name;
            bad_ref.length = (*char_ref).length;
            add_named_reference_error(
                parser,
                input,
                GUMBO_ERR_NAMED_CHAR_REF_WITHOUT_SEMICOLON,
                bad_ref,
            );
            *output = (*char_ref).codepoints;
            if !((*output).first != kGumboNoChar) {
                __assert_fail(
                    b"output->first != kGumboNoChar\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/char_ref.c\0" as *const u8
                        as *const libc::c_char,
                    2522 as libc::c_uint,
                    b"consume_named_ref\0" as *const u8 as *const libc::c_char,
                );
            }
            return 0 as libc::c_int != 0;
        }
    } else {
        tmp___8 = maybe_add_invalid_named_reference(parser, input);
        status = tmp___8;
        utf8iterator_reset(input);
        return status;
    };
}
pub unsafe extern "C" fn consume_char_ref(
    mut parser: *mut GumboInternalParser,
    mut input: *mut GumboInternalUtf8Iterator,
    mut additional_allowed_char: libc::c_int,
    mut is_in_attribute: bool,
    mut output: *mut OneOrTwoCodepoints,
) -> bool {
    let mut c: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    utf8iterator_mark(input);
    utf8iterator_next(input);
    tmp = utf8iterator_current(input as *const Utf8Iterator);
    c = tmp;
    (*output).first = kGumboNoChar;
    (*output).second = kGumboNoChar;
    if c == additional_allowed_char {
        utf8iterator_reset(input);
        (*output).first = kGumboNoChar;
        return 1 as libc::c_int != 0;
    }
    tmp___0 = utf8iterator_current(input as *const Utf8Iterator);
    match tmp___0 {
        -1 | 38 | 60 | 32 | 12 | 10 | 9 => {
            utf8iterator_reset(input);
            return 1 as libc::c_int != 0;
        }
        35 => {
            tmp___1 = consume_numeric_ref(parser, input, &mut (*output).first);
            return tmp___1;
        }
        _ => {
            tmp___2 = consume_named_ref(parser, input, is_in_attribute, output);
            return tmp___2;
        }
    };
}
pub static mut kScriptTag: __anonstruct_GumboStringPiece_673951369 = {
    let mut init = __anonstruct_GumboStringPiece_673951369 {
        data: b"script\0" as *const u8 as *const libc::c_char,
        length: 6 as libc::c_int as size_t,
    };
    init
};
unsafe extern "C" fn add_parse_error___0(
    mut parser: *mut GumboParser,
    mut type_0: GumboErrorType,
) {
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return;
    }
    tokenizer = (*parser)._tokenizer_state;
    utf8iterator_get_position(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        &mut (*error___0).position,
    );
    (*error___0)
        .original_text = utf8iterator_get_char_pointer(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
    (*error___0).type_0 = type_0;
    (*error___0)
        .v
        .tokenizer
        .codepoint = utf8iterator_current(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
    match (*tokenizer)._state as libc::c_uint {
        0 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_DATA;
        }
        40 | 3 | 1 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_CHAR_REF;
        }
        12 | 11 | 10 | 2 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_RCDATA;
        }
        15 | 14 | 13 | 4 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_RAWTEXT;
        }
        6 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_PLAINTEXT;
        }
        32 | 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17
        | 16 | 5 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_SCRIPT;
        }
        33 | 9 | 8 | 7 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_TAG;
        }
        42 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_SELF_CLOSING_TAG;
        }
        36 | 35 | 34 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_ATTR_NAME;
        }
        41 | 39 | 38 | 37 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_ATTR_VALUE;
        }
        50 | 49 | 48 | 47 | 46 | 45 | 43 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_COMMENT;
        }
        66 | 65 | 64 | 63 | 62 | 61 | 60 | 59 | 58 | 57 | 56 | 55 | 54 | 53 | 52 | 51
        | 44 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_DOCTYPE;
        }
        67 => {
            (*error___0).v.tokenizer.state = GUMBO_ERR_TOKENIZER_CDATA;
        }
        _ => {}
    };
}
unsafe extern "C" fn is_alpha(mut c: libc::c_int) -> bool {
    let mut tmp: libc::c_int = 0;
    let mut current_block_10: u64;
    if c >= 65 as libc::c_int {
        if c <= 90 as libc::c_int {
            tmp = 1 as libc::c_int;
            current_block_10 = 1856101646708284338;
        } else {
            current_block_10 = 18099654684117200856;
        }
    } else {
        current_block_10 = 18099654684117200856;
    }
    match current_block_10 {
        18099654684117200856 => {
            if c >= 97 as libc::c_int {
                if c <= 122 as libc::c_int {
                    tmp = 1 as libc::c_int;
                } else {
                    tmp = 0 as libc::c_int;
                }
            } else {
                tmp = 0 as libc::c_int;
            }
        }
        _ => {}
    }
    return tmp != 0;
}
unsafe extern "C" fn ensure_lowercase(mut c: libc::c_int) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    if c >= 65 as libc::c_int {
        if c <= 90 as libc::c_int {
            tmp = c + 32 as libc::c_int;
        } else {
            tmp = c;
        }
    } else {
        tmp = c;
    }
    return tmp;
}
unsafe extern "C" fn get_char_token_type(mut c: libc::c_int) -> GumboTokenType {
    match c {
        32 | 12 | 13 | 10 | 9 => return GUMBO_TOKEN_WHITESPACE,
        0 => {
            gumbo_debug(b"Emitted null byte.\n\0" as *const u8 as *const libc::c_char);
            return GUMBO_TOKEN_NULL;
        }
        -1 => return GUMBO_TOKEN_EOF,
        _ => return GUMBO_TOKEN_CHARACTER,
    };
}
unsafe extern "C" fn clear_temporary_buffer(mut parser: *mut GumboParser) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    tokenizer = (*parser)._tokenizer_state;
    if !((*tokenizer)._temporary_buffer_emit).is_null() {
        __assert_fail(
            b"!tokenizer->_temporary_buffer_emit\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            349 as libc::c_uint,
            b"clear_temporary_buffer\0" as *const u8 as *const libc::c_char,
        );
    }
    utf8iterator_mark(&mut (*tokenizer)._input);
    gumbo_string_buffer_destroy(parser, &mut (*tokenizer)._temporary_buffer);
    gumbo_string_buffer_init(parser, &mut (*tokenizer)._temporary_buffer);
    gumbo_string_buffer_destroy(parser, &mut (*tokenizer)._script_data_buffer);
    gumbo_string_buffer_init(parser, &mut (*tokenizer)._script_data_buffer);
}
unsafe extern "C" fn append_char_to_temporary_buffer(
    mut parser: *mut GumboParser,
    mut codepoint: libc::c_int,
) {
    gumbo_string_buffer_append_codepoint(
        parser,
        codepoint,
        &mut (*(*parser)._tokenizer_state)._temporary_buffer,
    );
}
unsafe extern "C" fn temporary_buffer_equals(
    mut parser: *mut GumboParser,
    mut text: *const libc::c_char,
) -> bool {
    let mut buffer: *mut GumboStringBuffer = 0 as *mut GumboStringBuffer;
    let mut text_len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: libc::c_int = 0;
    buffer = &mut (*(*parser)._tokenizer_state)._temporary_buffer;
    tmp = strlen(text);
    text_len = tmp as libc::c_int;
    if text_len as size_t == (*buffer).length {
        tmp___0 = memcmp(
            (*buffer).data as *const libc::c_void,
            text as *const libc::c_void,
            text_len as size_t,
        );
        if tmp___0 == 0 as libc::c_int {
            tmp___1 = 1 as libc::c_int;
        } else {
            tmp___1 = 0 as libc::c_int;
        }
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1 != 0;
}
unsafe extern "C" fn doc_type_state_init(mut parser: *mut GumboParser) {
    let mut doc_type_state: *mut GumboTokenDocType = 0 as *mut GumboTokenDocType;
    doc_type_state = &mut (*(*parser)._tokenizer_state)._doc_type_state;
    (*doc_type_state).name = 0 as *mut libc::c_void as *const libc::c_char;
    (*doc_type_state).public_identifier = 0 as *mut libc::c_void as *const libc::c_char;
    (*doc_type_state).system_identifier = 0 as *mut libc::c_void as *const libc::c_char;
    (*doc_type_state).force_quirks = 0 as libc::c_int != 0;
    (*doc_type_state).has_public_identifier = 0 as libc::c_int != 0;
    (*doc_type_state).has_system_identifier = 0 as libc::c_int != 0;
}
unsafe extern "C" fn reset_token_start_point(mut tokenizer: *mut GumboTokenizerState) {
    (*tokenizer)
        ._token_start = utf8iterator_get_char_pointer(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
    utf8iterator_get_position(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        &mut (*tokenizer)._token_start_pos,
    );
}
unsafe extern "C" fn reset_tag_buffer_start_point(mut parser: *mut GumboParser) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    utf8iterator_get_position(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        &mut (*tag_state)._start_pos,
    );
    (*tag_state)
        ._original_text = utf8iterator_get_char_pointer(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
}
unsafe extern "C" fn finish_temporary_buffer(
    mut parser: *mut GumboParser,
    mut output: *mut *const libc::c_char,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    tokenizer = (*parser)._tokenizer_state;
    tmp = gumbo_string_buffer_to_string(parser, &mut (*tokenizer)._temporary_buffer);
    *output = tmp as *const libc::c_char;
    clear_temporary_buffer(parser);
}
unsafe extern "C" fn finish_token(
    mut parser: *mut GumboParser,
    mut token: *mut GumboToken,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    tokenizer = (*parser)._tokenizer_state;
    if !(*tokenizer)._reconsume_current_input {
        utf8iterator_next(&mut (*tokenizer)._input);
    }
    (*token).position = (*tokenizer)._token_start_pos;
    (*token).original_text.data = (*tokenizer)._token_start;
    reset_token_start_point(tokenizer);
    (*token)
        .original_text
        .length = ((*tokenizer)._token_start).offset_from((*token).original_text.data)
        as libc::c_long as size_t;
    if (*token).original_text.length > 0 as libc::c_ulong {
        if *((*token).original_text.data)
            .offset(
                ((*token).original_text.length).wrapping_sub(1 as libc::c_ulong) as isize,
            ) as libc::c_int == 13 as libc::c_int
        {
            (*token)
                .original_text
                .length = ((*token).original_text.length).wrapping_sub(1);
        }
    }
}
unsafe extern "C" fn finish_doctype_public_id(mut parser: *mut GumboParser) {
    let mut doc_type_state: *mut GumboTokenDocType = 0 as *mut GumboTokenDocType;
    doc_type_state = &mut (*(*parser)._tokenizer_state)._doc_type_state;
    gumbo_parser_deallocate(
        parser,
        (*doc_type_state).public_identifier as *mut libc::c_void,
    );
    finish_temporary_buffer(parser, &mut (*doc_type_state).public_identifier);
    (*doc_type_state).has_public_identifier = 1 as libc::c_int != 0;
}
unsafe extern "C" fn finish_doctype_system_id(mut parser: *mut GumboParser) {
    let mut doc_type_state: *mut GumboTokenDocType = 0 as *mut GumboTokenDocType;
    doc_type_state = &mut (*(*parser)._tokenizer_state)._doc_type_state;
    gumbo_parser_deallocate(
        parser,
        (*doc_type_state).system_identifier as *mut libc::c_void,
    );
    finish_temporary_buffer(parser, &mut (*doc_type_state).system_identifier);
    (*doc_type_state).has_system_identifier = 1 as libc::c_int != 0;
}
unsafe extern "C" fn emit_char(
    mut parser: *mut GumboParser,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) {
    (*output).type_0 = get_char_token_type(c);
    (*output).v.character = c;
    finish_token(parser, output);
}
unsafe extern "C" fn emit_replacement_char(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> StateResult {
    add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
    emit_char(parser, kUtf8ReplacementChar, output);
    return RETURN_ERROR;
}
unsafe extern "C" fn emit_eof(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> StateResult {
    emit_char(parser, -(1 as libc::c_int), output);
    return RETURN_SUCCESS;
}
unsafe extern "C" fn emit_current_char(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> bool {
    let mut tmp: libc::c_int = 0;
    tmp = utf8iterator_current(
        &mut (*(*parser)._tokenizer_state)._input as *mut Utf8Iterator
            as *const Utf8Iterator,
    );
    emit_char(parser, tmp, output);
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn emit_doctype(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) {
    (*output).type_0 = GUMBO_TOKEN_DOCTYPE;
    (*output).v.doc_type = (*(*parser)._tokenizer_state)._doc_type_state;
    finish_token(parser, output);
    doc_type_state_init(parser);
}
unsafe extern "C" fn mark_tag_state_as_empty(mut tag_state: *mut GumboTagState) {
    (*tag_state)._attributes = kGumboEmptyVector;
}
unsafe extern "C" fn emit_current_tag(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    let mut i: libc::c_int = 0;
    let mut tmp___0: *const libc::c_char = 0 as *const libc::c_char;
    tag_state = &mut (*(*parser)._tokenizer_state)._tag_state;
    if (*tag_state)._is_start_tag {
        (*output).type_0 = GUMBO_TOKEN_START_TAG;
        (*output).v.start_tag.tag = (*tag_state)._tag;
        (*output).v.start_tag.attributes = (*tag_state)._attributes;
        (*output).v.start_tag.is_self_closing = (*tag_state)._is_self_closing;
        (*tag_state)._last_start_tag = (*tag_state)._tag;
        mark_tag_state_as_empty(tag_state);
        tmp = gumbo_normalized_tagname((*tag_state)._tag);
        gumbo_debug(
            b"Emitted start tag %s.\n\0" as *const u8 as *const libc::c_char,
            tmp,
        );
    } else {
        (*output).type_0 = GUMBO_TOKEN_END_TAG;
        (*output).v.end_tag = (*tag_state)._tag;
        i = 0 as libc::c_int;
        while (i as libc::c_uint) < (*tag_state)._attributes.length {
            gumbo_destroy_attribute(
                parser,
                *((*tag_state)._attributes.data).offset(i as isize)
                    as *mut GumboAttribute,
            );
            i += 1;
        }
        gumbo_parser_deallocate(
            parser,
            (*tag_state)._attributes.data as *mut libc::c_void,
        );
        mark_tag_state_as_empty(tag_state);
        tmp___0 = gumbo_normalized_tagname((*tag_state)._tag);
        gumbo_debug(
            b"Emitted end tag %s.\n\0" as *const u8 as *const libc::c_char,
            tmp___0,
        );
    }
    gumbo_string_buffer_destroy(parser, &mut (*tag_state)._buffer);
    finish_token(parser, output);
    gumbo_debug(
        b"Original text = %.*s.\n\0" as *const u8 as *const libc::c_char,
        (*output).original_text.length,
        (*output).original_text.data,
    );
    if !((*output).original_text.length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"output->original_text.length >= 2\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            553 as libc::c_uint,
            b"emit_current_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(*((*output).original_text.data).offset(0 as libc::c_int as isize) as libc::c_int
        == 60 as libc::c_int)
    {
        __assert_fail(
            b"output->original_text.data[0] == '<'\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            554 as libc::c_uint,
            b"emit_current_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    if !(*((*output).original_text.data)
        .offset(
            ((*output).original_text.length).wrapping_sub(1 as libc::c_ulong) as isize,
        ) as libc::c_int == 62 as libc::c_int)
    {
        __assert_fail(
            b"output->original_text.data[output->original_text.length - 1] == '>'\0"
                as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            555 as libc::c_uint,
            b"emit_current_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    return RETURN_SUCCESS;
}
unsafe extern "C" fn abandon_current_tag(mut parser: *mut GumboParser) {
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut i: libc::c_int = 0;
    tag_state = &mut (*(*parser)._tokenizer_state)._tag_state;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*tag_state)._attributes.length {
        gumbo_destroy_attribute(
            parser,
            *((*tag_state)._attributes.data).offset(i as isize) as *mut GumboAttribute,
        );
        i += 1;
    }
    gumbo_parser_deallocate(parser, (*tag_state)._attributes.data as *mut libc::c_void);
    mark_tag_state_as_empty(tag_state);
    gumbo_string_buffer_destroy(parser, &mut (*tag_state)._buffer);
    gumbo_debug(b"Abandoning current tag.\n\0" as *const u8 as *const libc::c_char);
}
unsafe extern "C" fn emit_char_ref(
    mut parser: *mut GumboParser,
    mut additional_allowed_char: libc::c_int,
    mut is_in_attribute: bool,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut char_ref: OneOrTwoCodepoints = OneOrTwoCodepoints {
        first: 0,
        second: 0,
    };
    let mut status: bool = false;
    let mut tmp: bool = false;
    let mut tmp___0: libc::c_int = 0;
    tokenizer = (*parser)._tokenizer_state;
    tmp = consume_char_ref(
        parser,
        &mut (*tokenizer)._input,
        additional_allowed_char,
        0 as libc::c_int != 0,
        &mut char_ref,
    );
    status = tmp;
    if char_ref.first != kGumboNoChar {
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        emit_char(parser, char_ref.first, output);
        (*tokenizer)._buffered_emit_char = char_ref.second;
    } else {
        emit_char(parser, '&' as i32, output);
    }
    if status {
        tmp___0 = 1 as libc::c_int;
    } else {
        tmp___0 = 0 as libc::c_int;
    }
    return tmp___0 as StateResult;
}
unsafe extern "C" fn emit_comment(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> StateResult {
    (*output).type_0 = GUMBO_TOKEN_COMMENT;
    finish_temporary_buffer(parser, &mut (*output).v.text);
    finish_token(parser, output);
    return RETURN_SUCCESS;
}
unsafe extern "C" fn maybe_emit_from_temporary_buffer(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> bool {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut c: *const libc::c_char = 0 as *const libc::c_char;
    let mut buffer: *mut GumboStringBuffer = 0 as *mut GumboStringBuffer;
    let mut tmp___2: libc::c_int = 0;
    let mut saved_reconsume_state: bool = false;
    tokenizer = (*parser)._tokenizer_state;
    c = (*tokenizer)._temporary_buffer_emit;
    buffer = &mut (*tokenizer)._temporary_buffer;
    if c.is_null() {
        (*tokenizer)
            ._temporary_buffer_emit = 0 as *mut libc::c_void as *const libc::c_char;
        return 0 as libc::c_int != 0;
    } else {
        if c as libc::c_ulong
            >= ((*buffer).data).offset((*buffer).length as isize) as libc::c_ulong
        {
            (*tokenizer)
                ._temporary_buffer_emit = 0 as *mut libc::c_void as *const libc::c_char;
            return 0 as libc::c_int != 0;
        }
    }
    tmp___2 = utf8iterator_current(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
    if !(*c as libc::c_int == tmp___2) {
        __assert_fail(
            b"*c == utf8iterator_current(&tokenizer->_input)\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            622 as libc::c_uint,
            b"maybe_emit_from_temporary_buffer\0" as *const u8 as *const libc::c_char,
        );
    }
    saved_reconsume_state = (*tokenizer)._reconsume_current_input;
    (*tokenizer)._reconsume_current_input = 0 as libc::c_int != 0;
    emit_char(parser, *c as libc::c_int, output);
    (*tokenizer)
        ._temporary_buffer_emit = ((*tokenizer)._temporary_buffer_emit).offset(1);
    (*tokenizer)._reconsume_current_input = saved_reconsume_state;
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn emit_temporary_buffer(
    mut parser: *mut GumboParser,
    mut output: *mut GumboToken,
) -> bool {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tmp___0: bool = false;
    tokenizer = (*parser)._tokenizer_state;
    if ((*tokenizer)._temporary_buffer.data).is_null() {
        __assert_fail(
            b"tokenizer->_temporary_buffer.data\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            646 as libc::c_uint,
            b"emit_temporary_buffer\0" as *const u8 as *const libc::c_char,
        );
    }
    utf8iterator_reset(&mut (*tokenizer)._input);
    (*tokenizer)
        ._temporary_buffer_emit = (*tokenizer)._temporary_buffer.data
        as *const libc::c_char;
    tmp___0 = maybe_emit_from_temporary_buffer(parser, output);
    return tmp___0;
}
unsafe extern "C" fn append_char_to_tag_buffer(
    mut parser: *mut GumboParser,
    mut codepoint: libc::c_int,
    mut reinitilize_position_on_first: bool,
) {
    let mut buffer: *mut GumboStringBuffer = 0 as *mut GumboStringBuffer;
    buffer = &mut (*(*parser)._tokenizer_state)._tag_state._buffer;
    if (*buffer).length == 0 as libc::c_ulong {
        if reinitilize_position_on_first {
            reset_tag_buffer_start_point(parser);
        }
    }
    gumbo_string_buffer_append_codepoint(parser, codepoint, buffer);
}
unsafe extern "C" fn initialize_tag_buffer(mut parser: *mut GumboParser) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    gumbo_string_buffer_init(parser, &mut (*tag_state)._buffer);
    reset_tag_buffer_start_point(parser);
}
unsafe extern "C" fn start_new_tag(
    mut parser: *mut GumboParser,
    mut is_start_tag: bool,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut c: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut tmp___3: bool = false;
    let mut tmp___7: bool = false;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    tmp = utf8iterator_current(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
    c = tmp;
    tmp___3 = is_alpha(c);
    if !tmp___3 {
        __assert_fail(
            b"is_alpha(c)\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            683 as libc::c_uint,
            b"start_new_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    c = ensure_lowercase(c);
    tmp___7 = is_alpha(c);
    if !tmp___7 {
        __assert_fail(
            b"is_alpha(c)\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            685 as libc::c_uint,
            b"start_new_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    initialize_tag_buffer(parser);
    gumbo_string_buffer_append_codepoint(parser, c, &mut (*tag_state)._buffer);
    if !((*tag_state)._attributes.data as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong)
    {
        __assert_fail(
            b"tag_state->_attributes.data == NULL\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            690 as libc::c_uint,
            b"start_new_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    gumbo_vector_init(parser, 4 as libc::c_int as size_t, &mut (*tag_state)._attributes);
    (*tag_state)._drop_next_attr_value = 0 as libc::c_int != 0;
    (*tag_state)._is_start_tag = is_start_tag;
    (*tag_state)._is_self_closing = 0 as libc::c_int != 0;
    gumbo_debug(b"Starting new tag.\n\0" as *const u8 as *const libc::c_char);
}
unsafe extern "C" fn copy_over_tag_buffer(
    mut parser: *mut GumboParser,
    mut output: *mut *const libc::c_char,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    tmp = gumbo_string_buffer_to_string(parser, &mut (*tag_state)._buffer);
    *output = tmp as *const libc::c_char;
}
unsafe extern "C" fn copy_over_original_tag_text(
    mut parser: *mut GumboParser,
    mut original_text: *mut GumboStringPiece,
    mut start_pos: *mut GumboSourcePosition,
    mut end_pos: *mut GumboSourcePosition,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    (*original_text).data = (*tag_state)._original_text;
    tmp = utf8iterator_get_char_pointer(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
    );
    (*original_text)
        .length = tmp.offset_from((*tag_state)._original_text) as libc::c_long as size_t;
    if *((*original_text).data)
        .offset(((*original_text).length).wrapping_sub(1 as libc::c_ulong) as isize)
        as libc::c_int == 13 as libc::c_int
    {
        (*original_text).length = ((*original_text).length).wrapping_sub(1);
    }
    *start_pos = (*tag_state)._start_pos;
    utf8iterator_get_position(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        end_pos,
    );
}
unsafe extern "C" fn reinitialize_tag_buffer(mut parser: *mut GumboParser) {
    gumbo_parser_deallocate(
        parser,
        (*(*parser)._tokenizer_state)._tag_state._buffer.data as *mut libc::c_void,
    );
    initialize_tag_buffer(parser);
}
unsafe extern "C" fn finish_tag_name(mut parser: *mut GumboParser) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut temp: *const libc::c_char = 0 as *const libc::c_char;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    copy_over_tag_buffer(parser, &mut temp);
    (*tag_state)._tag = gumbo_tag_enum(temp);
    reinitialize_tag_buffer(parser);
    gumbo_parser_deallocate(parser, temp as *mut libc::c_void);
}
unsafe extern "C" fn add_duplicate_attr_error(
    mut parser: *mut GumboParser,
    mut attr_name: *const libc::c_char,
    mut original_index: libc::c_int,
    mut new_index: libc::c_int,
) {
    let mut error___0: *mut GumboError = 0 as *mut GumboError;
    let mut tmp: *mut GumboError = 0 as *mut GumboError;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    tmp = gumbo_add_error(parser);
    error___0 = tmp;
    if error___0.is_null() {
        return;
    }
    tag_state = &mut (*(*parser)._tokenizer_state)._tag_state;
    (*error___0).type_0 = GUMBO_ERR_DUPLICATE_ATTR;
    (*error___0).position = (*tag_state)._start_pos;
    (*error___0).original_text = (*tag_state)._original_text;
    (*error___0).v.duplicate_attr.original_index = original_index as libc::c_uint;
    (*error___0).v.duplicate_attr.new_index = new_index as libc::c_uint;
    copy_over_tag_buffer(parser, &mut (*error___0).v.duplicate_attr.name);
    reinitialize_tag_buffer(parser);
}
unsafe extern "C" fn finish_attribute_name(mut parser: *mut GumboParser) -> bool {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut attributes: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_int = 0;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___1: size_t = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut attr___0: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___3: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut tmp___4: *mut libc::c_char = 0 as *mut libc::c_char;
    tokenizer = (*parser)._tokenizer_state;
    tag_state = &mut (*tokenizer)._tag_state;
    (*tag_state)._drop_next_attr_value = 0 as libc::c_int != 0;
    if ((*tag_state)._attributes.data).is_null() {
        __assert_fail(
            b"tag_state->_attributes.data\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            780 as libc::c_uint,
            b"finish_attribute_name\0" as *const u8 as *const libc::c_char,
        );
    }
    if (*tag_state)._attributes.capacity == 0 {
        __assert_fail(
            b"tag_state->_attributes.capacity\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            781 as libc::c_uint,
            b"finish_attribute_name\0" as *const u8 as *const libc::c_char,
        );
    }
    attributes = &mut (*tag_state)._attributes;
    i = 0 as libc::c_int;
    while (i as libc::c_uint) < (*attributes).length {
        attr = *((*attributes).data).offset(i as isize) as *mut GumboAttribute;
        tmp___1 = strlen((*attr).name);
        if tmp___1 == (*tag_state)._buffer.length {
            tmp___2 = memcmp(
                (*attr).name as *const libc::c_void,
                (*tag_state)._buffer.data as *const libc::c_void,
                (*tag_state)._buffer.length,
            );
            if tmp___2 == 0 as libc::c_int {
                add_duplicate_attr_error(
                    parser,
                    (*attr).name,
                    i,
                    (*attributes).length as libc::c_int,
                );
                (*tag_state)._drop_next_attr_value = 1 as libc::c_int != 0;
                return 0 as libc::c_int != 0;
            }
        }
        i += 1;
    }
    tmp___3 = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboAttribute>() as libc::c_ulong,
    );
    attr___0 = tmp___3 as *mut GumboAttribute;
    (*attr___0).attr_namespace = GUMBO_ATTR_NAMESPACE_NONE;
    copy_over_tag_buffer(parser, &mut (*attr___0).name);
    copy_over_original_tag_text(
        parser,
        &mut (*attr___0).original_name,
        &mut (*attr___0).name_start,
        &mut (*attr___0).name_end,
    );
    tmp___4 = gumbo_copy_stringz(parser, b"\0" as *const u8 as *const libc::c_char);
    (*attr___0).value = tmp___4 as *const libc::c_char;
    copy_over_original_tag_text(
        parser,
        &mut (*attr___0).original_value,
        &mut (*attr___0).name_start,
        &mut (*attr___0).name_end,
    );
    gumbo_vector_add(parser, attr___0 as *mut libc::c_void, attributes);
    reinitialize_tag_buffer(parser);
    return 1 as libc::c_int != 0;
}
unsafe extern "C" fn finish_attribute_value(mut parser: *mut GumboParser) {
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    tag_state = &mut (*(*parser)._tokenizer_state)._tag_state;
    if (*tag_state)._drop_next_attr_value {
        (*tag_state)._drop_next_attr_value = 0 as libc::c_int != 0;
        return;
    }
    attr = *((*tag_state)._attributes.data)
        .offset(
            ((*tag_state)._attributes.length).wrapping_sub(1 as libc::c_uint) as isize,
        ) as *mut GumboAttribute;
    gumbo_parser_deallocate(parser, (*attr).value as *mut libc::c_void);
    copy_over_tag_buffer(parser, &mut (*attr).value);
    copy_over_original_tag_text(
        parser,
        &mut (*attr).original_value,
        &mut (*attr).value_start,
        &mut (*attr).value_end,
    );
    reinitialize_tag_buffer(parser);
}
unsafe extern "C" fn is_appropriate_end_tag(mut parser: *mut GumboParser) -> bool {
    let mut tag_state: *mut GumboTagState = 0 as *mut GumboTagState;
    let mut tmp___0: GumboTag = GUMBO_TAG_HTML;
    let mut tmp___1: libc::c_int = 0;
    tag_state = &mut (*(*parser)._tokenizer_state)._tag_state;
    if (*tag_state)._is_start_tag {
        __assert_fail(
            b"!tag_state->_is_start_tag\0" as *const u8 as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            833 as libc::c_uint,
            b"is_appropriate_end_tag\0" as *const u8 as *const libc::c_char,
        );
    }
    gumbo_string_buffer_append_codepoint(
        parser,
        '\u{0}' as i32,
        &mut (*tag_state)._buffer,
    );
    (*tag_state)._buffer.length = ((*tag_state)._buffer.length).wrapping_sub(1);
    if (*tag_state)._last_start_tag as libc::c_uint != 150 as libc::c_uint {
        tmp___0 = gumbo_tag_enum((*tag_state)._buffer.data as *const libc::c_char);
        if (*tag_state)._last_start_tag as libc::c_uint == tmp___0 as libc::c_uint {
            tmp___1 = 1 as libc::c_int;
        } else {
            tmp___1 = 0 as libc::c_int;
        }
    } else {
        tmp___1 = 0 as libc::c_int;
    }
    return tmp___1 != 0;
}
pub unsafe extern "C" fn gumbo_tokenizer_state_init(
    mut parser: *mut GumboInternalParser,
    mut text: *const libc::c_char,
    mut text_length: size_t,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    tmp = gumbo_parser_allocate(
        parser,
        ::std::mem::size_of::<GumboTokenizerState>() as libc::c_ulong,
    );
    tokenizer = tmp as *mut GumboTokenizerState;
    (*parser)._tokenizer_state = tokenizer;
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
    (*tokenizer)._reconsume_current_input = 0 as libc::c_int != 0;
    (*tokenizer)._is_current_node_foreign = 0 as libc::c_int != 0;
    (*tokenizer)._tag_state._last_start_tag = GUMBO_TAG_LAST;
    (*tokenizer)._buffered_emit_char = kGumboNoChar;
    gumbo_string_buffer_init(parser, &mut (*tokenizer)._temporary_buffer);
    (*tokenizer)._temporary_buffer_emit = 0 as *mut libc::c_void as *const libc::c_char;
    mark_tag_state_as_empty(&mut (*tokenizer)._tag_state);
    gumbo_string_buffer_init(parser, &mut (*tokenizer)._script_data_buffer);
    (*tokenizer)._token_start = text;
    utf8iterator_init(parser, text, text_length, &mut (*tokenizer)._input);
    utf8iterator_get_position(
        &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        &mut (*tokenizer)._token_start_pos,
    );
    doc_type_state_init(parser);
}
pub unsafe extern "C" fn gumbo_tokenizer_state_destroy(
    mut parser: *mut GumboInternalParser,
) {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    tokenizer = (*parser)._tokenizer_state;
    if !((*tokenizer)._doc_type_state.name as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong)
    {
        __assert_fail(
            b"tokenizer->_doc_type_state.name == NULL\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            868 as libc::c_uint,
            b"gumbo_tokenizer_state_destroy\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*tokenizer)._doc_type_state.public_identifier as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong)
    {
        __assert_fail(
            b"tokenizer->_doc_type_state.public_identifier == NULL\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            869 as libc::c_uint,
            b"gumbo_tokenizer_state_destroy\0" as *const u8 as *const libc::c_char,
        );
    }
    if !((*tokenizer)._doc_type_state.system_identifier as libc::c_ulong
        == 0 as *mut libc::c_void as libc::c_ulong)
    {
        __assert_fail(
            b"tokenizer->_doc_type_state.system_identifier == NULL\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            870 as libc::c_uint,
            b"gumbo_tokenizer_state_destroy\0" as *const u8 as *const libc::c_char,
        );
    }
    gumbo_string_buffer_destroy(parser, &mut (*tokenizer)._temporary_buffer);
    gumbo_string_buffer_destroy(parser, &mut (*tokenizer)._script_data_buffer);
    gumbo_parser_deallocate(parser, tokenizer as *mut libc::c_void);
}
pub unsafe extern "C" fn gumbo_tokenizer_set_state(
    mut parser: *mut GumboInternalParser,
    mut state: GumboTokenizerEnum,
) {
    (*(*parser)._tokenizer_state)._state = state;
}
pub unsafe extern "C" fn gumbo_tokenizer_set_is_current_node_foreign(
    mut parser: *mut GumboInternalParser,
    mut is_foreign: bool,
) {
    let mut tmp: *const libc::c_char = 0 as *const libc::c_char;
    if is_foreign as libc::c_int
        != (*(*parser)._tokenizer_state)._is_current_node_foreign as libc::c_int
    {
        if is_foreign {
            tmp = b"true\0" as *const u8 as *const libc::c_char;
        } else {
            tmp = b"false\0" as *const u8 as *const libc::c_char;
        }
        gumbo_debug(
            b"Toggling is_current_node_foreign to %s.\n\0" as *const u8
                as *const libc::c_char,
            tmp,
        );
    }
    (*(*parser)._tokenizer_state)._is_current_node_foreign = is_foreign;
}
unsafe extern "C" fn handle_data_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    match c {
        38 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_CHAR_REF_IN_DATA);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_TAG_OPEN);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, '<' as i32);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            emit_char(parser, c, output);
            return RETURN_ERROR;
        }
        _ => {
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
    };
}
unsafe extern "C" fn handle_char_ref_in_data_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
    tmp = emit_char_ref(parser, ' ' as i32, 0 as libc::c_int != 0, output);
    return tmp;
}
unsafe extern "C" fn handle_rcdata_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: StateResult = RETURN_ERROR;
    let mut tmp___1: bool = false;
    match c {
        38 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_CHAR_REF_IN_RCDATA);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA_LT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, '<' as i32);
            return NEXT_CHAR;
        }
        0 => {
            tmp = emit_replacement_char(parser, output);
            return tmp;
        }
        -1 => {
            tmp___0 = emit_eof(parser, output);
            return tmp___0;
        }
        _ => {
            tmp___1 = emit_current_char(parser, output);
            return tmp___1 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_char_ref_in_rcdata_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA);
    tmp = emit_char_ref(parser, ' ' as i32, 0 as libc::c_int != 0, output);
    return tmp;
}
unsafe extern "C" fn handle_rawtext_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: StateResult = RETURN_ERROR;
    let mut tmp___1: bool = false;
    match c {
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_RAWTEXT_LT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, '<' as i32);
            return NEXT_CHAR;
        }
        0 => {
            tmp = emit_replacement_char(parser, output);
            return tmp;
        }
        -1 => {
            tmp___0 = emit_eof(parser, output);
            return tmp___0;
        }
        _ => {
            tmp___1 = emit_current_char(parser, output);
            return tmp___1 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: StateResult = RETURN_ERROR;
    let mut tmp___1: bool = false;
    match c {
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_LT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, '<' as i32);
            return NEXT_CHAR;
        }
        0 => {
            tmp = emit_replacement_char(parser, output);
            return tmp;
        }
        -1 => {
            tmp___0 = emit_eof(parser, output);
            return tmp___0;
        }
        _ => {
            tmp___1 = emit_current_char(parser, output);
            return tmp___1 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_plaintext_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: StateResult = RETURN_ERROR;
    let mut tmp___1: bool = false;
    match c {
        0 => {
            tmp = emit_replacement_char(parser, output);
            return tmp;
        }
        -1 => {
            tmp___0 = emit_eof(parser, output);
            return tmp___0;
        }
        _ => {
            tmp___1 = emit_current_char(parser, output);
            return tmp___1 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_tag_open_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"<\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"<\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1010 as libc::c_uint,
            b"handle_tag_open_state\0" as *const u8 as *const libc::c_char,
        );
    }
    match c {
        33 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_MARKUP_DECLARATION);
            clear_temporary_buffer(parser);
            return NEXT_CHAR;
        }
        47 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_END_TAG_OPEN);
            append_char_to_temporary_buffer(parser, '/' as i32);
            return NEXT_CHAR;
        }
        63 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_COMMENT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, '?' as i32);
            add_parse_error___0(parser, GUMBO_ERR_TAG_STARTS_WITH_QUESTION);
            return NEXT_CHAR;
        }
        _ => {
            tmp___3 = is_alpha(c);
            if tmp___3 {
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_TAG_NAME);
                start_new_tag(parser, 1 as libc::c_int != 0);
                return NEXT_CHAR;
            } else {
                add_parse_error___0(parser, GUMBO_ERR_TAG_INVALID);
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
                emit_temporary_buffer(parser, output);
                return RETURN_ERROR;
            }
        }
    };
}
unsafe extern "C" fn handle_end_tag_open_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"</\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"</\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1044 as libc::c_uint,
            b"handle_end_tag_open_state\0" as *const u8 as *const libc::c_char,
        );
    }
    match c {
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_CLOSE_TAG_EMPTY);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_CLOSE_TAG_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp___3 = emit_temporary_buffer(parser, output);
            return tmp___3 as StateResult;
        }
        _ => {
            tmp___4 = is_alpha(c);
            if tmp___4 {
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_TAG_NAME);
                start_new_tag(parser, 0 as libc::c_int != 0);
            } else {
                add_parse_error___0(parser, GUMBO_ERR_CLOSE_TAG_INVALID);
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_COMMENT);
                clear_temporary_buffer(parser);
                append_char_to_temporary_buffer(parser, c);
            }
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_tag_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: libc::c_int = 0;
    match c {
        32 | 12 | 10 | 9 => {
            finish_tag_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
            return NEXT_CHAR;
        }
        47 => {
            finish_tag_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
            return NEXT_CHAR;
        }
        62 => {
            finish_tag_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_tag_buffer(
                parser,
                kUtf8ReplacementChar,
                1 as libc::c_int != 0,
            );
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_TAG_EOF);
            abandon_current_tag(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        _ => {
            tmp___0 = ensure_lowercase(c);
            append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_rcdata_lt_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"<\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"<\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1107 as libc::c_uint,
            b"handle_rcdata_lt_state\0" as *const u8 as *const libc::c_char,
        );
    }
    if c == 47 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA_END_TAG_OPEN);
        append_char_to_temporary_buffer(parser, '/' as i32);
        return NEXT_CHAR;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    };
}
unsafe extern "C" fn handle_rcdata_end_tag_open_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"</\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"</\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1123 as libc::c_uint,
            b"handle_rcdata_end_tag_open_state\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___4 = is_alpha(c);
    if tmp___4 {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA_END_TAG_NAME);
        start_new_tag(parser, 0 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA);
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    };
}
unsafe extern "C" fn handle_rcdata_end_tag_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if !((*tokenizer)._temporary_buffer.length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"tokenizer->_temporary_buffer.length >= 2\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1140 as libc::c_uint,
            b"handle_rcdata_end_tag_name_state\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___3 = is_alpha(c);
    if tmp___3 {
        tmp___0 = ensure_lowercase(c);
        append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        tmp___2 = is_appropriate_end_tag(parser);
        if tmp___2 {
            match c {
                32 | 12 | 10 | 9 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
                    return NEXT_CHAR;
                }
                47 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
                    return NEXT_CHAR;
                }
                62 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
                    tmp___1 = emit_current_tag(parser, output);
                    return tmp___1;
                }
                _ => {}
            }
        }
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_RCDATA);
    abandon_current_tag(parser);
    tmp___4 = emit_temporary_buffer(parser, output);
    return tmp___4 as StateResult;
}
unsafe extern "C" fn handle_rawtext_lt_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"<\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"<\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1173 as libc::c_uint,
            b"handle_rawtext_lt_state\0" as *const u8 as *const libc::c_char,
        );
    }
    if c == 47 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RAWTEXT_END_TAG_OPEN);
        append_char_to_temporary_buffer(parser, '/' as i32);
        return NEXT_CHAR;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RAWTEXT);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    };
}
unsafe extern "C" fn handle_rawtext_end_tag_open_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"</\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"</\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1189 as libc::c_uint,
            b"handle_rawtext_end_tag_open_state\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___4 = is_alpha(c);
    if tmp___4 {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RAWTEXT_END_TAG_NAME);
        start_new_tag(parser, 0 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_RAWTEXT);
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    };
}
unsafe extern "C" fn handle_rawtext_end_tag_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if !((*tokenizer)._temporary_buffer.length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"tokenizer->_temporary_buffer.length >= 2\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1205 as libc::c_uint,
            b"handle_rawtext_end_tag_name_state\0" as *const u8 as *const libc::c_char,
        );
    }
    gumbo_debug(
        b"Last end tag: %*s\n\0" as *const u8 as *const libc::c_char,
        (*tokenizer)._tag_state._buffer.length as libc::c_int,
        (*tokenizer)._tag_state._buffer.data,
    );
    tmp___3 = is_alpha(c);
    if tmp___3 {
        tmp___0 = ensure_lowercase(c);
        append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        tmp___2 = is_appropriate_end_tag(parser);
        if tmp___2 {
            gumbo_debug(
                b"Is an appropriate end tag.\n\0" as *const u8 as *const libc::c_char,
            );
            match c {
                32 | 12 | 10 | 9 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
                    return NEXT_CHAR;
                }
                47 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
                    return NEXT_CHAR;
                }
                62 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
                    tmp___1 = emit_current_tag(parser, output);
                    return tmp___1;
                }
                _ => {}
            }
        }
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_RAWTEXT);
    abandon_current_tag(parser);
    tmp___4 = emit_temporary_buffer(parser, output);
    return tmp___4 as StateResult;
}
unsafe extern "C" fn handle_script_lt_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"<\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"<\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1241 as libc::c_uint,
            b"handle_script_lt_state\0" as *const u8 as *const libc::c_char,
        );
    }
    if c == 47 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_END_TAG_OPEN);
        append_char_to_temporary_buffer(parser, '/' as i32);
        return NEXT_CHAR;
    } else if c == 33 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_START);
        append_char_to_temporary_buffer(parser, '!' as i32);
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        tmp___4 = emit_temporary_buffer(parser, output);
        return tmp___4 as StateResult;
    };
}
unsafe extern "C" fn handle_script_end_tag_open_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"</\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"</\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1261 as libc::c_uint,
            b"handle_script_end_tag_open_state\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___4 = is_alpha(c);
    if tmp___4 {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_END_TAG_NAME);
        start_new_tag(parser, 0 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    };
}
unsafe extern "C" fn handle_script_end_tag_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if !((*tokenizer)._temporary_buffer.length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"tokenizer->_temporary_buffer.length >= 2\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1277 as libc::c_uint,
            b"handle_script_end_tag_name_state\0" as *const u8 as *const libc::c_char,
        );
    }
    tmp___3 = is_alpha(c);
    if tmp___3 {
        tmp___0 = ensure_lowercase(c);
        append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        tmp___2 = is_appropriate_end_tag(parser);
        if tmp___2 {
            match c {
                32 | 12 | 10 | 9 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
                    return NEXT_CHAR;
                }
                47 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
                    return NEXT_CHAR;
                }
                62 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
                    tmp___1 = emit_current_tag(parser, output);
                    return tmp___1;
                }
                _ => {}
            }
        }
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
    abandon_current_tag(parser);
    tmp___4 = emit_temporary_buffer(parser, output);
    return tmp___4 as StateResult;
}
unsafe extern "C" fn handle_script_escaped_start_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    if c == 45 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_START_DASH);
        tmp = emit_current_char(parser, output);
        return tmp as StateResult;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        return NEXT_CHAR;
    };
}
unsafe extern "C" fn handle_script_escaped_start_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    if c == 45 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_DASH_DASH);
        tmp = emit_current_char(parser, output);
        return tmp as StateResult;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        return NEXT_CHAR;
    };
}
unsafe extern "C" fn handle_script_escaped_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: StateResult = RETURN_ERROR;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_DASH);
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_LT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
        0 => {
            tmp___0 = emit_replacement_char(parser, output);
            return tmp___0;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SCRIPT_EOF);
            tmp___1 = emit_eof(parser, output);
            return tmp___1;
        }
        _ => {
            tmp___2 = emit_current_char(parser, output);
            return tmp___2 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_escaped_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: StateResult = RETURN_ERROR;
    let mut tmp___1: bool = false;
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_DASH_DASH);
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_LT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
        0 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
            tmp___0 = emit_replacement_char(parser, output);
            return tmp___0;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SCRIPT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
            tmp___1 = emit_current_char(parser, output);
            return tmp___1 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_escaped_dash_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    match c {
        45 => {
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_LT);
            clear_temporary_buffer(parser);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
            tmp___0 = emit_current_char(parser, output);
            return tmp___0 as StateResult;
        }
        0 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
            tmp___1 = emit_replacement_char(parser, output);
            return tmp___1;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SCRIPT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
            tmp___2 = emit_current_char(parser, output);
            return tmp___2 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_escaped_lt_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___4: libc::c_int = 0;
    let mut tmp___5: bool = false;
    let mut tmp___6: bool = false;
    let mut tmp___7: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"<\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"<\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1415 as libc::c_uint,
            b"handle_script_escaped_lt_state\0" as *const u8 as *const libc::c_char,
        );
    }
    if (*tokenizer)._script_data_buffer.length != 0 {
        __assert_fail(
            b"!tokenizer->_script_data_buffer.length\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1416 as libc::c_uint,
            b"handle_script_escaped_lt_state\0" as *const u8 as *const libc::c_char,
        );
    }
    if c == 47 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_END_TAG_OPEN);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        tmp___7 = is_alpha(c);
        if tmp___7 {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_START);
            append_char_to_temporary_buffer(parser, c);
            tmp___4 = ensure_lowercase(c);
            gumbo_string_buffer_append_codepoint(
                parser,
                tmp___4,
                &mut (*tokenizer)._script_data_buffer,
            );
            tmp___5 = emit_temporary_buffer(parser, output);
            return tmp___5 as StateResult;
        } else {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
            tmp___6 = emit_temporary_buffer(parser, output);
            return tmp___6 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_escaped_end_tag_open_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___2 = temporary_buffer_equals(
        parser,
        b"</\0" as *const u8 as *const libc::c_char,
    );
    if !tmp___2 {
        __assert_fail(
            b"temporary_buffer_equals(parser, \"</\")\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1437 as libc::c_uint,
            b"handle_script_escaped_end_tag_open_state\0" as *const u8
                as *const libc::c_char,
        );
    }
    tmp___4 = is_alpha(c);
    if tmp___4 {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED_END_TAG_NAME);
        start_new_tag(parser, 0 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
        tmp___3 = emit_temporary_buffer(parser, output);
        return tmp___3 as StateResult;
    };
}
unsafe extern "C" fn handle_script_escaped_end_tag_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    if !((*tokenizer)._temporary_buffer.length >= 2 as libc::c_ulong) {
        __assert_fail(
            b"tokenizer->_temporary_buffer.length >= 2\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            1453 as libc::c_uint,
            b"handle_script_escaped_end_tag_name_state\0" as *const u8
                as *const libc::c_char,
        );
    }
    tmp___3 = is_alpha(c);
    if tmp___3 {
        tmp___0 = ensure_lowercase(c);
        append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
        append_char_to_temporary_buffer(parser, c);
        return NEXT_CHAR;
    } else {
        tmp___2 = is_appropriate_end_tag(parser);
        if tmp___2 {
            match c {
                32 | 12 | 10 | 9 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
                    return NEXT_CHAR;
                }
                47 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
                    return NEXT_CHAR;
                }
                62 => {
                    finish_tag_name(parser);
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
                    tmp___1 = emit_current_tag(parser, output);
                    return tmp___1;
                }
                _ => {}
            }
        }
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
    abandon_current_tag(parser);
    tmp___4 = emit_temporary_buffer(parser, output);
    return tmp___4 as StateResult;
}
unsafe extern "C" fn handle_script_double_escaped_start_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    match c {
        62 | 47 | 32 | 12 | 10 | 9 => {
            tmp___1 = gumbo_string_equals(
                &kScriptTag,
                &mut (*tokenizer)._script_data_buffer as *mut GumboStringBuffer
                    as *mut GumboStringPiece as *const GumboStringPiece,
            );
            if tmp___1 {
                tmp___0 = 28 as libc::c_int;
            } else {
                tmp___0 = 21 as libc::c_int;
            }
            gumbo_tokenizer_set_state(parser, tmp___0 as GumboTokenizerEnum);
            tmp___2 = emit_current_char(parser, output);
            return tmp___2 as StateResult;
        }
        _ => {
            tmp___5 = is_alpha(c);
            if tmp___5 {
                tmp___3 = ensure_lowercase(c);
                gumbo_string_buffer_append_codepoint(
                    parser,
                    tmp___3,
                    &mut (*tokenizer)._script_data_buffer,
                );
                tmp___4 = emit_current_char(parser, output);
                return tmp___4 as StateResult;
            } else {
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_ESCAPED);
                (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
                return NEXT_CHAR;
            }
        }
    };
}
unsafe extern "C" fn handle_script_double_escaped_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_DASH);
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_LT);
            tmp___0 = emit_current_char(parser, output);
            return tmp___0 as StateResult;
        }
        0 => {
            tmp___1 = emit_replacement_char(parser, output);
            return tmp___1;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SCRIPT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        _ => {
            tmp___2 = emit_current_char(parser, output);
            return tmp___2 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_double_escaped_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: StateResult = RETURN_ERROR;
    let mut tmp___2: bool = false;
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_DASH_DASH);
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_LT);
            tmp___0 = emit_current_char(parser, output);
            return tmp___0 as StateResult;
        }
        0 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED);
            tmp___1 = emit_replacement_char(parser, output);
            return tmp___1;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SCRIPT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED);
            tmp___2 = emit_current_char(parser, output);
            return tmp___2 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_double_escaped_dash_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    let mut tmp___1: bool = false;
    let mut tmp___2: StateResult = RETURN_ERROR;
    let mut tmp___3: bool = false;
    match c {
        45 => {
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
        60 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_LT);
            tmp___0 = emit_current_char(parser, output);
            return tmp___0 as StateResult;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT);
            tmp___1 = emit_current_char(parser, output);
            return tmp___1 as StateResult;
        }
        0 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED);
            tmp___2 = emit_replacement_char(parser, output);
            return tmp___2;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SCRIPT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED);
            tmp___3 = emit_current_char(parser, output);
            return tmp___3 as StateResult;
        }
    };
}
unsafe extern "C" fn handle_script_double_escaped_lt_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    if c == 47 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED_END);
        gumbo_string_buffer_destroy(parser, &mut (*tokenizer)._script_data_buffer);
        gumbo_string_buffer_init(parser, &mut (*tokenizer)._script_data_buffer);
        tmp = emit_current_char(parser, output);
        return tmp as StateResult;
    } else {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        return NEXT_CHAR;
    };
}
unsafe extern "C" fn handle_script_double_escaped_end_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___0: libc::c_int = 0;
    let mut tmp___1: bool = false;
    let mut tmp___2: bool = false;
    let mut tmp___3: libc::c_int = 0;
    let mut tmp___4: bool = false;
    let mut tmp___5: bool = false;
    match c {
        62 | 47 | 32 | 12 | 10 | 9 => {
            tmp___1 = gumbo_string_equals(
                &kScriptTag,
                &mut (*tokenizer)._script_data_buffer as *mut GumboStringBuffer
                    as *mut GumboStringPiece as *const GumboStringPiece,
            );
            if tmp___1 {
                tmp___0 = 21 as libc::c_int;
            } else {
                tmp___0 = 28 as libc::c_int;
            }
            gumbo_tokenizer_set_state(parser, tmp___0 as GumboTokenizerEnum);
            tmp___2 = emit_current_char(parser, output);
            return tmp___2 as StateResult;
        }
        _ => {
            tmp___5 = is_alpha(c);
            if tmp___5 {
                tmp___3 = ensure_lowercase(c);
                gumbo_string_buffer_append_codepoint(
                    parser,
                    tmp___3,
                    &mut (*tokenizer)._script_data_buffer,
                );
                tmp___4 = emit_current_char(parser, output);
                return tmp___4 as StateResult;
            } else {
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_SCRIPT_DOUBLE_ESCAPED);
                (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
                return NEXT_CHAR;
            }
        }
    };
}
unsafe extern "C" fn handle_before_attr_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: libc::c_int = 0;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        47 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_NAME);
            append_char_to_temporary_buffer(parser, 65533 as libc::c_int);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_NAME_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            return NEXT_CHAR;
        }
        61 | 60 | 39 | 34 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_NAME_INVALID);
        }
        _ => {}
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_NAME);
    tmp___0 = ensure_lowercase(c);
    append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_attr_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: libc::c_int = 0;
    match c {
        32 | 12 | 10 | 9 => {
            finish_attribute_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_ATTR_NAME);
            return NEXT_CHAR;
        }
        47 => {
            finish_attribute_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
            return NEXT_CHAR;
        }
        61 => {
            finish_attribute_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_VALUE);
            return NEXT_CHAR;
        }
        62 => {
            finish_attribute_name(parser);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_tag_buffer(
                parser,
                kUtf8ReplacementChar,
                1 as libc::c_int != 0,
            );
            return NEXT_CHAR;
        }
        -1 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            add_parse_error___0(parser, GUMBO_ERR_ATTR_NAME_EOF);
            return NEXT_CHAR;
        }
        60 | 39 | 34 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_NAME_INVALID);
        }
        _ => {}
    }
    tmp___0 = ensure_lowercase(c);
    append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_after_attr_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    let mut tmp___0: libc::c_int = 0;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        47 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
            return NEXT_CHAR;
        }
        61 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_VALUE);
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_NAME);
            append_char_to_temporary_buffer(parser, 65533 as libc::c_int);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_NAME_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            return NEXT_CHAR;
        }
        60 | 39 | 34 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_NAME_INVALID);
        }
        _ => {}
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_NAME);
    tmp___0 = ensure_lowercase(c);
    append_char_to_tag_buffer(parser, tmp___0, 1 as libc::c_int != 0);
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_before_attr_value_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        34 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_VALUE_DOUBLE_QUOTED);
            reset_tag_buffer_start_point(parser);
            return NEXT_CHAR;
        }
        38 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_VALUE_UNQUOTED);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        39 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_VALUE_SINGLE_QUOTED);
            reset_tag_buffer_start_point(parser);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_VALUE_UNQUOTED);
            append_char_to_tag_buffer(
                parser,
                kUtf8ReplacementChar,
                1 as libc::c_int != 0,
            );
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_UNQUOTED_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_UNQUOTED_RIGHT_BRACKET);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_current_tag(parser, output);
            return RETURN_ERROR;
        }
        96 | 61 | 60 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_UNQUOTED_EQUALS);
        }
        _ => {}
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_ATTR_VALUE_UNQUOTED);
    append_char_to_tag_buffer(parser, c, 1 as libc::c_int != 0);
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_attr_value_double_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        34 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_ATTR_VALUE_QUOTED);
            return NEXT_CHAR;
        }
        38 => {
            (*tokenizer)._tag_state._attr_value_state = (*tokenizer)._state;
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_CHAR_REF_IN_ATTR_VALUE);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_tag_buffer(
                parser,
                kUtf8ReplacementChar,
                0 as libc::c_int != 0,
            );
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_DOUBLE_QUOTE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        _ => {
            append_char_to_tag_buffer(parser, c, 0 as libc::c_int != 0);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_attr_value_single_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        39 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_ATTR_VALUE_QUOTED);
            return NEXT_CHAR;
        }
        38 => {
            (*tokenizer)._tag_state._attr_value_state = (*tokenizer)._state;
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_CHAR_REF_IN_ATTR_VALUE);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_tag_buffer(
                parser,
                kUtf8ReplacementChar,
                0 as libc::c_int != 0,
            );
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_SINGLE_QUOTE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        _ => {
            append_char_to_tag_buffer(parser, c, 0 as libc::c_int != 0);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_attr_value_unquoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
            finish_attribute_value(parser);
            return NEXT_CHAR;
        }
        38 => {
            (*tokenizer)._tag_state._attr_value_state = (*tokenizer)._state;
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_CHAR_REF_IN_ATTR_VALUE);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            finish_attribute_value(parser);
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_tag_buffer(
                parser,
                kUtf8ReplacementChar,
                1 as libc::c_int != 0,
            );
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_UNQUOTED_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            abandon_current_tag(parser);
            return NEXT_CHAR;
        }
        96 | 39 | 34 | 61 | 60 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_UNQUOTED_EQUALS);
        }
        _ => {}
    }
    append_char_to_tag_buffer(parser, c, 1 as libc::c_int != 0);
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_char_ref_in_attr_value_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut char_ref: OneOrTwoCodepoints = OneOrTwoCodepoints {
        first: 0,
        second: 0,
    };
    let mut allowed_char: libc::c_int = 0;
    let mut is_unquoted: bool = false;
    is_unquoted = 0 as libc::c_int != 0;
    match (*tokenizer)._tag_state._attr_value_state as libc::c_uint {
        37 => {
            allowed_char = '"' as i32;
        }
        38 => {
            allowed_char = '\'' as i32;
        }
        39 => {
            allowed_char = '>' as i32;
            is_unquoted = 1 as libc::c_int != 0;
        }
        _ => {
            allowed_char = ' ' as i32;
            __assert_fail(
                b"0\0" as *const u8 as *const libc::c_char,
                b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
                1926 as libc::c_uint,
                b"handle_char_ref_in_attr_value_state\0" as *const u8
                    as *const libc::c_char,
            );
        }
    }
    consume_char_ref(
        parser,
        &mut (*tokenizer)._input,
        allowed_char,
        1 as libc::c_int != 0,
        &mut char_ref,
    );
    if char_ref.first != kGumboNoChar {
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        append_char_to_tag_buffer(parser, char_ref.first, is_unquoted);
        if char_ref.second != kGumboNoChar {
            append_char_to_tag_buffer(parser, char_ref.second, is_unquoted);
        }
    } else {
        append_char_to_tag_buffer(parser, '&' as i32, is_unquoted);
    }
    gumbo_tokenizer_set_state(parser, (*tokenizer)._tag_state._attr_value_state);
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_after_attr_value_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    finish_attribute_value(parser);
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
            return NEXT_CHAR;
        }
        47 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_SELF_CLOSING_START_TAG);
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_AFTER_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_ATTR_AFTER_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_self_closing_start_tag_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    match c {
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._tag_state._is_self_closing = 1 as libc::c_int != 0;
            tmp = emit_current_tag(parser, output);
            return tmp;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_SOLIDUS_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            abandon_current_tag(parser);
            return NEXT_CHAR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_SOLIDUS_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_ATTR_NAME);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_bogus_comment_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    while c != 62 as libc::c_int {
        if !(c != -(1 as libc::c_int)) {
            break;
        }
        if c == 0 as libc::c_int {
            c = 65533 as libc::c_int;
        }
        append_char_to_temporary_buffer(parser, c);
        utf8iterator_next(&mut (*tokenizer)._input);
        c = utf8iterator_current(
            &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        );
    }
    gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
    tmp = emit_comment(parser, output);
    return tmp;
}
unsafe extern "C" fn handle_markup_declaration_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___2: bool = false;
    let mut tmp___3: bool = false;
    let mut tmp___4: bool = false;
    tmp___4 = utf8iterator_maybe_consume_match(
        &mut (*tokenizer)._input,
        b"--\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_ulong),
        1 as libc::c_int != 0,
    );
    if tmp___4 {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_START);
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
    } else {
        tmp___3 = utf8iterator_maybe_consume_match(
            &mut (*tokenizer)._input,
            b"DOCTYPE\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
            0 as libc::c_int != 0,
        );
        if tmp___3 {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            tmp = gumbo_copy_stringz(parser, b"\0" as *const u8 as *const libc::c_char);
            (*tokenizer)._doc_type_state.name = tmp as *const libc::c_char;
            tmp___0 = gumbo_copy_stringz(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            (*tokenizer)
                ._doc_type_state
                .public_identifier = tmp___0 as *const libc::c_char;
            tmp___1 = gumbo_copy_stringz(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            (*tokenizer)
                ._doc_type_state
                .system_identifier = tmp___1 as *const libc::c_char;
        } else if (*tokenizer)._is_current_node_foreign {
            tmp___2 = utf8iterator_maybe_consume_match(
                &mut (*tokenizer)._input,
                b"[CDATA[\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                1 as libc::c_int != 0,
            );
            if tmp___2 {
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_CDATA);
                (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            } else {
                add_parse_error___0(parser, GUMBO_ERR_DASHES_OR_DOCTYPE);
                gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_COMMENT);
                (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
                clear_temporary_buffer(parser);
            }
        } else {
            add_parse_error___0(parser, GUMBO_ERR_DASHES_OR_DOCTYPE);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_COMMENT);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            clear_temporary_buffer(parser);
        }
    }
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_comment_start_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_START_DASH);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_comment_start_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_END);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_comment_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_END_DASH);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_comment_end_dash_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_END);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_comment_end_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    match c {
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_comment(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        33 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_BANG_AFTER_DOUBLE_DASH);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_END_BANG);
            return NEXT_CHAR;
        }
        45 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_DASH_AFTER_DOUBLE_DASH);
            append_char_to_temporary_buffer(parser, '-' as i32);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_comment_end_bang_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: StateResult = RETURN_ERROR;
    match c {
        45 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT_END_DASH);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '!' as i32);
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            tmp = emit_comment(parser, output);
            return tmp;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '!' as i32);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_COMMENT_END_BANG_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_comment(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_COMMENT);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '-' as i32);
            append_char_to_temporary_buffer(parser, '!' as i32);
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_doctype_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    if (*tokenizer)._temporary_buffer.length != 0 {
        __assert_fail(
            b"!tokenizer->_temporary_buffer.length\0" as *const u8
                as *const libc::c_char,
            b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
            2243 as libc::c_uint,
            b"handle_doctype_state\0" as *const u8 as *const libc::c_char,
        );
    }
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_DOCTYPE_NAME);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_SPACE);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_DOCTYPE_NAME);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_before_doctype_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: libc::c_int = 0;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_NAME);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_RIGHT_BRACKET);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_NAME);
            (*tokenizer)._doc_type_state.force_quirks = 0 as libc::c_int != 0;
            tmp = ensure_lowercase(c);
            append_char_to_temporary_buffer(parser, tmp);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_doctype_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: libc::c_int = 0;
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_DOCTYPE_NAME);
            gumbo_parser_deallocate(
                parser,
                (*tokenizer)._doc_type_state.name as *mut libc::c_void,
            );
            finish_temporary_buffer(parser, &mut (*tokenizer)._doc_type_state.name);
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            gumbo_parser_deallocate(
                parser,
                (*tokenizer)._doc_type_state.name as *mut libc::c_void,
            );
            finish_temporary_buffer(parser, &mut (*tokenizer)._doc_type_state.name);
            emit_doctype(parser, output);
            return RETURN_SUCCESS;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            gumbo_parser_deallocate(
                parser,
                (*tokenizer)._doc_type_state.name as *mut libc::c_void,
            );
            finish_temporary_buffer(parser, &mut (*tokenizer)._doc_type_state.name);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_NAME);
            (*tokenizer)._doc_type_state.force_quirks = 0 as libc::c_int != 0;
            tmp = ensure_lowercase(c);
            append_char_to_temporary_buffer(parser, tmp);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_after_doctype_name_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_doctype(parser, output);
            return RETURN_SUCCESS;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            tmp___0 = utf8iterator_maybe_consume_match(
                &mut (*tokenizer)._input,
                b"PUBLIC\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                0 as libc::c_int != 0,
            );
            if tmp___0 {
                gumbo_tokenizer_set_state(
                    parser,
                    GUMBO_LEX_AFTER_DOCTYPE_PUBLIC_KEYWORD,
                );
                (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            } else {
                tmp = utf8iterator_maybe_consume_match(
                    &mut (*tokenizer)._input,
                    b"SYSTEM\0" as *const u8 as *const libc::c_char,
                    (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                        .wrapping_sub(1 as libc::c_ulong),
                    0 as libc::c_int != 0,
                );
                if tmp {
                    gumbo_tokenizer_set_state(
                        parser,
                        GUMBO_LEX_AFTER_DOCTYPE_SYSTEM_KEYWORD,
                    );
                    (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
                } else {
                    add_parse_error___0(
                        parser,
                        GUMBO_ERR_DOCTYPE_SPACE_OR_RIGHT_BRACKET,
                    );
                    gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
                    (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
                }
            }
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_after_doctype_public_keyword_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___6: bool = false;
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_DOCTYPE_PUBLIC_ID);
            return NEXT_CHAR;
        }
        34 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            tmp___2 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___2 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2398 as libc::c_uint,
                    b"handle_after_doctype_public_keyword_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_PUBLIC_ID_DOUBLE_QUOTED);
            return NEXT_CHAR;
        }
        39 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            tmp___6 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___6 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2404 as libc::c_uint,
                    b"handle_after_doctype_public_keyword_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_PUBLIC_ID_SINGLE_QUOTED);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_RIGHT_BRACKET);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
    };
}
unsafe extern "C" fn handle_before_doctype_public_id_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___6: bool = false;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        34 => {
            tmp___2 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___2 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2440 as libc::c_uint,
                    b"handle_before_doctype_public_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_PUBLIC_ID_DOUBLE_QUOTED);
            return NEXT_CHAR;
        }
        39 => {
            tmp___6 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___6 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2445 as libc::c_uint,
                    b"handle_before_doctype_public_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_PUBLIC_ID_SINGLE_QUOTED);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
    };
}
unsafe extern "C" fn handle_doctype_public_id_double_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        34 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_DOCTYPE_PUBLIC_ID);
            finish_doctype_public_id(parser);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_public_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_public_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_doctype_public_id_single_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        39 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_DOCTYPE_PUBLIC_ID);
            finish_doctype_public_id(parser);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_public_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_public_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_after_doctype_public_id_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___6: bool = false;
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(
                parser,
                GUMBO_LEX_BETWEEN_DOCTYPE_PUBLIC_SYSTEM_ID,
            );
            return NEXT_CHAR;
        }
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_doctype(parser, output);
            return RETURN_SUCCESS;
        }
        34 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            tmp___2 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___2 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2554 as libc::c_uint,
                    b"handle_after_doctype_public_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_DOUBLE_QUOTED);
            return NEXT_CHAR;
        }
        39 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            tmp___6 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___6 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2560 as libc::c_uint,
                    b"handle_after_doctype_public_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_SINGLE_QUOTED);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_between_doctype_public_system_id_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___6: bool = false;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_doctype(parser, output);
            return RETURN_SUCCESS;
        }
        34 => {
            tmp___2 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___2 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2593 as libc::c_uint,
                    b"handle_between_doctype_public_system_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_DOUBLE_QUOTED);
            return NEXT_CHAR;
        }
        39 => {
            tmp___6 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___6 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2598 as libc::c_uint,
                    b"handle_between_doctype_public_system_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_SINGLE_QUOTED);
            return NEXT_CHAR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
    };
}
unsafe extern "C" fn handle_after_doctype_system_keyword_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___6: bool = false;
    match c {
        32 | 12 | 10 | 9 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BEFORE_DOCTYPE_SYSTEM_ID);
            return NEXT_CHAR;
        }
        34 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            tmp___2 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___2 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2630 as libc::c_uint,
                    b"handle_after_doctype_system_keyword_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_DOUBLE_QUOTED);
            return NEXT_CHAR;
        }
        39 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            tmp___6 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___6 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2636 as libc::c_uint,
                    b"handle_after_doctype_system_keyword_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_SINGLE_QUOTED);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_before_doctype_system_id_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp___2: bool = false;
    let mut tmp___6: bool = false;
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        34 => {
            tmp___2 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___2 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2671 as libc::c_uint,
                    b"handle_before_doctype_system_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_DOUBLE_QUOTED);
            return NEXT_CHAR;
        }
        39 => {
            tmp___6 = temporary_buffer_equals(
                parser,
                b"\0" as *const u8 as *const libc::c_char,
            );
            if !tmp___6 {
                __assert_fail(
                    b"temporary_buffer_equals(parser, \"\")\0" as *const u8
                        as *const libc::c_char,
                    b"deps/gumbo-parser/tokenizer.c\0" as *const u8
                        as *const libc::c_char,
                    2676 as libc::c_uint,
                    b"handle_before_doctype_system_id_state\0" as *const u8
                        as *const libc::c_char,
                );
            }
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DOCTYPE_SYSTEM_ID_SINGLE_QUOTED);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_doctype_system_id_double_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        34 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_DOCTYPE_SYSTEM_ID);
            finish_doctype_system_id(parser);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_system_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_system_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_doctype_system_id_single_quoted_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        39 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_AFTER_DOCTYPE_SYSTEM_ID);
            finish_doctype_system_id(parser);
            return NEXT_CHAR;
        }
        0 => {
            add_parse_error___0(parser, GUMBO_ERR_UTF8_NULL);
            append_char_to_temporary_buffer(parser, kUtf8ReplacementChar);
            return NEXT_CHAR;
        }
        62 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_END);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_system_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            finish_doctype_system_id(parser);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            append_char_to_temporary_buffer(parser, c);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_after_doctype_system_id_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    match c {
        32 | 12 | 10 | 9 => return NEXT_CHAR,
        62 => {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_doctype(parser, output);
            return RETURN_SUCCESS;
        }
        -1 => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_EOF);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            (*tokenizer)._doc_type_state.force_quirks = 1 as libc::c_int != 0;
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
        _ => {
            add_parse_error___0(parser, GUMBO_ERR_DOCTYPE_INVALID);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_BOGUS_DOCTYPE);
            return NEXT_CHAR;
        }
    };
}
unsafe extern "C" fn handle_bogus_doctype_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    if c == 62 as libc::c_int {
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
        emit_doctype(parser, output);
        return RETURN_ERROR;
    } else {
        if c == -(1 as libc::c_int) {
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            emit_doctype(parser, output);
            return RETURN_ERROR;
        }
    }
    return NEXT_CHAR;
}
unsafe extern "C" fn handle_cdata_state(
    mut parser: *mut GumboParser,
    mut tokenizer: *mut GumboTokenizerState,
    mut c: libc::c_int,
    mut output: *mut GumboToken,
) -> StateResult {
    let mut tmp: bool = false;
    let mut tmp___0: bool = false;
    if c == -(1 as libc::c_int) {
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        reset_token_start_point(tokenizer);
        gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
        return NEXT_CHAR;
    } else {
        tmp___0 = utf8iterator_maybe_consume_match(
            &mut (*tokenizer)._input,
            b"]]>\0" as *const u8 as *const libc::c_char,
            (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
            1 as libc::c_int != 0,
        );
        if tmp___0 {
            (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
            reset_token_start_point(tokenizer);
            gumbo_tokenizer_set_state(parser, GUMBO_LEX_DATA);
            return NEXT_CHAR;
        } else {
            tmp = emit_current_char(parser, output);
            return tmp as StateResult;
        }
    };
}
static mut dispatch_table: [GumboLexerStateFunction; 68] = [
    Some(
        handle_data_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_char_ref_in_data_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rcdata_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_char_ref_in_rcdata_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rawtext_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_plaintext_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_tag_open_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_end_tag_open_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_tag_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rcdata_lt_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rcdata_end_tag_open_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rcdata_end_tag_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rawtext_lt_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rawtext_end_tag_open_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_rawtext_end_tag_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_lt_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_end_tag_open_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_end_tag_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_start_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_start_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_dash_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_lt_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_end_tag_open_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_escaped_end_tag_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_double_escaped_start_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_double_escaped_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_double_escaped_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_double_escaped_dash_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_double_escaped_lt_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_script_double_escaped_end_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_before_attr_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_attr_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_attr_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_before_attr_value_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_attr_value_double_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_attr_value_single_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_attr_value_unquoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_char_ref_in_attr_value_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_attr_value_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_self_closing_start_tag_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_bogus_comment_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_markup_declaration_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_comment_start_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_comment_start_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_comment_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_comment_end_dash_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_comment_end_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_comment_end_bang_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_doctype_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_before_doctype_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_doctype_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_doctype_name_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_doctype_public_keyword_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_before_doctype_public_id_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_doctype_public_id_double_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_doctype_public_id_single_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_doctype_public_id_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_between_doctype_public_system_id_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_doctype_system_keyword_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_before_doctype_system_id_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_doctype_system_id_double_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_doctype_system_id_single_quoted_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_after_doctype_system_id_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_bogus_doctype_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
    Some(
        handle_cdata_state
            as unsafe extern "C" fn(
                *mut GumboParser,
                *mut GumboTokenizerState,
                libc::c_int,
                *mut GumboToken,
            ) -> StateResult,
    ),
];
pub unsafe extern "C" fn gumbo_lex(
    mut parser: *mut GumboInternalParser,
    mut output: *mut GumboToken,
) -> bool {
    let mut tokenizer: *mut GumboTokenizerState = 0 as *mut GumboTokenizerState;
    let mut tmp: bool = false;
    let mut c: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut result: StateResult = RETURN_ERROR;
    let mut tmp___3: StateResult = RETURN_ERROR;
    let mut should_advance: bool = false;
    tokenizer = (*parser)._tokenizer_state;
    if (*tokenizer)._buffered_emit_char != kGumboNoChar {
        (*tokenizer)._reconsume_current_input = 1 as libc::c_int != 0;
        emit_char(parser, (*tokenizer)._buffered_emit_char, output);
        (*tokenizer)._reconsume_current_input = 0 as libc::c_int != 0;
        (*tokenizer)._buffered_emit_char = kGumboNoChar;
        return 1 as libc::c_int != 0;
    }
    tmp = maybe_emit_from_temporary_buffer(parser, output);
    if tmp {
        return 1 as libc::c_int != 0;
    }
    loop {
        if !((*tokenizer)._temporary_buffer_emit).is_null() {
            __assert_fail(
                b"!tokenizer->_temporary_buffer_emit\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
                2927 as libc::c_uint,
                b"gumbo_lex\0" as *const u8 as *const libc::c_char,
            );
        }
        if !((*tokenizer)._buffered_emit_char == kGumboNoChar) {
            __assert_fail(
                b"tokenizer->_buffered_emit_char == kGumboNoChar\0" as *const u8
                    as *const libc::c_char,
                b"deps/gumbo-parser/tokenizer.c\0" as *const u8 as *const libc::c_char,
                2928 as libc::c_uint,
                b"gumbo_lex\0" as *const u8 as *const libc::c_char,
            );
        }
        tmp___2 = utf8iterator_current(
            &mut (*tokenizer)._input as *mut Utf8Iterator as *const Utf8Iterator,
        );
        c = tmp___2;
        gumbo_debug(
            b"Lexing character '%c' in state %d.\n\0" as *const u8
                as *const libc::c_char,
            c,
            (*tokenizer)._state as libc::c_uint,
        );
        tmp___3 = (Some(
            (*dispatch_table.as_mut_ptr().offset((*tokenizer)._state as isize))
                .expect("non-null function pointer"),
        ))
            .expect("non-null function pointer")(parser, tokenizer, c, output);
        result = tmp___3;
        should_advance = !(*tokenizer)._reconsume_current_input;
        (*tokenizer)._reconsume_current_input = 0 as libc::c_int != 0;
        if result as libc::c_uint == 1 as libc::c_uint {
            return 1 as libc::c_int != 0
        } else {
            if result as libc::c_uint == 0 as libc::c_uint {
                return 0 as libc::c_int != 0;
            }
        }
        if should_advance {
            utf8iterator_next(&mut (*tokenizer)._input);
        }
    };
}
pub unsafe extern "C" fn gumbo_token_destroy(
    mut parser: *mut GumboInternalParser,
    mut token: *mut GumboToken,
) {
    let mut i: libc::c_int = 0;
    let mut attr: *mut GumboAttribute = 0 as *mut GumboAttribute;
    if token.is_null() {
        return;
    }
    match (*token).type_0 as libc::c_uint {
        0 => {
            gumbo_parser_deallocate(
                parser,
                (*token).v.doc_type.name as *mut libc::c_void,
            );
            gumbo_parser_deallocate(
                parser,
                (*token).v.doc_type.public_identifier as *mut libc::c_void,
            );
            gumbo_parser_deallocate(
                parser,
                (*token).v.doc_type.system_identifier as *mut libc::c_void,
            );
            return;
        }
        1 => {
            i = 0 as libc::c_int;
            while (i as libc::c_uint) < (*token).v.start_tag.attributes.length {
                attr = *((*token).v.start_tag.attributes.data).offset(i as isize)
                    as *mut GumboAttribute;
                if !attr.is_null() {
                    gumbo_destroy_attribute(parser, attr);
                }
                i += 1;
            }
            gumbo_parser_deallocate(
                parser,
                (*token).v.start_tag.attributes.data as *mut libc::c_void,
            );
            return;
        }
        3 => {
            gumbo_parser_deallocate(parser, (*token).v.text as *mut libc::c_void);
            return;
        }
        _ => return,
    };
}
pub unsafe extern "C" fn str_ends_with(
    mut str: *const libc::c_char,
    mut end: *const libc::c_char,
) -> bool {
    let mut end_len: libc::c_int = 0;
    let mut str_len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: size_t = 0;
    let mut tmp___1: libc::c_int = 0;
    let mut tmp___2: libc::c_int = 0;
    let mut tmp___3: libc::c_int = 0;
    if 0 as *mut libc::c_void as libc::c_ulong == str as libc::c_ulong {
        return 0 as libc::c_int != 0
    } else {
        if 0 as *mut libc::c_void as libc::c_ulong == end as libc::c_ulong {
            return 0 as libc::c_int != 0;
        }
    }
    tmp = strlen(end);
    end_len = tmp as libc::c_int;
    tmp___0 = strlen(str);
    str_len = tmp___0 as libc::c_int;
    if str_len < end_len {
        tmp___3 = 0 as libc::c_int;
    } else {
        tmp___1 = strcmp(str.offset(str_len as isize).offset(-(end_len as isize)), end);
        if tmp___1 != 0 {
            tmp___2 = 0 as libc::c_int;
        } else {
            tmp___2 = 1 as libc::c_int;
        }
        tmp___3 = tmp___2;
    }
    return tmp___3 != 0;
}
unsafe extern "C" fn Write(
    mut stream: *mut FILE,
    mut format: *const libc::c_char,
    mut ap: ::std::ffi::VaList,
) -> libc::c_int {
    let mut tmp: libc::c_int = 0;
    tmp = vfprintf(stream, format, ap.as_va_list());
    return tmp;
}
#[inline]
unsafe extern "C" fn Shift(
    mut val: libc::c_uint,
    mut normal: libc::c_uint,
    mut bright: libc::c_uint,
) -> libc::c_uint {
    if val == 0 as libc::c_uint {
        return (9 as libc::c_uint).wrapping_add(normal);
    }
    val = val.wrapping_sub(1);
    if val >= 8 as libc::c_uint {
        return val.wrapping_sub(8 as libc::c_uint).wrapping_add(bright);
    }
    return val.wrapping_add(normal);
}
unsafe extern "C" fn UnixTerminalColorize(
    mut stream: *mut FILE,
    mut fg: libc::c_uint,
    mut bg: libc::c_uint,
) {
    let mut tmp: libc::c_uint = 0;
    let mut tmp___0: libc::c_uint = 0;
    tmp = Shift(bg, 40 as libc::c_uint, 100 as libc::c_uint);
    tmp___0 = Shift(fg, 30 as libc::c_uint, 90 as libc::c_uint);
    fprintf(
        stream,
        b"\x1B[39;49;%u;%um\0" as *const u8 as *const libc::c_char,
        tmp___0,
        tmp,
    );
}
unsafe extern "C" fn UnixTerminalRestore(mut stream: *mut FILE) {
    fputs(b"\x1B[39;49m\0" as *const u8 as *const libc::c_char, stream);
}
pub unsafe extern "C" fn cc_fprintf(
    mut color: cc_color_t,
    mut stream: *mut FILE,
    mut format: *const libc::c_char,
    mut args: ...
) -> libc::c_int {
    let mut ap: ::std::ffi::VaListImpl;
    let mut result: libc::c_int = 0;
    let mut fg: libc::c_uint = 0;
    let mut bg: libc::c_uint = 0;
    let mut current_block_9: u64;
    ap = args.clone();
    result = -(22 as libc::c_int);
    if stream as libc::c_ulong != stdout as libc::c_ulong {
        if stream as libc::c_ulong != stderr as libc::c_ulong {
            result = Write(stream, format, ap.as_va_list());
            current_block_9 = 1917311967535052937;
        } else {
            current_block_9 = 15619007995458559411;
        }
    } else {
        current_block_9 = 15619007995458559411;
    }
    match current_block_9 {
        15619007995458559411 => {
            fg = color as libc::c_uint
                & (((1 as libc::c_int) << 5 as libc::c_int) - 1 as libc::c_int)
                    as libc::c_uint;
            bg = color as libc::c_uint >> 5 as libc::c_int
                & (((1 as libc::c_int) << 5 as libc::c_int) - 1 as libc::c_int)
                    as libc::c_uint;
            UnixTerminalColorize(stream, fg, bg);
            Write(stream, format, ap.as_va_list());
            UnixTerminalRestore(stream);
        }
        _ => {}
    }
    return result;
}
pub unsafe extern "C" fn case_upper(mut str: *mut libc::c_char) -> *mut libc::c_char {
    let mut i: libc::c_int = 0;
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    i = 0 as libc::c_int;
    tmp = strlen(str as *const libc::c_char);
    len = tmp as libc::c_int;
    while i < len {
        tmp___0 = __ctype_b_loc();
        if *(*tmp___0).offset(*str.offset(i as isize) as libc::c_int as isize)
            as libc::c_int & 512 as libc::c_int != 0
        {
            *str
                .offset(
                    i as isize,
                ) = (*str.offset(i as isize) as libc::c_int & -(33 as libc::c_int))
                as libc::c_char;
        }
        i += 1;
    }
    return str;
}
pub unsafe extern "C" fn case_lower(mut str: *mut libc::c_char) -> *mut libc::c_char {
    let mut i: libc::c_int = 0;
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    i = 0 as libc::c_int;
    tmp = strlen(str as *const libc::c_char);
    len = tmp as libc::c_int;
    while i < len {
        tmp___0 = __ctype_b_loc();
        if *(*tmp___0).offset(*str.offset(i as isize) as libc::c_int as isize)
            as libc::c_int & 256 as libc::c_int != 0
        {
            *str
                .offset(
                    i as isize,
                ) = (*str.offset(i as isize) as libc::c_int | 32 as libc::c_int)
                as libc::c_char;
        }
        i += 1;
    }
    return str;
}
pub unsafe extern "C" fn case_camel(mut str: *mut libc::c_char) -> *mut libc::c_char {
    let mut current_block: u64;
    let mut i: libc::c_int = 0;
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut *const libc::c_ushort = 0 as *mut *const libc::c_ushort;
    i = 0 as libc::c_int;
    tmp = strlen(str as *const libc::c_char);
    len = tmp as libc::c_int;
    while i < len {
        if *str.offset(i as isize) as libc::c_int == 45 as libc::c_int {
            current_block = 989081973188636696;
        } else if *str.offset(i as isize) as libc::c_int == 95 as libc::c_int {
            current_block = 989081973188636696;
        } else if *str.offset(i as isize) as libc::c_int == 32 as libc::c_int {
            current_block = 989081973188636696;
        } else {
            current_block = 13056961889198038528;
        }
        match current_block {
            989081973188636696 => {
                memmove(
                    str.offset(i as isize) as *mut libc::c_void,
                    str.offset((i + 1 as libc::c_int) as isize) as *const libc::c_void,
                    (len - i) as size_t,
                );
                if i != 0 {
                    tmp___0 = __ctype_b_loc();
                    if *(*tmp___0)
                        .offset(*str.offset(i as isize) as libc::c_int as isize)
                        as libc::c_int & 512 as libc::c_int != 0
                    {
                        *str
                            .offset(
                                i as isize,
                            ) = (*str.offset(i as isize) as libc::c_int
                            & -(33 as libc::c_int)) as libc::c_char;
                    }
                }
                i -= 1;
                len -= 1;
            }
            _ => {}
        }
        i += 1;
    }
    return str;
}
pub unsafe extern "C" fn gumbo_get_element_by_id(
    mut id: *const libc::c_char,
    mut document: *mut GumboNode,
) -> *mut GumboNode {
    let mut node_id: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp: *mut GumboAttribute = 0 as *mut GumboAttribute;
    let mut tmp___0: libc::c_int = 0;
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: libc::c_uint = 0;
    let mut node: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___1: *mut GumboNode = 0 as *mut GumboNode;
    if 0 as libc::c_uint != (*document).type_0 as libc::c_uint {
        if 1 as libc::c_uint != (*document).type_0 as libc::c_uint {
            return 0 as *mut libc::c_void as *mut GumboNode;
        }
    }
    tmp = gumbo_get_attribute(
        &mut (*document).v.element.attributes as *mut GumboVector as *const GumboVector,
        b"id\0" as *const u8 as *const libc::c_char,
    );
    node_id = tmp;
    if !node_id.is_null() {
        tmp___0 = strcmp(id, (*node_id).value);
        if 0 as libc::c_int == tmp___0 {
            return document;
        }
    }
    children = &mut (*document).v.element.children;
    i = 0 as libc::c_uint;
    while i < (*children).length {
        tmp___1 = gumbo_get_element_by_id(
            id,
            *((*children).data).offset(i as isize) as *mut GumboNode,
        );
        node = tmp___1;
        if !node.is_null() {
            return node;
        }
        i = i.wrapping_add(1);
    }
    return 0 as *mut libc::c_void as *mut GumboNode;
}
pub unsafe extern "C" fn strdup(mut str: *const libc::c_char) -> *mut libc::c_char {
    let mut len: libc::c_int = 0;
    let mut tmp: size_t = 0;
    let mut buf: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    if 0 as *mut libc::c_void as libc::c_ulong
        == str as *mut libc::c_char as libc::c_ulong
    {
        return 0 as *mut libc::c_void as *mut libc::c_char;
    }
    tmp = strlen(str);
    len = tmp.wrapping_add(1 as libc::c_ulong) as libc::c_int;
    tmp___0 = malloc(len as size_t);
    buf = tmp___0 as *mut libc::c_char;
    if !buf.is_null() {
        memset(buf as *mut libc::c_void, 0 as libc::c_int, len as size_t);
        memcpy(
            buf as *mut libc::c_void,
            str as *const libc::c_void,
            (len - 1 as libc::c_int) as size_t,
        );
    }
    return buf;
}
static mut env_vars: [*const libc::c_char; 5] = [
    b"TMPDIR\0" as *const u8 as *const libc::c_char,
    b"TEMP\0" as *const u8 as *const libc::c_char,
    b"TMP\0" as *const u8 as *const libc::c_char,
    b"Wimp$ScrapDir\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_void as *mut libc::c_void as *const libc::c_char,
];
static mut platform_dirs: [*const libc::c_char; 4] = [
    b"/tmp\0" as *const u8 as *const libc::c_char,
    b"/var/tmp\0" as *const u8 as *const libc::c_char,
    b"/usr/tmp\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_void as *mut libc::c_void as *const libc::c_char,
];
unsafe extern "C" fn is_directory(mut path: *const libc::c_char) -> libc::c_int {
    let mut s: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_nlink: 0,
        st_mode: 0,
        st_uid: 0,
        st_gid: 0,
        __pad0: 0,
        st_rdev: 0,
        st_size: 0,
        st_blksize: 0,
        st_blocks: 0,
        st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
        __glibc_reserved: [0; 3],
    };
    let mut tmp: libc::c_int = 0;
    let mut tmp___0: libc::c_int = 0;
    tmp = stat(path, &mut s as *mut stat);
    if -(1 as libc::c_int) == tmp {
        return -(1 as libc::c_int);
    }
    if 1 as libc::c_int
        == (s.st_mode & 61440 as libc::c_uint == 16384 as libc::c_uint) as libc::c_int
    {
        tmp___0 = 0 as libc::c_int;
    } else {
        tmp___0 = -(1 as libc::c_int);
    }
    return tmp___0;
}
pub unsafe extern "C" fn gettempdir() -> *mut libc::c_char {
    let mut i: libc::c_int = 0;
    let mut dir: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___0: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___1: libc::c_int = 0;
    let mut i___0: libc::c_int = 0;
    let mut tmp___2: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___3: libc::c_int = 0;
    let mut cwd: [libc::c_char; 256] = [0; 256];
    let mut tmp___4: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut tmp___5: *mut libc::c_char = 0 as *mut libc::c_char;
    i = 0 as libc::c_int;
    while !(env_vars[i as usize]).is_null() {
        tmp = getenv(env_vars[i as usize]);
        dir = tmp;
        if !dir.is_null() {
            tmp___1 = is_directory(dir as *const libc::c_char);
            if 0 as libc::c_int == tmp___1 {
                tmp___0 = strdup(dir as *const libc::c_char);
                return tmp___0;
            }
        }
        i += 1;
    }
    i___0 = 0 as libc::c_int;
    while !(platform_dirs[i___0 as usize]).is_null() {
        tmp___3 = is_directory(platform_dirs[i___0 as usize]);
        if 0 as libc::c_int == tmp___3 {
            tmp___2 = strdup(platform_dirs[i___0 as usize]);
            return tmp___2;
        }
        i___0 += 1;
    }
    tmp___5 = getcwd(
        cwd.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
    );
    if 0 as *mut libc::c_void as libc::c_ulong != tmp___5 as libc::c_ulong {
        tmp___4 = strdup(cwd.as_mut_ptr() as *const libc::c_char);
        return tmp___4;
    }
    return 0 as *mut libc::c_void as *mut libc::c_char;
}
pub unsafe extern "C" fn asprintf(
    mut str: *mut *mut libc::c_char,
    mut fmt: *const libc::c_char,
    mut args: ...
) -> libc::c_int {
    let mut size: libc::c_int = 0;
    let mut args_0: ::std::ffi::VaListImpl;
    size = 0 as libc::c_int;
    args_0 = args.clone();
    size = vasprintf(str, fmt, args_0.as_va_list());
    return size;
}
pub unsafe extern "C" fn vasprintf(
    mut str: *mut *mut libc::c_char,
    mut fmt: *const libc::c_char,
    mut args: ::std::ffi::VaList,
) -> libc::c_int {
    let mut size: libc::c_int = 0;
    let mut tmpa: ::std::ffi::VaListImpl;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    size = 0 as libc::c_int;
    tmpa = args.clone();
    size = vsnprintf(
        0 as *mut libc::c_void as *mut libc::c_char,
        size as size_t,
        fmt,
        tmpa.as_va_list(),
    );
    if size < 0 as libc::c_int {
        return -(1 as libc::c_int);
    }
    tmp = malloc((size + 1 as libc::c_int) as size_t);
    *str = tmp as *mut libc::c_char;
    if 0 as *mut libc::c_void as libc::c_ulong == *str as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    size = vsprintf(*str, fmt, args.as_va_list());
    return size;
}
unsafe extern "C" fn get_text_nodes(mut root: *mut GumboNode) -> *mut text_nodes_t {
    let mut nodes: *mut text_nodes_t = 0 as *mut text_nodes_t;
    let mut tmp: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut children: *mut GumboVector = 0 as *mut GumboVector;
    let mut i: size_t = 0;
    let mut child: *mut GumboNode = 0 as *mut GumboNode;
    let mut tmp___0: size_t = 0;
    let mut child_nodes: *mut text_nodes_t = 0 as *mut text_nodes_t;
    let mut tmp___1: *mut text_nodes_t = 0 as *mut text_nodes_t;
    let mut j: size_t = 0;
    let mut tmp___2: size_t = 0;
    tmp = malloc(::std::mem::size_of::<text_nodes_t>() as libc::c_ulong);
    nodes = tmp as *mut text_nodes_t;
    if nodes.is_null() {
        return 0 as *mut libc::c_void as *mut text_nodes_t;
    }
    (*nodes).length = 0 as libc::c_int as size_t;
    children = &mut (*root).v.element.children;
    i = 0 as libc::c_int as size_t;
    while i < (*children).length as size_t {
        child = *((*children).data).offset(i as isize) as *mut GumboNode;
        if 2 as libc::c_uint == (*child).type_0 as libc::c_uint {
            tmp___0 = (*nodes).length;
            (*nodes).length = ((*nodes).length).wrapping_add(1);
            (*nodes).nodes[tmp___0 as usize] = (*child).v.text.text;
        } else if 1 as libc::c_uint == (*child).type_0 as libc::c_uint {
            tmp___1 = get_text_nodes(child);
            child_nodes = tmp___1;
            if child_nodes.is_null() {
                break;
            }
            if (*child_nodes).length != 0 {
                j = 0 as libc::c_int as size_t;
                while j < (*child_nodes).length {
                    tmp___2 = (*nodes).length;
                    (*nodes).length = ((*nodes).length).wrapping_add(1);
                    (*nodes).nodes[tmp___2 as usize] = (*child_nodes).nodes[j as usize];
                    j = j.wrapping_add(1);
                }
            }
            free(child_nodes as *mut libc::c_void);
        }
        i = i.wrapping_add(1);
    }
    return nodes;
}
pub unsafe extern "C" fn gumbo_text_content(
    mut node: *mut GumboNode,
) -> *mut libc::c_char {
    let mut text_nodes: *mut text_nodes_t = 0 as *mut text_nodes_t;
    let mut text_content: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut length: size_t = 0;
    let mut pos: libc::c_int = 0;
    let mut i: size_t = 0;
    let mut tmp: size_t = 0;
    let mut tmp___0: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut i___0: size_t = 0;
    let mut l: size_t = 0;
    let mut tmp___1: size_t = 0;
    text_nodes = 0 as *mut libc::c_void as *mut text_nodes_t;
    text_content = 0 as *mut libc::c_void as *mut libc::c_char;
    length = 1 as libc::c_int as size_t;
    pos = 0 as libc::c_int;
    text_nodes = get_text_nodes(node);
    if !text_nodes.is_null() {
        i = 0 as libc::c_int as size_t;
        while i < (*text_nodes).length {
            tmp = strlen((*text_nodes).nodes[i as usize]);
            length = (length as libc::c_ulong).wrapping_add(tmp) as size_t as size_t;
            i = i.wrapping_add(1);
        }
        tmp___0 = malloc(length);
        text_content = tmp___0 as *mut libc::c_char;
        if !text_content.is_null() {
            *text_content = '\u{0}' as i32 as libc::c_char;
            i___0 = 0 as libc::c_int as size_t;
            while i___0 < (*text_nodes).length {
                tmp___1 = strlen((*text_nodes).nodes[i___0 as usize]);
                l = tmp___1;
                strncat(
                    text_content.offset(pos as isize),
                    (*text_nodes).nodes[i___0 as usize],
                    l,
                );
                pos = (pos as size_t).wrapping_add(l) as libc::c_int;
                *text_content.offset(pos as isize) = '\u{0}' as i32 as libc::c_char;
                i___0 = i___0.wrapping_add(1);
            }
        }
    }
    free(text_nodes as *mut libc::c_void);
    return text_content;
}
pub fn main() {
    let mut args: Vec::<*mut libc::c_char> = Vec::new();
    for arg in ::std::env::args() {
        args.push(
            (::std::ffi::CString::new(arg))
                .expect("Failed to convert argument into CString.")
                .into_raw(),
        );
    }
    args.push(::std::ptr::null_mut());
    unsafe {
        ::std::process::exit(
            main_0(
                (args.len() - 1) as libc::c_int,
                args.as_mut_ptr() as *mut *mut libc::c_char,
            ) as i32,
        )
    }
}
unsafe extern "C" fn run_static_initializers() {
    kDoctypeHtml = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"html\0" as *const u8 as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kPublicIdHtml4_0 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"-//W3C//DTD HTML 4.0//EN\0" as *const u8 as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 25]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kPublicIdHtml4_01 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"-//W3C//DTD HTML 4.01//EN\0" as *const u8 as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 26]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kPublicIdXhtml1_0 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"-//W3C//DTD XHTML 1.0 Strict//EN\0" as *const u8
                as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kPublicIdXhtml1_1 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"-//W3C//DTD XHTML 1.1//EN\0" as *const u8 as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 26]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kSystemIdRecHtml4_0 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"http://www.w3.org/TR/REC-html40/strict.dtd\0" as *const u8
                as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 43]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kSystemIdHtml4 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"http://www.w3.org/TR/html4/strict.dtd\0" as *const u8
                as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 38]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kSystemIdXhtmlStrict1_1 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\0" as *const u8
                as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 50]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kSystemIdXhtml1_1 = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\0" as *const u8
                as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 45]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kSystemIdLegacyCompat = {
        let mut init = __anonstruct_GumboStringPiece_673951369 {
            data: b"about:legacy-compat\0" as *const u8 as *const libc::c_char,
            length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_ulong),
        };
        init
    };
    kQuirksModePublicIdPrefixes = [
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"+//Silmaril//dtd html Pro v0r11 19970101//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 43]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//AdvaSoft Ltd//DTD HTML 3.0 asWedit + extensions//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 53]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//AS//DTD HTML 3.0 asWedit + extensions//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 43]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.0 Level 1//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.0 Level 2//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.0 Strict Level 1//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 39]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.0 Strict Level 2//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 39]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.0 Strict//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 31]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.0//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 24]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 2.1E//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 25]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 3.0//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 24]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 3.2 Final//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 30]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 3.2//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 24]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML 3//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Level 0//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 28]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Level 1//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 28]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Level 2//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 28]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Level 3//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 28]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Strict Level 0//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 35]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Strict Level 1//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 35]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Strict Level 2//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 35]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Strict Level 3//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 35]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML Strict//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 27]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//IETF//DTD HTML//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Metrius//DTD Metrius Presentational//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 41]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Microsoft//DTD Internet Explorer 2.0 HTML Strict//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 54]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Microsoft//DTD Internet Explorer 2.0 HTML//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 47]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Microsoft//DTD Internet Explorer 2.0 Tables//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 49]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Microsoft//DTD Internet Explorer 3.0 HTML Strict//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 54]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Microsoft//DTD Internet Explorer 3.0 HTML//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 47]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Microsoft//DTD Internet Explorer 3.0 Tables//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 49]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Netscape Comm. Corp.//DTD HTML//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 36]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Netscape Comm. Corp.//DTD Strict HTML//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 43]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//O'Reilly and Associates//DTD HTML 2.0//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 43]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//O'Reilly and Associates//DTD HTML Extended 1.0//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 52]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//O'Reilly and Associates//DTD HTML Extended Relaxed 1.0//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 60]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::)extensions to HTML 4.0//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 80]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 70]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Spyglass//DTD HTML 2.0 Extended//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 37]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//SQ//DTD HTML 2.0 HoTMetaL + extensions//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 44]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Sun Microsystems Corp.//DTD HotJava HTML//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 46]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//Sun Microsystems Corp.//DTD HotJava Strict HTML//\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 53]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 3 1995-03-24//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 3.2 Draft//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 29]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 3.2 Final//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 29]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 3.2//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 3.2S Draft//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 30]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 4.0 Frameset//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 4.0 Transitional//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 36]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML Experimental 19960712//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 41]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML Experimental 970421//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 39]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD W3 HTML//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3O//DTD W3 HTML 3.0//\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 26]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//WebTechs//DTD Mozilla HTML 2.0//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 36]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//WebTechs//DTD Mozilla HTML//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"\0" as *const u8 as *const libc::c_char,
                length: 0 as libc::c_int as size_t,
            };
            init
        },
    ];
    kQuirksModePublicIdExactMatches = [
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3O//DTD W3 HTML Strict 3.0//EN//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 37]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-/W3C/DTD HTML 4.0 Transitional/EN\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 35]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"HTML\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"\0" as *const u8 as *const libc::c_char,
                length: 0 as libc::c_int as size_t,
            };
            init
        },
    ];
    kQuirksModeSystemIdExactMatches = [
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\0"
                    as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 59]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"\0" as *const u8 as *const libc::c_char,
                length: 0 as libc::c_int as size_t,
            };
            init
        },
    ];
    kLimitedQuirksPublicIdPrefixes = [
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD XHTML 1.0 Frameset//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD XHTML 1.0 Transitional//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 37]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"\0" as *const u8 as *const libc::c_char,
                length: 0 as libc::c_int as size_t,
            };
            init
        },
    ];
    kLimitedQuirksRequiresSystemIdPublicIdPrefixes = [
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 4.01 Frameset//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"-//W3C//DTD HTML 4.01 Transitional//\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 37]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
            };
            init
        },
        {
            let mut init = __anonstruct_GumboStringPiece_673951369 {
                data: b"\0" as *const u8 as *const libc::c_char,
                length: 0 as libc::c_int as size_t,
            };
            init
        },
    ];
    kSvgAttributeReplacements = [
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"attributename\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"attributeName\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"attributetype\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"attributeType\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"basefrequency\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"baseFrequency\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"baseprofile\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"baseProfile\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"calcmode\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"calcMode\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"clippathunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"clipPathUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"contentscripttype\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"contentScriptType\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"contentstyletype\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"contentStyleType\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"diffuseconstant\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 16]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"diffuseConstant\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 16]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"edgemode\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"edgeMode\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"externalresourcesrequired\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 26]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"externalResourcesRequired\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 26]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"filterres\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"filterRes\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"filterunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"filterUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"glyphref\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"glyphRef\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"gradienttransform\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"gradientTransform\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"gradientunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"gradientUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"kernelmatrix\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"kernelMatrix\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"kernelunitlength\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"kernelUnitLength\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"keypoints\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"keyPoints\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"keysplines\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"keySplines\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"keytimes\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"keyTimes\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"lengthadjust\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"lengthAdjust\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"limitingconeangle\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"limitingConeAngle\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"markerheight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"markerHeight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"markerunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"markerUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"markerwidth\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"markerWidth\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"maskcontentunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"maskContentUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"maskunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"maskUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"numoctaves\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"numOctaves\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pathlength\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pathLength\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"patterncontentunits\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 20]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"patternContentUnits\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 20]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"patterntransform\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"patternTransform\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"patternunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"patternUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pointsatx\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pointsAtX\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pointsaty\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pointsAtY\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pointsatz\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"pointsAtZ\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"preservealpha\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"preserveAlpha\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"preserveaspectratio\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 20]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"preserveAspectRatio\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 20]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"primitiveunits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"primitiveUnits\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"refx\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 5]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"refX\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 5]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"refy\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 5]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"refY\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 5]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"repeatcount\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"repeatCount\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"repeatdur\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"repeatDur\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 10]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"requiredextensions\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 19]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"requiredExtensions\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 19]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"requiredfeatures\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"requiredFeatures\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"specularconstant\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"specularConstant\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"specularexponent\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"specularExponent\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"spreadmethod\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"spreadMethod\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"startoffset\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"startOffset\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"stddeviation\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"stdDeviation\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"stitchtiles\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"stitchTiles\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"surfacescale\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"surfaceScale\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"systemlanguage\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"systemLanguage\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"tablevalues\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"tableValues\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"targetx\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"targetX\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"targety\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"targetY\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"textlength\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"textLength\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"viewbox\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"viewBox\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"viewtarget\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"viewTarget\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"xchannelselector\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"xChannelSelector\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"ychannelselector\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"yChannelSelector\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"zoomandpan\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"zoomAndPan\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 11]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
    ];
    kSvgTagReplacements = [
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"altglyph\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"altGlyph\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"altglyphdef\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"altGlyphDef\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"altglyphitem\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"altGlyphItem\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"animatecolor\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"animateColor\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"animatemotion\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"animateMotion\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"animatetransform\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"animateTransform\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"clippath\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"clipPath\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feblend\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feBlend\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fecolormatrix\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feColorMatrix\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fecomponenttransfer\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 20]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feComponentTransfer\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 20]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fecomposite\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feComposite\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feconvolvematrix\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feConvolveMatrix\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 17]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fediffuselighting\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feDiffuseLighting\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fedisplacementmap\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feDisplacementMap\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 18]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fedistantlight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feDistantLight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feflood\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feFlood\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fefunca\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feFuncA\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fefuncb\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feFuncB\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fefuncg\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feFuncG\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fefuncr\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feFuncR\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fegaussianblur\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feGaussianBlur\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feimage\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feImage\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"femerge\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feMerge\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 8]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"femergenode\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feMergeNode\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"femorphology\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feMorphology\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feoffset\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feOffset\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fepointlight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fePointLight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fespecularlighting\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 19]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feSpecularLighting\0" as *const u8
                            as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 19]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fespotlight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feSpotLight\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 12]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"fetile\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 7]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feTile\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 7]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feturbulence\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"feTurbulence\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 13]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"foreignobject\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"foreignObject\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 14]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"glyphref\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"glyphRef\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"lineargradient\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"linearGradient\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"radialgradient\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"radialGradient\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 15]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = _ReplacementEntry {
                from: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"textpath\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
                to: {
                    let mut init = __anonstruct_GumboStringPiece_673951369 {
                        data: b"textPath\0" as *const u8 as *const libc::c_char,
                        length: (::std::mem::size_of::<[libc::c_char; 9]>()
                            as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_ulong),
                    };
                    init
                },
            };
            init
        },
    ];
    kNamedEntities = [
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"AElig\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 198 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"AMP;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 38 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"AMP\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 38 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Aacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 193 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Aacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 193 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Abreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 258 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Acirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 194 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Acirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 194 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Acy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1040 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Afr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120068 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Agrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 192 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Agrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 192 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Alpha;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 913 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Amacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 256 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"And;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10835 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Aogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 260 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Aopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120120 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ApplyFunction;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8289 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Aring;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 197 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Aring\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 197 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ascr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119964 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Assign;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8788 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Atilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 195 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Atilde\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 195 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Auml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 196 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Auml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 196 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Backslash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8726 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Barv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10983 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Barwed;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8966 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Bcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1041 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Because;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8757 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Bernoullis;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8492 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Beta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 914 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Bfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120069 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Bopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120121 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Breve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 728 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Bscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8492 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Bumpeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8782 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CHcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1063 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"COPY;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 169 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"COPY\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 169 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 262 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8914 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CapitalDifferentialD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8517 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cayleys;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8493 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ccaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 268 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ccedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 199 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ccedil\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 199 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ccirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 264 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cconint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8752 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 266 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cedilla;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 184 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CenterDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 183 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8493 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Chi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 935 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CircleDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8857 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CircleMinus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8854 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CirclePlus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8853 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CircleTimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8855 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ClockwiseContourIntegral;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 26]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8754 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CloseCurlyDoubleQuote;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8221 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CloseCurlyQuote;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Colon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8759 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Colone;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10868 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Congruent;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8801 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Conint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8751 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ContourIntegral;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8750 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Copf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8450 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Coproduct;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8720 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CounterClockwiseContourIntegral;\0" as *const u8
                    as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8755 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cross;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10799 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119966 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Cup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8915 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"CupCap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8781 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8517 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DDotrahd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10513 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DJcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1026 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DScy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1029 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DZcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1039 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dagger;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8225 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Darr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8609 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dashv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10980 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 270 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1044 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Del;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8711 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Delta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 916 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120071 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DiacriticalAcute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 180 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DiacriticalDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 729 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DiacriticalDoubleAcute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 24]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DiacriticalGrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 96 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DiacriticalTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 732 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Diamond;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8900 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DifferentialD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8518 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120123 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 168 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DotDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8412 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DotEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8784 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleContourIntegral;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8751 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 168 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleDownArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8659 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8656 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleLeftRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8660 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleLeftTee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10980 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleLongLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10232 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleLongLeftRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 26]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10234 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleLongRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10233 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8658 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleRightTee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8872 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleUpArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8657 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleUpDownArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8661 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DoubleVerticalBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8741 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8595 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownArrowBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10515 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownArrowUpArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8693 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownBreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 785 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownLeftRightVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10576 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownLeftTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10590 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownLeftVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8637 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownLeftVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10582 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownRightTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10591 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownRightVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8641 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownRightVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10583 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownTee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8868 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"DownTeeArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8615 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Downarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8659 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119967 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Dstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 272 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ENG;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 330 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ETH;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 208 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ETH\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 208 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Eacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 201 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Eacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 201 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ecaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 282 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ecirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 202 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ecirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 202 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ecy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1069 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Edot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 278 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Efr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120072 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Egrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 200 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Egrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 200 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Element;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8712 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Emacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 274 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"EmptySmallSquare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9723 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"EmptyVerySmallSquare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9643 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Eogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 280 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Eopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120124 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Epsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 917 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Equal;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10869 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"EqualTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8770 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Equilibrium;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8652 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Escr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8496 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Esim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10867 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Eta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 919 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Euml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Euml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Exists;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8707 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ExponentialE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8519 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Fcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1060 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ffr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120073 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"FilledSmallSquare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9724 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"FilledVerySmallSquare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Fopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120125 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ForAll;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8704 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Fouriertrf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8497 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Fscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8497 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GJcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1027 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GT;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 62 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GT\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 62 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gamma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 915 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gammad;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 988 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gbreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 286 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 290 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 284 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1043 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 288 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120074 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8921 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120126 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8805 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterEqualLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8923 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterFullEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8807 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10914 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8823 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10878 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"GreaterTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8819 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119970 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Gt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8811 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"HARDcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1066 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hacek;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 711 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hat;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 94 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 292 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8460 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"HilbertSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8459 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8461 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"HorizontalLine;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9472 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8459 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Hstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 294 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"HumpDownHump;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8782 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"HumpEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8783 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"IEcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1045 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"IJlig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 306 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"IOcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1025 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 205 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 205 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Icirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 206 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Icirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 206 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Icy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1048 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Idot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 304 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ifr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8465 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Igrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 204 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Igrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 204 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Im;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8465 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Imacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 298 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ImaginaryI;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8520 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Implies;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8658 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Int;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8748 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Integral;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8747 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Intersection;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8898 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"InvisibleComma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8291 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"InvisibleTimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8290 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 302 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120128 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iota;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 921 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8464 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Itilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 296 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iukcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1030 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iuml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 207 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Iuml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 207 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 308 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1049 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120077 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120129 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119973 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jsercy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1032 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Jukcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1028 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"KHcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1061 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"KJcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1036 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Kappa;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 922 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Kcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 310 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Kcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1050 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Kfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120078 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Kopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120130 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Kscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119974 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LJcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1033 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LT;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 60 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LT\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 60 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 313 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lambda;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 923 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10218 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Laplacetrf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8466 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Larr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8606 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 317 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 315 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1051 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftAngleBracket;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8592 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftArrowBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8676 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftArrowRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8646 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftCeiling;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8968 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftDoubleBracket;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10214 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftDownTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10593 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftDownVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8643 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftDownVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10585 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftFloor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8970 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8596 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftRightVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10574 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftTee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8867 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftTeeArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8612 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10586 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftTriangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8882 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftTriangleBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10703 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftTriangleEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8884 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftUpDownVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10577 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftUpTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10592 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftUpVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8639 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftUpVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10584 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8636 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LeftVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10578 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Leftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8656 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Leftrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8660 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LessEqualGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8922 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LessFullEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8806 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LessGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8822 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LessLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10913 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LessSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10877 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LessTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8818 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120079 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ll;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8920 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lleftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8666 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lmidot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 319 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LongLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10229 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LongLeftRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10231 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LongRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Longleftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10232 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Longleftrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10234 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Longrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10233 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120131 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LowerLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8601 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"LowerRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8600 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8466 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lsh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8624 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 321 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Lt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8810 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Map;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10501 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Mcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1052 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"MediumSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8287 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Mellintrf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8499 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Mfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120080 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"MinusPlus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8723 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Mopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120132 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Mscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8499 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Mu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 924 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NJcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1034 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Nacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 323 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ncaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 327 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ncedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 325 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ncy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1053 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NegativeMediumSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NegativeThickSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NegativeThinSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NegativeVeryThinSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NestedGreaterGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8811 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NestedLessLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8810 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NewLine;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Nfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120081 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NoBreak;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8288 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NonBreakingSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 160 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Nopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8469 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Not;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10988 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotCongruent;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8802 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotCupCap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8813 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotDoubleVerticalBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotElement;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8713 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8800 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotEqualTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8770 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotExists;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8708 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8815 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreaterEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8817 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreaterFullEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8807 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreaterGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8811 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreaterLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8825 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreaterSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10878 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotGreaterTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8821 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotHumpDownHump;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8782 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotHumpEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8783 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLeftTriangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8938 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLeftTriangleBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10703 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLeftTriangleEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8940 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8814 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLessEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8816 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLessGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8824 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLessLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8810 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLessSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10877 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotLessTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8820 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotNestedGreaterGreater;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 25]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10914 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotNestedLessLess;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10913 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotPrecedes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8832 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotPrecedesEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10927 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotPrecedesSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8928 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotReverseElement;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8716 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotRightTriangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8939 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotRightTriangleBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10704 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotRightTriangleEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8941 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSquareSubset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8847 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSquareSubsetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8930 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSquareSuperset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8848 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSquareSupersetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 24]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8931 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSubset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8834 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSubsetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8840 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSucceeds;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8833 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSucceedsEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10928 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSucceedsSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 23]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8929 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSucceedsTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8831 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSuperset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8835 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotSupersetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8841 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8769 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotTildeEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8772 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotTildeFullEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8775 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotTildeTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8777 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"NotVerticalBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8740 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Nscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119977 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ntilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 209 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ntilde\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 209 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Nu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 925 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OElig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 338 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Oacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 211 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Oacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 211 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ocirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 212 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ocirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 212 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ocy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1054 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Odblac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 336 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ofr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120082 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ograve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 210 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ograve\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 210 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Omacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 332 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Omega;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 937 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Omicron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 927 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Oopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120134 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OpenCurlyDoubleQuote;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8220 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OpenCurlyQuote;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Or;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10836 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Oscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119978 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Oslash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Oslash\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Otilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 213 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Otilde\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 213 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Otimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10807 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ouml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 214 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ouml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 214 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OverBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8254 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OverBrace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9182 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OverBracket;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9140 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"OverParenthesis;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9180 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"PartialD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8706 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Pcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1055 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Pfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120083 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Phi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 934 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Pi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 928 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"PlusMinus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 177 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Poincareplane;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8460 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Popf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8473 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Pr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10939 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Precedes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8826 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"PrecedesEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10927 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"PrecedesSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8828 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"PrecedesTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8830 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Prime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8243 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Product;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8719 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Proportion;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8759 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Proportional;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Pscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119979 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Psi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 936 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"QUOT;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 34 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"QUOT\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 34 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Qfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120084 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Qopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8474 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Qscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119980 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RBarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10512 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"REG;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 174 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"REG\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 174 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Racute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 340 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10219 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8608 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rarrtl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10518 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 344 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 342 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1056 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Re;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8476 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ReverseElement;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8715 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ReverseEquilibrium;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8651 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ReverseUpEquilibrium;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 22]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10607 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8476 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rho;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 929 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightAngleBracket;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8594 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightArrowBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8677 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightArrowLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8644 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightCeiling;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8969 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightDoubleBracket;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10215 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightDownTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10589 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightDownVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightDownVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10581 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightFloor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8971 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightTee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8866 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightTeeArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8614 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10587 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightTriangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8883 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightTriangleBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10704 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightTriangleEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8885 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightUpDownVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10575 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightUpTeeVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10588 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightUpVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8638 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightUpVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10580 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightVector;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8640 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RightVectorBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10579 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8658 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ropf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8477 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RoundImplies;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10608 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8667 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8475 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Rsh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8625 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"RuleDelayed;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10740 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SHCHcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1065 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SHcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1064 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SOFTcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1068 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 346 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10940 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Scaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 352 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Scedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 350 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Scirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 348 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Scy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1057 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120086 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ShortDownArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8595 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ShortLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8592 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ShortRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8594 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ShortUpArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8593 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sigma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 931 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SmallCircle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8728 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120138 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sqrt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8730 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Square;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9633 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SquareIntersection;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8851 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SquareSubset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8847 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SquareSubsetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8849 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SquareSuperset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8848 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SquareSupersetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8850 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SquareUnion;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8852 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119982 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Star;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8902 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8912 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Subset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8912 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SubsetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8838 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Succeeds;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8827 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SucceedsEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10928 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SucceedsSlantEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8829 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SucceedsTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8831 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SuchThat;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8715 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sum;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8721 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Sup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8913 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Superset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8835 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"SupersetEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8839 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Supset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8913 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"THORN;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 222 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"THORN\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 222 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TRADE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8482 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TSHcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1035 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TScy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1062 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tab;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tau;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 932 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 356 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 354 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1058 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120087 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Therefore;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8756 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Theta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 920 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ThickSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8287 as libc::c_int,
                        second: 8202 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ThinSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8201 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8764 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TildeEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8771 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TildeFullEqual;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8773 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TildeTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8776 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Topf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120139 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"TripleDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8411 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119983 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Tstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 358 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 218 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 218 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8607 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uarrocir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10569 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ubrcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1038 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ubreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 364 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ucirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 219 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ucirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 219 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ucy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1059 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Udblac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 368 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ufr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120088 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ugrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ugrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Umacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 362 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UnderBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 95 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UnderBrace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9183 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UnderBracket;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9141 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UnderParenthesis;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9181 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Union;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8899 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UnionPlus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8846 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 370 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120140 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8593 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpArrowBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10514 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpArrowDownArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8645 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpDownArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8597 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpEquilibrium;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10606 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpTee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8869 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpTeeArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8613 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uparrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8657 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Updownarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8661 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpperLeftArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8598 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"UpperRightArrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8599 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Upsi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 978 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Upsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 933 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uring;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 366 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119984 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Utilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 360 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uuml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 220 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Uuml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 220 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"VDash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8875 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10987 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1042 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vdash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8873 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vdashl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10982 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8897 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Verbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8214 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vert;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8214 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"VerticalBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8739 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"VerticalLine;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 124 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"VerticalSeparator;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10072 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"VerticalTilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8768 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"VeryThinSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8202 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120089 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120141 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119985 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Vvdash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8874 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Wcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 372 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Wedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8896 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Wfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120090 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Wopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120142 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Wscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119986 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Xfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120091 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Xi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 926 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Xopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120143 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Xscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119987 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"YAcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1071 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"YIcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1031 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"YUcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1070 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Yacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 221 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Yacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 221 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ycirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 374 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Ycy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1067 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Yfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120092 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Yopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120144 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Yscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119988 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Yuml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 376 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ZHcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1046 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 377 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 381 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1047 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 379 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ZeroWidthSpace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8203 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zeta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 918 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8488 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8484 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"Zscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119989 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 225 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 225 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"abreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 259 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8766 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8766 as libc::c_int,
                        second: 819 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8767 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 226 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 226 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 180 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 180 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"acy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1072 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aelig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aelig\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"af;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8289 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"afr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120094 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"agrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 224 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"agrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 224 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"alefsym;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8501 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aleph;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8501 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"alpha;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 945 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"amacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 257 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"amalg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10815 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"amp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 38 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"amp\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 38 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"and;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8743 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"andand;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10837 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"andd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10844 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"andslope;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10840 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"andv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10842 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8736 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ange;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10660 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8736 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8737 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdaa;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10664 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdab;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10665 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10666 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdad;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10667 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdae;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10668 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdaf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10669 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdag;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10670 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angmsdah;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10671 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angrt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8735 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angrtvb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8894 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angrtvbd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10653 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angsph;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8738 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angst;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 197 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"angzarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9084 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 261 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120146 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8776 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"apE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10864 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"apacir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10863 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ape;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8778 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"apid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8779 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"apos;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 39 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"approx;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8776 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"approxeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8778 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aring;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 229 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"aring\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 229 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ascr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119990 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ast;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 42 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"asymp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8776 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"asympeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8781 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"atilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 227 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"atilde\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 227 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"auml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 228 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"auml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 228 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"awconint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8755 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"awint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10769 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bNot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10989 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"backcong;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8780 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"backepsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1014 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"backprime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8245 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"backsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8765 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"backsimeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8909 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"barvee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8893 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"barwed;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8965 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"barwedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8965 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bbrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9141 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bbrktbrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9142 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bcong;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8780 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1073 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bdquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8222 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"becaus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8757 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"because;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8757 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bemptyv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10672 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bepsi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1014 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bernou;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8492 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"beta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 946 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"beth;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8502 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"between;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8812 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120095 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigcap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8898 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9711 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8899 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigodot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10752 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigoplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10753 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigotimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10754 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigsqcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10758 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigstar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigtriangledown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9661 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigtriangleup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9651 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"biguplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10756 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigvee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8897 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bigwedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8896 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bkarow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10509 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blacklozenge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10731 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blacksquare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blacktriangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9652 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blacktriangledown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9662 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blacktriangleleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9666 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blacktriangleright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9656 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blank;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9251 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blk12;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9618 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blk14;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9617 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"blk34;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9619 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"block;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9608 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 61 as libc::c_int,
                        second: 8421 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bnequiv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8801 as libc::c_int,
                        second: 8421 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bnot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8976 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120147 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8869 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bottom;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8869 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bowtie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8904 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxDL;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9559 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxDR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9556 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxDl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9558 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxDr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9555 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxH;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9552 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxHD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9574 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxHU;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9577 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxHd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9572 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxHu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9575 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxUL;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9565 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxUR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9562 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxUl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9564 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxUr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9561 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxV;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9553 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxVH;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9580 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxVL;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9571 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxVR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9568 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxVh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9579 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxVl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9570 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxVr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9567 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxbox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10697 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxdL;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9557 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxdR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9554 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxdl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9488 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxdr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9484 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9472 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxhD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9573 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxhU;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9576 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxhd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9516 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxhu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9524 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxminus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8863 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8862 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxtimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8864 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxuL;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9563 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxuR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9560 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxul;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9496 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxur;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9492 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9474 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxvH;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9578 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxvL;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9569 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxvR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9566 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxvh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9532 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxvl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9508 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"boxvr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9500 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bprime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8245 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"breve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 728 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"brvbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 166 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"brvbar\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 166 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119991 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bsemi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8271 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8765 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bsime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8909 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bsol;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 92 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bsolb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10693 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bsolhsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10184 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bull;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8226 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bullet;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8226 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bump;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8782 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bumpE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10926 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bumpe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8783 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"bumpeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8783 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 263 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8745 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"capand;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10820 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"capbrcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10825 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"capcap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10827 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"capcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10823 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"capdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10816 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"caps;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8745 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"caret;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8257 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"caron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 711 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccaps;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10829 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 269 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 231 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccedil\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 231 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 265 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccups;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10828 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ccupssm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10832 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 267 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 184 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cedil\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 184 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cemptyv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10674 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cent;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 162 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cent\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 162 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"centerdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 183 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120096 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"chcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1095 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"check;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10003 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"checkmark;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10003 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"chi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 967 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9675 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cirE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10691 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circ;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 710 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8791 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circlearrowleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8634 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circlearrowright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8635 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circledR;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 174 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circledS;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9416 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circledast;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8859 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circledcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8858 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"circleddash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8861 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cire;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8791 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cirfnint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10768 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cirmid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10991 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cirscir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10690 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"clubs;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9827 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"clubsuit;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9827 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"colon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 58 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"colone;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8788 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"coloneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8788 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"comma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 44 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"commat;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 64 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"comp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8705 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"compfn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8728 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"complement;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8705 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"complexes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8450 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cong;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8773 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"congdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10861 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"conint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8750 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"copf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120148 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"coprod;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8720 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"copy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 169 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"copy\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 169 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"copysr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8471 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"crarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8629 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cross;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10007 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119992 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"csub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10959 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"csube;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10961 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"csup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10960 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"csupe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10962 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ctdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8943 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cudarrl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10552 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cudarrr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10549 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cuepr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8926 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cuesc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8927 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cularr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8630 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cularrp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10557 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8746 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cupbrcap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10824 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cupcap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10822 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cupcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10826 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cupdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8845 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cupor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10821 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cups;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8746 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8631 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curarrm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10556 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curlyeqprec;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8926 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curlyeqsucc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8927 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curlyvee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8910 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curlywedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8911 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curren;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 164 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curren\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 164 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curvearrowleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8630 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"curvearrowright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8631 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cuvee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8910 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cuwed;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8911 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cwconint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8754 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cwint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8753 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"cylcty;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9005 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8659 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dHar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10597 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dagger;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8224 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"daleth;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8504 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"darr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8595 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8208 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dashv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8867 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dbkarow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10511 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dblac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 271 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1076 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8518 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ddagger;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8225 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ddarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8650 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ddotseq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10871 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"deg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 176 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"deg\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 176 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"delta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 948 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"demptyv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10673 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dfisht;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10623 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120097 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dharl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8643 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dharr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"diam;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8900 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"diamond;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8900 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"diamondsuit;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9830 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"diams;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9830 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"die;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 168 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"digamma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 989 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"disin;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8946 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"div;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 247 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"divide;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 247 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"divide\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 247 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"divideontimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8903 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"divonx;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8903 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"djcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1106 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dlcorn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8990 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dlcrop;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8973 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dollar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 36 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120149 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 729 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"doteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8784 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"doteqdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8785 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dotminus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8760 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dotplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8724 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dotsquare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8865 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"doublebarwedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8966 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"downarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8595 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"downdownarrows;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8650 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"downharpoonleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8643 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"downharpoonright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"drbkarow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10512 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"drcorn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8991 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"drcrop;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8972 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119993 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dscy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1109 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dsol;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 273 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dtdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8945 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9663 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dtrif;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9662 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"duarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8693 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"duhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10607 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dwangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10662 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dzcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1119 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"dzigrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10239 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eDDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10871 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8785 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 233 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 233 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"easter;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10862 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ecaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 283 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ecir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8790 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ecirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 234 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ecirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 234 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ecolon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8789 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ecy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1101 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"edot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 279 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8519 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"efDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8786 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"efr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120098 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10906 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"egrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 232 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"egrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 232 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"egs;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10902 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"egsdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10904 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"el;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10905 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"elinters;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9191 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ell;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8467 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"els;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10901 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"elsdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10903 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"emacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 275 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"empty;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8709 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"emptyset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8709 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"emptyv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8709 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"emsp13;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8196 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"emsp14;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8197 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"emsp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8195 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eng;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 331 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ensp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8194 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 281 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120150 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"epar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8917 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eparsl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10723 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10865 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"epsi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 949 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"epsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 949 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"epsiv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1013 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eqcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8790 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eqcolon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8789 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eqsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8770 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eqslantgtr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10902 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eqslantless;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10901 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"equals;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 61 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"equest;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8799 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"equiv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8801 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"equivDD;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10872 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eqvparsl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10725 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"erDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8787 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"erarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10609 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"escr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8495 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"esdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8784 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"esim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8770 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 951 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eth;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 240 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"eth\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 240 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"euml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 235 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"euml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 235 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"euro;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8364 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"excl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 33 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"exist;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8707 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"expectation;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8496 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"exponentiale;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8519 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fallingdotseq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8786 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1092 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"female;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9792 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ffilig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 64259 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fflig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 64256 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ffllig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 64260 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ffr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120099 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"filig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 64257 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fjlig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 102 as libc::c_int,
                        second: 106 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"flat;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9837 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fllig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 64258 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fltns;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9649 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fnof;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 402 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120151 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"forall;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8704 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fork;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8916 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"forkv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10969 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fpartint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10765 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac12\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 189 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac12;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 189 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac13;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8531 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac14\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 188 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac14;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 188 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac15;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8533 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac16;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8537 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac18;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8539 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac23;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8532 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac25;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8534 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac34\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 190 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac34;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 190 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac35;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8535 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac38;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8540 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac45;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8536 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac56;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8538 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac58;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8541 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frac78;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8542 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frasl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8260 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"frown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8994 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"fscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119995 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8807 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gEl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10892 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 501 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gamma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 947 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gammad;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 989 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10886 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gbreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 287 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 285 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1075 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 289 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8805 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8923 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"geq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8805 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"geqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8807 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"geqslant;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10878 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ges;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10878 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gescc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10921 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gesdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10880 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gesdoto;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10882 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gesdotol;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10884 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gesl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8923 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gesles;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10900 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120100 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8811 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ggg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8921 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gimel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8503 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gjcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1107 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8823 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"glE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10898 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gla;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10917 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"glj;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10916 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8809 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gnap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10890 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gnapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10890 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10888 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10888 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8809 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gnsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8935 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120152 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"grave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 96 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8458 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8819 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gsime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10894 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gsiml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10896 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 62 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gt\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 62 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtcc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10919 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10874 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8919 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtlPar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10645 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtquest;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10876 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtrapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10886 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10616 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtrdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8919 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtreqless;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8923 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtreqqless;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10892 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtrless;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8823 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gtrsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8819 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gvertneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8809 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"gvnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8809 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8660 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hairsp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8202 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"half;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 189 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hamilt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8459 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hardcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1098 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"harr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8596 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"harrcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10568 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"harrw;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8621 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8463 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 293 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hearts;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9829 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"heartsuit;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9829 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hellip;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hercon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8889 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120101 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hksearow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10533 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hkswarow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10534 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hoarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8703 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"homtht;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8763 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hookleftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8617 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hookrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8618 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120153 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"horbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8213 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119997 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hslash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8463 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 295 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hybull;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8259 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"hyphen;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8208 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 237 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 237 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ic;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8291 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"icirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 238 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"icirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 238 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"icy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1080 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iecy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1077 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iexcl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 161 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iexcl\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 161 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iff;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8660 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ifr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120102 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"igrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 236 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"igrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 236 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ii;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8520 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iiiint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10764 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iiint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8749 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iinfin;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10716 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iiota;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8489 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ijlig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 307 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"imacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 299 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"image;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8465 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"imagline;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8464 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"imagpart;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8465 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"imath;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 305 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"imof;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8887 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"imped;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 437 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"in;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8712 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"incare;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8453 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"infin;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8734 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"infintie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10717 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"inodot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 305 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"int;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8747 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"intcal;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8890 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"integers;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8484 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"intercal;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8890 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"intlarhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10775 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"intprod;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10812 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iocy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1105 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 303 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120154 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iota;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 953 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iprod;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10812 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iquest;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 191 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iquest\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 191 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119998 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"isin;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8712 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"isinE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8953 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"isindot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8949 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"isins;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8948 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"isinsv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8947 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"isinv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8712 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"it;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8290 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"itilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 297 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iukcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1110 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iuml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 239 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"iuml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 239 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 309 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1081 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120103 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jmath;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 567 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120155 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 119999 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jsercy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1112 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"jukcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1108 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kappa;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 954 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kappav;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1008 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 311 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1082 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120104 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kgreen;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 312 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"khcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1093 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kjcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1116 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120156 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"kscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120000 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lAarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8666 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8656 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lAtail;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10523 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lBarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10510 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8806 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lEg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10891 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lHar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10594 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 314 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"laemptyv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10676 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lagran;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8466 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lambda;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 955 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"langd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10641 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"langle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10885 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"laquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 171 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"laquo\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 171 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8592 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8676 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrbfs;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10527 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrfs;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10525 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8617 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrlp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8619 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrpl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10553 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10611 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"larrtl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8610 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lat;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10923 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"latail;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10521 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"late;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10925 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lates;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10925 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10508 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbbrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10098 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbrace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 123 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbrack;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 91 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbrke;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10635 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbrksld;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10639 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lbrkslu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10637 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 318 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 316 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lceil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8968 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lcub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 123 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1083 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ldca;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10550 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ldquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8220 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ldquor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8222 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ldrdhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10599 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ldrushar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10571 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ldsh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8626 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"le;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8804 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8592 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftarrowtail;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8610 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftharpoondown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8637 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftharpoonup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8636 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftleftarrows;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8647 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8596 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftrightarrows;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8646 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftrightharpoons;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8651 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftrightsquigarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 21]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8621 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leftthreetimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8907 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8922 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8804 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8806 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"leqslant;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10877 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"les;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10877 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lescc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10920 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10879 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesdoto;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10881 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesdotor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10883 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8922 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesges;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10899 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lessapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10885 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lessdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8918 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesseqgtr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8922 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesseqqgtr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10891 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lessgtr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8822 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lesssim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8818 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lfisht;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10620 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lfloor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8970 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120105 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8822 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lgE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10897 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lhard;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8637 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lharu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8636 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lharul;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10602 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lhblk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9604 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ljcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1113 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ll;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8810 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"llarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8647 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"llcorner;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8990 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"llhard;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10603 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lltri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9722 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lmidot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 320 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lmoust;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9136 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lmoustache;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9136 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8808 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lnap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10889 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lnapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10889 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10887 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10887 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8808 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lnsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8934 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"loang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10220 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"loarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8701 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lobrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10214 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"longleftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10229 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"longleftrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 20]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10231 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"longmapsto;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10236 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"longrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"looparrowleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8619 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"looparrowright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8620 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lopar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10629 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120157 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"loplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10797 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lotimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10804 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lowast;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8727 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lowbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 95 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"loz;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9674 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lozenge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9674 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lozf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10731 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lpar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 40 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lparlt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10643 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8646 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lrcorner;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8991 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lrhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8651 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lrhard;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10605 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lrm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8206 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lrtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8895 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsaquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8249 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120001 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8624 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8818 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10893 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsimg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10895 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsqb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 91 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8216 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lsquor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8218 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 322 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 60 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lt\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 60 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltcc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10918 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10873 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8918 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lthree;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8907 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8905 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltlarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10614 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltquest;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10875 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltrPar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10646 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9667 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltrie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8884 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ltrif;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9666 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lurdshar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10570 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"luruhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10598 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lvertneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8808 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"lvnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8808 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mDDot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8762 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"macr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 175 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"macr\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 175 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"male;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9794 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"malt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10016 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"maltese;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10016 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"map;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8614 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mapsto;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8614 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mapstodown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8615 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mapstoleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8612 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mapstoup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8613 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"marker;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9646 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mcomma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10793 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1084 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mdash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8212 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"measuredangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8737 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120106 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mho;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8487 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"micro;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 181 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"micro\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 181 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8739 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"midast;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 42 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"midcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10992 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"middot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 183 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"middot\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 183 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"minus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8722 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"minusb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8863 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"minusd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8760 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"minusdu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10794 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mlcp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10971 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mldr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mnplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8723 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"models;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8871 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120158 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8723 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120002 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mstpos;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8766 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 956 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"multimap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8888 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"mumap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8888 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nGg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8921 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nGt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8811 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nGtv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8811 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nLeftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8653 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nLeftrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8654 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nLl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8920 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nLt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8810 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nLtv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8810 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nRightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8655 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nVDash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8879 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nVdash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8878 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nabla;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8711 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 324 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8736 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8777 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"napE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10864 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"napid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8779 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"napos;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 329 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"napprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8777 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"natur;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9838 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"natural;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9838 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"naturals;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8469 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nbsp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 160 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nbsp\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 160 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nbump;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8782 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nbumpe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8783 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10819 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 328 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 326 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncong;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8775 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncongdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10861 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10818 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ncy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1085 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ndash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8211 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8800 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"neArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8663 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nearhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10532 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nearr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8599 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nearrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8599 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nedot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8784 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nequiv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8802 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nesear;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10536 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nesim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8770 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nexist;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8708 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nexists;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8708 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120107 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8807 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8817 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8817 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngeqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8807 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngeqslant;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10878 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nges;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10878 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8821 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8815 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ngtr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8815 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nhArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8654 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nharr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8622 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nhpar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10994 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ni;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8715 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nis;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8956 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nisd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8954 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"niv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8715 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"njcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1114 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nlArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8653 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nlE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8806 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nlarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8602 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nldr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8229 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8816 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nleftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8602 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nleftrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8622 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nleq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8816 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nleqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8806 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nleqslant;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10877 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nles;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10877 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nless;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8814 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nlsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8820 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nlt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8814 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nltri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8938 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nltrie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8940 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nmid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8740 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120159 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"not;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 172 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notin;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8713 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notinE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8953 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notindot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8949 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notinva;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8713 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notinvb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8951 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notinvc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8950 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notni;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8716 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notniva;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8716 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notnivb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8958 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"notnivc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8957 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"not\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 172 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"npar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nparallel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nparsl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 11005 as libc::c_int,
                        second: 8421 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"npart;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8706 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"npolint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10772 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"npr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8832 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nprcue;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8928 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"npre;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10927 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nprec;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8832 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"npreceq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10927 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8655 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8603 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrarrc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10547 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrarrw;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8605 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8603 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8939 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nrtrie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8941 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8833 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsccue;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8929 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsce;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10928 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120003 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nshortmid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8740 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nshortparallel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8769 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8772 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsimeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8772 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsmid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8740 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nspar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsqsube;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8930 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsqsupe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8931 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8836 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsubE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10949 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsube;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8840 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsubset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8834 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsubseteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8840 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsubseteqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10949 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsucc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8833 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsucceq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10928 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8837 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsupE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10950 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsupe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8841 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsupset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8835 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsupseteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8841 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nsupseteqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10950 as libc::c_int,
                        second: 824 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntgl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8825 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 241 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntilde\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 241 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntlg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8824 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntriangleleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8938 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntrianglelefteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8940 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntriangleright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8939 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ntrianglerighteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8941 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 957 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"num;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 35 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"numero;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8470 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"numsp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8199 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvDash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8877 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvHarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10500 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8781 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvdash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8876 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8805 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvgt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 62 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvinfin;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10718 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvlArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10498 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8804 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvlt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 60 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvltrie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8884 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvrArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10499 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvrtrie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8885 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nvsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8764 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nwArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8662 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nwarhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10531 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nwarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8598 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nwarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8598 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"nwnear;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10535 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oS;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9416 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 243 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 243 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oast;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8859 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ocir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8858 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ocirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 244 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ocirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 244 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ocy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1086 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"odash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8861 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"odblac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 337 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"odiv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10808 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"odot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8857 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"odsold;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10684 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oelig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 339 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ofcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10687 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ofr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120108 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 731 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ograve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 242 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ograve\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 242 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ogt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10689 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ohbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10677 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ohm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 937 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8750 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"olarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8634 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"olcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10686 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"olcross;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10683 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oline;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8254 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"olt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10688 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"omacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 333 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"omega;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 969 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"omicron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 959 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"omid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10678 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ominus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8854 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120160 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"opar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10679 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"operp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10681 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8853 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"or;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8744 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"orarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8635 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ord;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10845 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"order;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8500 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"orderof;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8500 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ordf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 170 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ordf\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 170 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ordm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 186 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ordm\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 186 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"origof;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8886 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oror;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10838 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"orslope;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10839 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"orv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10843 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8500 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oslash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 248 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"oslash\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 248 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"osol;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8856 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"otilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 245 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"otilde\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 245 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"otimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8855 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"otimesas;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10806 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ouml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 246 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ouml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 246 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ovbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9021 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"par;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8741 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"para;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 182 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"para\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 182 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"parallel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8741 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"parsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10995 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"parsl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 11005 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"part;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8706 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1087 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"percnt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 37 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"period;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 46 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"permil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8240 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"perp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8869 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pertenk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8241 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120109 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"phi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 966 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"phiv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 981 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"phmmat;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8499 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"phone;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9742 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 960 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pitchfork;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8916 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"piv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 982 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"planck;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8463 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"planckh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8462 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plankv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8463 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 43 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plusacir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10787 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plusb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8862 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pluscir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10786 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plusdo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8724 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plusdu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10789 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pluse;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10866 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plusmn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 177 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plusmn\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 177 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plussim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10790 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"plustwo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10791 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 177 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pointint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10773 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"popf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120161 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pound;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 163 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pound\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 163 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8826 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10931 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10935 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prcue;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8828 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pre;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10927 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prec;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8826 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"precapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10935 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"preccurlyeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8828 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"preceq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10927 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"precnapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10937 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"precneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10933 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"precnsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8936 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"precsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8830 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8242 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"primes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8473 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10933 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prnap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10937 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prnsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8936 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prod;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8719 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"profalar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9006 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"profline;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8978 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"profsurf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8979 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prop;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"propto;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8830 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"prurel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8880 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"pscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120005 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"psi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 968 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"puncsp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8200 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"qfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120110 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"qint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10764 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"qopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120162 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"qprime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8279 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"qscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120006 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"quaternions;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8461 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"quatint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10774 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"quest;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 63 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"questeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8799 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"quot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 34 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"quot\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 34 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rAarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8667 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8658 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rAtail;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10524 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rBarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10511 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rHar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10596 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"race;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8765 as libc::c_int,
                        second: 817 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"racute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 341 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"radic;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8730 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"raemptyv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10675 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rangd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"range;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10661 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"raquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 187 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"raquo\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 187 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8594 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10613 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8677 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrbfs;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10528 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10547 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrfs;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10526 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8618 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrlp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8620 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrpl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10565 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10612 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrtl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8611 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rarrw;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8605 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ratail;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10522 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ratio;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8758 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rationals;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8474 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10509 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbbrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10099 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbrace;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 125 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbrack;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 93 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbrke;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10636 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbrksld;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10638 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rbrkslu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10640 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 345 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 343 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rceil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8969 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rcub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 125 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1088 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rdca;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10551 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rdldhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10601 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rdquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8221 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rdquor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8221 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rdsh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8627 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"real;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8476 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"realine;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8475 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"realpart;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8476 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"reals;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8477 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rect;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9645 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"reg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 174 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"reg\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 174 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rfisht;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10621 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rfloor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8971 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120111 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rhard;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8641 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rharu;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8640 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rharul;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10604 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rho;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 961 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rhov;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1009 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8594 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightarrowtail;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8611 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightharpoondown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8641 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightharpoonup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8640 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightleftarrows;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8644 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightleftharpoons;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8652 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightrightarrows;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8649 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightsquigarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8605 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rightthreetimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8908 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ring;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 730 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"risingdotseq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8787 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rlarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8644 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rlhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8652 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rlm;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8207 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rmoust;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9137 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rmoustache;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9137 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rnmid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10990 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"roang;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10221 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"roarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8702 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"robrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10215 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ropar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10630 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ropf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120163 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"roplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10798 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rotimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10805 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rpar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 41 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rpargt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10644 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rppolint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10770 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8649 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rsaquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8250 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120007 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rsh;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8625 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rsqb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 93 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rsquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rsquor;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8217 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rthree;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8908 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rtimes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8906 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9657 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rtrie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8885 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rtrif;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9656 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rtriltri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10702 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ruluhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10600 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"rx;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8478 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 347 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sbquo;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8218 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8827 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10932 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10936 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 353 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sccue;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8829 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sce;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10928 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 351 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 349 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10934 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scnap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10938 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scnsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8937 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scpolint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10771 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8831 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"scy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1089 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8901 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sdotb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8865 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sdote;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10854 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"seArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8664 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"searhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10533 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"searr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8600 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"searrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8600 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sect;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 167 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sect\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 167 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"semi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 59 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"seswar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10537 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"setminus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8726 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"setmn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8726 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sext;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10038 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120112 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sfrown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8994 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sharp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9839 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"shchcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1097 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"shcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1096 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"shortmid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8739 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"shortparallel;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8741 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"shy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 173 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"shy\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 173 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sigma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 963 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sigmaf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 962 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sigmav;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 962 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8764 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10858 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8771 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8771 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simg;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10910 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simgE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10912 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"siml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10909 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simlE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10911 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8774 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10788 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"simrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10610 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"slarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8592 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smallsetminus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8726 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smashp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10803 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smeparsl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10724 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smid;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8739 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smile;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8995 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10922 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smte;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10924 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"smtes;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10924 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"softcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1100 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sol;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 47 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"solb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10692 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"solbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9023 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120164 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"spades;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9824 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"spadesuit;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9824 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"spar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8741 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqcap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8851 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqcaps;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8851 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8852 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqcups;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8852 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8847 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsube;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8849 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsubset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8847 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsubseteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8849 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8848 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsupe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8850 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsupset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8848 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sqsupseteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8850 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"squ;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9633 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"square;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9633 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"squarf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"squf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9642 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"srarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8594 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120008 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ssetmn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8726 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ssmile;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8995 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sstarf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8902 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"star;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9734 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"starf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"straightepsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1013 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"straightphi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 981 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"strns;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 175 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8834 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10949 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10941 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sube;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8838 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subedot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10947 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"submult;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10945 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10955 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8842 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10943 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10617 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8834 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subseteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8838 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subseteqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10949 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subsetneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8842 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subsetneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10955 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10951 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10965 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"subsup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10963 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succ;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8827 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10936 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succcurlyeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8829 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10928 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succnapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10938 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10934 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succnsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8937 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"succsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8831 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sum;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8721 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sung;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9834 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup1;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 185 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup1\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 185 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup2;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 178 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup2\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 178 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup3;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 179 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup3\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 179 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"sup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8835 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10950 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10942 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supdsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10968 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supe;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8839 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supedot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10948 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"suphsol;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10185 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"suphsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10967 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"suplarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10619 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supmult;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10946 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10956 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8843 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10944 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supset;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8835 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supseteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8839 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supseteqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10950 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supsetneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8843 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supsetneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10956 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supsim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10952 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10964 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"supsup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10966 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"swArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8665 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"swarhk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10534 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"swarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8601 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"swarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8601 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"swnwar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10538 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"szlig;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 223 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"szlig\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 223 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"target;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8982 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tau;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 964 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tbrk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9140 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 357 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tcedil;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 355 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1090 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8411 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"telrec;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8981 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120113 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"there4;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8756 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"therefore;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8756 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"theta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 952 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thetasym;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 977 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thetav;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 977 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thickapprox;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8776 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thicksim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8764 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thinsp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8201 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thkap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8776 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thksim;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8764 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thorn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 254 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"thorn\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 254 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 732 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"times;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 215 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"times\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 215 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"timesb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8864 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"timesbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10801 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"timesd;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10800 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tint;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8749 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"toea;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10536 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"top;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8868 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"topbot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9014 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"topcir;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10993 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"topf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120165 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"topfork;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10970 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tosa;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10537 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tprime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8244 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"trade;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8482 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9653 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triangledown;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9663 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triangleleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9667 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"trianglelefteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8884 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triangleq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8796 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triangleright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9657 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"trianglerighteq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8885 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tridot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9708 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"trie;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8796 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triminus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10810 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"triplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10809 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"trisb;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10701 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tritime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10811 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"trpezium;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9186 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120009 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tscy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1094 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tshcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1115 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"tstrok;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 359 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"twixt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8812 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"twoheadleftarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8606 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"twoheadrightarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 19]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8608 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8657 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uHar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10595 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 250 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 250 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8593 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ubrcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1118 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ubreve;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 365 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ucirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 251 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ucirc\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 251 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ucy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1091 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"udarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8645 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"udblac;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 369 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"udhar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10606 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ufisht;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10622 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ufr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120114 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ugrave;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 249 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ugrave\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 249 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uharl;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8639 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uharr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8638 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uhblk;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9600 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ulcorn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8988 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ulcorner;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8988 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ulcrop;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8975 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ultri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9720 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"umacr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 363 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 168 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 168 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uogon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 371 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120166 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uparrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8593 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"updownarrow;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 13]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8597 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"upharpoonleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8639 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"upharpoonright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 16]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8638 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8846 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"upsi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 965 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"upsih;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 978 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"upsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 965 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"upuparrows;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8648 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"urcorn;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8989 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"urcorner;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8989 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"urcrop;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8974 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uring;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 367 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"urtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9721 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120010 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"utdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8944 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"utilde;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 361 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"utri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9653 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"utrif;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9652 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uuarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8648 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uuml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 252 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uuml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 252 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"uwangle;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10663 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8661 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vBar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10984 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vBarv;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10985 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vDash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8872 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vangrt;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10652 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varepsilon;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1013 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varkappa;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1008 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varnothing;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8709 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varphi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 981 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varpi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 982 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varpropto;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 11]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8597 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varrho;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1009 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varsigma;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 962 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varsubsetneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8842 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varsubsetneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10955 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varsupsetneq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 14]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8843 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"varsupsetneqq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 15]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10956 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vartheta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 10]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 977 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vartriangleleft;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 17]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8882 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vartriangleright;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 18]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8883 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1074 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vdash;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8866 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8744 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"veebar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8891 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"veeeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8794 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vellip;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8942 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"verbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 124 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vert;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 124 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120115 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vltri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8882 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vnsub;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8834 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vnsup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8835 as libc::c_int,
                        second: 8402 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120167 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vprop;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8733 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vrtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8883 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120011 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vsubnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10955 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vsubne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8842 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vsupnE;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10956 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vsupne;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8843 as libc::c_int,
                        second: 65024 as libc::c_int,
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"vzigzag;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10650 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 373 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wedbar;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10847 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8743 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wedgeq;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8793 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"weierp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8472 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120116 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120168 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wp;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8472 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8768 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wreath;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8768 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"wscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120012 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xcap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8898 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xcirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9711 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8899 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xdtri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9661 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120117 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xhArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10234 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xharr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10231 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xi;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 958 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xlArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10232 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xlarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10229 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xmap;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10236 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xnis;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8955 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xodot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10752 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120169 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xoplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10753 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xotime;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10754 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xrArr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10233 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10230 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120013 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xsqcup;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10758 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xuplus;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 10756 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xutri;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 9651 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xvee;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8897 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"xwedge;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8896 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 253 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yacute\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 253 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yacy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1103 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ycirc;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 7]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 375 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"ycy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1099 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yen;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 165 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yen\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 165 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120118 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yicy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1111 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120170 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120014 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yucy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1102 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yuml;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 255 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"yuml\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 255 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zacute;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 378 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zcaron;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 382 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1079 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zdot;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 380 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zeetrf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 8]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8488 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zeta;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 950 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zfr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120119 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zhcy;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 1078 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zigrarr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 9]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8669 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zopf;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120171 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zscr;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 120015 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zwj;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8205 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"zwnj;\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: 8204 as libc::c_int,
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
        {
            let mut init = __anonstruct_NamedCharRef_549011883 {
                name: b"\0" as *const u8 as *const libc::c_char,
                length: (::std::mem::size_of::<[libc::c_char; 1]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_ulong),
                codepoints: {
                    let mut init = __anonstruct_OneOrTwoCodepoints_773697287 {
                        first: -(1 as libc::c_int),
                        second: -(1 as libc::c_int),
                    };
                    init
                },
            };
            init
        },
    ];
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
